#Some Queries are commented out, but every query has been tested.

#SELECT version(), current_date; /* We can access basic functions and date formattings/underlying data with function calls and attribute designations */
/* Casing in terms of the function name etc, is irrelevant. */

/*we can, also - if we wish - use MySQL as a calculator for basic arithmetic operations */


#SELECT SIN(pi()/5), 5*2;

/* A couple of notes on this matter:

** is not allowed as an operator.

Each result of a query is parsed in a seperate windowing. */


/*
SELECT version(); SELECT 5*2;
*/


/* Just showcasing that we can perform several operations on the same line. 

Do denote, that each ; section, is denoted as a individual query each. */

/*
SELECT
USER(),

CURRENT_DATE;

*/

/* The above showcases that we can perform several line long queries, where the termination point of the query
or the "endpoint" of it - is the ; notation. */

/* In terms of if we were to run this by CMD line, we could incorporate a number of other factorials if we so wish:

akin to /c to stop execution or to perform cancellation.

As for the prompt in terms of CMD structure, it would be:

mysql> - is ready for a new query

-> Waiting for the next line of a multiple-line query

'> Waiting for the next line, waiting for completion in terms of string that begins with a '

"> Same as above, except string that begins with a "

`> Same as above, except identifier with backtick as beginning structure

/*> Same as above, except completion of comment section awaited

*/

SHOW DATABASES;

/* Covering some basics of Syntax interactions

Do note - that if you do not yield the privleges or rights to view a database, it is not shown by this command. */

USE world; 

/* Use, akin to Quit - does not need a semicolon, as it's a special designation command. 
It must be used on one line. */

GRANT ALL ON world TO 'root'@'localhost';

/* Whilst granting full rights to the base Root user is not a wise move, this is done here to just illustrate the process */

#CREATE DATABASE illustration; 

/* Keep in mind that DB names are case sensitive. */

/* Where of we can create tables as well, if we so wish */

USE illustration;

SET sql_notes = 0;  
/* The above turns off storing and messaging in terms of warning messages 

Meaning, if you run SHOW WARNINGS; - it won't have anything to show, even if any triggered, as it won't
register them or catalog them. */

/*In case of changing attributes, we can utilize ALTER_TABLE statements. */
CREATE TABLE IF NOT EXISTS example (name VARCHAR(20), x_attribute INTEGER(10), y_attribute INTEGER(10));


/* In terms of the Create if not exists attribute, it mainly applies to checking for table existence. */

#SET sql_notes = 1;

/*If we wish, ,we can denote to find out what the attributes of a Table is, with Describe. */

DESCRIBE example;

/* Little bit of a note about the Local notation in the following:

LOAD DATA LOCAL INFILE 'D:/loadintodb.txt' INTO TABLE example;

It's a sensetive wording that is based on the installation and setup of the MySQL. This can either
come down to overriding with enabling construction in the underlying installation or overriding akin to
adhering of that MySQL have the full path installed - lest it will resolve to internal handles.

This can also be changed in Config files, akin to setting local-infile=1 in the .cnf file

We can also utilize things akin to exec()

*/

/* In terms of file security, we have the setup of certain privacy adherences to different file formats.

As of such, we can adhere to this, by running the showing of secure_file_priv - to then write to that file or upload,
as it's adhered to being safe. */

SHOW VARIABLES LIKE "secure_file_priv";

#LOAD DATA INFILE 'D:/loadintodb.txt' INTO TABLE example; NOT ALLOWED BECAUSE OF SAFETY PRIVS OF FOLDERINGS
#Have to save to C:\ProgramData\MySQL\MySQL Server 8.0\Uploads\ \n

/* There is a number of different levels of interactions that are relevant to talk about in terms of Loading Local Data.

This can vary from permissions on Server side to Client siding and compilation settings.

To verifications in terms of SSL and dynamics akin to omitting Local to circumvent permissions needed of File
access, where of Local will be utilize loading up speed.

The major problem here - and sake of omittal in terms of this specific instance, is mostly file configuration
constraint. 

Need be, i will change this for upcoming repeated cases. */


#LOAD LOCAL DATA INFILE 'C:\ProgramData\MySQL\MySQL Server 8.0\Uploads\loadintodb' INTO TABLE example;

/* We can of course, commit to having insertions of tables as well. */

DELETE FROM example; #Just clear out the Table

INSERT IGNORE INTO example VALUES ('Example_1', 10, 15);
#Etc. Also, a small difference between Insert and Load Data, is that Load Data represents NULL with /N
#Whilst, if we wish to have NULL in terms of Insert, we can simply state it as NULL.

#The general pattern of Selecting is:
# SELECT <attribute_to_select> 
# FROM <table>
# WHERE <conditions>

#SELECT * FROM example;

#Where of we can of course, specify this and performs updates etc.

UPDATE example SET x_attribute = 30 WHERE name = 'Example_1';
#We can of course, modify more and update the conditions, involve operators etc.
#We will cover that later.

#SELECT * FROM example;

INSERT IGNORE INTO example VALUES ('Example_2', 55, NULL);
INSERT IGNORE INTO example VALUES ('Example_Two', 3, NULL);
INSERT IGNORE INTO example VALUES ('Testiiiiiiiing', 3, NULL);
INSERT IGNORE INTO example VALUES ('aaaaaaaaa', 3, NULL);

INSERT IGNORE INTO example VALUES ('Some_Tricky', NULL, 1003);
INSERT IGNORE INTO example VALUES ('Some_Thing', NULL, 55);
INSERT IGNORE INTO example VALUES ('Some_Trick', NULL, 10000);
INSERT IGNORE INTO example VALUES ('Some_Trick', NULL, 10000);
INSERT IGNORE INTO example VALUES ('Some_Trick', NULL, 10000);
INSERT IGNORE INTO example VALUES ('Some_Trick', NULL, 10000); 
INSERT IGNORE INTO example VALUES ('Some_Trick', NULL, 10000);


SELECT * FROM example WHERE name LIKE '%xam%';

#We can basically utilize different forms of Regex or pattern recognition applications akin to % denotations to showcase, anything that fits
#along the designation of xam goes into the string.

#And of course, we can commit structured queries and prepared statements - however, we will cover that later.

#We can also select based on numerical samplings or comparisons

#SELECT * FROM example WHERE (y_attribute IS NOT NULL) AND (name LIKE 'Some_T%i__'); #Showcasing wildcard char and regex of 2 chars pattern length
/* The above interplays so that % is wildchar, __ is specific length of pattern, as in, pattern of length 2 */

#We can also utilize regex to locate for beginning and end, with ^ and $, where each is beginning/end respectively
#SELECT * FROM example WHERE REGEXP_LIKE(name, '^E');

SELECT * FROM example WHERE REGEXP_LIKE(name, 'k$'); #Ends with k

SELECT * FROM example WHERE REGEXP_LIKE(name, '^.{3,9}$'); #Checks a range of length of the name attribute from beginning to end, length interval of 3 to 9

SELECT DISTINCT name FROM example WHERE REGEXP_LIKE(name, '^.{3,9}$');

#We could keep compounding different operations to check for values, patterns etc.

SELECT DISTINCT name, x_attribute FROM example WHERE x_attribute < 100 ORDER BY x_attribute ASC, name ASC;

#The ordering in terms of Descending and Ascending is a matter of a compounded stature where we can just throw on more and more
#orders of operations in terms of integrations of Structure and differentiate how they should be partitioned.

#If we were interested, we could ordane TIMESTAMPDIFF to integrate accessing of Date denotations akin to CURDATE()

#For instance, in the documentation it is showcased as:
SELECT name, birth, CURDATE(), TIMESTAMPDIFF(YEAR, birth, CURDATE()) AS age FROM pet;
#
# Where the mosti mportant part is just to denote the CURDATE() function and the TIMESTAMPDIFF() which interacts with date stamps
#Computing a differential

CREATE TABLE IF NOT EXISTS datestuff (name VARCHAR(20), age INTEGER(20), first_date DATE, second_date DATE);

#DELETE FROM datestuff;
DELETE FROM datestuff;

INSERT IGNORE INTO datestuff VALUES ('Base_1', 100, '2018-10-10', CURDATE()); #Insert some basic date operations
INSERT IGNORE INTO datestuff VALUES ('Base_2', 15, '2018-09-11', CURDATE()); 
INSERT IGNORE INTO datestuff VALUES ('Base_3', NULL, '2018-05-11', CURDATE());
INSERT IGNORE INTO datestuff VALUES ('Base_4', 5, '2011-01-11', CURDATE());
INSERT IGNORE INTO datestuff VALUES ('Base_5', 100, NULL, CURDATE());  

SELECT name AS variable_name, age AS x_variable, TIMESTAMPDIFF(MONTH, first_date, second_date) AS months_differing FROM datestuff 
WHERE TIMESTAMPDIFF(MONTH, first_date, second_date) IS NOT NULL ORDER BY name; 
#As shown above, we can compute more and more "compounded" statements based on the Query Structure.
#
#The hiearchial principle of subcomposition in the query is based on the complexity of the Query, as we can chain the commands.
#However, we'll get into that later.

#We can subaccess the different dates by virtue of Month, Year, day, and intervals etc.

#In terms of Truth values - we run with binary denotation of truth/false values
SELECT first_date IS NOT NULL FROM datestuff; #0 denotes a False outcome, 1 is a True outcome

#As far as Operations of Regex goes, we can utilize Grep, vi and sed of which are extensions

SELECT name, COUNT(*) FROM datestuff GROUP BY age; #Now, if we had different structures and different parts of which we wish to
#integrate - we can do so - by better sub partitioning in the pattern of different structure pieces.
#To which we can perform count across a specific axis etc.

#In case you attempt to ordane selects past the point of Counts, we have to consider the
# ONLY_FULL_GROUP_BY attribute. Of which defines if only full groupings are to be accounted for.

#If the ONLY_FULL_GROUP_BY is not activated, the query is as if all the rows are a single group.
#But the nature of the naming of each column is nondeterministic.

CREATE TABLE IF NOT EXISTS secondtable (name VARCHAR(20), age INTEGER(20), misc VARCHAR(20) , third_date DATE);

DELETE FROM secondtable;


INSERT IGNORE INTO secondtable VALUES ('SecondBase_1', 100, 'Example_1', CURDATE());
INSERT IGNORE INTO secondtable VALUES ('SecondBase_2', 100, 'Example_2', CURDATE());
INSERT IGNORE INTO secondtable VALUES ('SecondBase_3', 100, 'Example_3', CURDATE());
INSERT IGNORE INTO secondtable VALUES ('SecondBase_4', 100, 'Example_4', CURDATE());
INSERT IGNORE INTO secondtable VALUES ('SecondBase_5', 100, 'Example_5', CURDATE());




#We can access the hierarchy in terms of the databases with the class names and the sub attribute namings etc.

SELECT illustration.datestuff.name as datestuff_name, illustration.secondtable.name as second_table_name,
illustration.secondtable.age as cross_over_age
FROM illustration.datestuff, illustration.secondtable WHERE illustration.datestuff.age = illustration.secondtable.age;

# The above causes the inherent pattern of querying across:
# Cycle from every element on base table -> Cycle through across every element of target Table
# TABLE[0][0-Length of sub-table denoted by element chosen] -> TABLE[1][0-length of sub-table denoted by element chosen]
#
# So, in our case - since both tables are 5 elements, this is 25 operations, as it cycles through 5x5 operations
# 2 of them co-align, so that means we have 5x2 results, 10 results
#

#We could omit the structure referal of doing explicit calls to explicit paths - however, that would fall back to local handle
#designation parameter interpretation - i.e, ambiguity is introduced into the Schematic.

#If we need to, we can run MySQL In batch mode as well, which allows us to integrate so that we are not running in a interactive mode.
#This is needed if we are to run for instance Cron Jobs.

#Run from CMD:
#
# mysql < batch-file , case of special chars being issues - run with -e
#
# The CMD line can also look like:
#
# mysql -h host -u user -p < batch-file
# enter password: --------

#We can also then pipe the output to either page more or have a further outputting file
#
# mysql < batch-file | more
#
# mysql < batch-file > mysql out

#We can also trigger MySQL scripts from CMD prompt of MySQL:
#
# mysql> source filename
# mysql> \ filename

#Showcasing some basic structural composition of base integrations

CREATE TABLE IF NOT EXISTS Shoes (
	Size INT(4) UNSIGNED ZEROFILL DEFAULT '0000' NOT NULL, #The base it goes for is 0000, numeral designated will simply inject unto the beginning
	owner  CHAR(20) 					   DEFAULT '' 		NOT NULL, #The base string appended to, is ''
	price   DOUBLE(16,2) 				DEFAULT '0.00' NOT NULL, #The default in terms of Pricing is just a 0.00
	PRIMARY KEY(Size, owner));                            #The primary keys bound to the table

CREATE TABLE IF NOT EXISTS People (
	Age INT(4) UNSIGNED ZEROFILL DEFAULT '00' NOT NULL,
	Name CHAR(20) 					  DEFAULT '' NOT NULL,
	Last_Name CHAR(20) 			  DEFAULT '' NOT NULL,
	PRIMARY KEY(Name, Last_Name));

INSERT IGNORE INTO People VALUES
	(30, 'Adrian', 'Markovich'), (50, 'Bonny', 'Taylor'), (60, 'Camille', 'Johnsonn'), (10, 'Zoe', 'Quinn'),
	(15, 'Alexander', 'The Great'), (49, 'Alice', 'Cooper'), (100, 'Daniel', 'Markov'), (18, 'Alexander', 'The Great'),
	(150, 'Daniel', 'Markov'); #Since Name and Last_Name are primary keys, they are implicitly Unique. I.e, duplications are ignored.


INSERT IGNORE INTO Shoes VALUES
	(34, 'Adrian', 3.45), (33, 'Bonny', 5.99), (32, 'Camille', 12.55), (35, 'Quinn', 1.10),
	(41, 'Alexander', 10.00), (44, 'Alice', 12.33), (43, 'Daniel', 23.31);
	
SELECT MAX(Size) AS Largest_Shoe_Size FROM Shoes;

#We can, if we so wish - denote to structure sub-queries of selectional structure.

SELECT illustration.Shoes.Size AS size, illustration.Shoes.Price AS price, illustration.Shoes.owner AS owner_name FROM illustration.people, illustration.Shoes 
WHERE illustration.people.name = illustration.Shoes.owner ORDER BY price LIMIT 2; #We can impose limits as well 

SELECT owner AS owner_name, size AS largest_size FROM Shoes ORDER BY size DESC LIMIT 1; #Find the person with the biggest shoe size

#there is ways to circumvent the denotation of selecting the whole set and simply do a more specific Query in terms of Sorting and Grouping
#Albeit, that is a more advanced partition.


SELECT name, last_name, Age, size FROM People, Shoes WHERE name = illustration.Shoes.owner AND age % 5 = 0;
#We can also involve operators in our selection of AND statements.

#If we wish, we can implement further denotations in terms of assigned variables

#Runs assignment from selected variables
SELECT @min_size:=MIN(size), @max_size:=MAX(size) FROM Shoes;

SELECT * FROM Shoes WHERE size=@min_size OR size=@max_size; #Get all the columns that trigger on having the size of assigned variables, in a or fashion

#In terms of creations of Tables - if we denote a References clause - that's a ignored section which only acts a indirecty way of comment or reminder.

#If we were to search based on optimized standardization of Query parsing - We can use an OR, bound to a single key
#Another way, is to do a Union between two Queries of Selects

SELECT size FROM Shoes WHERE size > 10
UNION
SELECT owner FROM Shoes WHERE owner LIKE '%onn%';
#Kind of a poor example, but combines the two queries of performing where Size and owner is checked up on.

CREATE TABLE IF NOT EXISTS purchased_ice_cream (name CHAR(20), price INT(4) UNSIGNED ZEROFILL, date_of_purchase DATE);

#Omit ignore into, to allow for duplications
INSERT INTO purchased_ice_cream VALUES("Vanilla", 10, "2018-08-01");
INSERT INTO purchased_ice_cream VALUES("Chocolate", 15, "2018-08-02");
INSERT INTO purchased_ice_cream VALUES("Strawberry", 20, "2017-07-03");
INSERT INTO purchased_ice_cream VALUES("Chocolate", 15, "2018-08-04");
INSERT INTO purchased_ice_cream VALUES("Chocolate", 15, "2018-08-05");
INSERT INTO purchased_ice_cream VALUES("Chocolate", 15, "2018-08-06");	
							
INSERT INTO purchased_ice_cream VALUES("Caramell", 30, "2011-09-07");
INSERT INTO purchased_ice_cream VALUES("Chocolate", 15, "2018-02-08");
INSERT INTO purchased_ice_cream VALUES("Strawberry", 20, "2015-03-09");
INSERT INTO purchased_ice_cream VALUES("Chocolate", 15, "2016-04-10");
INSERT INTO purchased_ice_cream VALUES("Chocolate", 15, "2018-06-11");
INSERT INTO purchased_ice_cream VALUES("Chocolate", 15, "2011-08-12");

SELECT name, price, BIT_COUNT(BIT_OR(1<<DAY(date_of_purchase))) AS Unique_dates_of_purchase, COUNT(DAY(date_of_purchase)) AS amount_of_purchases FROM purchased_ice_cream GROUP BY name, price;
#The above showcases that we can run Queries against amount of purchases, on what amount of different days, unique or not, etc.
#We can of course also designate to be a factor of uniqueness to count in terms of BIT_COUNT, but we could also count by virtue of
#other methods.

#And we can, if we so wish - utilize Auto_Increment - which interplays so that it defaults to what value was designated last
#based on insertion operations

CREATE TABLE IF NOT EXISTS example_of_auto_increment(id INT(10) NOT NULL AUTO_INCREMENT,
	name CHAR(30) NOT NULL,
	x_attribute CHAR(30) DEFAULT '' NOT NULL,
	y_attribute CHAR(30) DEFAULT '' NOT NULL,
	PRIMARY KEY (id)
);
#When something is a Numerical akin to ID and we have auto_increment,
#We do not need to have a default designation - as the handle in terms of defaulting is implicit
#in designation to last numerical call or 0, depending on context.

INSERT IGNORE INTO example_of_auto_increment (id, name, x_attribute) VALUES
	(1, 'Shoe', 'Brown'),
	(2, 'Pasta', 'Tasty'),
	(3, 'Mug', 'Cheramic'),
	(1001, 'Sickle', 'Ripping'),
	(5, 'Frown', 'Sad'),
	(100, 'Locks', 'Unbreakable'),
	(10, 'Fox', 'Jumped over the Rice'),
	(11, 'Box', 'Square');

INSERT INTO example_of_auto_increment (name) VALUES
	('Shoe');
INSERT INTO example_of_auto_increment (name) VALUES
	('Shoe_box');
INSERT INTO example_of_auto_increment (id, name) VALUES
	(NULL,'Glove_box');
#Simply runs auto-increment to reflect of where the last designated default handle was put in terms of Value designation
#We can also designate Null values as auto_increment generation if NOT NULL has been designated.

#If we wish to find out the latest Automatic generated ID, we can access it with LAST_INSERT_ID()

#We can further Enumerate structures by virtue of utilizing the MyISAM Engine designation of Tables.

CREATE TABLE IF NOT EXISTS isam_example (
	groupings ENUM('Shoe', 'Sock', 'Pants') NOT NULL,
	id INT NOT NULL AUTO_INCREMENT,
	color CHAR(30) NOT NULL,
	PRIMARY KEY (groupings,id)
) ENGINE=MyISAM;

INSERT IGNORE INTO isam_example (groupings, color) VALUES
	('Shoe', 'Brown'), ('Shoe', 'Green'), ('Shoe', 'Yellow'),
	('Sock', 'Rainbow'), ('Sock', 'White'),
	('Pants', 'Black'), ('Pants', 'Grey'),('Pants', 'Red'), ('Pants', 'Green');

SELECT * FROM isam_example ORDER BY groupings, id;

#If we wish to configure the Apache logging format to adhere to MySQL's structure - we can do so by virtue of
#putting the following into the Apache configuration file:
#
# LogFormat \
# 				"\"%h\",%{%Y%m%d%H%M%S}t,%>s, \"%b\", "%{Content_Type}o\", \
# 				\"%U\", \"%{Referer}i\",\"%{User-Agent}i\""

#Where of the loading of a log file might look as follows:
#
# LOAD DATA INFILE '/local/access_log' INTO TABLE tbl_name
# FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' ESCAPED BY '\\'

#There are a number of programs related to MySQL overall:
#
#mysql - the mysql daemon, i.e, the mysql server.
#
#mysqld_safe - A server startup script. mysqld_safe attempts to start mysqld.
#
#mysql.server - A server startup script. Used on systems that use System V-style run directories containing
#scripts that start system services for particular run levels. It invokes the mysqld_safe to start the MySQL Server.
#
#mysqld_multi - A server startup script that can start or stop multiple servers installed on the system.

#comp_err - Used during the MySQL build/installation process. Compiles error messages files from the error source files.

#mysql_secure_installation - Enables to improve the security of your MySQL installation.

#mysql_ssl_rsa_setup - creates the SSL cert and key files and RSA key-pair files required to support secure connections, if those
#files are missing. Files created by mysql_ssl_rsa_setup can be used for secure connections using SSL or RSA.

#mysql_tzinfo_to_sql - This program loads the time zone tables in the mysql db using the contents of the host system zoneinfo db
# (This is a set of files that describes time zones)

#mysql_upgrade - Used after a MySQL upgrade operation. Checks tables for incompatibilies and repairs them if nessecary, and updates
#the grant tables with any changes relevant in newer versionings of MySQL.

#The following is the client programs that connect to the MySQL server:

#mysql - cmd line tool for interactively entering SQL statements or executing them from a file in batch mode.

#mysqladmin - A client that performs administrative operations, such as creating or dropping DBs, reloading the grant tables,
#flushing tables to disk and reopening log files.
#
#mysqladmin can also be used to retrieve version, process and status information from the server. 

#mysqlcheck - A table-maintenance client that checks, repairs and analyzes and optimizes tables.

#mysqldump - A client that dumps a MySQL db into a file as SQL,text, or XML.

#mysqlimport - A client that imports text files into their respective tables using LOAD DATA INFILE.

#mysqlpump - a client that dumps a MySQL db into a file as SQL.

#mysqlsh - MySQL Shell is a code editor for MySQL server. Allows for scripting of JS and Python.

#mysqlshow - A client that displays information about DBs, tables, columns and indexes.

#mysqlslap - A client made to emulate client load for a MySQL server and report the timing of each stage.
#Works as if multiple clients are accessing the server.

#There are a few MySQL Administrative and utility sectioned programs as well
#
#innochecksum - a offline InnoDB offline checksum utility.

#myisam_ftdump - A utility that displays information about full-text indexes in MyISAM tables.

#myisamchk - A utility to describe, check and optimize/repair MyISAM tables.

#myisamlog - A utility that processes the contents of a MyISAM log file.

#myisampack - A utiliy that compresses MyISAM tables to produce smaller read-only tables.

#mysql_config_editor - A utility that enables you to store authentication credentials in a secure, encrypted login path file
#named .mylogin.cnf

#mysqlbinlog - A utility for reading statements from a binary log. The log of executed statements contained in the binary log files
#can be used to help recover from a crash.

#mysqldumpslow - A utility to read and summarize the contents of a slow query log.

#Past this, there are MySQL program-development utilities.

#mysql_config - A shell script that produces the option values needed when compiling MySQL programs.

#my_print_defaults - A utility that shows which options are present in option groups of option files.

#resolve_stack_dump - A utility program that resolves a numeric stack trace dump to symbols.

#There are some misc. utilities:

#lz4_decompress - A utility that decompresses mysqlpump output that was created using LZ4 compression.

#perror - A utility that displays the meaning of system or MySQL error codes.

#resolveip - A utility program that resolves a host name to an IP address or vice versa.

#zlib_decompress - Utility that decompresses mysqlpump output that was created using ZLIB compression.

#Some of the ENvironment variables used by MySQL are as follows:

#MYSQL_UNIX_PORT - The default Unix socket file, used for connections to localhost

#MYSQL_TCP_PORT - The default port number, used for TCP/IP connections

#MYSQL_PWD - The default PW

#MYSQL_DEBUG - Debug trace options when debugging

#TMPDIR - The dir where temporary tables and files are created.

#Past this, there is the interaction of actually interacting with MySQL from the Commandline

#mysql --user=root test 
#
#Harkening back unto Unix systems, -- denotes commands, - denotes unix options
#test is a DB name, in this instnace

#most common operations shorthand to the first letter of the naming to denote command interaction
#--host/-h - Host
#--user/-u - User
#--password/-p - Password
#
#--port/-P - Port number to connect to
#--socket/-S - Specify a UNIX socket file on Unix (named Pipe name on Windows)

#To circumvent full need of explicit path denotation in parameter accessing, we can include the installation Path
#in the PATH setup.
#
#Meaning, if Mysql is installed to /usr/local/mysql/bin - we can put that into PATH, allowing us to simply denote it as 
#mysql
#
#Generally the runtime path declaration resolves to a local handle in terms of the bin designation path
#as in, just refering to bin with resolve it to a local designation path for MySQL.
#
#This can be important as well in terms of recursive path resolution, as this can come to be bugged.

#The following pertains to connecting to a MySQL Server
#
# There are a number of default parameter handligns to fallback unto, in terms of how MySQL operates.
#This means that if you just write for instance MySQL in the cmd, it will resolve to the default resolution
#of certain program variables:

#default host name: localhost
#
#default user name: ODBC on Windows, Unix login name on UNIX.
#
#if neither -p or --password is given, password is given as empty field
#
#default name of db to access: the first non option parameter found. If none, it does not select one

#Example of showcasing of accessing
#
# mysql --host=localhost --user=myname --password=password mydb
# mysql -h localhost -u myname -ppassword mydb

#note, no space between -p or --password command and actual PW.

#Other users on the system can see the pw entered on cmd line with ps auxw.

#To avoid security risks in that department, simply omit writing the pw on the cmd line
#
# mysql --host=localhost --user=myname --password mydb
# mysql -h localhost -u myname -p mydb

# The above examples has omitted PW on the CMDline.

#Some systems limit the PW to 8 chars. Either have the PW as 8 chars, or put it as a value in a option file

#On Unix systems, localhost attempts to ordane connection through a UNix Socket. 
#To circumvent this, use explicit IP declaration
#
# mysql --host=127.0.0.1
# mysql --protocol=TCP Allows us to denote different connection types, even if it would default ot something else

#If the server is made to accept Ipv6 connections, clients can connect with --host=::1

#On windows, we can force named-pipe connections by specifying the --pipe or --protocol=PIPE option, or by using
#. as the hostname

#If named-pipe connections are not enabled, an error occurs. Use the --socket option to specify the
#name of the pipe, if we do not wish to have the default naming on pipes.

#Default port is 3306
#mysql --host=remote.example.com Defaults to port being 3306

#To specify a port use --port or -P
#mysql --host=remote.example.com --port=13306

#Do note, attempting to ordane localhost on a unix system will use a socket file
#to circumvent this, use more explicit denotation

#mysql --port=13306 --host=localhost Will ignore the port part on a Unix system, as it defaults to a socket file

#mysql --port=13306 --host=127.0.0.1
#mysql --port=13306 --protocol=TCP

#We can utilize things akin to hints to denote what the client-side authentication plugin should be:
#
#--default-auth=plugin

#To utilize pipes, we can use:
#--pipe, -W
#However, the server must be started with the --enable-named-pipe option to enable named-pipe connections.

#We can denote what kind of protocol to use, which relates back unto what kind of a OS is permissible to utilize it
#
# --protocol=TCP - TCP/IP connection to local or remote server, usable by all
#
# --protocol=SOCKET - Unix socket file connection to local server, Unix only

# --protocol=PIPE   - Named-pipe connection to local or remote server, Windows only

# --protocol=MEMORY - Shared-memory connection to local server, Windows only

#Do denote, for most cases - overhead is avoided with Socket default integrations in Unix systems.

#To run with Shared memory:

#--shared-memory-base-name=name , defaults to MYSQL. Server must be started with --shared-memory

#--socket=file_name, -S file_name - On Unix, the Unix socket file to use, for connections made using a named pipe to a local server.
# On Unix, defaults to /tmp/mysql.sock
# 
# On windows, the named pipe name to use. defaults to MySQL.

#Server must be started with --enable-named-pipe to enable this.

#--ssl* to start up connection based on SSL layering

#--tls-version=protocol list
#Denotes the protocols permitted by the client for encrypted connections. The value is a comma-separated list containing one
#or more protocol names.

#The protocols usable for this option depend on the SSL library used to compile MySQL.

#--user=user name, -u user_name - username to be used. default on Windows is ODBC or the Unix login name on Unix.

#We can modify options files akin to the Client section of an option file.

#We can also utilize PATH variables, akin to MYSQL_HOST, USER or MYSQL_PWD.

#The following section showcases the Path parameters in terms of connections
#They are bound to URI type strings or data dictionaries

#scheme:Specifies the connection protocol to use. To account for a specific protocol, use mysqlx, mysql for classic
#MySQL protocol connections. If a protocol is not specified - the server attempts to guess the protocol.

#user: Specifies the MySQL user account to be used for the authentication process.

#password: Specifies the password to be used for the authentication process. Do not store hte PW in the connection path

#host: Specifies the server instance the connection refers to. Can be either an IpV4 address, an IpV6 address or a hostname. If not specified,
#localhost is used by default.

#port: Specifies a network port which the target MySQL server is listening on for connections. If not specified, 33060 is used by default
#for X protocol connections.

#3306 is the default for classic MySQL protocol connections.

#socket: path to a Unix socket or Windows named-pipe. The values are local file paths and must be encoded in URI type strings,
#using % encodings or surrounding the path with ()'s - as full resolution of path is then realized, instead of needing to escape for explicit stature.

#To connect as root@localhost using Unix sockets, we can use /tmp/mysqld.sock we can use % or ()'s:

#()'s:
#root@localhost?socket=(/tmp/mysqld.sock)

#%'s:
#root@localhost?socket=%2Ftmp%2Fmysqld.sock

#Basically in the case of % escaping, we replace the direct symbols with underlying unicode translations
#akin to accessing of typing/other structuring.
#It resolves to /, regardless.

#schema: specifies the database to be set as default when a connection is established.

#?attribute=value: Specifies a data dictionary that contains options.

#The params are case insensitive and can only be defined once.
#If defined more than once, a error is generated.

#When a dictionary is used, the following options are also valid:
#
#ssl-mode: the SSL mode to be used for the connection.
#
#ssl-ca: the path to the X.509 cert authority in PEM format.
#
#ssl-capath: the path to the directory that contains the X.509 certs authorities in PEM format.
#
#ssl-cert:The path to the X.509 certs in PEM format.
#
#ssl-key: The path to the X.509 key in PEM format.
#
#ssl-crl: The path to file that contains certificate revocation lists
#
#ssl-crlpath: The path to the directory that contains certificate revocation list files.
#
#ssl-cipher: the SSL cipher to use.
#
#tls-version: List of protocols permitted for secure connections.
#
#auth-method: Authentication method used for the connection. Defaults to AUTO, meaning that the server attempts to guess.
#Can be one of the following:
#
#AUTO, MYSQL41, SHA256_MEMORY, FROM_CAPABILITIES, FALLBACK, PLAIN

#Whenever we use a X Protocol connection, any configured auth-method is overridden to this sequence of authentication methods:
#MYSQL41, SHA256_MEMORY, PLAIN.

#get-server-public-key. 
#Requests the public key from the server required for RSA key-paired based password exchange.
#
#use this when connecting to the MySQL 8.0 servers over classic MySQL protocol with SSL mode DISABLED.
#You must specify the protocol in this case, for example:
#
#mysql://user@localhost:3306?get-server-key=true

#server-public-key-path: The path name to a file containing a client-side copy of the public key required for RSA key pair-based password exchange.
#Use when connecting to MySQL 8.0 servers over classic MySQL protocol with SSL mode DISABLED.

#The ?attribute=value options data dictionary can contain are the following options:
#
#mycnfPath: the path to the MySQL configuration file of the instance.
#
#outputMycnfPath: alternative output path to write the MySQL configuration file of the instance.
#
#password: the password to be used by the connection.
#
#clusterAdmin: the name of the InnoDB cluster administrator used to be created. The supported format is the standard
#MySQL account name format.
#
#clusterAdminPassword: the password for the innoDB cluster admin account.
#
#clearReadOnly: a boolean value used to confirm that super_read_only must be disabled.
#
#interactive: A boolean of which disables the interactive wizards of assignments of variables/non-assignments etc.

#restart: A boolean of which is used to indicate that a remote restart of the target instance should be performed to finalize operations.

#The following is a covering of how to connect using a URI string

#We can specify a connection using a URI type string format. Such strings can be used with
#the MySQL Shell --uri command option, along with the MySQL Shell \connect command

#This also applies to tools like MySQL Routers and Connectors of whom implement X DevAPI.

#A typical URI type string has the following format:

#[scheme://][user[:[password]]@]target[:port][/schema][?attribute1=value1&attribute2=value2]

#Note, that reserved keywords must be escaped, akin to:
#% - %25
#@ - %40

#Some examples of connections being made with this formatting:
#
#A classical MySQL protocol connection to a local server instance listening at port 3333
#mysql://user@localhost:3333
#
#A X Protocol connection to a local server instance listening at port 33065
#mysqlx://user@localhost:33065
#
#A X protocol connection to a remote server instance, using a host name, an IpV4 address and an IpV6 address.
#
#mysqlx://user@server.example.com/
#mysqlx://user@198.51.100.14:123 IPV4 address
#mysqlx://user@[2001:db8:85a3:8d3:1319:8a2e:370:7348]
#
#We can also specify a optional path which represents a DB schema
#mysqlx://user@198.51.100.1/world%5Fx Basically, the encoding/escaping of chars akin to %5Fx is Hexadecimal and akin.
#mysqlx://user@198.51.100.2:33060/world

#Where of the following example illustrates a connection to a localhost, SSL integration with certs,
#key and cert.
#
#The example is just to illustrate the difference between escaping of characters and paranthesis integration
#
#ssluser@127.0.0.1?ssl-ca=%2Froot%2Fclientcert%2Fca-cert.pem\
#&ssl-cert=%2Froot%2Fclientcert%2Fclient-cert.pem\
#&ssl-key=%2Froot%2Fclientcert%2Fclient-key

#ssluser@127.0.0.1?ssl-ca=(/root/clientcert/ca-cert.pem)\
#&ssl-cert=(/root/clientcert/client-cert.pem)\
#&ssl-key=(/root/clientcert/client-key)

#Denote, the above documentation assumes that the integration does require a Password based on Syntax interaction.
#
#To account for a passwordless structure of where we can access the structure without a explicit PW,
#i.e - pw-less or integrated unto Unix socket connections, we must use the following Syntax:
#
#mysqlx://user:@localhost

#We can also utilize Dictionaries in terms of connection details towards a server, with the
#shell.connect() or dba.createCluster() MySQL Shell commands and with MySQL Connectors that implement the X DevAPI.

#Unlike URI strings, we need not escape characters in a Dictionary structure composition.

#If no PW is specified in the dict, none is promted for.

#Some examples are as follows:

#A X protocol connection to a local server @ port 33065
#{user:'user', host:'localhost', port:33065}

#A classic MySQL protocol X protocol connection, local server @ 3333
#{user:'user', host:'localhost', port:3333}

#An X protocol connection to a remote server instance, using a host name, an IPv4 address and an IPv6 address, is showcased:
#
#{user:'user', host:'server.example.com'}
#{user:'user', host:198.51.100.14:123}
#{user:'user', host:[2001:db8:85a3:8d3:1319:8a2e:370:7348]}
#
#We can also display an optional schema to represent a DB
#
#{user:'user', host:'localhost', schema:'world'}
#
# The above showcasing requires a PW.
# Showcasing case of no PW integration required
#
# {user:'user', password:'', host:'localhost'}

#There are a number of ways that we can specify program options:

#CMD line after the instegated command

#Options file to integrate options before running the program

#List the options in the environment variables

#Since the options are iteratively parsed, on duplications, the last one in the ordering is commited:

#mysql -h example.com -h localhost <- Will resolve to -h Localhost, since repetition of -h command parsing

#In the case of conflicting or related options are given - the later in the ordering is taken, instead of the earlier
#mysql --column-names --skip-column-names

#The ordering of processing is:
#Environment variables
#option files
#command line

#for the server, mysqld-auto.cnf takes highest prio (i.e, last)

#The following designates and showcases the usage of options on the CMD line

#Options are given after the cmd name

#A option argument begins with one or two dashes, depending on the format of the option.
#
#An example is the help command:
#
#-? (short) or --help (long)

#Option namings and designations are case sensitive. Example showcasing this:
#
# -v (verbose) or -V (version)

#Of course, sometimes options need arguments, as is showcased:
#
#-h localhost 
#
#or
#
#--host=localhost

#Delegation of parameters in long formatted PWs are separated with a =
#
#--password=<some value goes here> #Incinuates that we are to connect with said PW
#
#--password #Prompts for PW

#In the case of shortcutting the letter designation of password prompts, the dynamics can be seen as follows:
#
#mysql -ptest #Will attempt to access with a PW value of test, to whatever DB it defaults to
#
#mysql -p test #Will attempt to access the test DB, with no pw defined

#Do denote, that in terms of commands _ and - are synonymous in terms of interpretation
#
#--skip-grant-tables is the same as --skip_grant_tables

#We can also utilize suffixes in terms of utilization of commands.

#The notations are as follows: K, M, G (1024^1, 1024^2, 1024^3)
#
#In 8.0.14 or beyond:
#T,P,E (1024^4, 1024^5, 1024^6)

#For instance, if we wish to ping the server 1024 times intertwined with the power:

#mysqladmin --count=1K --sleep=10 ping 
#Denotes to ping 1024 times, 10 seconds interval

#If using filenames as option values, do not use ~

#When we denote to make queries on the CMD line, we use "" encapsulation, for instance
#
#mysql -u root -p --execute="SELECT User, Host FROM mysql.user" #Connect using the user of root, prompt for pw, execute the escaped Query
#

#Different levels of escaping might be needed, in terms of " or '
#
#Multiple statements can be passed in the option value on the CMD line separated by semicolons:
#
#mysql -u root -p -e "SELECT VERSION();SELECT NOW()"

#If we wish - we can disable/enable certain parts:

#Disabling:
#--disable-column-names
#--skip-column-names
#--column-names=0

#Enabling:
#--column-names
#--enable-column-names
#--column-names=1

#We can also use TRUE, OFF, FALSE - Non-case sensitive

#If we denote the --loose, it is a option of denoting that the program do not exit upon an error or unrecognized command, instead it does so with a warning
#
#mysql --no-such-option #Would cause an error, unrecognized command
#
#mysql --loose-no-such-option #Would exit with a warning, despite unrecognized command

#We can also limit session values, akin to memory allocation - as follows, in mysqld:
#
#--maximum-max_heap_table_size=32M - Prevents a client from making the heap table size limit larger than 32M.
#
#--maximum cannot be applied to system vars that are global in scope:
#
#--maximum-back_log=200 #Gives an error because attempted designation to a global system var

#In case of if we wish to denote what options files are read, we can use --verbose and --help
#
#a MySQL program with --no-defaults reads no option files other than .mylogin.cnf
#
#A server started with the persisted globals load system var disabled does not read mysqld-auto.cnf

#The login path group options allow for the following:
#
#host,user,password,port and socket

#To  define what login path to read from in the .mylogin.cnf - we can use the --login-path option.

# If we wish to specify another login path file name, we can set the MYSQL_TEST_LOGIN_FILE environment variable.
# This variable is used by mysql-test-run.pl and is recognized by other mysql clients.

#There is a second config file, that is auto managed by the server - that is called:
#
#mysqld-auto.cnf file in the data directory. This is a JSON file that contains persisted system var settings.
#
#It is created by the server upon execution of SET PERSIST or PERSIST_ONLY.
#
#One should not manage said fail alone, and leave that to the server.

#On Windows systems, the files are read in the following order:
#
# NAME 																	PURPOSE
#
# %WINDIR%\my.ini, %WINDIR%\my.cnf 							Global options

# C:\my.ini, C:\my.cnf 											Global options

# BASEDIR\my.ini, BASEDIR\my.cnf 							Global options

# defaults-extra-file 											The file specified with --defaults-extra-file (if any)

# %APPDATA%\MySQL\.mylogin.cnf 								Login path options (clients only)

# DATADIR\mysqld-auto.cnf 										System variables persisted with SET PERSIST or PERSIST_ONLY (server only)

#The %WINDIR% and %APPDATA% are basically system path designations that are found by utilization of Regex,
#to find them, we can simply echo their  designation in the cmd line:
#
# C:\> echo %WINDIR% #Showcases where the Windows directory is
#
# C:\> echo %APPDATA% #Showcases where the Appdata dir is

#BASEDIR refers to the MySQL base install dir. usually, it is at C:\PROGRAMDIR\MySQL\MySQL 8.0 Server
#where the Programdir, is the program files dir.

#DATADIR is the MySQL data dir. It is used to find mysqld-auto.cnf - the default being the data dir loc
#built in when MySQL was compiled - but can be changed with --datadir specified as a option-file.

#It can also be changed by virtue of cmd line designation before the mysqld-auto.cnf is processed.

#On Unix, the ordering of the startup is as follows:
#
# FILE NAME 						PURPOSE
# /etc/my.cnf 						Global options
# /etc/mysql/my.cnf 				Global options
# SYSCONFDIR/my.cnf 				Global options
# $MYSQL_HOME/my.cnf 			Server-specific options (server only)
# defaults-extra-file 			The file specified with --defaults-extra-file, if any
# ~/.my.cnf 						User-specific options
# ~/.mylogin.cnf 					User-specific login path options (clients only)
# DATADIR/mysqld-auto.cnf 		System variables persisted with SET PERSIST or PERSIST_ONLY (server only)

#As per usual, the ~ denotes the home dir, the set system var of $HOME
#
# SYSCONFDIR is the dir specified with the SYSCONFDIR option to CMake when MySQL was built.
# By default, this is the etc file dir

# MYSQL_HOME is an env variable containing the path to the dir in which the server-specific my.cnf file
# resides.
#
# If MYSQL_HOME is not set and you start the server using mysqld_safe, mysqld_safe sets it to BASEDIR, the MySQL base install dir.

# DATADIR refers to the MySQL data dir. As used to find mysqld-auto.cnf, its default value is the data dir location built in when
# MySQL was compiled.
#
# can be changed with --datadir specified as an option-file or command-line option processed before mysqld-auto.cnf is processed.

# If multiple instances are given, the latest is taken.
#
# The one exception is mysqld, where the first is taken of the --user option as security precaution.

#The following integration rules adheres to the manually edited files - not standing in terms of the .mylogin.cnf which is
# created using mysql_config_editor and is encrypted. 
#
# This too accounts for mysqld_auto.cnf, which the server creates in JSON.

#In terms of Options files, the following rules are adhered to:

# Any cmd line integrated on CMD line is done with --, in option files we omit thoose.

# Empty lines are ignored. Comments start with ; or #

# [group] denotes a group subsectioning. Holds until end of file or different Group designation.

#Leading and trailing spaces are deleted. We can have spaces around the =

#We are allowed to use the following escape sequences:
#
# \b, \t, \n, \r, \\ and \s
#
# they are in order:
#
# backspace, tab, newline, carriage return, backslash and space

#The chars are only escaped if they are not valid commands. i.e, \s is not escaped - \S is, due to invalid command.

#The above implies that we can write a \ as either: \\ or \

#The escape rules in terms of opton files is denoted as conversion unto "(char)" upon errornous registration of a command.
#As in, if \x is not a command, it's converted to "x"

#Note: In option files, on Windows - \ can be written as / as well

#Examples of usage:

#basedir="C:\\Program Files\MySQL\MySQL Server 8.0"
#basedir="C:\\Program Files\\MySQL\\MySQL Server 8.0"
#basedir="C:/Program Files/MySQL/MySQL/MySQL Server 8.0"
#basedir=C:\\Program\sFiles\\MySQL\\MySQL\sServer\s8.0

#If a option name denotation is the same as a program name, then that group applies specifically to that program.
#Akin to:
#
# [mysqld] and [mysql] applying to mysqld and mysql respectively.

# [client] is read by all client programs provided in MySQL distributions.

# Do note, we have to be careful about level of options that we put in in terms of Client,
# that it is understood by all levels of the clients. If not understood, the client will raise an exception and quit.

#In terms of ordering of hierarchy in terms of options, we go from:
#
#Highest global reach
#
# More specific
#
# Most specific
#
# For instance:
#
# [client]
# port=3306
# socket=/tmp/mysql.sock
#
# [mysqld]
# port=3306
# socket=/tmp/mysql.sock
# key_buffer_size=16M
# max_allowed_packet=128M
#
# [mysqldump]
# quick

#Another example of a option file:

#[client]
# Send out a standardized password for all client level integrations
# password="my password"

#[mysql]
#no-auto-rehash
#connect_timeout=2

#We can target versionings as well:
#
#[mysqld-8.0]
#sql_mode=TRADITIONAL

#To include specific files or even dirs, we can use !include and !includedir
#
# !include /home/mydir/myopt.cnf #reads that specific config file
#
# !include /home/mydir #reads all the option files in mydir

#On Windows, the extensions included are .ini and .cnf
#
#Linux is .cnf
#
#Past that, MySQL does not guarantee ordering of integration

#As far as Grouping goes contra Parsing, as we iterate - we integrate what actually is
#targeted by the respective groupings - akin to that if MySQLD is reading something - it will
#trigger thoose respective groups.

#Past this, we can come to talk about CMD line options that affect option-file handling

#The following commands, to function properly - must be given before other options, except for:
#
# --print-defaults can be used after --defaults-file, --defaults-extra-file or --login-path
#
# On Windows, if the server is started with the --defaults-file and --install options,
# --install must be first.
#

#--defaults-extra-file=file_name - reads this option file after the global option file 
#
# On Unix, this is read before the user option file 

# On all platforms, this is read before the login path file.

# The parameter name in terms of file name, is treated as a relative path towards the CWD.
# To fundamentally assess greater control, we can denote the full explicit path, if we want

# --defaults-file=file_name - reads the given option file.
# 
# Note: even with the above, mysqld refers to mysqld-auto.cnf and client refers to .mylogin.cnf

# --defaults-group-suffix=str
#
# Denotes a default suffix of grouping name to read.
#
# For instance - a parameter name of "dogs" would groups that have a suffix of "dogs",
# like - [options_dogs]

# --login-path=name
#
# Reads options from the named login path in the .mylogin.cnf login path file.
# This specific group denotes which MySQL server to connect to and which account to authenticate as.
#
# To create or modify this login path file - use the mysql_config_editor

#This path is read even if --no-defaults is set.
#
# The given command is appended unto the already list of defaulted programs, as can be showcased:
#
# mysql --login-path=somextra
#
# Would end up with mysql reading [client] and [mysql] from the option files,
# and [client], [mysql], and [mypath] from the login path file.

#To specify an alternate login path file name, set the MYSQL_TEST_LOGIN_FILE env variable

#--no-defaults
#
# Prevents default option files from being read.
# Will still read .mylogin.cnf

#--print-defaults
#
#Prints the program name and all of the options that it gets from the option files.
#PWs are masked.

# --max_allowed_packet=32M #Can be specified in Bytes.
#
# Still power denotation in terms of K, M, G (1024^1, 1024^2, 1024^3) and T,P,E (1024^4, 1024^5, 1024^6)
#
# In option files:
#
# [mysql]
# max_allowed_packet=32M #can be specified in bytes

#- and _ are treated as equals in the context of variable names
#
# example:
#
# [mysqld]
# key_buffer_size=512M
# 
# is identical to
#
# [mysqld]
# key-buffer-size=512M

#In terms of variable naming, we can give ambigious naming that can be autocompleted,
#However, it's just a better idea to denote a option name htat is fully declared.

# mysql --max=1000000 would be interpreted as ambigious as it would not be clear to what it means, in terms of
# meaning max_allowed_packet or max_join_size
# to which we would be warned.

#Server setup denotation of commands do not support arithmetic interpretation in terms of intialization
#
# mysql --max_allowed_packet=16M #Allowed in server startup
# mysql --max_allowed_packet=16*1024*1024 #Not allowed, due to being a operation

# At runtime, when the server is running etc, though:
# SET GLOBAL max_allowed_packet=16M; #Not allowed in a runtime env.
# SET GLOBAL max_allowed_packet=16*1024*1024;

#For options that do not require a value, we can omit the assignment operator in notation (=):
#
# mysql --host=somehost --user=someguy #Usable with default value integrations
#
# mysql --host tonfisk --user jon #Usable with non-default value integrations

# In terms of omitting variables names, can cause errors akin to skipping, as showcased:
#
# mysql --host --user jon #Will give an error in trying to access host --user

#An example of denoting of where to log errors, in terms of a UNIX system
# NOTE: For safety, use = assignment in variable name contexts

# mysqld_safe --log-error=my-errors & #The & is just a background designation operator for UNIX systems
#
#For default isntallation and relative pathing, this gives to:
# '/usr/local/mysql/var/my-errors.err'

#The next section will be about setting ENV Vars

#We can denote environment variables in terms of Usernames, ports, exporting etc:
#
# SET USER=your_name
#
# For unix systems, accounting for sh, ksh, bash, zsh:
#
# MYSQL_TCP_PORT=3306
# export MYSQL_TCP_PORT
#
# For csh and tcsh:
#
# setenv MYSQL_TCP_PORT 3306

#The above are allocated to session. To denote for more permanent startup status:
#
# Windows -> Control panel
#
# Unix (Bash) -> .bashrc or .bash_profile for bash 
# Unix (tcsh) -> .tcshrc

#An example of modifying the path denotation variable in Bash
#
# #Assume /usr/local/mysql/bin is the installation path
# 
# PATH=${PATH}:/usr/local/mysql/bin #put in .bashrc file to allow for easy access to MySQL setup in terms of options

#Note, the .bashrc is for login shells, and .bash_profile is for nonlogin shells

#In the case of tcsh:
# setenv PATH ${PATH}:/usr/local/mysql/bin

#The next section is mysqld_safe

#Some Unix systems involve usage of a MySQL Server startup that is safer,
#i.e - mysqld_safe

#These features include things like restarting the server and logging runtime info to an error log.

#On some specific UNix systems, akin to RPM or Debian, include systemd support for managing MySQl server
#startup/shutdown.

#If we wish to override the default options and specify a explicit name of the server we wish to run
#we can specify --mysqld or --mysqld-version option to mysqld_safe.

#You can also use --ledir to indicate the dir where mysqld_safe should look for the server.

#The options in terms of mysqld_safe is the same as mysqld

#If the option is unknown to mysqld_safe, they are passed to mysqld if it's done on the cmd line
#
#However, if this is done in a option file - specified to [mysqld_safe] as a group
#they are ignored.

#mysqld_safe will read all of the options from the [mysqld], [server] and [mysqld_safe] sections
#in option files.

#Note, for backwards compability cases - mysqld_safe also reads [safe_mysqld] sections

#The following denotes the options for mysqld_safe

# Format 	 					Desc
#	
# --basedir 					path to MySQL installation dir
# --core-file-size 			Size of core file that mysqld should be able to create
# --datadir 					path to the data dir
# --defaults-extra-file 	Read named option file in addition to usual option files
#
# --defaults-file 			Read only named option file
# --help 						display help message and exit
# --ledir 					 	Path to directory where server is located
# --log-error 					Write error log to named file
#
# --malloc-lib 						Alternative malloc library to use for mysqld
# --mysqld 								Name of server program to start (in ledir directory)
# --mysqld-safe-log-timestamps 	Timestamp format for logging
# --mysqld-version 					Suffix for server program name
# --nice 								Use nice program to set server scheduling priority
# --no-defaults 						Read no option files
#
# --open-files-limit 				Number of files that mysqld should be able to open
# --pid-file 							Path name of server process ID file
# --plugin-dir 						Directory where plugins are installed
# --port 								Port number on which to listen for TCP/IP connections

# --skip-kill-mysqld 				Do not try to kill stray mysqld processes
# --skip-syslog 						Do not write error messages to syslog; use error log file
# --socket 								Socket file on which to listen for Unix socket connections

# --syslog 								Write error messages to syslog
# --syslog-tag 						Tag suffix for messages written to syslog
# --timezone 							Set TZ time zone environment variable to named value
# --user 								Run mysqld as user having name user_name or numeric user ID user_id

#Some further covering in terms of different parts
#
#--help - Display a help message and exit
#
#--basedir=dir_name - The path to the MySQL install dir

#--core-file-size=size - The size of the core file that mysqld should be able to create. 
#The value of the option is passed to ulimit -c
#
# If we disable innodb buffer pool in core file, we can reduce the core file size.

#--datadir=dir_name - The path to the data dir

#--defaults-extra-file=file_name - Read this option file in addition to the usual option files.
#
# If the file is not found, does not exist or permissions are not given - the server exists with an error.
#
# file_name is interpreted as relative to the current dir if given as a relative path name rather than
# a full path name. 
#
#This must be the first option on the cmd line if used.

#--defaults-file=file_name
#
#Use only the given option file. If the file does not exist or is otherwise inaccessible, the server exits with an error.
#
#file_name is interpreted as relative to the current dir if given as a relative path name rather than a explicit one.
#
#This must be the first option on the cmd line if used

#--ledir=dir_name - 
#
#If mysqld_safe cannot find the server, use this option to indicate the path name to the dir where the server is located.
#
#This command can only be given on cmdline, not in option files. On platforms that use systemd, the value can be specified
#in the value of MYSQLD_OPTS.

#--log-error=file_name
#
#Write the error log to the given file

#--mysqld-safe-log-timestamps
#
#This option is the one that controls the format of timestamps in the log output produced by mysqld_safe.
#
#If the value does not belong to any of the following, a warning is logged and resorts to UTC formatting.
#
#UTC,utc - ISO 8601 UTC format (this is the same as --log timestamps=UTC for the server) - Defaults to this

#SYSTEM, system - ISO 8601 local time format (same as --log timestamps=SYSTEM for the server)

#HYPHEN, hyphen - YY-MM-DD h:mm:ss format, as in mysqld_safe for MySQL 5.6

#LEGACY, legacy - YYMMDD hh:mm:ss format, as in mysqld_safe prior to MySQL 5.6

#--malloc-lib=[lib name]
#
#The name of the library to use for memory allocation instead of the system malloc() library. 
#
#The option value must be one of the dirs:
# /usr/lib
# /usr/lib64
# /usr/lib/i386-linux-gnu
# /usr/lib/x86_64-linux-gnu

#The --malloc-lib option works by modifying the LD_PRELOAD env value to affect dynamic linking to enable
#the loader to find the memory-allocation library when mysqld runs.

#Some notes on this:

#If the option is not given, or is given without a value (--malloc-lib=), LD_PRELOAD is not modified
#and no attempt is made to use tcmalloc.

#If the option is given as --malloc-lib=tcmalloc, mysqld_safe looks for a tcmalloc library in /usr/lib
#
#If tcmalloc is found, its path name is added to the beginning of the the LD_PRELOAD value for mysqld.
#
#If tcmalloc is not found, mysqld_safe aborts with an error.

#If the option is given as --malloc-lib=/path/to/some/library, that full path is added to the beginning
#of the LD_PRELOAD value.
#
#If said path is not legitimate - as in nonexistent or unreadable, mysqld_safe aborts with an error.

#For the cases of where mysqld_safe adds a path name to LD_PRELOAD - it adds the path to the beginning of any
#existing value the variable already has.

#NOTE: In case that our system manage using systemd, mysqld_safe is not available.
#Thus - we instead specify the allocation lib by setting LD_PRELOAD in /etc/sysconfig/mysql.

#In terms of Linux, we can use the libtcmalloc_minimal.so lib on any platform for which a tcmalloc
#package is installed in /usr/lib by adding the following lines to my.cnf:
#
# [mysqld_safe]
# malloc-lib=tcmalloc

#To use a specific tcmalloc lib, specify its full path name:
#
# [mysqld_safe]
# malloc-lib=/opt/lib/libtcmalloc_minimal.so

#--mysqld=prog_name
#
#The name of the server program (in the ledir directory) that you want to start.
#
#This option is needed if you use the MySQL binary distirbution but have the data
#dir outside of the binary distribution.
#
#If mysqld_safe cannot find the server, use the --ledir option to indicate the path name
#to the dir where the server is located.
#
#This command is only available on cmd line, not in option files. On platforms that use systemd,
#the value can be specified in the value of MYSQLD_OPTS.

#--mysqld-version=suffix
#
#This option is similar to the --mysqld option, but you specify only the suffix for the server program name.
#The base name is assumed to be mysqld.
#
#--nice=priority
#
#Use the nice program to set the server's scheduling prio to the given value.

#--no-defaults
#
#Do not read option files. Can be used to prevent crashing of attempting to access invalid paths/errors raised are simply offset
#as in the failed files are not read.

#--open-files-limit=count
#
#The number of files that mysqld should be able to open. This options value is passed to ulimit -n.
#
#NOTE: This call requires root permissions in terms of level of started the program.

#--pid-file=file_name
#
#The path name that mysqld should use for its process ID file.

#--plugin-dir=dir_name
#
#The path name of the plugin dir

#--port=port_num
#
#The port number that the server should use when listening for TCP/IP connections. The port number
#must be 1024 or higher lest the server is started by root priveleges.

#--skip-kill-mysqld
#
#An option to disallow killings of stray mysqld processes at startup.
#Works only on Linux.

#--socket=path
#The Unix socket file that the server should use when listening for local connections.

#--syslog, --skip-syslog
#
# --syslog: Causes error messages to be sent to syslog on systems that support the logger program.

# --skip-syslog: suppresses the use of syslog; messages are written to a error log file.

#If syslog is used for error logging, daemon.err facility/severity is used for all log messages.

#However, the above is deprecated in terms of controlling mysqld.
#To control the facility, use the server log syslog facility system var.

#--syslog-tag=tag: also deprecated, use the server log syslog tag system var.

#--timezone=timezone - Sets the TZ time zone environment var to the given option value.
#Legal time zone specs is relative to OS doc specs

#--user={<USER> name|<USER> id}
#
#Run the mysqld server as the user having the name user_name or the numeric user ID user_id.
#(<USER> in this context refers to a system login account - not a part of the MySQL users in teh grant tables.)

#Illustration of forced ordering in terms of --defaults-file or --defaults-extra-file:
#
# mysqld_safe --port=port_num --defaults-file=file_name #Will ignore the default file command, due to not first place ordering
#
# mysqld_safe --defaults-file=file_name --port=port_num

#To have a decent run with mysqld_safe - one of the following conditions need to be true:
#
# If we executed mysqld_safe from the MySQL Install dir - the server and DB must be able to be found in terms of
# a relative path to the working dir.
#
# For binary distributions, mysqld_safe looks for bin and data in the CWD

# For source distris, it looks for libexec and var dirs

# If the above fails, it attempts by absolute paths akin to:
#
# /usr/local/libexec
#
# or 
#
# /usr/local/var

#These locations are determined upon config when installing MySQL.

#An example of running MySQL anywhere, based on relative pathing, assuming initial path is done to the MySQL Install dir:
#
# cd mysql_installation_directory
# bin/mysqld_safe & #Delegate to background job

#If this fails, we can delegate with --ledir or --datadir to indicate dirs for the server and DB.

#The default attempts to attempting to start is 5/second, by utility of sleep and date.
#If this is exceeded - it waits 1 full second before going at it again.

#Error messages go to syslog and stdout.
#To direct options - use syslog.

#The following covers server interaction on the CMD line.
#Naming refers to local installation naming, such as mysqld or mysql.
#I will simply refer to it as mysql here.

#This pertains to Linux systems.

#To start/Stop the script:
#
# mysql start #To start
# mysql stop  #To stop

#To run the server as some specific user, we can config the /etc/my.cnf - adding a user option to
# the [mysqld] group.

#To start or stop MySQL Automatically on the server - we can add start and stop commands in /etc/rc*

#If we use the Linux server RPM package (MySQL-server-VERSION.rpm) or a native Linux package, it may be installed
# in the /etc/init.d dir with the name mysqld or mysql.

#If we do not have the server installed, we can copy a version of it
#
#cp mysql.server /etc/init.d/mysql  #Copy the server to the designated folder
#chmod +x /etc/init.d/mysql

#Depending on our system and integration of Unix - we can use chkconfig to activate it to run at system startup
#
# chkconfig --add mysql
#
# Sometimes, we need a different version
#
# chkconfig --level 345 mysql on

#If it is a version of FreeBSD, the scripts should generally go in /usr/local/etc/rc.d/
#
#Install the mysql.server script as /usr/local/etc/rc.d/mysql.server.sh to enable automatic startup

#The base name file pattern must be *.sh to trigger, otherwise it is silently ignored.

#Sometimes, some operative systems use /etc/rc.local or /etc/init.d/boot.local to start additional
#services on startup.
#
#To utilize it, append something akin to the following to a startup file:
#
# /bin/sh -c 'cd /usr/local/mysql; ./bin/mysqld_safe --user=mysql &'

#mysql.server reads from [mysql.server] and [mysqld] sections of option files.
#
#We can add options for mysql.server in a global /etc/my.cnf, it might look as follows:
#
# [mysqld]
# datadir=/usr/local/mysql/var
# socket=/var/tmp/mysql.sock
# port=3306
# user=mysql

# [mysql.server]
# basedir=/usr/local/mysql

#The following are mysql.server option-file options
#
# Option Name 								Desc 														Type
# basedir 						Path to MySQL installation dir 								Directory name
# datadir 						Path to MySQL data directory 									Directory name
# pid-file 						File in which server should write its process ID  		File name
# service-startup-timeout 	How long to wait for server startup 						Integer

#The following is explonations of the different parts:
#
#basedir=<dir name> # The path to the MySQL installation dir
#
#datadir=<dir name> # The path to the MySQL data dir
#
#pid-file=<file name> # The path name of the file in which the server should write its process ID.
#
## if this option is not given, it defaults to <host_name>.pid
# This file value overrides the mysqld_safe specified in [mysqld_safe] option file group
#
# For safety in terms of the server value starting designations, we can specify both
# in [mysqld_safe] and [mysqld] groups.

# service-startup-timeout=<seconds>
#
# How many seconds to wait for confirmation of server startup.
# If the server does not start within said limit, mysql.server exits with an error.
# Defaults to 900.
#
# Negative is forever (no timeout), 0 is to not wait at all.

#The following is related to mysqld_multi - which is to manage multiple MySQL servers

#The mysqld_multi is designed to handle/listen to different connections on different Unix sockets files 
# and TCP/IP ports.

#The mysqld_multi searches for groups that are called [mysqldN] in my.cnf
#
# Or in the file named by the --defaults-file option
#
#N refers to the group number, to which can also be represented as GNR.
#It can be any positive integer.

#Each respective numeral represents a server/connection - they have their own values
#
#To invoke mysqld_multi - we can use the following syntax:
#
# mysqld_multi [options] {start|stop|reload|report} [GNR[, GNR] ...]

#If no list exists - mysqld_multi performs the operation for all servers in the option file.
#
#We can perform more specific numerals in terms of listing of gnr's, operations and listing of options

#Some examples of utilization of starting multiple servers, groupings etc:
#
# mysqld_multi start 17 #Just starts nr 17
#
# mysqld_multi stop 8, 10-13 #8, 10,11,12,13
#
# mysqld_multi --example #more examples

#The search order for option files are as follows:
#
# --no-defaults - no option files read
#
# --defaults-file=<file name> - onl the named file is read

# Beyond this standard prio is taken, incl. --defaults-extra-file=<file name>

#Option files read are searched for [mysqld_multi] and [mysqldN] option groups.
#
# The [mysqld_multi] can be used for options to mysqld_multi itself

# The [mysqldN] groups can be used for options passed to specific mysqld instances.

# The [mysqld] or [mysqld_safe] groups can be used for common options read by all instances of mysqld or
# mysqld_safe.

# We can specify a --defaults-file=<file name> option to use a different config file for that instance
# To which the sourceo f [mysqld] or [mysqld_safe] is redirected to this file.

# The following options are what pertain to mysqld_multi:
#
# --help - Displays a help message and exits
#
# --example - Display a sample option file
#
# --log=<file name> - Specify the name of the log file. If hte file exists, log output is appended to it.
#
# --mysqladmin=<prog name> - the mysqladmin binary to be used to stop servers
#
# --mysqld=<prog name> - The mysqld binary to be used. We can specify mysqld_safe for this option.
# if we do - we can include mysqld or ledir in the corresponding [mysqldN] option group.
#
# These options are to indicate the name of the server that mysqld_safe should start and the path
# name of the dir where the server is located.
#
# For instance:
#
# [mysqld38]
# mysqld = mysqld-debug
# ledir = /opt/local/mysql/libexec

# --no-log - Print log info to stdout rather than the log file. By default, it goes to log.

# --password=<password> - The PW of the MySQL acc to use when invoking mysqladmin. Non-optional, for this program.

# --silent - Silent mode, no warnings

# --tcp-ip - Connect to each MySQL server through the TCP/IP port instead of the Unix socket file.
# (If a socket file is missing, the server might still be running, but accessible only through the TCP/IP port)
#
# By default, the connections are made through the Unix socket file. Affects stop and report operations.

# --user=<user name> - User name of the MySQL acc to use when invoking mysqladmin

# --verbose - Verbose mode

# --version - Version info and exit

#NOTE: Use seperate dirs when splintering with mysqld servers.
#
# Make sure of clearance of reading/writing of each file dir.
#
#Splintering does not give performance increasing in terms of the threading pooling

#We also have to make sure that privs to SHUTDOWN is given, and that we have the same connection params for all
#parts involved. 

#Showcasing of targetting and giving privs to each resp. server:
#
# mysql -u root -S /tmp/mysql sock -p #Will prompt for pw
# CREATE USER 'name_to_be_given_to_multi_admin'@'your_server' IDENTIFIED BY 'multipass'
#
# GRANT SHUTDOWN ON *.* TO 'name_to_be_given_to_multi_admin'@'your_server'
#
# The above, is shorthand for giving shutdown privleges on all fronts in terms of the given user account 
#
# The above must be repeated for every mysqld server.
# We must also have multi_admin rights from where we connect with mysqld_multi

# The respective socket files in terms of Unix and TCP/IP port must be different for every mysqld.
#
# If the host has multiple network addresses, we can use --bind-address to cause different servers
# to listen to different interfaces

# The --pid-file option is important for if we use mysqld_safe to start mysqld (for example, --mysqld=<mysqld_safe>
# We need to have a seperate pid file for every respective mysqld.

# The advantage of using mysqld_safe instead of mysqld is that mysqld_safe monitors its mysqld process,
# allowing us to have restarts in case of kill signals (kill -9) or segmentation faults.

#To be allowed to use --user for mysqld, we have to run the mysqld_multi as root
#Designating options in the option file, does not matter.

# if we try to run mysqld whilst not root, we get a warning and it's run under our own Unix acc

#The following is an example of having a option file to use with mysqld_multi:

# The order of the mysqld programs are started or stopped depends on the order in the opt file
# The sequence need not be unbroken 

# [mysqld_multi] #The base mysqld_multi structure
# mysqld 		= /usr/local/mysql/bin/mysqld_safe
# mysqladmin 	= /usr/local/mysql/bin/mysqladmin
# user 			= multi_admin
# password 		= my_password

# [mysqld2] #The splinters
# socket 		= /tmp/mysql.sock2
# port 			= 3307
# pid-file 		= /usr/local/mysql/data2/hostname.pid2
# datadir 		= /usr/local/mysql/data2
# language 		= /usr/local/mysql/share/mysql/english
# user 			= unix_user1

# [mysqld3]
# mysqld 		= /path/to/mysqld_safe
# ledir 			= /path/to/mysqld-binary/
# mysqladmin 	= /path/to/mysqladmin
# socket 		= /tmp/mysql.sock3
# port 			= 3308
# pid-file 		= /usr/local/mysql/data3/hostname.pid3
# datadir 		= /usr/local/mysql/data3
# language 		= /usr/local/mysql/share/mysql/swedish
# user 			= unix_user2

# [mysqld4]
# socket 		= /tmp/mysql.sock4
# port 			= 3309
# pid-file 		= /usr/local/mysql/data4/hostname.pid4
# datadir 		= /usr/local/mysql/data4
# language 		= /usr/local/mysql/share/mysql/estonia
# user 			= some_user_5

# [mysqld6]
# socket 		= /tmp/mysql.sock6
# port 			= 3311
# pid-file 		= /usr/local/mysql/data6/hostname.pid6
# datadir 		= /usr/local/mysql/data6
# language 		= /usr/local/mysql/share/mysql/japanese
# user 			= unix_user4

#The next section covers MySQL installation related things, akin to:
# comp_err, ssl_rsa, tzinfo_to_sql, mysql_upgrade etc.

#comp_err:

# Creates the errmsg.sys file that is used by mysqld to determine the error message to display
# for different error codes.

# comp_err normally is run automatically when MySQL is built. It compiles the errmsg.sys file
# from the text file located at sql/share/errmsg-utf8.txt in the MySQL source distr.

# It also generates mysqld_error.h, mysqld_ername.h and sql_state.h header files

# To invoke comp_err:

# comp_err [options]

# Supports the following options:

# --help, -? - Displays a help message and exit

# --charset=<dir name>, -C dir_name - The char set directory. The default is ../sql/share/charsets

# --debug=<debug options>, -# <debug options> - Write a debug log. 
# A typical debug_options string is d:t:O, <file name>
# the default is:
# d:t:O, /tmp/comp_err.trace

# --debug-info, -T - Print debug info when the program exits

# --header file=<file name>, -H <file_name> - name of the error header file. 
# defaults to: mysqld_error.h

# --in file=<file name>, -F <file_name> - The name of the input file.
# defaults to: ../sql/share/errmsg-utf8.txt

# --name file=<file name>, -N <file_name> - The name of the error name file.
# Defaults to: mysqld_ername.h

# --out dir=<dir name>, -D <dir name> - Name of output base dir
# Defaults to: ../sql/share/

# --out file=<file name>, -O <file name> - Name of the output file
# Defaults to: errmsg.sys

# --statefile=<file name>, -S <file_name> - Name of the SQLSTATE header file.
# Defaults to: sql_state.h

# --version, -V #Displays version info and exits

# mysql_secure_installation:
#
# Allows us to set pw for root accs, remove root accs outside of localhost, remove anon users, remove the test DB
# (The test DB can be accessed by anon users/all users) - we can also remove permits of dbs with name that starts with
# test_

# Base usage:
# mysql_secure_installation

# Doing this, will prompt for an action.

# We can utilize validate_password to check PW strength.

# Showcasing of using cmd line and options files to connect:
#
# mysql_secure_installation --host::1 --port=3307

#The following options can be defined by cmd line or in option file groups of:
# [mysql_secure_installation] 
# [client]

#The options of the mysql_secure_installation are as follows:
#
# FORMAT 													DESC
#
# --defaults-extra-file 				Read named option file in addition to usual option files
# --defaults-file 						Read only named option file
# --defaults-group-suffix 				Option group suffix value
# --help 									Display help messages n exit
# --host 									Host to connect to (IP address or host name)
# --no-defaults 							Read no option files
# --password 								Accepted but ignored. Prompt occurs regardless
# --port 									TCP/IP port number for connection
# --print-defaults 						Print default options
#
# --protocol 								Connection protocol to use
# --socket 									For connections to localhost, the Unix socket file to use
# --ssl-ca 									File that contains list of trusted SSL Certs Auths
# --ssl-capath 							Dir that contains trusted SSL Cert Auth cert files
# --ssl-cert 								File that contains X.509 certificate
# --ssl-cipher 							List of permitted ciphers for connection encryption
#
# --ssl-crl 								File that contains cert revocation list files
# --ssl-crlpath 							Dir that contains cert revocation list files
# --ssl-fips-mode 						Whether to enable FIPS mode on the client side
#
# --ssl-key 								file that contains X.509 key
# --tls-version 							Protocols permitted for encrypted connections
# --use-default 							Execute with no user interactivity
# --user 									MySQL user name to use when connecting to the server

# Further explaining of subsections:
#
# --help, -? - Display a help message and exit
# --defaults-extra-file=<file name> - Reads this option file after the global option file, but before the user option file.
# --defaults-file=<file name> - use only the given option file. If the file does not exist or is inaccessible, errors occur.
# 										  Pathing is: relative (default), full on explicit designation
# --defaults-group-suffix=<str> - Additional groupings to read in terms of suffix regex designation (i.e, all of the defaults + suffix matches)
# --host=<host_name>, -h <host_name> - Connect to the MySQL Server on the given host.
#
# --no-defaults - Do not read any option files. If program startup fails due to reading unknown options from an option file, --no-defaults can be used to
# prevent them from being read.
#
# As per usual, if .mylogin.cnf exists - it is read, regardless of options.

# --password=<password>, -p <password> - The option is accepted but ignored. mysql_secure_installation always prompts for PW.
# --port=<port num>, -P <port_num> - TCP/IP port to use for the connection

# --print-defaults - Print the program name and all options that it gets from option files
# --protocol={TCP|SOCKET|PIPE|MEMORY} - The connection protocol to use for connecting to the server.
# --socket=<path>, -S <path> - What Unix socket/Windows pipe to use when connecting to localhost.
# --ssl* - Connect using SSL, implies need to specify SSL keys and certs.

# --ssl-fips-mode={OFF|ON|STRICT} - Controls whether to enable FIPS mode on the client side.
# Denotes what cryptographic operations are permitted - not actually used to establish encrypted connections.

# OFF - Disables FIPS mode.
# ON - Enables FIPS mode.
# STRICT - Enable "strict" FIPS mode.

# If the OpenSSL FIPS Object Module is not available, the onl permitted value is OFF.
# Attempting to ordane ON or STRICT, causes warning at startup, resorting to non-FIPS mode.

# --tls-version=<protocol list> - Protocols permitted by the client for encrypted connections. The value is a comma-separated list
# containg one or more protocol names.
#
# The protocols used depend on the SSL lib used to compile MySQL.

# --use-default - Execute noninteractively. Can be used for unattended installation operations

# --user=<user name>, -u <user_name> - MySQL user name when connecting to the server.

#Next section covers: mysql_ssl_rsa_setup - Creating SSL/RSA files
#
# creates the SSL certificate and key files and RSA key-pair files required to support secure
# connections using SSL and secure password exchange using RSA over unencrypted connections,
# if those files are missing.
#
# Can also be used to create new SSL files if existing ones have expired.
#
# Note, these forms of certs are self-signed - i.e, not safe. This is more about the principle of creation/usage,
# not the factual gain of security in terms of usage.
#
# To invoke mysql_ssl_rsa_setup:
#
# mysql_ssl_rsa_setup [options]
#
# The typical options are --datadir to specify where to create the files, and --verbose to see the openssl commands
# that mysql_ssl_rsa_setup executes.
#
# mysql_ssl_rsa_setup attempts to create SSL and RSA files using a default set of file names. It works as follows:
#
# > checks for the openssl binary at the locations specified by the PATH env var.
# > If not found - nothing happens.
#
# If openssl is present, mysql_ssl_rsa_setup looks for default SSL and RSA files in the MySQL data dir specified
# by the --datadir option or the compiled-in data dir if the --datadir option is not given.
#
# > Checks the data dir for SSL files with the following names:
# ca.pem
# server-cert.pem
# server-key.pem
#
# > If any of the above exist, no SSL files are created. Otherwise, openssl is invoked to create them, for a total of:
#
# ca.pem 			#Self-signed CA cert
# ca-key.pem 		#CA private key
# server-cert.pem #Server cert
# server-key.pem 	#Server private key
# client-cert.pem #Client cert
# client-key.pem 	#Client private key
#
# > Checks data dir for RSA files with the following names:
#
# private_key.pem 	#Private member of private/public key pair
# public_key.pem 		#Public member of private/public key pair

# If any of the above is present, mysql_ssl_rsa_setup creates no RSA files.
# Otherwise, invokes openSSL to create them.
#
# The files enable secure PW exchange using RSA over unencrypted connections for
# accounts authenticated by the sha256_password or caching_sha2_password plugin

# When starting the MySQL Server, it automatically uses the SSL files created by mysql_ssl_rsa_setup
# to enable SSL if no explicit SSL options are given other than --ssl (possibly also --ssl-cipher)
#
# If we prefer to designate the files explicitly, invoke the clients with the --ssl-ca, --ssl-cert and
# --ssl-key options to name the ca.pem, client-cert.pem and client-key.pem files, respectively
#
# The server also automatically uses the RSA files created by mysql_ssl_rsa_setup to enable RSA, if none are explicitly given
#
# If the server has activated SSL, the client uses SSL by default for the connection.
#
# Also, to circumvent the read/write permission problems in terms of locations of Certs,
# due to that the initialized data dir permissions is restricted to the System account that runs the server.
#
# To make the files available, copy them to a dir that is readable (but not writable) by clients:
#
# For local clients, the MySQL install is assumed, thus, we can use a relative path in terms of implied referal in copying:
#
# cp ca.pem client-cert.pem client-key.pem
#
# For remote clients, we distribute the files using a secure channel to ensure they are not tampered with.
#
# If the SSL files have expired - we can use mysql_ssl_rsa_setup to create new ones:
#
# > Stop the server
# > Rename or remove the existing SSL files. You may wish to make a backup of them first.
# (RSA's do not expire)
# > Run mysql_ssl_rsa_setup with the --datadir option to specify where to create the new files.
# >Restart the server

# mysql_ssl_rsa_setup supports the following CMD line options - can be specified on the CMD line or 
# in the [mysql_ssl_rsa_setup] and [mysqld] groups of an option file.

# Options for mysql_ssl_rsa_setup :
#
# FORMAT 			DESC
# --datadir 		Path to data directory
# --help 			Display help messagee and exit
# --suffix 			Suffix for X.509 cert Common Name attribute
# --uid 				Name of effective user to use for file permissions
# --verbose 		Verbose mode
# --version 		Display version info and exit

# Further explonation of the commands:
#
# --help, ? - Display a help message and exit
# --datadir=<dir name> - The path to the directory that mysql_ssl_rsa_setup should check for default SSL and RSA files and in
# which it should create files if they are missing. 
#
# Defaults to compiled-in data dir
#
# --suffix=<str> - Suffix of the common name attribute in X.509 certs. The suffix value is limit to 17 chars.
# The default is based on the MySQL version number.
#
# --uid=<name>, -v - The name of the user who should be the owner of any created files. The value is a user name,
# not a numeric user ID. 
#
# In case this is absent, files created by mysql_ssl_rsa_setup are owned by the user who executes it. This option is 
# valid only if you execute the program as root on a system that supports the chown() system call.
#
# --verbose, -v - Verbose mode. Tells about if it skipped SSL, RSA file creation and openssl commands being run.
#
# --version, -V - Display version info and exit.

#Next covers mysql_tzinfo_to_sql - The time Zone tables
#
# Loads the time zone tables in the mysql db. It is used on systems that have a zoneinfo DB (set of files that describe time zones)
#
# Examples of such OS's: Linux, FreeBSD, Solaris, and OS X. One likely location for these is the /usr/share/zoneinfo dir
# (/usr/share/lib/zoneinfo on Solaris).
#
# mysql_tzinfo_to_sql can be invoked several ways:
# mysql_tzinfo_to_sql <tz_dir>
# mysql_tzinfo_to_sql <tz_file> <tz_name>
# mysql_tzinfo_to_sql --leap <tz_file>

#Exampel of invocation:
# mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql #Pipe the output to mysql from the zoneinfo dir path name, access mysql with root user

# mysql_tzinfo_to_sql reads the systems time zone files and generates SQL statements from them. mysql processes them to load the time zone tables.
# 
# The second syntax, loads a single time zone file <tz_file> that corresponds to a time zone name tz_name:
#
# mysql_tzinfo_to_sql <tz_file> <tz_name> | mysql -u root mysql
#
# If we need to account for leap seconds, use the third syntax noted in the above ordering.

#To account for the newly initialized data and to circumvent previously cached time zone data 
# we have to restart the server.

#Next up, is mysql_upgrade

#mysql_upgrade is a utility in terms of integrating updates to tables and capacities in terms of between versionings

#If mysql_upgrade finds that a table has a possible incompability - it performs a table check and, if issues are found
#attempts a table repair.

#The mysql_upgrade runs updating in terms of the MySQL tables

#The base initialization of command is:

#mysql_upgrade [options]

#After we have run mysql_upgrade - we need to stop and restart it.

#If we have multiple MySQL servers running - we can invoke mysql_upgrade with connection parameters
#as can be showcased:
#
# mysql_upgrade --protocol=tcp -P 3306 [other_options]
# mysql_upgrade --protocol=tcp -P 3307 [other_options]
# mysql_upgrade --protocol=tcp -P 3308 [other_options]

#In terms of running on localhost on Unix, the --protocol=tcp options forces a connection
#using TCP/IP rather than the Unix socket file

#NOTE: In case of disabled_storage_engines sys var set to disable certain storage engines (for instance, MyISAM)
#mysql_upgrade might fail as follows:
#
# mysql_upgrade: [ERROR] 3161: Storage engine MyISAM is disabled (Table creation is disallowed)
#
# To handle it, restart the server with disabled_storage_engines disabled.
# We can then run mysql_upgrade successfully. 
#
# After that, restart the server with disabled_storage_engines set to its original value

#mysql_upgrade runs a version comparison in terms of a file named mysql_upgrade_info in the data dir.
#
#This is used to quickly check whether all tables have been checked for this release so that
#table-checking is skipped.
#
#To ignore this file, run --force

#Unless we invoked with --skip-sys-schema - then mysql_upgrade installs the sys schema and upgrades it.
#
# However, if there exists one and has no version view - we have to rename it/remove it and then
#run the upgrade.

#If we wish, we can upgrade specific individual tables with ALTER TABLE ... UPGRADE PARTITIONING

#mysql upgrade can fail to upgrade due to expired PWs, which we can reset with the following:

#mysql -u root -p #Then reset the PW with alter user
#ALTER USER USER() IDENTIFIED BY 'root-password';

#Run the mysql_upgrade again after having exited:
#mysql_upgrade [options]

#The following options are the ones that mysql_upgrade supports
#
# They are found in [mysql_upgrade] and [client]groups of an option file.
#
# FORMAT 																		DESC
# --bind-address 					Use specified network interface to connect to MySQL Server
# --character-sets-dir 			Directory where character sets are installed
# --compress 						Compress all information sent between client and server
#
# --debug 							Write debugging log
# --debug-check 					Print debugging information when program exits
# --debug-info 					Print debugging information, memory and CPU statistics when program exits
# --default-auth 					Authentication plugin to use
# --default-character-set 		Specify default character set
# --defaults-extra-file 		Read named option file in addition to usual option files
#
# --defaults-file 				Read only named option file
# --defaults-group-suffix 		Option group suffix value
# --force 							Force execution even if mysql_upgrade has already been executed for current version of MySQL
# --get-server-public-key 		Request RSA public key from server
#
# --help 							display help messages and exit
# --host 							Connect to MySQL server on given host
# --login-path 					Read login path options from .mylogin.cnf
# --max-allowed-packet 			Maximum packet length to send or recieve from server
#
# --net-buffer-length 			Buffer size for TCP/IP and socket communication
# --no-defaults 					Read no option files
# --password 						Password to use when connecting to server
# --pipe 							On Windows, connect to server using named pipe
# --plugin-dir 					Directory where plugins are installed
#
# --port 							TCP/IP port number for connection
# --print-defaults 				Print default options
# --protocol 						Connection protocol to use
# --server-public-key-path 	Path name to file containing RSA public key
#
# --shared-memory-base-name 	The name of shared memory to use for shared-memory connections
# --skip-sys-schema 				Do not install or upgrade the sys schema
# --socket 							For connections to localhost, the Unix socket file to use
# --ssl-ca 							File that contains list of trusted SSL Certificate Authorities
# --ssl-capath 					Directory that contains trusted SSL Certificate Authority certificate files
#
# --ssl-cert 						File that contains X.509 certificate
# --ssl-cipher 					List of permitted ciphers for connection encryption
# --ssl-crl 						File that contains certificate revocation lists
# --ssl-crlpath 					Directory that contains certificate revocation list files
#
# --ssl-fips-mode 				Whether to enable FIPS mode on the client side
# --ssl-key 						File that contains X.509 key
# --ssl-mode 						Security state of connection to server
# --tls-version 					Protocols permitted for encrypted connections
#
# --upgrade-system-tables 		Update only system tables, not data
# --user 							MySQL user name to use when connecting to server
# --verbose 						Verbose mode
# --version-check 				Check for proper server version
# --write-binlog 					Write all statements to binary log

#The showcasing in terms of Options and what they do:
#
# --help - Display a short help message and exit
# --basedir=<dir name> - The path to the MySQL installation dir
# --bind-address=<ip address> - On a computer having multiple network interfaces, use this to decide which one to use for connecting
# --character-sets-dir=<dir name> - The dir where char sets are installed
#
# --compress, -C - Compress all info between client and server, if both support compression.
# --debug[=<debug options>], -# [<debug options>] - Writes a debug log. Typical: d:t:o, <file_name>
# Defaults to: d:t:O,/tmp/mysql_upgrade.trace
# --debug-check - Print some debugging information when the program exits
# --debug-info, -T - Print debugging information and memory and CPU usage stats when the program exits
#
# --default-auth=<plugin> - A hint about the client-side auth plugin to use.
# --default-character-set=<charset name> - Use <charset_name> as the default character set
# --defaults-extra-file=<file name> - Read this option file after the global option file but (on Unix) before the user option file.
# --defaults-file=<file name> - Use only the given option file. If the file does not exist or inaccessible - error is raised. Path is relative if given as such, Full otherwise.
#
# --defaults-group-suffix=<str> - Read not only the usual option groups, but also groups with usual names and suffix of <str>.
#   										 Normally reads [client] and [mysql_upgrade] - treats str input as suffix regex.
# --force - 							 Ignore the mysql_upgrade_info and force run
#
# --get-server-public-key 			 Requests the public key required for the RSA key-pair PW exchange.
# 											 Applies to the clients whom authenticate with caching_sha2_password auth plugin.
# 											 In case of usage of this plugin - the server does not send the public key lest requested.
# 											 The option is ignored for accs that do not authenticate with said plugin.
# 					
# 											 If a secure connection is rendered to the server, RSA exchange is not used - as such, this command is then ignored.
#
# 											 If --server-public-key-path=<file name> is given and specifies a valid public key file, it takes precedence over
# 											 --get-server-public-key
#
# --host=<host name>, 				 Connect to the MySQL on the given host. 
# -h <host name>
# --login-path=<name> 				 Read options from the named login path in the .mylogin.cnf login path file.
# 											 The login path is the group option that specifies which MySQL server to connect to
# 											 and which acc to authenticate as.
#
# --max-allowed-packet=<value> 	 The max size of the buffer for client/server communication. Defaults to 24MB. Min is 2kb, max is 2Gb.
# --net-buffer-length=<value> 	 The initial size of the buffer for client/server comm. Default is 1MB - 1kb. The min 4KB, max 16MB
# --no-defaults 						 Do not read any option files. Prevents exception raising failures
# 							
# 											 Exception is .mylogin.cnf file, if it exists - is read in all cases (reading PW from File)
# --password[=<password>], 		  
# -p [<password>]	  					 PW. -p prevents space after input, --password without value prompts for it
#
# --pipe, -W 							 On Windows, connect to the server using a named pipe. Applies only if the server supports named-pipe connections
# --plugin-dir=<dir name> 			 The dir in which to look for plugins. Use if --default-auth is used for an Auth plugin, but it is not found.
# --port=<port num>, 
# -P <port_num> 						 The TCP/IP port number to use for the connection.
# --print-defaults 					 Print the program name and all options that it gets from option files.
#
# --protocol=
#{TCP|SOCKET|PIPE|MEMORY} 			 The connection protocol to use for connecting to the server. 
# 											 It is useful when the other connection parameters normally would cause
# 											 a protocol to be used other than the one you want.
#
# --server-public-key-path=       The path name to a file containing a client-side copy of the public key required by the server
# <file name> 							 for RSA key pair-based PW exchange. The file must be in PEM format.
#              
# 											 This option applies to clients that authenticate with the sha256_password or caching_sha2_password
# 											 authentication plugin. This is ignored for accounts that do not authenticate with one of those plugins.
#
# 											 It is also ignored if RSA-based pw exchange is not used, as is the case when the client connects to
# 											 the server using safe connections (SSL)
#
# 											 If --server-public-key-path=<file name> is given and specifies a valid public key file, it takes
# 											 precedence over --get-server-public-key.
#
# 											 For Sha256_pw, this applies only if we used SSL to build the MySQL.
#
# --shared-memory-base-name= 		 On Windows, the shared memory name to use, for connections made using shared memory to a local server.
# <name> 								 Defaults to MySQL. Case-sensitive. Must startup with --shared-memory to enable shared-memory connections.
#
# --skip-sys-schema 					 mysql_upgrade installs the sys schema if it is not installed, and upgrades it to the current version otherwise.
#                                 This suppresses that behavior.
#
# --socket=<path>, -S <path> 		 Connections to localhost, Unix socket file to use - Windows, the named pipe to use.
# --ssl* 								 Options that begin with --ssl specify whether to connect the server using SSL and indicate where to 
# 											 find SSL keys and certs.
#
# --ssl-fips-mode={OFF|ON|STRICT} Controls whether to enable FIPS mode on the client side. The --ssl-fips-mode option differs from other
# 										    --ssl-xxx options in that it is not used to establish encrypted connections, but rather to affect which
# 											 cryptographic operations are permitted.
#
# 											 The options are: OFF (Disable FIPS mode), ON (Enable FIPS mode), STRICT (Enable "strict" FIPS mode).
# 											 
# 											 If the OpenSSL FIPS Object Module is not available, the only permitted value is OFF. 
# 											 Going against it, produces a warning and starts in non-FIPS mode.
#
# --tls-version=<protocol list> 	 The protocols permitted by the client for encrypted connections. The value is a comma-separated list 
# 											 containing one or more protocol names. 
# 												
#                                 The protocols that can be named for this option depend on the SSL library used to compile MySQL.
#
# --upgrade-system-tables, -s 	 Upgrade only the system tables, do not upgrade the data.
#
# --user=<user name>,  				 The MySQL user name to use when connecting to the server. defaults to root.
# -u <user_name>
# 
# --verbose 							 Verbose mode
#
# --version-check, -k 				 Check the version of the server to which mysql_upgrade is connecting to verify that it is
# 											 the same as the version for which mysql_upgrade was built.
# 
# 											 This option is enabled by default - to disable it, use --skip-version-check
#
# --write-binlog 						 By default, binary logging by mysql_upgrade is disabled. Invoke the program with 
# 											 --write-binlog if you want its actions to be written to  the binary log.
#
# 											 When the server is running with global transactions identifiers (GTIDs) enabled
# 										    (gtid mode=ON), do not enable binary logging by mysql_upgrade.
#
# The next section covers mysql on the cmd line
#
# If used interactively, query results are presented in an ASCII table format.
# If not, it's in a tab-separated format.
#
# If there is not enough memory, use --quick. Forces usage of one row at a time instead of 
# buffering in memory and retrieving everything. Utilizes mysql_use_result() C api in the client/server lib,
# instead of the mysql_store_result()
#
# Examples of simple usages:
#
# mysql <db_name>
#
# mysql --user=<user_name> --password <db_name> #Causes prompt
#
# Ctrl+C stops current query or partial inputs.
# To finish a query on the cmd line, end with ;, \g or \G and Enter
#
# We can execute SQL statements in a script file (batch file) as follows:
# mysql db_name < script sql > output tab
#
# On Unix, the client logs statements executed interactively to a history file.
#
# The next section covers mysql options for the Cmd line or [client] and [mysql] groups of an option file.
#
# FORMAT 								DESC
# --auto-rehash 						Enable automatic rehashing
# --auto-vertical-output 			Enable automatic vertical result set display
# --batch 								Do not use history file
# --binary-as-hex 					Display binary values in hexadecimal notation
#
# --binary-mode 						Disable \r\n - to - \n translation and treatment of \0 as end-of-query
# --bind-address 						Use specified network interface to connect to the MySQL Server
# --character-sets-dir 				Directory where character sets are installed
# --column-names 						Write column names in results
# --column-type-info 				Display result set metadata
# --comments 							Whether to retain or strip comments in statements sent to the server
#
# --compress 							Compress all information sent between client and server
# --connect-expired-password 		Indicate to server that client can handle expired-password sandbox mode
# --connect_timeout 					Number of seconds before connection timeout
# --database 							The database to use
# --debug 								Write debugging log; supported only if MySQL was built with debugging support
#
# --debug-check 						Print debugging information when program exits
# --debug-info 						Print debugging information, memory and CPU stats when the program exits
# --default-auth 						Authentication plugin to use
# --default-character-set 			Specify default character set
#
# --defaults-extra-file 			Read named option file in addition to usual option files
# --defaults-file 					Read only named option file
# --defaults-group-suffix 			Option group suffix value
# --delimiter 							Set the statement delimiter
# --enable-cleartext-plugin 		Enable cleartext authentication plugin
#
# --execute 							Execute the statement and quit
# --force 								Continue even if an SQL error occurs
# --get-server-public-key 			Request RSA public key from server
# --help 								Display help message and exit
# --histignore 						Patterns specifying which statements to ignore for logging
# --host 								Connect to MySQL server on given host
#
# --html 								Produce HTML output
# --ignore-spaces 					Ignore spaces after function names
# --init-command 						SQL statement to execute after connecting
# --line-numbers 						Write line numbers for errors
# --local-infile 						Enable or disable for LOCAL capability for LOAD DATA INFILE
#
# --login-path 						Read login path options from .mylogin.cnf
# --max_allowed_packet 				Maximum packet length to send to or recieve from the server
# --max_join_size 					The automatic limit for rows in a join when using --safe-updates
# --named-commands 					Enable named mysql commands
# --net_buffer_length 				Buffer size for TCP/IP and socket communication
#
# --no-auto-rehash 					Disable automatic rehashing
# --no-beep 							Do not beep when errors occur
# --no-defaults 						Read no option files
# --one-database 						Ignore statements except those for the default DB named on the cmd line
# --pager 								Use the given command for paging query output
# --password 							Password to use when connecting to server
#
# --pipe 								On Windows, connect to server using named pipe
# --plugin-dir 						Directory where plugins are installed
# --port 								TCP/IP port number for connection
# --print-defaults 					Print default options
# --prompt 								Set the prompt to the specified format
# --protocol 							Connection protocol to use
#
# --quick 								Do not cache each query result
# --raw 									Write column values without escape conversion
# --reconnect 							If the connection to the server is lost, automatically try to reconnect
# --i-am-a-dummy, --safe-updates Allow only UPDATE and DELETE statements that specify key values
#
# --select_limit 						The automatic limit for SELECT statements when using --safe-updates
# --server-public-key-path 		Path name to file containing RSA public key
# --shared-memory-base-name 		The name of shared memory to use for shared-memory connections
# --show-warnings 					Show warnings after each statement if there are any
# --sigint-ignore 					Ignore SIGINT signals (typically the result of typing Ctrl+C)
#
# --silent 								Silent mode
# --skip-auto-rehash 				Disable automatic rehashing
# --skip-column-names 				Do not write column names in results
# --skip-line-numbers 				Skip line numbers for errors
# --skip-named-commands 			Disable named mysql commands
# --skip-pager 						Disable paging
#
# --skip-reconnect 					Disable reconnecting
# --socket 								For connections to localhost, the Unix socket file or Windows named pipe to use
# --ssl-ca 								File that contains list of trusted SSL Cert Auths
# --ssl-capath 						Dir that contains trusted SSL Cert Auth cert files
# --ssl-cert 							File that contains X.509 cert
#
# --ssl-cipher 						List of permitted ciphers for connection encryption
# --ssl-crl 							File that contains certificate revocation lists
# --ssl-crlpath 						Directory that contains cert revocation list files
# --ssl-fips-mode 					Whether to enable FIPS mode on the client side
# --ssl-key 							File that contains X.509 key
# --ssl-mode 							Security state of connection to server
#
# --syslog 								Log interactive statements to syslog
# --table 								Display output in tabular format
# --tee 									Append a copy of output to named file
# --tls-version 						Protocols permitted for encrypted connections
# --unbuffered 						Flush the buffer after each query
#
# --user 								MySQL user name to use when connecting to server
# --verbose 							Verbose mode
# --version 							Display version information and exit
# --vertical 							Print query output rows vertically (one line per column value)
# --wait 								If the connection cannot be established, wait and retry instead of aborting
# --xml 									Produce XML output
#

# Further explonation of the interactions:
#
# --help, -? - Display a help message and exit
# --auto-rehash - Enable automatic rehashing. On by default, enables database, table and column name completion.
# 					   Use --disable-auto-rehash to disable rehashing. That causes mysql to start faster, but you must
# 						issue the rehash command or its \# shortcut if you want to use name completion.
#
# 						To cycle through completion of names, write the first part and press Tab to cycle Regex matchings.
# 						Does not trigger unless there is a default DB.
#
# 						The above requires a MySQL client that is compiled with the readline library. Typically, the readline
# 						library is not available on Windows.
#
# --auto-vertical-output - Cause result sets to be displayed vertically if they are too wide for the current window, and using
# 									normal tabular format otherwise. (Applies to statements terminated by ; or \G)
#
# --batch, -B 				 - Print results using tab as the column separator, with each row on a new line. With this option, mysql
# 									does not use the history file.
#
# 									Batch mode results in nontabular output format and escaping of special characters. Escaping may be
# 									disabled by using raw mode; see the description for the --raw option.
#
# --binary-as-hex 			When this option is given, mysql displays binary data using hexadecimal notation (0x value).
# 									This occurs whether the overall output display format is tabular, vertical, HTML or XML.
#
# --binary-mode 				This option helps when processing mysqlbinlog output that may contain BLOB values.
# 									By default, mysql translates \r\n in statement strings to \n and interprets \0 as
# 									the statement terminator.
#
# 									This option disables both features. Also disables all mysql commands except charset and delimiter
# 									in non-interactive mode (for input piped to mysql or loaded using the source command)
#
# --bind-address= 			On a computer having multiple network interfaces, use this option to select which interface to use
#   <ip address> 				for connecting to the MySQL server.
#
# --character-sets-dir= 	The directory where char sets are installed.
#   <dir name>
#
# --column-names 				Write column names in results
#
# --column-type-info 		Display result sets metadata
#
# --comments, -c 				Whether to strip or preserve comments in statements sent to the server. (DEPRECATED)
# 									Defaults to --skip-comments (strip comments), enable with --comments (preserves them)
# 
# 									Note: Commands and queries directed towards the server - are just hints. Server yields final say.
# 														
# --compress, -C 				Compress all information sent between client and the server if both support compression.
#
# --connect-expired- 		Indicate to the server that the client can handle sandbox mode if the account used to connect has an expired PW.
#   password 					Can be useful for noninteractive invocations of mysql because normally the server disconnects noninteractive clients
# 									that attempt to connect using an account with an expired PW.
#
# --database=<db_name>, 	The DB to use. Useful primarily in a option file.
#   -D <db_name>
#
# --debug[=<debug_options>], Write a debugging tool. A typical <debug_options> string is d:t:o, <file_name>. Defaults to d:t:o, /tmp/mysql.trace
#   -# [<debug options>]     Available only if MySQL was built using WITH_DEBUG.
#
# 									  MySQL release binaries are NOT designed for this option.
#
# --debug-check 				Print some debugging information when the program exits.
#
# --debug-info, -T 			Print debugging information and memory and CPU usage stats when the program exits.
#
# --default-auth=<plugin>  A hint about the client-side auth plugin to use
#
# --default-character-set  Use charset_name as the default char set for the client and connection.
# =<charset_name> 			This option can be useful if the OS uses one char set and the mysql client by default
# 									uses another.
#
# 									In this case, output may be formatted incorrectly. You can usually fix such issues by using
# 									this option to force the client to use the system char set instead.
#
# --defaults-extra-file 	Read this option file after the global option file but (On Unix) before user option files.
# =<file name> 				If not found/inaccessible, error raised. Relative if not full path specified, explicit otherwise.
#
# --defaults-file 			Use only the given option file. .mylogin.cnf is still read. If not found/inaccessible, error raised.
# =<file name>
#
# --defaults-group-suffix  Read not only the usual option groups, but also groups with the usual names and a suffix of <str>.
# =<str> 						Regex triggering of suffix sorting, basically.
#
# --delimiter=<str> 			Set the statement delimiter. The default is the semicolon char (;)
#
# --disable-named-commands Disable named commands. Use the \* format only, or use named commands only at the beginning of a line ending with (;)
# 									Starts with this option enabled by default.
#
# 								   Even with this option, long-format commands still work from the first line.
#
#--enable-cleartext-plugin Enables the mysql_clear_password cleartext authentication plugin.
#
# --execute=<statement>, 	Execute the statement and quit. The default output format is like that produced with --batch.
#  -e <statement>
# 									If this option is done, the history file is not used by MySQL.
#
# --force, -f 					Continue even if an error is raised
#
# --get-server-public-key  Request from the server the public key required for RSA key pair-based PW exchange.
# 									This option applies to clients that authenticate with the caching_sha2_password authentication plugin.
#
# 									For that plugin, the server does not send the public key unless requested. This option is
# 									ignored for accounts that do not authenticate with that plugin. 
#
# 									It is also ignored if RSA-based PW exchange is not used, as is the case when the client connects
# 									to the server using a secure connection.
#
# 									If --server-public-key-path=<file name> is given and specifies a valid public key file,
# 									it takes precedence over --get-server-public-key
#
# --histignore 				Colon-seperated list of one or more patterns specifying statements to ignore for logging purposes.
# 									The patterns are added to the default pattern list ("*IDENTIFIED*:*PASSWORD*")
#
# 									The value specified for this option affects logging of statements written to the history file, and
# 									to syslog if the --syslog option is given.
#
# --host=<host name>, 		Connect to the MySQL server on the given host.
# -h <host name>
#
# --html, -H 					Produce HTML Output
#
# --ignore-spaces, -i 		Ignore spaces after function names. The effect of this is described in the discussion
# 									for the IGNORE_SPACE SQL mode
#
# --init-command=<str> 		SQL statements to execute after connecting to the server. If auto-reconnect is enabled, the statement
# 									is executed again after reconnection occurs.
#
# --line-numbers 				Write line numbers for errors. Disable this with --skip-line-numbers.
#
# --local-infile[={0|1}] 	Enable or disable LOCAL capability for LOAD DATA INFILE. For mysql, this capability is disabled by default.
# 									With no value, the option enables LOCAL. This option may be given as --local-infile=0 or --local-infile=1 
# 									to explicitly disable or enable LOCAL.
#
# 									Enabling local data loading also requires that the server permits it.
#
# --login-path=<name> 		Read options from the named login path in the .mylogin.cnf login path file.
# 									A "login path" is an option group containing options that specify which MySQL server
# 									to connect to and which account to authenticate as.
#
# 									To create or modify a login path file, use the mysql_config_editor.
#
# --named-commands, -G 		Enables named mysql commands. Long-format commands are permitted, not just short-format commands.
# 									For example, quit and \q both are recognized. Use --skip-named-commands to disable named commands.
#
# --no-auto-rehash, -A 		This has the same effect as --skip-auto-rehash.
#
# --no-beep, -b 				No beep @ errors
#
# --no-defaults 				Do not read any option files. Prevents error causing files. 
# 									.mylogin.cnf is read regardless.
#
# --one-database, -o 		Ignore statements except those that occur while the default DB is the one named on the CMD line.
# 									This option is rudimentary and should be used with care.
#
# 									Statement filtering is based only on USE statements.
#
# 									Initially, mysql executes statements in the input because specifying a DB <db_name>
# 									on the CMD line is the equivalent to inserting USE <db name> at the beginning of the input.
#
# 									Then, for each USE statement encountered, mysql accepts or rejects following statements depending on
# 									whether the database named is the one on the CMD line.
#
# 									The content of hte statement is irrelevant.
#
# 									Assuming the following Query:
# 									DELETE FROM db2.t2; USE db2; DROP TABLE db1.t1; CREATE TABLE db1.t1 (i INT); USE db1;
# 									INSERT INTO t1 (i) VALUES(1); CREATE TABLE db2.t1 (j INT);
#
# 									If the command to process it, is: 
# 									mysql --force --one-database db1, mysql
#
# 									The DELETE statement is executed because the default database is db1, even though the statement
# 									names a table in a different database.
#
# 									The DROP TABLE and CREATE TABLE statements are not executed because the default database is not db1,
# 									even though the statements named a table in db1
#
# 									The INSERT and CREATE TABLE statements are executed because the default database is db1, even though
# 									the CREATE TABLE statement names a table in a different database.
#
# --pager[=<command>] 		Use the given command for paging query output. If the command is omitted, the default pager is the value of
# 									your PAGER environment variable.
#
# 									Valid pagers are less, more, car [> filename>], and so forth. This option works only on Unix and only
# 									in interactive mode. To disable it - use --skip-pager.
#
# --password=[=<password>] The password to use when connecting to the server. If you use the short option form (-p), you cannot
#   ,-p[<password>]        have a space between the option and the PW.
#
# 									If you omit the PW value following the --password or -p option on the command line, mysql prompts for one.
#
# --pipe, -W 					On Windows, connect to the server using a named pipe. This option applies only if the server supports named-pipe
# 									connections.
#
# --plugin-dir=<dir name> 	The dir in which to look for plugins. Specify this option if the --default-auth option is used to specify an authentication
# 									plugin but mysql does not find it.
#
# --port=<port num>, 		The TCP/IP port number to use for the connection. 
#  -P <port_num>
#
# --print-defaults 			Print the program name and all options that it gets from option files.
#
# --prompt=<format str> 	Set the prompt to the specified format. The default is mysql>. The special sequences
# 									that the prompt can contain are described later.
#
# --protocol={TCP|SOCKET 	The connection protocol to use for connecting to the server. It is useful when the other connection
#   |PIPE|MEMORY} 			parameters normally would cause a protocol to be used other than the one you want.
#
# --quick, -q 					Do not cache each query result, print each row as it is received. This may slow down the server if the output is suspended.
# 									With this option, mysql does not use the history file.
#
# --raw, -r 					For tabular output, the "boxing" around columns enables one column value to be distinguished from another.
# 									For nontabular output (such as is produced in batch mode or when the --batch or --silent option is given),
# 									special chars are escaped in the output so they can be identified easily.
#
# 									Newline, tab, NUL, and backslash are written as \n, \t, \0, and \\. The --raw disables the char escaping.
#
# Showcasing of differences:
# mysql> SELECT CHAR(92); #Select ORD numeral 92 char, which is \
# +-------------------+
# | 		CHAR(92) 	 | 
# +-------------------+
# | 			\ 			 |
# +-------------------+
#
# mysql -s #Silent mode
# mysql> SELECT CHAR(92); #Select ORD numeral 92, silent, escape enabled
# CHAR(92)
# \\
#
# mysql -s -r #Silent raw mode
# mysql> SELECT CHAR(92);
# CHAR(92)
# \
#
# --reconnect
# If the connection to the server is lost, automatically try to reconnect. A single reconnect attempt 
# is made each time the connection is lost.
#
# To surpress the reconnection behavior, use --skip-reconnect.
#
# --safe-updates, --i-am-a-dummy, -U
# Permit only those UPDATE and DELETE statements that specify which rows to modify by using key values.
# If you have set this option in an option file, you can override it by using --safe-updates on
# on the cmd line.
#
# --secure-auth
# This option was removed in MySQL 8.0.3
#
# --server-public-key-path=<file name>
# The path name to a file containing a client-side copy of the public key required by the server for RSA key pair-based password exchange.
# The file must be in PEM format.
# This option applies to clients that authenticate with the sha256_password or caching_sha2_password authentication plugin.
# 
# This option is ignored for accounts that do not authenticate with one of those plugins. It is also ignored for instances of
# RSA-based PW exchange not being used.
#
# If --server-public-key-path=<file name> is defined and is valid, it takes precedence over --get-server-public-key
# It is only available if MySQL was built using OpenSSL.
#
# --shared-memory-base-name=<name>
# On Windows, the shared-memory name to use, for connections made using shared memory to a local server.
# The default is MySQL. Case-sensitive.
# 
# Must start with --shared-memory to enable shared-memory connections.
#
# --show-warnings
# Causes warnings to be shown after each statement if there are any. This option applies to interactive and batch mode.
#
# --sigint-ignore
# Ignore SIGINT signals (typically the result of using CTRL+C)
#
# --silent, -s
# Silent mode. Produces less output. 
# This option can be given multiple times to produce less and less output.
# Results in nontabular output format and escaping of special characters. 
# Escaping may be disabled by using
# raw mode. (--raw)
# 
# --skip-column-names, -N
# Do not write column names in results
#
# --skip-line-numbers, -L
# Do not write line numbers for errors. Useful when you want to compare result files that include error messages.
#
# --socket=<path>, -S <path> 
# For connections to localhost, the Unix socket file to use - or on Windows, the name of the named pipe to use.
#
# --ssl*
# Options that begin with --ssl specify whether to connect to the server using SSL and indicate where to find
# SSL keys and certs.
#
# --ssl-fips-mode={OFF|ON|STRICT}
# Controls whether to enable FIPS mode on the client side.
# The --ssl-fips-mode option differs from other --ssl-xxx options in that it is not used to
# establish encrypted connections, but rather to affect which cryptographic ops are permitted.
#
# These --ssl-fips-mode values are permitted:
# 		OFF - disables fips mode
# 		ON  - enables fips mode
#     STRICT - Enable "strict" FIPS mode.
#
# If the OpenSSL FIPS Object Module is not available, the only permitted value for --ssl-fips-mode is OFF.
# In this case, setting --ssl-fips-mode to ON or STRICT - produces a warning, and defaults to OFF.
#
# --syslog, -j
# Causes mysql to send interactive statements to the system logging facility.
# On Unix, this is syslog; on Windows, it is the Windows Event Log.
#
# The destination where logged messages appear is system dependent. 
#
# On Linux, the destination is often the /var/log/messages file.
#
# a sample of output generated on Linux by using --syslog.
# Each line is usually one line:
#
# Mar 	7 12:39:25 myhost MysqlClient[20824]:
# 		SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23,
# 		DB_SERVER:'127.0.0.1', DB:'--', QUERY:'USE test;'
# Mar 	7 12:39:28 myhost MysqlClient[20824]:
# 		SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23,
# 		DB_SERVER:'127.0.0.1', DB:'test', QUERY:'SHOW TABLES;'
#
# --table, -t
# Display output in table format. This is the default for interactive use, but can be used to produce
# table output in batch mode.
#
# --tee=<file name>
# Append a copy of output to the given file. This option works only in interactive mode.
#
# --tls-version=<protocol list>
# The protocols permitted by the client for encrypted connections. 
# The value is a comma-separated list containing one or more protocol names.
# The protocols that can be named for this option depend on the SSL lib used to compile MySQL.
# 
# --unbuffered, -n
# Flush the buffer after each query.
#
# --user=<user name>, -u <user_name>
# The MySQL user name to use when connecting to the server.
#
# --verbose, -v
# Verbose mode. Can be given multiple times.
#
# --version, -V
# Version info and exit
#
# --vertical, -E
# Print query output rows vertically (one line per column value).
# Without this option, you can specify vertical output for individual statements
# by terminating them with \G.
#
# --wait, -w
# If the connection cannot be established, wait and retry insteaed of aborting.
#
# --xml, -X
# Produce XML output
# <field name="column_name">NULL</field>
#
# The output when --xml is used with mysql matches that of mysqldump --xml.
#
# An example of output is as follows:
#
# mysql --xml -uroot -e "SHOW VARIABLES LIKE 'version%'"
# <?xml version="1.0"?>
# 
# <resultset statement="SHOW VARIABLES LIKE 'version%'" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
# <row>
# <field name="Variable_name">version</field>
# <field name="Value">5.0.40-debug</field>
# </row>
#
# <row>
# <field name="Variable_name">version_comment</field>
# <field name="Value">Source distribution</field>
# </row>
#
# <row>
# <field name="Variable_name">version_compile_machine</field>
# <field name="Value">i686</field>
# </row>
#
# <row>
# <field name="Variable_name">version_compile_os</field>
# <field name="Value">suse-linux-gnu</field>
# </row>
# </resultset>
#
# We can also set the following variables by using --<var_name>=<value>
# 
# connect_timeout - Number of seconds before connection timeout (Defaults to 0)
# max_allowed_packet - Maximum size of the buffer for client/server communication. defaults to 16MB, max is 1GB.
# max_join_size - Automatic limit for rows in a join when using --safe-update. Defaults 1 million
# net_buffer_length - The buffer size for TCP/IP and socket communication (default is 16KB)
# select_limit - Automatic limit for SELECT statements when using --safe-updates. (default is 1000)

#The following section covers mysql commands:
#
# Showcasing of the results of writing help on the cmd line
#
# mysql> help
#
# List of all MySQL commands:
# Note that all text commands must be first on line and end with ';'
# ? 			(\?) 	Synonym for 'help'.
# clear 		(\c)  Clear the current input statement.
# connect  	(\r) 	Reconnect to the server. Optional arguments are db and host.
# delimiter (\d) 	Set statement delimiter
# edit 		(\e) 	Edit command with $EDITOR.
# ego 		(\G) 	Send command to mysql server, display result vertically
#
# exit 		(\q) 	Exit mysql. same as quit.
# go 			(\g) 	Send command to mysql server
# help 		(\h) 	Display this help
# nopager 	(\n) 	Disable pager, print to stdout
# notee 		(\t) 	Do not write into outfile
#
# pager 		(\P) 	Set PAGER [to_pager]. Print the query results via PAGER
# print 		(\p) 	Print current command
# prompt 	(\R) 	Change your mysql prompt
# quit 		(\q) 	Quit mysql
# 
# rehash 	(\#) 	Rebuild completion hash
# source 	(\.) 	Execute an SQL script file. Takes a file name as an argument.
# status 	(\s) 	Get status information from the server.
# system 	(\!) 	Execute a system shell command
#
# tee 		(\T) 	Set outfile [to_outfile]. Append everything into given outfile.
# use 		(\u) 	Use another database. Takes database name as argument
# charset 	(\C) 	Switch to another charset. Might be needed for processing binlog with multi-byte charsets.
#
# warnings 	(\W) 	Show warnings after every statement
# nowarning (\w) 	Don't show warnings after every statement.
# resetconnection(\x) 	show warnings after every statement
#
# If MySQL is invoked with the --binary-mode option, all mysql commands are disabled except charset and delimiter
# in non-interactive mode (for input piped to mysql or loaded using the source command)
#
# Each command has both a long and short form. Long is not case-sensitive. Short is.
#
# Long can be followed by an optional semicolon terminator, but short should not.
#
# We are not allowed to use multiple line comments with /* ... */
#
# the following showcases the different commands in terms of long format and short format
#
# help [arg], \h [arg], \? [arg], ? [arg]
# 
# Displays a help message listing the available mysql commands.
# The arg input to help, acts as regex match in server-side help commands.
#
# charset <charset_name>, \C <charset_name>
#
# Changes the default character set and issues a SET_NAMES statement. This enables the character set to remain
# synchronized on the client and server if mysql is run with auto-reconnect enabled (not recommended),
# as the specified char set is used for reconnects.
# 
# clear, \c
# Clear the current input. Use this if you change your mind about executing the statement that you are entering.
#
# connect [<db_name> <host_name>]], \r [<db name> <host name>]]
#
# Reconnect to the server. The optional database name and host name arguments may be given to specify the default
# DB or the host where the server is running.
#
# If omitted, the current values are used.
#
# delimiter <str>, \d <str>
# 
# Change the string that mysql interprets as the separator between SQL statements. The default is the semicolon char (;)
#
# The delimiter string can be specified as an unquoted or quoted argument on the delimiter command line. Quoting can be done
# with either single quote ('), double quote (") or backtick (`) chars.
#
# To include a quote within a quoted string, either quote the string with a different quote character or
# escape the quote with a (\) char.
#
# Backslash should be avoided outside of quoted strings because it is the escape character for MySQL.
# For an unquoted argument, the delimiter is read up to the first space or end of line.
#
# For a quoted argument, the delimiter is read up to the matching quote on the line.
#
# mysql interprets instances of the delimiter string as a statement delimiter anywhere it occurs, except within
# quoted strings.
#
# Be careful about defining a delimiter that might occur within other words. For example, if you define
# the delimiter as X, you will be unable to use the word <INDEX> in statements.
#
# Mysql interprets this as <INDE> followed by the delimiter X.
#
# When the delimiter recognized by mysql is set to something other than the default of ;,
# instances of that character are sent to the server without interpretation.
#
# However, the server itself still interprets ; as a statement delimiter and process statements
# accordingly. This behavior on the server side comes into play for multiple-statement execution,
# for parsing the body of stored procedures and functions, triggers and events.
#
# edit, \e
# Edit the current input statement. mysql checks the values of the EDITOR and VISUAL env variables
# to determine which editor to use.
#
# The default editor is vi if neither variable is set.
#
# The edit command works only in Unix.
#
# ego, \G
# Send the current statement to the server to be executed and display the result using vertical format.
#
# exit, \q
# Exit mysql
#
# go, \g
# Send the current statement to the server to be executed.
#
# nopager, \n
# Disable output paging. See the description for pager.
#
# The nopager command works only in Unix.
#
# notee, \t
# Disable output copying to the tee file. See the description for tee.
#
# nowarning, \w
# Disable display of warnings after each statement.
#
# pager [<command>], \P [<command>]
# Enable output paging. By using the --pager option when you invoke mysql, it is possible to browse or search query
# results in interactive mode with Unix programs such as less, more, or any other similar program.
#
# If you specify no value for the option, mysql checks the value of the PAGER environment variable and sets the
# pager to that. Pager functionality works only in interactive mode.
#
# Output paging can be enabled interactively with the pager command and disabled with nopager.
# The command takes an optional argument; if given, the paging program is set to that.
#
# With no arg, the pager is set to the pager that was set on the command line, or stdout if no pager was specified.
#
# Output paging works only in Unix because it uses the popen() function, which does not exist on Windows.
# For Windows, the tee option can be used instead to save query output, although it is not as convenient
# as pager for browsing output in some situations.
#
# print, \p
# Print the current input statement without executing it
#
# prompt [<str>], \R [<str>]
# Reconfigure the mysql prompt to the given string. The special character sequences that can be used in the
# prompt are described later in this section.
#
# If you specify the prompt command with no argument, mysql resets the prompt to the default of mysql>.
#
# quit, \q
# Exit mysql.
#
# rehash, \#
# Rebuild the completion hash that enables database, table and column name completion while you are entering statements.
# (See the description for the --auto-rehash option)
#
# resetconnection, \x
# Reset the connection to clear the session state.
#
# Resetting a connection has effects similar to mysql_change_user() or an auto-reconnect except that
# the connection is not closed and reopened, and re-authentication is not done.
#
# Showcasing of example:
#
# SELECT LAST_INSERT_ID(3); #gives 3
# SELECT LAST_INSERT_ID(); #gives 3, still set to this
# resetconnection; #Resets defaults
# SELECT LAST_INSERT_ID(); #Gives 0, reset has been done

# source <file_name>, \. <file_name>
# Read the named file and execute the statements contained therein. On Windows, you can specify
# path name separators as / or \\.
#
# Quote characters are taken as part of the file name itself. For best results, the name should not
# include space characters.
#
# status, \s
# Provide status information about the connection and the server you are using.
# If you are running in --safe-updates mode, status also prints the values for the
# mysql variables that affect your queries.
#
# system <command>, \! <command>
# Execute the given command using your default cmd interpreter.
# Works only on Unix.
#
# tee [<file_name>], \T [<file_name>]
# By using the --tee option when you invoke mysql, you can log statements and their output.
# All the data displayed on the screen is appended into a given file.
#
# This can be very useful for debugging purposes also. mysql flushes results to the file
# after each statement, just before it prints its next prompt.
#
# Tee functionality works only in interactive mode.
#
# You can enable this feature interactively with the tee command. Without a parameter,
# the previous file is used. The tee file can be disabled with the notee command.
#
# Executing tee again re-enables logging.
#
# use <db_name>, \u <db_name>
# Use <db_name> as the default DB.
#
# warnings, \W
# Enable display of warnings after each statement (if there are any)
#
# Tips about the pager command:
# 
# Example of writing only to a file:
# pager cat > /tmp/log.txt
#
# We can also pass options with the pager
# pager less -n -i -S
#
# Example of piping to different files mounted on two different systems, still displaying to screen using less:
# pager cat | tee /dr1/tmp/res.txt \
# 			| tee /dr2/tmp/res2.txt | less -n -i -S
#
# We can also combine the tee and pager functions. Have a tee file enabled and pager set to less, and you are
# able to browse the results using the less program and still have everything appended into a file the same time.
#
# The difference between the Unix tee used with the pager command and the mysql built-in tee command is that the
# built-in tee works even if you do not have the Unix tee available.
#
# The built-in tee logs everything that is printed on the screen, where as the Unix tee used with pager
# does not log equal amounts.
#
# Additionally, tee file logging can be turned on and off interactively from within mysql. This is useful
# when you want to log some queries to a file, but not others.
#
# The prompt command reconfigures the default mysql> prompt. The string for defining the prompt can
# contain the following special sequences:
#
# Option 					Desc
# \C 				The current connection identifier
# \c 				A counter that increments for each statement you issue
# \D 				The full current date
# \d 				The default database
# \h 				The server host
#
# \l 				The current delimiter
# \m 				Minutes of the current time
# \n 				A newline char
# \O 				The current month in three letter format (Jan, Feb, etc.)
# 
# \o 				The current month in numeric format
# \P 				am/pm
# \p 				The current TCP/IP port or socket file
# \R 				The current time, in 24-hour military time(0-23)
#
# \r 				The current time, standard 12-hour time (1-12)
# \S 				Semicolon
# \s 				Seconds of the current time
# \t 				A tab char
#
# \U 				Your full user_name@host_name acc name
# \u 				Your user name
# \v 				The server version
# \w 				The current dat of the week in three letter format (Mon, Tue, etc.)
#
# \Y 				The current year, four digits
# \y 				The current year, two digits
# \_ 				A space
# \ 				A space (space after the \)
# \' 				Single quote
# \" 				Double quote
# \\ 				A literal backslash char
#
# \x 				x, for any "x" not listed above

# There is a number of ways we can change the prompt:
#
# An environment variable: 
# export MYSQL_PS1="(\u@\h) [\d]> "
#
# A cmd line option. Can set the prompt with --prompt on the cmd line:
# mysql --prompt="(\u@\h) [\d]> "
# (user@host) [database]>
#
# Using an option file. Prompt option in the [mysql] group, such as /etc/my.cnf or the .my.cnf in the home dir:
# [mysql]
# prompt(\\u@\\h) [\\d]>\\_
#
# \\ is used in the option file for explicit escaping.
#
# We can also set it interactively, by using prompt or \R

# prompt (\u@\h) [\d]>\_
# PROMPT set to '(\u@\h) [\d]>\_'
# (user@host) [database]>
# (user@host) [database]> prompt
# Returning to default PROMPT of mysql>
# mysql>
#
#The next part covers Mysql logging
#
# The mysql client can do these types of logging for statements executed interactively:
#
# Unix -> mysql writes the statements to a history file. By default, the file is named .mysql_history in your home dir.
# To specify a different file, set the value of the MYSQL_HISTFILE env variable.
#
# On all platforms, if the --syslog option is given, mysql writes the statements to the system logging facility.
# Unix -> syslog
# Windows -> Windows Event Log
#
# the destination where logged messages appear is system dependent. On Linux, the destination is often
# the /var/log/messages file.
#
# How Logging Occurs:
#
# For each enabled logging destination - statement logging occurs as is shown:
# 
# Statements are logged only when executed interactively. Statements are noninteractive, for example, when read
# from a file or a pipe. It is also possible to suppress statement logging by using the --batch or --execute option.
#
# Statements are ignored and not logged if they match any pattern in the "ignore" list. Shown later.
#
# mysql logs each nonignored, nonempty statement line individually.
#
# If a nonignored statement spans multiple lines (not including the terminating delimiter), mysql concatenates
# the lines to form the complete statement, maps newlines to spaces and then logs the result + a delimiter.
#
# For instance:
# SELECT
# 	'Today is'
#  ,
#  CURDATE()
#  ;
#Gives:
# SELECT 'Today is' , CURDATE();

# mysql ignores for logging purposes statements that match any pattern in the "ignore" list.
# By default, the pattern list is "*IDENTIFIED*:*PASSWORD*", to ignore statements that identify as PWs.

# Two chars are significant in terms of the regex pattern: ? (Single wildcard char), * any sequence of zero or more chars.
#
# To specify additional patterns, use the --histignore option or set the MYSQL_HISTIGNORE env variable.
# Option value takes precedence.
#
# The value should be a colon separated list, which are appended to the default list.
# An example of a pattern delimiter defined on the cmd line, to ignore UPDATE and DELETE:
#
# mysql --histignore="*UPDATE*:*DELETE*"
#
# If we do not wish to maintain a hist file, cause it can contain PW info, we can remove it and do one of hte following:
#
# Set the MYSQL_HISTFILE env var to /dev/null - put in one of the shell startup files, causing deployment of options at the startup.
# 
# Create .mysql_history as a symbolic link to /dev/null; - only needs to be done once:
#
# ln -s /dev/null $HOME/.mysql_history
#
# syslog Logging Characeristics
#
# If the --syslog option is given, mysql writes interactive statements to the system logging facility.
# Message logging has the following characteristics:
#
# Logging occurs at the "informational" level. 
# This corresponds to the LOG_INFO priority for syslog on Unix/Linux syslog capability and to 
# EVENTLOG_INFORMATION_TYPE for the Windows Event Log.
#
# Message size limit is 1024 bytes.
#
# Messages consists of the identifier MysqlClient followed by these values:
#
# SYSTEM_USER - The system user name (login name) or -- if the user is unknown.
# 
# MYSQL_USER  - The MySQL user name (specified with the --user option) or -- if the user is unknown.
#
# CONNECTION_ID - The client connection identifier. This is the same as the CONNECTION_ID() function value within the session.
#
# DB_SERVER - The server host or -- if the host is unknown
# 
# DB - The default database or -- if no DB has been selected.
#
# QUERY - The text of the logged statement.
#
# Example of output generated on Linux by using --syslog. Formatted for readability, each logged message takes a single line:
#
# Mar 	7 12:39:25 myhost 	MysqlClient[20824]:
# 		SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23,
# 		DB_SERVER:'127.0.0.1', DB:'--', QUERY:'USE test;'
# Mar 	7 12:39:28 myhost 	MysqlClient[20824]:
# 		SYSTEM_USER:'oscar', MYSQL_USER:'my_oscar', CONNECTION_ID:23,
# 		DB_SERVER:'127.0.0.1', DB:'test', QUERY:'SHOW TABLES;'

# The following section covers the mysql Server-Side Help
#
# mysql> help <search_string>
#
# For this operation to work, the help tables in the mysql database must be initialized with the help topic information.
#
# If no value is found, an error is thrown.
#
# To see a list of categories:
# 
# mysql> help contents
# You asked for help about help category: "Contents"
# For more info, type 'help <item>', where <item> is one of the following categories:
#
# Account management
# Administration
# Data Definition
# Data Manipulation
# Data Types
# Functions
# Functions and Modifiers for Use with GROUP BY
# Geographic Features
# Language Structure
# 
# Plugins
# Storage Engines
# Stored Routines
# Table Maintenance
# Transactions
# Triggers
#
# If multiple tags coincide, a list of the topics are shown:
#
# help logs
# Many help items for your request exist
# To make a more specific request, please type 'help <item>'
# where <item> is one of the following topics:
# 		SHOW
# 		SHOW BINARY LOGS
# 		SHOW ENGINE
# 		SHOW LOGS
#
# Use a topic as the search string to see the help entry for that topic:
#
# mysql> help show binary logs
# Name: 'SHOW BINARY LOGS'
# Description:
# Syntax:
# SHOW BINARY LOGS
# SHOW MASTER LOGS
#
# Lists the binary log files on the server. This statement is used as
# part of the procedure described in [purge-binary-logs] - which shows how to determine which logs can be purged.
#
# mysql> SHOW BINARY LOGS;
# +------------------------------+
# | Log_name 	    |   File_size |
# +------------------------------+
# | binlog.000015  |    724935   |
# | binlog.000016  | 	733481 	|
# +------------------------------+

# The search string can contain the wildcard char % and _. These have the same meaning as for pattern-matching,
# such as % as any sequencing following but yields designated part in respective parting before that
#
# EXAMPLE% Finds anything that begins with EXAMPLE
# %EXAMPLE Finds anything that ends with EXAMPLE
#
# mysql> HELP rep%
# Many help items for your request exist
# To make a more specific request, please type 'help <item>'
# where <item> is one of the following topics:
#
# REPAIR TABLE
# REPEAT FUNCTION
# REPEAT LOOP
# REPLACE
# REPLACE FUNCTION
#
# The following showcases of how to execute SQL statements from a Text File
#
# Typically the mysql client is interactively done as:
#
# shell> mysql <db_name>
#
# However - we can run a script from a file, unto a DB - as follows:
#
# shell> mysql <db_name> < <text_file>
#
# If we include a USE <db_name> statement as the first statement in the file, no DB name must be done on the cmd line.
#
# If mysql is already running - we can execute a SQL script file using the source command or \. command:
#
# mysql> source <file_name>
# mysql> \ <file_name>

# mysql ignores Unicode byte order mark (BOM) chars at the beginning of input files.

#MYSQL tips section next

# Input-Line Editing
#
# mysql supports input-line editing, which enables you to modify the current input line in place or recall previous input lines.
# For example, up/down arrows moves between previous entered lines.
#
# To change the set of key sequences permitted by a given input library, define key bindings in the library startup file.
# .editrc for libedit and .inputrc for readline
#
# in Libedit:
# CTRl+W - deletes everything before current cursor pos.
# CTRL+U - the entire line.
#
# in readline:
# Ctrl+W - deletes the word before the cursor
# CTRl+U - deletes everything before the current cursor pos.

# Unicode on Windows:
# provided through UTF-16LE APIs reading from and to the console.
# The mysql client for Windows is able to use these APIs.
# 
# The Windows installer creates an item in the MySQL menu named MySQL command line client - Unicode.
# This item invokes the mysql client with properties set to communicate through the console to
# the MySQL server using Unicode.
#
# Open the console window
# Go to console window properties - select font tab - choose Lucidia Console or some other compatible UNICODE font.
#
# This is called for, due to console windows start by default using a DOS raster font that is uncalled for Unicode.
#
# Execute mysql with --default-character-set=utf8 (or utf8mb4) option.
# It is nessecary because utf16le cannot be used as client char set, amongst others.
#
# With said changes, Windows will use the Windows API to communicate with the console using UTF-16LE,
# and communicate with the server using UTF-8.
#
# To avoid said steps each time we run mysql, we can create a shortcut that invokes mysql.exe
# The shortcut should set the console font to Lucida Console or some other compatible
# Unicode font, and pass the --default-character-set=utf8 to mysql.
#
# Alternatively, we have a shortcut for the console font - with the char set in the [mysql] group in a my.ini file:
# [mysql]
# default-character-set=utf8
#
# The following covers Displaying Query Results Vertically
# 
# Just end the query with \G instead of ;
# mysql> SELECT * FROM mails WHERE LENGTH(txt) < 300 LIMIT 300,1\G
# 
# ******************************* 1. row ****************************
# 
#   msg_nro: 3068
# 		 date: 2000-03-01 23:29:50
# time_zone: +0200
# mail_from: Monty
#     reply: monty@no.spam.com
#   mail_to: "Thimble Smith" <tim@no.spam.com>
# 	 	  sbj: UTF-8
# 		  txt: >>>>> "Thimble" == Thimble Smith Writes:
#
# Thimble> Hi, i think this is a good idea. Is anyone familiar 
# Thimble> with UTF-8 or Unicode? Otherwise, i'll put this on my
# Thimble> TODO list and see what happens.
#
# Yes, please do that
# 
# Regards,
# Monty
# 		 file: inbox-jani-1
# 		 hash: 190402944

# Using the --safe-updates Option
# 
# For beginners, a useful startup option is --safe-updates (or --i-am-a-dummy, which has the same effect).
# It is helpful for cases when you might have issued a DELETE FROM <tbl_name> statement, but if we forgot the Where part.
#
# By --safe-updates, we enforce key referal to commit to delete updates.
#
# The query sent upon startup is the following:
# 
# SET sql_safe_updates=1, sql_select_limit=1000, max_join_size=1mil
#
# The SET statement has the following effects:
#
# You are not permitted to execute an UPDATE or DELETE statement unless you specify a key constraint in the
# WHERE clause or provide a LIMIT clause (or both)
#
# Example:
#
# UPDATE <tbl_name> SET <not_key_column>=<val> WHERE <key_column>=<val>;
#
# UPDATE <tbl_name> SET <not_key_column>=<val> LIMIT 1;
#
# The server limits all large SELECT results to 1,000 rows unless the statement includes a LIMIT clause.
# 
# The server aborts multiple-table SELECT statements that probably need to examine more than 1 mil row combos.
#
# We can override the defaults by using --select_limit and --max_join_size options:
#
# mysql --safe-updates --select_limit=500 --max_join_size=10000
#
# Disabling mysql Auto-Reconnect
#
# If the mysql client loses its connection to the server while sending a statement, it immediately and automatically
# tries to reconnect once to the server and send the statement again.
#
# However, even if mysql succeeds in reconnecting, your first connection has ended and all your previous session objects/settings
# are lost.
#
# Temporary tables, the autocommit mode, user-defined vars and session vars.
#
# Any current transactions roll back. 
#
# An example of loss of designation:
#
# mysql> SET @a=1;
# mysql> INSERT INTO t VALUES(@a); #Gets error
#
# mysql> SELECT * FROM t; #a is now Null

#To terminate with an error, start mysql with --skip-reconnect

# The next section covers mysqladmin - Client to administer a MySQL server
#
# Invoked:
#
# mysqladmin [<options>] <command> [<command-arg>] [<command> [<command-arg>]] ...
#
# mysqladmin supports the following commands. Some of the commands take an argument following the cmd name:
#
# create <db_name> - creates a DB with <db_name>
# debug - Tell the server to write debug information to the error log. Connnected user must have SUPER privs.
# drop <db_name> - Delete the DB named <db_name> and all of its tables.
# extended-status - Display the server status vars and their values.
# flush-hosts - Flush all information in the host cache
#
# flush-logs [<log_type> ...] - Flush all logs. The mysqladmin flush-logs cmd permits optional log types to be given,
# to specify which logs to flush.
#
# Following the flush-logs command, you can provide a space-separated list of one or more of the following log types:
# binary, engine, error, general, relay, slow
#
# These correspond to the log types that can be specified for the <FLUSH LOGS> SQL statement.
#
# flush-privileges - Reload the grant tables (same as reload)
#
# flush-status - Clear status vars
#
# flush-tables - Flush all tables
#
# flush-threads - Flush the thread cache
#
# kill id, id, ... - Kill server threads. If multiple thread ID values are given, there must be no spaces in the list.
# 							To kill threads belonging to other users, the connected user must have the CONNECTION_ADMIN or SUPER privs.
#
# password <new_pw> - Sets a new PW. This changes the PW to <new_pw> for the account that you use with mysqladmin for connecting to the server.
# 							 Thus, the next time you invoke mysqladmin (or any other client program) using the same account, you need to specify the new PW.
#
# NOTE: Setting a pw using mysqladmin should be considered <insecure>. On some systems, your PW becomes visibile to system status programs such as 
# ps that may be invoked by other users to display cmd lines. MySQL clients typically overwrite the cmd-line pw argument with 0's during init seq.
#
# There is still a brief interval during which the value is visible. Also, on some systems this overwriting strategy is ineffective and the PW
# remains visible to ps.
#
# If the <new_pw> contains spaces or other chars that are special to your cmd line, you need to enclose it with ""
# On windows, be sure to use "" rather than '', '' are not stripped from the PW.
#
# Simply use config files for PWs.
#
# ping - Check whether the server is available. The return status from mysqladmin is 0 if the server is running, 1 if it is not.
# Even errors produce 0 - as it does not denote that the server is offline.
#
# processlist - Show a list of active server threads. This is the same as SHOW PROCESSLIST. If Verbose is given, the output is like that
# of SHOW FULL PROCESSLIST.

# reload - Reload the grant tables.
#
# refresh - Flush all tables and close and open log files.
#
# shutdown - Stop the server
#
# start-slave - Start replication on a slave server
#
# status - Display a short server status message
#
# stop-slave - Stop replication on a slave server
#
# variables - Display the server system vars and their values
#
# version - Display version info from the server
#
# All commands can be shortened to any unique prefix:
#
# mysqladmin proc stat #Prints ID, user, host, db, command, Time, State, Info
# #Also prints stats
#
# The mysqladmin status command result displays the following values:
# 
# Uptime - Number of seconds the MySQL server has been running
# Threads - Number of active threads (clients)
# Questions - The number of questions (queries) from clients since the server was started.
# Slow queries - Number of queries that have taken more than long query time seconds.
#
# Opens - The number of tables the server has opened
# Flush tables - The number of flush-*, refresh and reload commands the server has executed
# Open tables - Number of tables that currently are open

# If you execute mysqladmin shutdown when connecting to a local server using a Unix socket file, mysqladmin waits until
# the server's process ID file has been removed, to ensure that the server has stopped properly.
#
# The following options are supported in terms of mysqladmin - of which can be specified on the cmd line or in the [mysqladmin] and [client] groups of a option file.
#
# mysqladmin Options
#
# Format 									Desc
# --bind-address 							Use specified network interface to connect to MySQL Server
# --compress 								Compress all information sent between client and server
# --connect_timeout 						Number of seconds before connection timeout
# --count 									Number of iterations to make for repeated command execution
#
# --debug 									Write debugging log
# --debug-check 							Print debugging information when program exits
# --debug-info 							Print debugging information, memory and CPU stats when the program exits.
#
# --default-auth 							Authentication plugin to use.
# --default-character-set 				Specify default character set
# --defaults-extra-file 				Read named option file in addition to usual option files
# --defaults-file 						Read only named option file
#
# --defaults-group-suffix 				Option group suffix value
# --enable-cleartext-plugin 			Enable cleartext authentication plugin
# --force 									Continue even if an SQL error occurs
# --get-server-public-key 				Request RSA public key from server
# --help 									Display help message and exit
#
# --host 									Connect to MySQL Server on given host
# --login-path 							Read login path options from .mylogin.cnf
# --no-beep 								Do not beep when errors occur
# --no-defaults 							Read no option files
# --password 								Password to use when connecting to server
# --pipe 									On Windows, connect to server using named pipe
# --plugin-dir 							Directory where plugins are installed
#
# --port										TCP/IP port number for connection
# --print-defaults 						Print default options
# --protocol 								Connection protocol to use
# --relative 								Show the difference between the current and previous values when used with the --sleep option
# --secure-auth 							Do not send PWs to server in old formats (REMOVED)
# --server-public-key-path 			Path name to file containing RSA public key
#
# --shared-memory-base-name 			Name of the shared memory to use for shared-memory connections
# --show-warnings 						Show warnings after statement execution.
# --shutdown_timeout 					The maximum number of seconds to wait for server shutdown
# --silent 									Silent mode
# --sleep 									Execute commands repeatedly, sleeping for delay in between
# --socket 									For connections to localhost, the Unix socket file to use
# --ssl-ca 									File that contains list of trusted SSL Cert Auths
#
# --ssl-capath 							Directory that contains trusted SSL cert Auth cert files
# --ssl-cert 								File that contains X.509 cert
# --ssl-cipher 							List of permitted ciphers for connection encryption
# --ssl-crl 								File that contains cert revocation lists
#
# --ssl-crlpath 							Dir that contains cert revocation list files
# --ssl-fips-mode 						Whether to enable FIPS mode on the client side
# --ssl-key 								File that contains X.509 key
# --ssl-mode 								Security state of connection to server
# --tls-version 							Protocols permitted for encrypted connections
# --user 									MySQL user name to use when connecting to server
# --verbose 								Verbose mode
#
# --version 								Display version information and exit
# --vertical 								Print query output rows vertically (one line per column value)
# --wait 									If the connection cannot be established, wait and retry instead of aborting

# The following showcases short commands for some of the above of whom are listed:
#
# --help, -? - Display a help msg and exit
# --bind-address=<ip address> - A computer having multiple network interfaces, use this option to select which interface to use for connecting to the MySQL Server.
# --character-sets-dir=<dir name> - The dir where char sets are installed.
# --compress, -C - Compress all information sent between the client and server if both support compression.
# --count=<N>, -c <N> - The number of iterations to make for repeated command execution if the --sleep option is given.
# --debug[=<debug options>], -# [<debug_options>] - Write a debugging log. A typical <debug_options> string is d:t:o, <file_name>.
# 									     Defaults to d:t:o, /tmp/mysqladmin.trace
# --debug-check - Prints some debugging information when the program exits.
# --debug-info - Print debugging info, memory, CPU usage stats when the program exits.
# --default-auth=<plugin> - A hint about the client side auth to use.
#
# --default-character-set=<charset name> - Use <charset_name> as the default char set.
# --defaults-extra-file=<file name> - Read this option file after global, but before user option files on Unix.
# 												  If not found or not permissioned, error raised. Relative if relative, Absolute otherwise.
# --defaults-file=<file name> - Use only the given option file. If the file does not exist or is otherwise inaccessible, an error occurs.
# 										  relative if relative, full otherwise.
#
# 										  The exception is .mylogin.cnf
#
# --defaults-group-suffix=<str> - read also groups with suffix regex match to str.
# --enable-cleartext-plugin - Enables cleartext authentication plugin.
# --force, -f - Do not ask for confirmation for the drop <db_name> command. with several commands, Continue even if an error occurs.
# --get-server-public-key - Request RSA public key from server.
# --help - Display help message and exit
# --host - Connect to MySQL server on given host
# --login-path - Read login path options from .mylogin.cnf
#
# --no-beep - Do not beep when errors occur
# --no-defaults - Read no option files
# --password - Password to use when connecting to server
# --pipe - On Windows, connect to server using named pipe
# --plugin-dir - Directory where plugins are installed
# --port - TCP/IP port number for connection
# --print-defaults - Print default options
#
# --protocol - Connection protocol to use
# --relative - Show the difference between the current and previous values when used with the --sleep option
# --secure-auth - Do not send passwords to server in old format (REMOVED)
# --server-public-key-path - Path name to file containing RSA public key
# --shared-memory-base-name - The name of shared memory to use for shared-memory connections
#
# --show-warnings - Show warnings after statement execution
# --shutdown_timeout - The maximum number of seconds to wait for server shutdown
# --silent - Silent mode
# --sleep - Execute commands repeatedly, sleeping for delay seconds in between
# --socket - For connections to localhost, the Unix socket file to use
# --ssl-ca - File that contains list of trusted SSL Cert Auths
# --ssl-capath - Directory that contains trusted SSL Cert Auth cert files
# --ssl-cert - File that contains X.509 cert
#
# --ssl-cipher - List of permitted ciphers for connection encryption
# --ssl-crl - File that contains certificate revocation lists
# --ssl-crlpath - Dir that contains the cert revocation list files
# --ssl-fips-mode - Whether to enable FIPS modeon the client side
# --ssl-key - File that contains X.509 key
# --ssl-mode - Security state of connection to server
# --tls-version - Protocols permitted for encrypted connections
# --user - MySQL user name to use when connecting to server
#
# --verbose - Verbose mode
# --version - Display version information and exit
# --vertical - Print query output rows vertically (one line per column value)
# --wait - If the connection cannot be established, wait and retry instead of aborting

#Basically, a lot of these options in terms of shorthand are repeats - thus, i will omit them.

#Next up, is mysqlcheck 
#
# The mysqlcheck client performs table maintenance: checks, repairs, optimizes and analyzes tables.
#
# Each table is locked and therefore unavailable to other sessions while it is being processed, although for
# check ops, the table is locked with a READ lock only
#
# mysqlcheck must be used when the mysqld server is running, which means that you do not have to stop the server
# to perform table maintenance.
#
# mysqlcheck uses the SQL statements CHECK TABLE, REPAIR TABLE, ANALYZE TABLE and OPTIMIZE TABLE in a convenient way for
# the user. It determines which statements to use for the operation you want to perform, then sends the statements to 
# the server to be executed.
#
# Not all storage engines do not support all four maintenance operations.
#
# Note: We are wise to make backups in terms of tables - in case of error in file parsing
#
# The three general ways of invoking mysqlchecks:
#
# mysqlcheck [<options>] <db_name> [<tbl_name ...>]
# mysqlcheck [<options>] --databases <db_name> ...
# mysqlcheck [<options>] --all-databases
#
# If the tbl name option is ommitted, or --databases or --all-databases options are used - entire DBs are checked.
#
# mysqlcheck has a special feature compared to other client programs.
# The default behavior of checking tables (--check) can be changed by renaming the binary.
#
# If you want to have a tool that repairs tables by default, you should just make a copy of mysqlcheck 
# named mysqlrepair, or make a symbolic link to mysqlcheck named mysqlrepair.
#
# The following names can be used to change mysqlcheck default behavior
#
# Command 			Meaning
# mysqlrepair 		Default option is --repair
# mysqlanalyze 	Default option is --analyze
# mysqloptimize 	Default option is --optimize

# mysqlcheck supports the following options, which can be specified on the command file or in the
# [mysqlcheck] and [client] groups of an option file.
#
# Format 										Desc
# 
# --all-databases 		Check all tables in all DBs
# --all-in-1 				Execute a single statement for each DB that names all the tables from that DB
# --analyze 				Analyze the tables
# --auto-repair 			If a checked table is corrupted, automatially fix it
# --bind-address 			Use specified network interface to connect to MySQL Server
# --character-sets-dir 	Dir where char sets are installed
# --check 					Check the tables for errors
#
# --check-only-changed 	Check only tables that have changed since the last check
# --check-upgrade 		Invoke CHECK TABLE with the FOR UPGRADE option
# --compress 				Compress all information sent between client and server
# --databases 				Interpret all arguments as DB names
# --debug 					Write debugging log
# --debug-check 			Print debug info when program exits
# --debug-info 			Print debug info, memory and CPU stats @ exit
#
# --default-auth 			Authentication plugin to use
# --default-character-set 			Specify default char set
# --defaults-extra-file Read named option file in addition to usual option files
# --defaults-file 		Read only named option file
# --defaults-group-suffix 		Option group suffix value
# --enable-cleartext-plugin 	Enable cleartext auth plugin
# --extended 						Check and repair tables
# --fast 							Check only tables that have not been closed properly
# --force 							Continue even if an SQL error occurs
#
# --get-server-public-key 		Request RSA public key from server 		
# --help 							Display help message and exit
# --host 							Connect to MySQL server on given host
# --login-path 					Read login path options from .mylogin.cnf
# --medium-check 					Do a check that is faster than an --extended operation
# --no-defaults 					Read no option files
# --optimize 						Optimizes the tables
# --password 						Password to use when connecting to server
#
# --pipe 							On Windows, connect to server using named pipe
# --plugin-dir 					Dir where plugins are installed
# --port 							TCP/IP port number for connection
# --print-defaults 				Print default options
# --protocol 						Connection protocol to use
# --quick 							The fastest method of checking
#
# --repair 							Perform a repair that can fix almost anything except unique keys that are not unique
# --secure-auth 					Do not send PW to server in old format (REMOVED)
# --server-public-key-path 	Path name to file containing RSA public key
# --shared-memory-base-name 	Name of shared memory to use for shared-memory connections
# --silent 							Silent mode
# --skip-database 				Omit this database from performed operations
# --socket 							For connections to localhost, the Unix socket file to use
# --ssl-ca 							File that contains list of trusted SSL Cert Auths
#
# --ssl-capath 					Dir that contains trusted SSL Cert Auth cert files
# --ssl-cert 						File that contains X.509 cert
# --ssl-cipher 					List of permitted ciphers for connection encryption
# --ssl-crl 						File that contains cert revocation lists
# --ssl-crlpath 					Dir that contains cert revocation list files
# --ssl-fips-mode 				Whether to enable FIPS mode on the client side
#
# --ssl-key 						File that contains X.509 key
# --ssl-mode 						Security state of connection to server
# --tables 							Overrides the --database or -B option
# --tls-version 					Protocols permitted for encrypted connections
# --use-frm 						For repair operations on MyISAM tables
# --user 							MySQL user name to use when connecting to server
# --verbose 						Verbose mode
# --version 						Display version information and exit
# --write-binlog 					Log ANALYZE, OPTIMIZE, REPAIR statements to binary log, 
# 										--skip-write-binlog adds NO_WRITE_TO_BINLOG to these statements.
# 
# --help, -? - Displays a help message and exits
# --all-databases, -A - Check all tables in all databases. This is the same as using the --databases option and naming all the databases
# 								on the CMD line, except for the INFORMATION_SCHEMA and performance_schema DBs of whom are not checked.
#
# 								To check them, explicitly name them with the --databases option
#
# --all-in-1, -1 - Instead of issuing a statement for each table, execute a single statement for each DB that names all the tables from that DB to be processed.
# --analyze, -a - Analyzes the tables
# --auto-repair - If a checked table is corrupted, automatically fix it. Any necessary repairs are done after all the tables have been checked.
# --bind-address=<ip_address> - On a computer having multiple network interfaces, use this option to select which interface to use for connecting to the MySQL Server.
# --character-sets-dir=<dir name> - The dir where char sets are installed
#
# --check, -c - Check the tables for errors. This is the default operation.
# --check-only-changed, -C - Check only tables that have changed since the last check or that have not been closed properly.
# --check-upgrade, -g - invoke the CHECK_TABLE with the FOR UPGRADE option to check tables for incompabilities with the current version of the server.
# --compress - Compress all information sent between the client and the server if both support it.
# --databases, -B - Process all tables in the named databases. Normally, mysqlcheck treats the first name argument on the cmd line as a DB name
# 						  and any following names as table names. With this option, it treats all name args as DB names.
# --debug[=<debug_options>], -# [<debug_options>] - Write a debugging log. A typical debug_options string is d:t:o, <file_name>. Default is d:t:o
# --debug-check - Print some debug info when the program exits
# 
# --debug-info - Print debugging info, memory and CPU usage stats when the program exits.
# --default-character-set=<charset_name> - Use <charset_name> as default char set
# --defaults-extra-file=<file name> - Read this option file after the global option file, but on Unix, before hte user option file.
# 												  If not found or inaccessible, an error occurs. Interpreted as relative, lest declared full path.
# --defaults-file=<file name> - Use only the given option file. If the file does not exist or is otherwise inaccessible, an error occurs.
# 										  <file_name> is relative, lest explicit. Still reads .mylogin.cnf
#
# --defaults-group-suffix=<str> - Regex pattern against suffix inclusion in addition to default groupings.
#
# --extended, -e - If you are using this option to check tables, it ensures that they are 100% consistent but takes a long time.
# 						 If used in conjunction with repair - it may produce garbage as well.
#
# --default-auth=<plugin> - A hint about the client-side auth plugin to use.
#
# --enable-cleartext-plugin - Enable the <mysql_clear_password> cleartext auth plugin
#
# --fast, -F - Check only tables that have not been closed properly
#
# --force, -f - Continue even if an SQL error occurs.
#
# --get-server-public-key - Request from the server public key required for RSA key pair-based PW exchange.
# 									 Applies to clients that authenticate with the <caching_sha2_password> auth plugin.
# 									 For said plugin, the server does not send the public key unless requested.
#
# 									 Is ignored for accs that do not authenticate with that plugin. 
# 									 Also ignored if RSA-based PW exchange is not used, as is when clients use secure connections.
# 	
# 									 If --server-public-key-path=<file_name> is given and valid - it's > in prio over --get-server-public-key
#
# --host=<host name>,  		 Connect to the MySQL server on the given host.
#  -h <host_name>
# 
# --login-path=<name> 		 Read options from the named login path in the .mylogin.cnf login path file.
# 									 A "login path" is an option group containing options that specify which MySQL
# 									 server to connect to and which account to authenticate as.
#
# 								    To create or modify a login path file, use the mysql_config_editor utility.
#
# --medium-check, -m 		 Do a check that is faster than a --extended operation. This finds only 99.99% of all errors,
# 									 which should be enough in most cases.
#
# --no-defaults 				 Do not read option files. Prevents errors thrown due to errornous parsing.
# 									 .mylogin.cnf is read in all cases.
#
# --optimize, -o 				 Optimize the tables
#
# --password[=<password>],  The PW to use when connecting to the server. Short option (-p) requires no space between option and PW.
#  -p [<password>] 			 If omitted, prompts afterwards for it.
#
# --pipe, -W 					 Connect to the server using a named pipe. Only applies if server supports named-pipes
#
# --plugin-dir=<dir_name> 	 The dir in which to look for plugins. Specify if --default-auth is used for auth plugin but mysqlcheck can't find it
#
# --port=<port num>,        The TCP/IP port number to use for the connection. 
#  -P <port num>
#
# --print-defaults 			 Print the program name and all options that it gets from option files.
#
# --protocol= 					 The connection protocol to use for connecting to the server. It is useful when the other connection params
# {TCP|SOCKET|PIPE|MEMORY}  normally would cause a protocol to be used other than the one you want.
#
# --quick, -q 					 If you are using this option to check tables, it prevents the check from scanning the rows to check
# 								    for incorrect links. The fastest check method.
#
# 									 If attempting to repair tables, it tries only to repair the index tree.
#
# --repair, -r 				 Perform a repair that can fix almost anything except unique keys that are not unique.
#
# --secure-auth 				 REMOVED.
#
# --server-public-key-path= The path name to a file containing a client-side copy of the public key required by the server for RSA
#   <file name> 				 key pair-based PW exchange.
#
# 								    File must be in PEM format. Applies to clients that authenticate with the sha256_password or caching_sha2_password
# 									 auth plugin. Ignored for accounts that do not authenticate with one of those plugins.
#
# 									 Also ignored if RSA based PW exchange is not used, as in secure connection.
# 									 sha256_password only applies with MySQL being built with OpenSSL.
# 									 
# 									 If --server-public-key-path=<file name> is given and specified as a valid public key,
# 									 it takes precedence over --get-server-public-key
#
# --shared-memory-base-name= On Windows, the shared memory name to use - for connections made using shared memory to a local server.
# <name>  						 Defaults to MySQL. Shared name is case-sensitive.
#
# 									 Server must be started with the --shared-memory option to enable shared-memory connections.
#
# --silent, -s 				 Silent mode. Print only error messages.
#
# --skip-database=<db name> Do not include the named DB (case-sensitive) in the operations performed by mysqlcheck.
#
# --socket=<path>,  			 For connections to localhost, the Unix socket file to use, or on Windows, the name of the named pipe to use.
#  -S <path>
#
# --ssl* 						 Options that begin with --ssl specify whether to connect to the server using SSL and indicate where to find SSL keys and certs.
#
# --ssl-fips-mode= 			 Controls whether to enable FIPS mode on the client side. Defines which Cryptographic ops are permitted.
# {OFF|ON|STRICT} 			 allows:
#
# 									 OFF - Disabled, ON - Enabled, STRICT - "strict" FIPS mode
#
# --tables 						 Overrides the --databases or -B option. All names following are regarded as table names.
#
# --tls-version= 				 The protocols permitted by the client for encrypted connections. Comma separated list containing one or more protocol names.
#  <protocol list> 			 Protocols that can be named, depend on the SSL Lib used to Compile MySQL.
#
# --use-frm 					 For repair operations on MyISAM tables, get the table structure from the data dictionary so that the table can be repaired even
# 									 if the .MYI header is corrupted.
#
# --user=<user name>, 		 The MySQL user name to use when connecting to the server. 
#  -u <user_name>
#
# --verbose, -v 				 Verbose mode. Prints info about various stages of program ops.
#
# --version, -V 				 Display version info and exit.
#
# --write-binlog 				 Enabled by default, so that ANALYZE_TABLE, OPTIMIZE_TABLE, and REPAIR_TABLE statements generated by mysqlcheck are written to 
# 									 the binary log.
#
# 									 Use --skip-write-binlog to cause NO_WRITE_TO_BINLOG to be added to the statements so that they are not logged.
# 									 Use --skip-write-binlog when these statements should not be sent to replication slaves or run when using the binary
# 									 logs for recovery from backup.
#
# The next section covers mysqldump
#
# The mysqldump client utility performs logical backups, producing a set of SQL statements that can be executed
# to reproduce the original database object definitions and table data. 
#
# It dumps one or more MySQL databases for backup or transfer to another SQL server.
#
# mysqldump can also generate output in CSV, text or XML.
#
# mysqldump requires at least the SELECT privlege for dumped tables, SHOW VIEW for dumped views, TRIGGER for dumped triggers
# LOCK TABLES if the --single-transaction option is not used.
#
# Certain options might require other privs as noted in the option desc.
#
# To reload a dump file, you must have the privs required to execute the statements that it contains, such as
# the appropriate CREATE privs for objects created by those statements.
#
# mysqldump output can include ALTER DATABASE statements that change the database collation.
# These may be used when dumping stored programs to preserve their char encodings.
#
# To reload a dump file containing such statements, the ALTER priv for the affected DB is required.

# For instance, a dump made by PowerShell will be in UTF16 - which is not a permitted connection char encoding.
# To account for this - use --result-file to have it written in ASCII:
#
# mysqldump [<options>] --result-file=dump.sql
#
# mysqldump advantages include the convenience and flexibility of viewing or even editing the output before restoring.
# You can clone DBs and create slight variations, kind of like branching, in a way.
#
# The backup step can take a reasonable time - however, restoring the data can be very slow because replaying
# the SQL involves disk I/O for insertion, index creation and so on.
#
# If we have a lot of tables using InnoDB tables or a mix of InnoDB and MyISAM - we can use mysqlbackup from MySQL Enterprise Backup.
#
# It has the best performance for InnoDB.
#
# Otherwise, for large scale backup operations - utilize physical allocation.
#
# mysqldump can retrieve and dump table contents row by row, or it can retrieve the entire content from a table
# and buffer it in memory before dumping it.
#
# Buffering in memory can be a problem if you are dumping large tables. To dump tables row by row, use the --quick
# option (or --opt, which enables --quick).
#
# The --quick (implicitly activated by --opt) is on by default, so to enable memory buffering - use --skip-quick
#
# If you are using a recent version of mysqldump to generate a dump to be reloaded into a very old MySQL server,
# use the --skip-opt option instead of the --opt or --extended-insert option.
#
# There is in general three ways of using mysqldump - one for a set of one or more tables, a set of one or more complete DBs,
# or an entire MySQL server -
#
# mysqldump [<options>] <db_name> [<tbl_name> ...] #Omitting table names infers to dump the entire db
# mysqldump [<options>] --databases <db_name>
# mysqldump [<options>] --all-databases

# mysqldump supports the following options - which can be specified on the cmd line or in the [mysqldump] and [client] groups
# of an option file.
#
# Format 									Description
# --add-drop-database 				Add DROP DATABASE statement before each CREATE DATABASE statement
# --add-drop-table 					Add DROP TABLE statement before each CREATE TABLE statement
# --add-drop-trigger 				Add DROP TRIGGER statement before each CREATE TRIGGER statement
# --add-locks 							Surround each table dump with LOCK TABLES and UNLOCK TABLES statements
#
# --all-databases 					Dump all tables in all databases
# --allow-keywords 					Allow creation of column names that are keywords
# --apply-slave-statements 		Include STOP SLAVE prior to CHANGE MASTER statement and START SLAVE at end of Output
# --bind-address						Use specified network interface to connect to MySQL Server
# --character-sets-dir 				Directory where char sets are installed
# --column-statistics 				Write ANALYZE TABLE statements to generate statistics histograms
#
# --comments 							Add comments to dump file
# --compact 							Produce more compact output
# --compatible 						Produce output that is more compatible with other database systems or with older MySQL servers
# --complete-insert 					Use complete INSERT statements that include column names
# --compress 							Compress all information sent between client and server
# --create-options 					Include all MySQL-specific table options in CREATE TABLE statements
# 
# --databases 							Interpret all name arguments as database names
# --debug 								Write debugging log
# --debug-check 						Print debugging information when program exits
# --debug-info 						Print debugging information, memory, CPU stats when program exits
# --default-auth 						Authentication plugin to use
# --default-character-set 			Specify default character set
# --defaults-extra-file 			Read named option file in addition to usual option files
#
# --defaults-file 					Read only named option file
# --defaults-group-suffix 			Option group suffix value
# --delete-master-logs 				On a master replication server, delete the binary logs after performing the dump operation
# --disable-keys 						For each table, surround INSERT statements with statements to disable and enable keys
# --dump-date 							Include dump date as "Dump completed on" comment, if comments option is given
# --dump-slave 						Include CHANGE MASTER statement that lists binary log coordinates of slave's master
# --enable-cleartext-plugin 		Enable cleartext authentication plugin
#
# --events 								Dump events from dumped databases
# --extended-insert 					Use multiple-row INSERT syntax
# --fields-enclosed-by 				This option is used with the --tab option and has the same meaning as the corresponding clause for LOAD DATA INFILE
# --fields-escaped-by 				This option is used with the --tab option and has the same meaning as the corresponding clause for LOAD DATA INFILE
# --fields-optionally-escaped-by -||- (Denotes "same as above", basically)
# --fields-terminated-by 			-||-
# --flush-logs 						Flush MySQL server log files before starting dump
#
# --flush-privileges 				Emit a FLUSH PRIVILEGES statement after dumping mysql database
# --force 								Continue even if an SQL error occurs during a table dump
# --get-server-public-key 			Request RSA public key from server
# --help 								Display help message and exit
# --hex-blob 							Dump binary columns using hexadecimal notation
# --host 								Host to connect to (IP address or hostname)
# --ignore-error 						Ignore specified errors
#
# --ignore-table 						Do not dump given table
# --include-master-host-port 		Include MASTER_HOST/MASTER_PORT options in CHANGE MASTER statement procured by --dump-slave option enabled
# --insert-ignore 					Write INSERT IGNORE rather than INSERT statements
# --lines-terminated-by 			This option is used with the --tab option and has the same meaning as the corresponding clause for LOAD DATA INFILE
# --lock-all-tables 					Lock all tables across all databases
# --lock-tables 						Lock all tables before dumping them
# --log-error 							Append warnings and errors to named file
# --login-path 						Read login path options from .mylogin.cnf
# --master-data 						Write the binary log file name and position to the output
# --max_allowed_packet 				Maximum packet length to send to or receive from server
#
# --net_buffer_length 				Buffer size for TCP/IP and socket communication
# --network-timeout 					Increase network timeouts to permit larger table dumps
# --no-autocommit 					Enclose the INSERT statements for each dumped table within SET autocommit = 0 and COMMIT statements
# --no-create-db 						Do not write CREATE DATABASE statements
# --no-create-info 					Do not write CREATE TABLE statements that re-create each dumped table
# --no-data 							Do not dump table contents
# --no-defaults 						Read no option files
# --no-set-names 						Same as --skip-set-charset
# --no-tablespaces 					Do not write any CREATE LOGFILE GROUP or CREATE TABLESPACE statements in output
# --opt 									Shorthand for --add-drop-table --add-locks --create-options --disable-keys --extended-insert
# 															  --lock-tables --quick --set-charset
# 
# --order-by-primary 				Dump each table's rows sorted by its primary key, or by its first unique index
# --password 							Password to use when connecting to server
# --pipe 								On Windows, connect to server using named pipe
# --plugin-dir 						Dir where plugins are installed
# --port 								TCP/IP port number for connection
# --print-defaults 					Print default options
# --protocol 							Connection protocol to use
# --quick 								Retrieve rows for a table from the server a row at a time
# --quote-names 						Quote identifiers within backtick characters
#
# --replace 							Write REPLACE statements rather than INSERT statements
# --result-file 						Direct output to a given file
# --routines 							Dump stored routines (procedures and functions) - from dumped databases
# --secure-auth 						Do not send passwords to server in old (REMOVED)
# --server-public-key-path 		Path name to file containing RSA public key 
# --set-charset 						Add SET NAMES default_character_set to output
# --set-gtid-purged 					Whether to add SET @@GLOBAL.GTID_PURGED to output
# --shared-memory-base-name 		The name of shared memory to use for shared-memory connections
# --single-transaction 				Issue a BEGIN SQL statement before dumping data from server
#
# --skip-add-drop-table 			Do not add a DROP TABLE statement before each CREATE TABLE statement
# --skip-add-locks 					Do not add locks
# --skip-comments 					Do not add comments to dump file
# --skip-compact 						Do not produce more compact output
# --skip-disable-keys 				Do not disable keys
# --skip-extended-insert 			Turn off extended-insert
# --skip-opt 							Turn off options set by --opt
# --skip-quick 						Do not retrieve rows for a table from the server a row at a time
# --skip-quote-names 				Do not quote identifiers
# --skip-set-charset 				Do not write SET NAMES statement
# --skip-triggers 					Do not dump triggers
#
# --skip-tz-utc 						Turn off tz-utc
# --socket 								For connections to localhost, the Unix socket file to use
# --ssl-ca 								File that contains list of trusted SSL Cert Auths
# --ssl-capath 						Dir that contains trusted SSL Cert Auth cert files
# --ssl-cert 							File that contains X.509 cert
# --ssl-cipher 						List of permitted ciphers for connection encryption
# --ssl-crl 							File that contains certificate revocation lists
# --ssl-crlpath 						Dir that contains cert revocation list files
#
# --ssl-fips-mode 					Whether to enable FIPS mode on the client side
# --ssl-key 							File that contains X.509 key
# --ssl-mode 							Security state of connection to server
# --tab 									Produce tab-separated data files
# --tables 								Override --databases or -B option
# --tls-version 						Protocols permitted for encrypted connections
# --triggers 							Dump triggers for each dumped table
# --tz-utc 								Add SET TIME_ZONE='+00:00' to dump file
#
# --user 								MySQL user name to use when connecting to server
# --verbose 							Verbose mode
# --version 							Display version info and exit
# --where 								Dump only rows selected by given WHERE condition
# --xml 									Produce XML output
#
# The mysqldump command logs into a MySQL server to extract information. 
# The following options relate to how the connection interacts with the MySQL Server, local or remote:
#
# --bind-address=<ip address> - On a computer having multiple network interfaces, use this option to select which interface to use for connecting to the MySQL server.
# --compress, -C - Compress all information sent between the client and the server if both support compression.
# --default-auth=<plugin> - A hint about the client-side authentication plugin to use.
# --enable-cleartext-plugin - Enable the <mysql_clear_password> cleartext authentication plugin
# --get-server-public-key - Request as per before:
#
# 									 Request from the server the public key required for RSA key pair-based PW exchange.
# 									 This option applies to clients that authenticate with the <caching_sha2_password> authentication plugin.
#              
#                           For that plugin, the server does not send the public key unless requested. This option is ignored
# 									 for accounts that do not authenticate with that plugin. Also ignored for non RSA based PWs, i.e secure connections.
#
# 									 If --server-public-key-path=<file name> is given and specifies a valid public key file - it takes precedence over
# 									 --get-server-public-key.
#
# --host=<host_name>, 		 Dump data from the MySQL server on the given host. Defaults localhost 
#  -h <host_name>
#
# --login-path=<name> 		 Read options from the named login path in the .mylogin.cnf login path file.
# 									 A "login path" is an option group containing options that specify which MySQL Server
# 									 to connect to and which account to authenticate as.
#
# 									 To create or modify a login path file, use the mysql_config_editor utility.
# 									 
# --network-timeout, -M 	 Enable large tables to be dumped by setting max_allowed_packet to its maximum value
# 									 and network read and write timeouts to a large value.
#
# 									 This option is enabled by default. To disable, use --skip-network-timeout
#
# --password[=<password>],  The password to use when connecting to the server. If you use the short option form (-p), no space req
#  -p [<password>] 			 Prompt kicks in if no pw - can specify PW in a option file
#
# --pipe, -W 					 On Windows, connect to the server using a named pipe. Applies only if the server supports named-pipe connections
#
# --plugin-dir=<dir_name> 	 The dir of where to look for plugins. Specify if the --default-auth option is used to specify an authentication plugin but mysqldump does not find it.
#
# --port=<port_num>, 		 The TCP/IP port number to use for the connection
# 	-P <port_num>
#
# --protocol= 					 The connection protocol to use for connecting to the server. 
# {TCP|SOCKET|PIPE|MEMORY}
#
# --secure-auth 				 REMOVED
#
# --server-public-key-path  Same as before
#   =<file name>
#
# --socket=<path>, 			 For connections to <localhost>, the Unix socket file to use - or Windows, name of the named pipe to use 
#  -S <path>
#
# --ssl* 						 Options that begin with --ssl specify whether to connect to the server using SSL, indicate where to find SSL keys and Certs.
#
# --ssl-fips-mode= 			 Whether to enable FIPS mode on the client side. Which cryptographic ops are permitted.
#  {OFF|ON|STRICT} 			 OFF: Disable FIPS mode. ON: Enable FIPS mode. STRICT: Enable "strict" FIPS mode.
#
# --tls-version= 				 The protocols permitted by the client for encrypted connections. 
# <protocol list> 			 The value is a comma-separated list containing one or more protocol names. Allowed values depend on the SSL lib used to Compile MySQL.
#
# --user=<user_name>, 		 User name to use for connecting
#  -u <user_name>
#
# --max_allowed_packet= 	 Maximum size of the buffer for client/server comm. Defaults to 24MB, max is 1GB.
#   <value>
#
# --net_buffer_length 		 The initial size of the buffer for client/server communication. When creating multiple-row INSERT
# 									 statements (as with the --extended-insert or --opt option), mysqldump creates rows up to <net_buffer_length>
# 									 bytes long. If we increase this, the MySQL Server in terms of net_buffer_length, must be at least this large.
#
# The following options pertain to option files and which option files to read:
# 
# --defaults-extra-file=<file name> - Same as before, read before user option file on unix but after global, permissions, etc.
# --defaults-file=<file name> - Use only given option. Relative if relative, still use .mylogin.cnf - error if inaccessible.
# --defaults-group-suffix=<str> - Regex match against suffix in grouping 
# --print-defaults - Print the program name and all options that it gets from option files.
#
# Scenarios of where you'd use mysqldump include setting up an entire new MySQL instance (including DB tables), and replacing
# data inside an existing instance with existing DBs and tables.
#
# The following options let you specify which things to tear down and what to set up when restoring a dump - by utilizing
# DDL statements in the dump file.
#
# --add-drop-database - Write a <DROP DATABASE> statement before each <CREATE DATABASE> statement. 
# 							   Usually used with a --all-databases or --databases option
# --add-drop-table 	 - Write a <DROP TABLE> statement before each <CREATE TABLE> statement.
# --add-drop-trigger  - Write a <DROP TRIGGER> statement before each <CREATE TRIGGER> statement.
#
# --all-tablespaces,  - Adds to a table dump all SQL statements needed to create any tablespaces used by an NDB table.
#                       Otherwise not included from mysqldump, only relevant to NDB cluster tables, not supported by MySQL 8.0
# --no-create-db, -n  - Suppress the <CREATE DATABASE> statements that are otherwise included in the output if the --databases
#                       or --all-databases option is given.
#
# --no-create-info,   - Do not write <CREATE TABLE> statements that create each dumped table.
#  -t 						This option does not exclude statements creating log file groups or tablespaces from mysqldump output.
# 								However, you can use the --no-tablespaces option for this.
#
# --replace 				Write REPLACE statements rather than INSERT statements.
# 
# The following options pertain to debuging
#
# --allow-keywords - Permit creation of column names that are keywords. This works by prefixing each column name with the table name.
# --comments, -i 	 - Write additional information in the dump file such as program version,server version and host.
# 							This option is enabled by default. To suppress this additional information, use --skip-comments.
# --debug 				 
# [=<debug_options>], Writes a debugging log. A typical <debug_options> string is d:t:o, <file_name>. Defaults to d:t:o, /tmp/mysqldump.trace
#-# [<debug options>]	
#
# --debug-check 	 - Print some debugging information when the program exits
# --debug-info 	 - Print debugging information, memory and CPU stats when the program exits.
# --dump-date 		 - If the --comments option is given, mysqldump produces a comment at the end of the dump of the following form:
# 							-- Dump completed on <DATE>
# 						
# 						   However, the date causes dump files taken at different times to appear to be different, even if data is identical.
# 							--dump-date and --skip-dump-date control whether the date is added to the comment.
# 							Defaults to --dump-date (include date in comment), --skip-dump-date to suppress
#
# --force, -f 		 - Ignore all errors, continue even if an SQL error occurs during a table dump.
# 							Can for instance ignore view errornous referential addresses - if underlying table has been dropped.
#
# 							Without --force, mysqldump exits with an error message.
# 						   --force causes mysqldump to print the error message - but also writes an SQL comment
# 							containing the view definition to the dump output and continues executing.
#
# 							If --ignore-error is also given, --force takes higher prio
#
# --log-error= 		Log warnings and errors by appending them to the named file. Defaults to no logging.
#	<file_name>
#
# --skip-comments 	See the description for the --comments options
#
# --verbose, -v 		Verbose mode
#
# The following options pertain to some help options
#
# --help, -? - Display a help message and exit
# --version, -V - Display version info and exit
#
# The following options pertain to char sets in relation to national language settings
#
# --character-sets-dir=<dir_name> - The dir where character sets are installed.
# --default-character-set= 		 - Use <charset_name> as default char set. If none specified, defaults to UTF8.
#  <charset_name>
# --no-set-names, -N 				 - Turns off the --set-charset setting, the same as specifying --skip-set-charset
# --set-charset 						 - Write SET NAMES <default character set> to the output. Enabled by default. 
# 												To suppress the SET NAMES, use --skip-set-charset
#
# The following options pertain to Replication and akin
#
# The mysqldump command is frequently used to create an empty instance, or an instance including data, on a slave server
# in a replication configuration.
#
# The following options apply to dumping and restoring data on replication master and slave servers:
#
# --apply-slave-statements - For a slave dump produced with the --dump-slave option, add a STOP SLAVE statement before the
# 									  CHANGE MASTER TO statement and a START SLAVE statement at the end of the output.
#
# --delete-master-logs 		- On a master replication server, delete the binary logs by sending a PURGE BINARY LOGS statement to the server
# 									  after performing the dump operation. Automatically enables --master-data.
#
# --dump-slave[=<value>] 	- Similar to --master-data except that it is used to dump a replication slave server to produce a dump file
# 									  that can be used to set up another server as a slave that has the same master as the dumped server.
#
# 									  It causes the dump output to include a CHANGE MASTER TO statement that indicates the binary log coords
# 									  (file name and pos) of the dumped slave's master.
#
# 									  The CHANGE MASTER TO statement reads the values of Relay_Master_Log_File and Exec_Master_Log_Pos
# 									  from the SHOW SLAVE STATUS output and uses them for MASTER_LOG_FILE and MASTER_LOG_POS respectively.
#
# 									  Thoose are the master server coords to which the slave is to replicate from.
#
# 									  NOTE: Inconsistencies in the sequence of transactions from the relay log which have been executed can
# 									  cause the wrong coords to be used.
#
# 									  This option causes the coords from the master to be used rather than those of the dumped server, as is 
# 									  done by the --master-data option.
#
# 									  In addition - specifying this option causes the --master-data option to be overridden, if used, and ignored.
#
#  								  WARNING: Do not use in conjunction with dumped server coords which yields gtid mode=ON and MASTER_AUTOPOSITION=1
#
#  								  The option value is handled the same way as for --master-data:
#                            no value or 1 - Causes a CHANGE MASTER TO statement to be written to the dump
# 									  2 - Causes the statement to be written but encased in SQL comments (same effect as --master-data 
# 									  in enabling or disabling other options and in how locking is handled)
#
# 									  This option causes mysqldump to stop the slave SQL thread before the dump and restart it again after.
# 									  With --dump-slave - the --apply-slave-statements and --include-master-host-port options can also be used.
#
# --include-master-host-port For the CHANGE MASTER TO statement in a slave dump produced with --dump-slave option, add MASTER_HOST and MASTER_PORT
# 									  options for the host name and TCP/IP port number of the slave's master.
#
# --master-data[=<value>] 	  Use this option to dump a master replication server to produce a dump file that can be used to set up another server
# 									  as a slave of the master.
#
# 									  Causes the dump output to include a CHANGE_MASTER_TO statement that indicates the binary log coords (file name and pos) 
# 									  of the dumped server. Said coords are the master server coords from which the slave should start replicating after the dump
# 									  is loaded into the slave.
# 							
# 									  If the option value is 2 - the CHANGE_MASTER_TO statement is written as an SQL comment, and is informative only.
# 									  Has no effect when the dump file is reloaded.
#
# 									  If the option value is 1 - the statement is not written as a comment and takes effect when the dump file is reloaded.
# 									  If none is specified - it defaults to 1.
#
# 									  Requires the RELOAD privilege and the binary log must be enabled.
#
# 									  The --master-data option automatically turns off --lock-tables. 
# 									  Also turns on --lock-all-tables, unless --single-transaction also is specified.
# 									  If --single-transaction is also specified - a global read lock is acquired only for a short time
# 									  at the beginning of the dump.
#
# 									  Any action on logs happens at the exact moment of the dump.
# 									  We can also set up a slave by dumping an existing slave of the master, using the --dump-slave option
# 									  - overriding the --master-data - causing both to be ignored.
#
# --set-gtid-purged=<value>  Enables control over global transaction ID (GTID) information written to the dump file, by indicating whether
# 									  to add a SET @@global.gtid purged statement to the output.
#
# 									  May also cause a statement to be written to the output that disables binary logging while the dump file is being
# 									  reloaded.
#
# 									  Default: AUTO.
#									  OFF  : Add no SET statement to the output.
# 									  ON   : Add a SET statement to the output. An error occurs if GTIDs are not enabled on the server.
# 								     AUTO : Add a SET statement to the output if GTIDs are enabled on the server.
#
# 									  A partial dump from a server that is using GTID-based replication requires the --set-gtid-purged={ON|OFF} option
# 									  to be specified.

# 									  If we wish to deploy a new replication slave using only some of the data from the dumped server, use ON.

# 									  If we wish to repair the table in terms of copying within a topology or copy between disjoint topologies
# 									  of which remain so - Use OFF.
# 
# 									  The --set-gtid-purged option has the following effect on binary logging when the dump file is reloaded:
#
# 									  --set-gtid-purged=OFF : SET @@SESSION.SQL_LOG_BIN=0; is not added to the output.
# 									  --set-gtid-purged=ON  : SET @@SESSION.SQL_LOG_BIN=0; is added to the output
# 									  --set-gtid-purged=AUTO: SET @@SESSION.SQL_LOG_BIN=0; is added to the output if GTIDs are enabled on the server you are backing up. (If AUTO evalutes to ON)
#
# 									  NOTE: It is not recommended to load a dump file when GTIDs are enabled on the server (gtid mode=ON), if your dump file
# 									  includes system tables.
#
# 								     mysqldump issues DML instructions for the system tables which use the non-transactional MyISAM storage engine,
#								     and this combination is not permitted when GTIDs are enabled.
#
# 									  Also be aware that loading a dump file from a server with GTIDs enabled - into another server with GTIDs enabled -
# 									  causes different transaction identifiers to be generated.
# 
# The following options specify how to represent the entire dump file or certain kinds of data in the dump file.
# They also control whether certain optional info is written to the dump file:
#
# --compact - Produce more compact output. This option enables the --skip-add-drop-table, --skip-add-locks, --skip-comments,
# 																						 --skip-disable-keys, --skip-set-charset options.
# --compatible=<name> - Produce output that is more compatible with other database systems or with older MySQL servers.
# 								Only permitted value for this is ansi - has the same meaning as for the Server SQL mode option.
# --complete-insert, -c Use complete INSERT statements that include column names
#
# --create-options 		Include all MySQL-specific table options in the CREATE TABLE statements.
#
# --fields-terminated-by=<...>, 				Options used with the --tab option and have the same meaning as the corresponding FIELDS
# --fields-enclosed-by=<...>, 				clauses for LOAD DATA INFILE.
# --fields-optionally-enclosed-by=<...>,
# --fields-escaped-by=<...>
#
# --hex-blob 				Dump binary columns using hexadecimal notation ('abc' becomes 0x616263).
# 								Affected data types are BINARY, VARBINARY, BLOB types and BIT.
#
# --lines-terminated-by=<...> 				Used with the --tab option and has the same meaning as the corresponding LINES clause for LOAD DATA INFILE.
#
# --quote-names, -Q 		Quote identifiers, such as DB, table and column names - within ` chars. If the ANSI_QUOTES SQL mode is on, identifiers are quoted with "
# 								Enabled by default. Can be disabled with --skip-quote-names, but this option should be given after any option such as --compatible that may
# 								enable --quote-names. i.e - Order this command after others
#
# --result-file= 		   Direct output to the named file. Result file is created and its previous contents overwritten, even if an error occurs while generating dump.
#  <file_name>, 			Used on Windows to prevent \n from becoming \r\n
#
# --tab=<dir_name>, 	   Produce tab-separated text-format data files. For each dumped table, mysqldump creates a <tbl_name>.sql file that contains 
#  -T <dir_name> 			the CREATE TABLE statements - of which create the table and the server writes a <tbl_name>.txt that contains its data.
# 								The option value is the dir in which to write the files.
#
# 								NOTE: Should only be used when mysqldump is run on the same machine as the mysqld server.
# 										The server creates *.txt files in the dir that we specify - the dir must be writable by the server
# 										and the MySQL acc that we use must have the FILE privs.
#
# 									   Because mysqldump creates *.sql in the same dir, it must be writable by the system login acc.
#
# 								By default - the .txt data files are formatted using tab chars between column values and a newline at the end of each line.
# 								The format can be specified explicitly using the --fields-<xxx> and --lines-terminated-by options.
#
# 								Column values are converted to the character set specified by the --default-character-set option.
#
# --tz-utc 					Enables TIMESTAMP columns to be dumped and reloaded between servers in different time zones.
# 								mysqldump sets its connection time zone to UTC and adds SET TIME_ZONE='+00:00' to the dump file.
# 			
# 								Without this - TIMESTAMP columns are dumped and reloaded in the time zones local to the source and
# 								destination servers - Which causes discrepencies in values if the servers are in different timezones.
#
# 								Also protects against changes due to daylight saving time.
# 								Enabled by default - disable with --skip-tz-utc
#
# --xml, -X 				
#  -r <file_name> 		Write dump output as well-formed XML.
#
# 								The following example showcases the differences:
# 								VALUE: 									XML Representation:
# 								NULL(unknown value) 					<field name="column_name" xsi:nil="true" />
# 								''(empty strting) 					<field name="column_name"></field>
# 								'NULL'(string value) 				<field name="column_name">NULLL</field>
#
# 								An example of mysqldump can be showcased as follows:
#
# 								mysqldump --xml -u root world City
# 								<?xml version="1.0"?>
# 								<mysqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
# 								<database name="world">
#
# 								<table_structure name="City">
# 								<field Field="ID" Type="int(11)" Null="NO" Key="PRI" Extra="auto_increment" />
# 								<field Field="Name" Type="char(35)" Null="NO" Key="" Default="" Extra="" />
# 								<field Field="CountryCode" Type="char(3)" Null="NO" Key="" Default="" Extra="" />
# 
# 								<field Field="District" Type="char(20)" Null="NO" Key="" Default="" Extra="" />
# 								<field Field="Population" Type="int(11)" Null="NO" Key="" Default="0" Extra="" />
# 								<key Table="City" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="ID"
# 								Collation="A" Cardinality="4079" Null="" Index_type="BTREE" Comment="" />
# 								
# 								<options Name="City" Engine="MyISAM" Version="10" Row_format="Fixed" Rows="4079"
# 								Avg_row_length="67" Data_length="273293" Max_data_length="<numbers>"
# 								Index_length="43008" Data_free="0" Auto_increment="4080"
# 								Create_time="2007-03-31 01:47:01" Update_time="2007-03-31 01:47:02"
# 								Collation="latin1_swedish_ci" Create_options="" Comment="" />
# 								</table_structure>
# 								
# 								<table_data name="City">
# 								<row>
# 								<field name="ID">1</field>
# 								<field name="Name">SomeName</field>
# 								<field name="CountryCode">SomeValue</field>
# 								<field name="District">SomeValue</field>
# 								<field name="Population">SomeValue</field>
# 								</row>
#
# 								<row>
# 								<field name="ID">SomeValue</field>
# 								<field name="Name">SomeValue</field>
# 								<field name="CountryCode">SomeValue</field>
# 								<field name="District">SomeValue</field>
# 								<field name="Population">SomeValue</field>
# 								</row>
# 								</table_data>
# 								</database>
# 								</mysqldump>
#
# 
# The following options pertain to filtering in terms of Schema objects being written to dump files, sorted by:
# Category
# triggers/events
# names to be dumped
# Filtering based on WHERE
#
# --all-databases, -A - Dump all the tables in all of the DBs. Same as using --databases on cmd line
# 								To include routines and events in terms of > 8.0, use --routines and --events in addition to the --all-databases
# 								The reason for this - is that the mysql.event and mysql.proc tables are not used.
#
# 								< 8.0, the system DB included the mysql.proc and mysql.event tables with the routines and event defs
#
# --databases, -B 	 - Dump several DBs. Normally - mysqldump treats each name past the first as tables. This treats all names as DBs.
# 								This can be used to dump the performance_schema DB, not normally dumped with --all-databases
# 								(Also use the --skip-lock-tables)
#
# --events, -E 		 - Include Event Scheduler events for the dumped databases in the output. This option requires the EVENT privs for those DBs.
# 								The output generated by using --events contains CREATE EVENT statements to create the events.
#
# --ignore-error= 		Ignore the specified errors. The option value is a comma-separated list of error numbers specifying the errors to ignore
#   <error>[,<error>].. during mysqldump execution.
#
# 								If the --force option is also given to ignore all errors, --force takes precedence.
#
# --ignore-table= 		Do not dump the given table, which must be specified using both the DB and Table names.
#   <db_name>.<tbl_name> To ignore multiple tables, use this option multiple times. Can also be used to ignore views.
#
# --no-data, -d 			Do not write any table row info (that is, do not dump the table contents). This is useful if you want to dump
# 								only the CREATE TABLE statement for the table (For example - to create a empty copy of the table by loading the dump file)
#
# --routines, -R 			Include stored routines (procedures and functions) for the dumped databases in the output. This option requires the global
# 								SELECT priv.
#
# 								The output generated by using --routines contains CREATE_PROCEDURE and CREATE_FUNCTION statements to create the routine.
# 
# --tables 					Override the --databases or -B option. mysqldump regards all name arguments following the option as table names.
#
# --triggers 				Include triggers for each dumped table in the output. This option is enabled by default; disable it with --skip-triggers
#
# 								To be able to dump a table's triggers - you must have the TRIGGER priv for the table.
#
# 								Multiple triggers are permitted. mysqldump dumps triggers in activation order so that when the dump file is reloaded,
# 								triggers are created in the same activation order. 
#
# 								If a mysqldump file contains multiple triggers for a table that have the same trigger event and action time,
# 								an error occurs to load the dump file into a older server that does not support multiple triggers.
#
# --where= 					Dump only rows selected by the given <WHERE> condition. Quotes around the condition are mandatory if it contains
#  <WHERE CONDITION>  	spaces or other chars that are special to your cmd interpreter (Just escape with ""'s)
#  -w <WHERE CONDITION>
#
# The following options pertain to performance options related to restore operations.
# For large data sets - restore operations (processing the INSERT statements in the dump file) takes a lot of time (or most)
# 
# Performance is also influenced by the transactional options, primarily for the dump operation.
#
# --column-statistics - Add <ANALYZE TABLE> statements to the output to generate histogram stats for dumped tables when the dump file is reloaded.
# 								This option is disabled by default because histogram generation for large tables takes a long time.
#
# --disable-keys, -K  - For each table - surround the <INSERT> statements with /*!40000 ALTER TABLE <tbl_name> DISABLE KEYS */;
# 																										 /*!40000 ALTER TABLE <tbl_name> ENABLE KEYS */;
#
# 								This makes loading the dump files faster because the indexes are created after all rows are inserted.
#								Effective only for nonunique indexes of MyISAM tables.
#
# --extended-insert,  - Write <INSERT> statements using multiple-row syntax that includes several VALUES lists.
#  -e  						Results in a smaller dump file and speeds up inserts when the file is reloaded.
#
# --insert-ignore 	 - Write <INSERT IGNORE> statements rather than <INSERT> statements.
#
# --opt 					 - This option, enabled by default - is short hand for: 
# 											--add-drop-table --add-locks --create-options
# 											--disable-keys --extended-insert --lock-tables
# 											--quick --set-charset
#
# 								It's basically a fast dump.
# 								Since --opt is default, running --skip-opt just turns off several defaults.
#
# --quick, -q 			 - Useful for dumping large tables. Forces mysqldump to retrieve rows for a table from the
# 								server a row at a time rather than retrieving the entire row set and buffering it in memory before writing it out.
#
# --skip-opt 			 - Read --opt 
#
# The following options pertain to trade off between speed, reliability and consistency of the exported data.
#
# --add-locks 			- Surround-each table dump with LOCK TABLES and UNLOCK TABLES statements.
# 							  Results in faster inserts when dump file is reloaded.
#
# --flush-logs,  		-  Flush the MySQL server log files before starting the dump. This option requires the RELOAD priv.
#  -F 					 	If you use this option in combo with the --all-databases option - the logs are flushed
# 								for each DB dumped.
#
# 								The exception is when using --lock-all-tables, --master-data or --single-transaction.
# 								In this case, the logs are flushed only once - corresponding to the moment that all tables
# 								are locked by <FLUSH TABLES WITH READ LOCK>.
#
# 								If you want your dump and the log flush to happen at exactly the same moment - you should use
# 								--flush-logs together with --lock-all-tables, --master-data, or --single-transaction.
#
# --flush-privileges 	Adds a FLUSH PRIVILEGES statement to the dump output after dumping the mysql database.
# 								This option should be used any time the dump contains the mysql DB and any other DB that depends
# 								on the data in the mysql db for proper restoration.
#
# 								For > 5.7.2 - do not use --flush-privileges.
#
# --lock-all-tables, 	Lock all tables across all databases. This is achieved by acquiring a global read lock for the
#  -x  						duration of the whole dump.
#
# 								This option automatically turns off --single-transaction and --lock-tables
# 
# --lock-tables, -l 		For each dumped database, lock all tables to be dumped before dumping them.
# 								The tables are locked with READ LOCAL to permit concurrent inserts in the case
# 								of MyISAM tables.
#
# 								For transactional tables such as InnoDB, --single-transaction is a much better option
# 								than --lock-tables because it does not need to lock the tables at all.
#
# 								Because --lock-tables locks tables for each DB separately, this option does not guarantee
# 								that the tables in the dump file are logically consistent between DBs.
#
# 								Tables in different DBs may be dumped in different states.
#
# 								Some options such as --opt automatically enable --lock-tables.
# 								If you want to override this  - use --skip-lock-tables at the end of the options list.
# 								
# --no-autocommit 		Enclose the INSERT statements for each dumped table within SET autocommit = 0 and COMMIT statements.
#
# --order-by-primary 	Dump each table's rows sorted by it's primary key - or by its first unique index - if such an index exists.
# 								This is useful when dumping a MyISAM table to be loaded into an InnoDB table, but makes the dump operation
# 								take a lot more time.
#
# --shared-memory- 		On Windows, the shared-memory name to use - for connections made using shared memory to a local server.
#  base-name=<name> 		The default value is MySQL. The shared-memory name is case-sensitive.
#
# 								Server must be started with the --shared-memory to enable shared-memory connections
#
# --single-transaction 	This option sets the transaction isolation mode to REPEATABLE READ and sends a START TRANSACTION SQL statement
# 								to the server before dumping data. It is useful only with transactional tables such as InnoDB - because it
# 								dumps the consistent state of the DB at the time of when START TRANSACTION was issued without blocking
# 								any apps.
#
# 								When using this option - you should keep in mind that only InnoDB tables are dumped in a consistent state.
# 								For example, any MyISAM or MEMORY tables dumped while using this option may still change state.
#
# 								While a --single-transaction dump is in process, to ensure a valid dump file (correct table contents and binary log coords)
# 								no other connection should use the following statements:
#
# 								ALTER TABLE, CREATE TABLE, DROP TABLE, RENAME TABLE, TRUNCATE TABLE
#
# 								A consistent read is not isolated from those statements - so use of them on a table to be dumped
# 								can cause the SELECT that is performed by mysqldump to retrieve the table contents to obtain incorrect contents or fail.
#
# 								The --single-transaction option and the --lock-tables option are mutually exclusive because LOCK TABLES causes any
# 								pending transactions to be committed implicitly.
#
# 								To dump larger tables - combine the --single-transaction option with the --quick option.
#
# The following are some examples:
#
# Backup of an entire DB:
#
# mysqldump <db_name> > backup-file.sql
#
# To load the dump file back into the server:
#
# mysql <db_name> < backup-file.sql
#
# Another way to reload the dump file:
#
# mysql -e "source /path-to-backup/backup-file.sql" <db_name>
#
# mysqldump can also populate other DBs by copying data from one MySQL server to another:
#
# mysqldump --opt <db_name> | mysql --host=<remote_host> -C <db_name>
#
# We can also dump several DBs with one comment:
#
# mysqldump --databases <db_name1> [<db_name2> ...] > <my_databases.sql>
#
# We can also direct flow of output to a sql file :
# mysqldump --all-databases > all_databases.sql
#
# For InnoDB tables, mysqldump provides a way of making a online backup:
#
# mysqldump --all-databases --master-data --single-transaction > all_databases.sql
#
# This backup acquires global read lock on all tables (using the FLUSH TABLES WITH READ LOCK) at the beginning of the dump.
# As soon as the lock has been aquired - the binary log co-ords are read and the lock is released.
#
# If long updating statements are running when the FLUSH statement is issued - the MySQL server may get stalled
# until said statements finish.
#
# After that - the dump becomes lock free and does not disturb reads and writes on the tables. If the update statements
# that the MySQL server receives are short (in terms of execution time) - the initial lock period should not be noticable.
#
# If we are interested in point-in-time recovery (known as "roll-forward" - when we need to restore an old backup and replay the changes that
# 																  happened since that backup) - it is useful to rotate the binary log - or at least know the binary log co-ords
# 																  to which the dump corresponds:
#
# mysqldump --all-databases --master-data=2 > all_databases.sql
#
# OR
#
# mysqldump --all-databases --flush-logs --master-data=2 > all_databases.sql
#
# The --master-data and --single-transaction options can be used at the same time - which provides a convenient way to make a online
# backup suitable for use prior to point-in-time recovery if tables are used with InnoDB as a storage engine.
#
# Mysqldump does not dump the performance_schema or sys schema by default. To dump any of these - name them explicitly  on the cmd line.
# You can also name them with the --databases option. For performance_schema - also use the --skip-lock-tables option.
#
# mysqldump does not dump the INFORMATION_SCHEMA schema
#
# mysqldump does not dump InnoDB CREATE TABLESPACE statements
#
# mysqldump includes statements to recreate the <general_log> and <slow_query_log> tables for dumps of the mysql database.
# Log table contents are not dumped.
#
# The following options section pertains to mysqlimport - which is used for data imports.
#
# The mysqlimport client provides a CMD line interface to the LOAD DATA INFILE SQL statement.
# Most options to mysqlimport correspond directly to clauses of LOAD DATA INFILE syntax.
#
# To invoke mysqlimport, the syntax is generally:
#
# mysqlimport [<options>] <db_name> <textfile1> [<textfile2>]
#
# For each text file named on the cmd line - mysqlimport strips any extension from the file name and uses
# the result to determine the name of the table into which to import the file's contents.
#
# For example - files named patient.txt, patient.text and patient all would be imported into a table called patient.
#
# We can define the following options on the cmd line or the [mysqlimport] and [client] groups of an option file.
#
# 		FORMAT 											Desc
# --bind-address  			Use specified network interface to connect to MySQL Server
# --columns 					This option takes a comma-separated list of column names as its value
# --compress 					Compress all information sent between client and server
# --debug 						Write debug log
# --debug-check 				Print debug info when program exits
# --debug-info 				Print debug info, memory and CPU stats when the program exits
# --default-auth 				Auth plugin to use
#
# --default-character-set 	Specify default character set
# --defaults-extra-file 	Read named option file in addition to usual option files
# --defaults-file 			Read only named option file
# --defaults-group-suffix 	Option group suffix value
# --delete 						Empty the table before importing the text file
#
# --enable-cleartext- 		Enable cleartext auth plugin
#   plugin
# --fields-enclosed-by 		keeps the same for several structures adhering to the following
# --force 						Continue even if an SQL error occurs
# --get-server-public-key 	Request RSA public key from server
# --help 						Displays help message and exits
# --host 						Connect to MySQL server on given host
#
# --ignore 						See the desc file for the --replace option
# --ignore-lines 				Ignore the first N lines of hte data file
# --lines-terminated-by 	Same as other terminated by dynamics
# --local 						Read input files locally from the client host
# --lock-tables 				Lock all tables for writing before processing any text files
#
# --login-path 				Read login path options from .mylogin.cnf
# --low-priority 				Use LOW_PRIORITY when loading the table
# --no-defaults 				Read no option files
# --password 					PW to use when connecting to server
# --pipe 						On Windows, connect to the server using named pipe
#
# --plugin-dir 				Dir where plugins are installed
# --port 						TCP/IP number for connection
# --print-defaults 			Print default options
# --protocol 					Connection protocol to use
# --replace 					The --replace and --ignore options control handling of input rows that duplicate
# 									existing rows on unique key values
# --secure-auth 				REMOVED
#
# --server-public-key-path Path name to file containing RSA public key
# --shared-memory-base- 	Name of the shared memory to use for shared-memory connections
#   name
# --silent 						Produce output only when errors occur
# --socket 						For connections to localhost, the Unix file socket to use
#
# --ssl-ca 						File that contains list of trusted SSL Cert Auths
# --ssl-capath 				Dir that contains trusted SSL Cert Auth cert files
# --ssl-cert 					File that contains X.509 cert
# --ssl-cipher 				List of permitted ciphers for connection encryption
# --ssl-crl 					File that contains cert revocation lists
# --ssl-crlpath 				Dir that contains cert revocation list files
#
# --ssl-fips-mode 			Whether to enable FIPS mode on the client side
# --ssl-key 					File that contains X.509 key
# --ssl-mode 					Security state of connection to the server
# --tls-version 				Protocols permitted for encrypted connections
# --use-threads 				Number of threads for parallel file-loading
# --user 						MySQL user name to use when connecting to server
# --verbose 					Verbose mode
# --version 					Display v info and exit

# --help, -? - Display help and exit
# --bind-adress=<ip address> - On a computer having multiple network interfaces, use this option to select which interface to use for connecting to the MySQL serv.
# --character-sets-dir=<dir name> - The dir where char sets are installed
# --columns=<column list>, 		 - This option takes a comma-separated list of column names as its value. The order of the column names indicates how to match
#  -c <column_list> 						data file columns with table columns
# --compress, -C 						 - Compress all information sent between client and the server if both support compression
# --debug[=<debug options>], 		 - Write a debugging log. A typical <debug_options> string is d:t:o, <file_name>. Default is d:t:o
#  -# [<debug_options>]
# --debug-check 						 - Print some debugging information when the program exits
# --debug-info 						 - Print debugging info, memory info, CPU usage etc. when the program exits
# 
# --default-character-set= 		 - Use <charset_name> as the default char set
#  <charset_name>
#
# --default-auth=<plugin> 			 - Hint about client-side auth plugin to use
#
# --defaults-extra-file= 			 - Same as previous file ordering partition
#  <file name>
#
# --defaults-file=<file name> 	 - Use only given option file, .mylogin.cnf is still read - path is relative if relative, full otherwise
#
# --defaults-group-suffix= 		 - Suffix regex against group names
# 	 <str>
#
# --delete, -D 						 - Empty the table before importing the text file
#
# --enable-cleartext-plugin 		 - Enable the mysql_clear_password cleartext auth plugin
#
# Ommited a few due to repetition
#
# --host=<host name>, 				 - Import data to mysql server on the given host - defaults to Local
#  -h <host_name>
#
# --ignore, -i 						 - --replace, basically
#
# --ignore-lines=<N> 				 - Ignore the N first lines of hte data file
#
# --lines-terminated-by=<...> 	 - This option has the same meaning as the corresponding clause for LOAD DATA INFILE.
# 												For example - to import Windows files that have lines terminated with carriage return/linefeed pairs,
# 												use --lines-terminated-by="\r\n".
#
# --local, -L 							 - Default, files are read by the server on the server host. With this option, mysqlimport reads input files locally
# 												on the client host. Enabling local data loading also requires that the server permits it.
#
# --lock-tables, -l 					 - Lock all tables for writing before processing any text files. Ensures that all tables are synched on the server.
#
# --login-path=<name> 				 - Read options from the named login path in the .mylogin.cnf login path file.
# 												A "login path" is an option group containing options that specify which MySQL server to connect to
# 												and which acc to auth as. Used with mysql_config_editor
#
# --low-priority 						 - Use LOW_PRIORITY when loading the table. This affects only storage engines that use only table-level locking
# 												(such as MyISAM, MEMORY, and MERGE)
#
# --no-defaults 						 - Same as other no-defaults
#
# SKIP A FEW BECAUSE REPEAT
#
# --replace, -r 						  - The --replace and --ignore options control handling of input rows that duplicate existing rows on unique key values.
# 												 If given - new rows replace existing rows that have the same unique key value.
# 												 --ignore skips - If neither is given, an error occurs when running into a duplication and ignores the rest of the file.
#
# //SKIPPED REPEATAL
#
# --use-threads=<N> 						- Load files in parallel using <N> threads
#
# Example of showcasing of usage:
#
# mysql -e 'CREATE TABLE imptest(id INT, n VARCHAR(30))' test #Create the table
# ed #Linux text editor interaction
# a
# 100 		Max Sydow
# 101 		Count Dracula
#
# w imptest.txt #Write to imptext.txt
# 32
# q
# od -c imptest.txt #Dump octal format unto text file and utilize -c to run the command as this program in terms of interpretation
# <Octal format for String chars> <id value> <String structure> #The first string value of 100 max Sydow
# etc.
#
# mysqlimport --local test imptest.txt #connect to local, select a table called test and insert the imptest info
# test.imptest: Records: 2 Deleted: 0 Skipped: 0 warning: 0 #Imports into table
# mysql -e 'SELECT * FROM imptest' test #Select all from imptext, escape chars with -e
# +----------------------------------+
# | id 	| 	n 								 |
# +------+---------------------------+
# |  100 | Max Sydow 					 |
# |  101 | Count Dracula 				 |
# +------+---------------------------+
#
#
# The following section covers mysqlpump - which breaks down DBs etc. into logical backups, which comes in the form of
# a set of SQL statements that can rebuild the system you broke down.
#
# Can dump one or several DBs.
#
# The features covers things akin to:
#
# Parallel processing of DBs, and of objects within DBs
# Better control over which DB and DB objects (tables, stored programs, user accs) to dump
# Dumping of user accs as account-management statements (CREATE USER, GRANT) - rather than as inserts into the mysql DB
# 
# Capability of creating compressed output
# Progress indicator (estimates)
# In terms of dump file reloading, faster secondary index creation for InnoDB tables by adding indexes after rows are inserted
#
# mysqlpump requires at least the SELECT privilege for dumped tables, SHOW VIEW for dumped views, TRIGGER for dumped triggers
# LOCK TABLES if the --single-transaction option is not used
#
# The SELECT priv on the mysql system db is required to dump user defs. Certain options might require other privs
# as noted in the option desc.
#
# To reload a dump file - you must have the privs reqed to execute the statements that it contains - such as appropiate CREATE privs
# for objects created by said statements.
#
# When dumping, use --result-file to circumvent UTF-16 encoding
#
# mysqlpump [<options>] > dump.sql #UTF-16, not allowed as server conn Char set
#
# mysqlpump [<options>] --result-file=dump.sql
#
# By default, mysqlpump dumps all the DBs, except a few. Can use --all-databases to do all
#
# To dump more specifically - following syntax holds:
#
# mysqlpump <db_name>
# mysqlpump <db_name> <tbl_name1, tbl_name2>
#
# To treat all name args as DB names - use the --databases option:
#
# mysqlpump --databases <db_name1, db_name2>
#
# By default, mysqlpump does not dump user acc defs - even if you dump the mysql system DB that contains the grant tables.
# To dump grant table contents as logical definitions in the form of CREATE USER and GRANT statements - use the --users option
# and suppress all DB dumping
#
# mysqlpump --exclude-databases=% --users
#
# The % above is wildchar regex against any name sequence in the context above
#
# mysql has different options for including/excluding DBs, tables, stored programs and user defs.
#
# To reload a dump file - execute the statements that it contains. For instance:
#
# mysqlpump [<options>] > dump.sql
# mysql < dump.sql
#
# FORMAT 										Desc
# --add-drop-database 				Add DROP DATABASE statement before each CREATE DATABASE statement
# --add-drop-table 					Add DROP TABLE statement before each CREATE TABLE statement
# --add-drop-user 					Add DROP USER statement before each CREATE USER statement
# --add-locks 							Surround each table dump with LOCK TABLES and UNLOCK TABLES statements
# --all-databases 					Dump all DBs
#
# --bind-address 						Use specified network interface to connect to MySQL Server
# --character-sets-dir 				Dir where char sets are installed
# --column- statistics 				Write ANALYZE TABLE statements to generate stats histograms
# --complete-insert 					Use complete INSERT statements that include column names
# --compress 							Compress all information sent between client and server
#
# --compress-output 					Output compress algo
# --databases 							Interpret all name args as DB names
# --debug 								Write debugging log
# --debug-check 						Print debugging info when program exits
# --debug-info 						Print debug info, memory and CPU stats when program exits
# --default-auth 						Auth plugin to use
#
# --default-character-set 			Specify default char set
# --default-parallelism 			Default number of threads for parallel processing
# --defaults-extra-file 			Read named option file in addition to usual option files
# --defaults-file 					Read only named option file
#
# --defaults-group-suffix 			Option group suffix regex
# --defer-table-indexes 			For reloading, defer index creation until after loading table rows
# --events 								Dump events from dumped databases
# --exclude-databases 				Databases to exclude from dump
# --exclude-events 					Events to exclude from dump
#
# --exclude-routines 				Routines to exclude from dump
# --exclude-tables 					Tables to exclude from dump
# --exclude-triggers 				Triggers to exclude from dump
# --exclude-users 					Users to exclude from dump
# --extended-insert 					Use multiple-row INSERT syntax
#
# --get-server-public-key 			Request RSA public key from server
# --help 								Display help and exit
# --hex-blob 							Dump binary columns using hexadecimal notation
# --host 								Host to connect to (IP address or hostname)
# --include-databases 				DBs to include in dump
#
# --include-events 					Events to include in dump
# --include-routines 				Routines to include in dump
# --include-tables 					Tables to include in dump
# --include-triggers 				Triggers to include in dump
# --include-users 					Users to include in dump
#
# --insert-ignore 					Write INSERT IGNORE rather than INSERT statements
# --log-error-file 					Append warnings and errors to named file
# --login-path 						Read login path options from .mylogin.cnf
# --max-allowed-packet 				Maximum packet length to send or recieve from server
# --net-buffer-length 				Buffer size for TCP/IP and socket communication
# --no-create-db 						Do not write CREATE DATABASE statements
# --no-create-info 					Do not write CREATE TABLE statements that re-create each dumped table
#
# --no-defaults 						Read no option files
# --parallel-schemas 				Specify schema-processing parallelism
# --password 							Password to use when connecting to server
# --plugin-dir 						Dir where plugins are installed
# --port 								TCP/IP port number for connection
# --print-defaults 					Print default options
#
# --protocol 							Connection protocol to use
# --replace 							Write REPLACE statements rather than INSERT statements
# --result-file 						Direct output to a given file
# --routines 							Dump stored routines (procedures and functions) from dumped DBs
# --server-public-key-path 		Path name to file containing RSA public key
#
# --set-charset 						Add SET NAMES default_char_set to output
# --set-gtid-purged 					Whether to add SET @@GLOBAL.GTID_PURGED to output
# --single-transaction 				Dump tables within single transaction
# --skip-definer 						Omit DEFINER and SQL SECURITY clauses from view and stored program CREATE statements
# --skip-dump-rows 					Do not dump table rows
# --socket 								For connections to localhost, the Unix socket file to use
# --ssl-ca 								File that contains list of trusted SSL Cert Auths
# --ssl-capath 						Dir that contains trusted SSL Cert Auth cert files
#
# --ssl-cert 							File that contains X.509 cert
# --ssl-cipher 						List of permitted ciphers for connection encryption
# --ssl-crl 							File that contains cert revocation lists
# --ssl-crlpath 						Dir that contains cert revocation list files
# --ssl-fips-mode 					Whether to enable FIPS mode on the client side
# --ssl-key 							File that contains X.509 key
#
# --ssl-mode 							Security state of connection to server
# --tls-version 						Protocols permitted for encrypted connections
# --triggers 							Dump triggers for each dumped table
# --tz-utc 								Add SET TIME_ZONE='+00:00' to dump file
# --user 								MySQL user name to use when connecting to server
# --users 								Dump user accs
#
# --version 							Display version info and exit
# --watch-progress 					Display progress indicator
#
# The following is further designation of options:
#
# --help, -? - Display a help message and exit
# --add-drop-database - Write a DROP DATABASE statement before each CREATE DATABASE statement.
# --add-drop-table - Write a DROP TABLE statement before each CREATE TABLE statement
# --add-drop-user - Write a DROP USER statement before each CREATE USER statement
#
# --add-locks - Surround each table dump with LOCK_TABLES and UNLOCK_TABLES statements. Causes faster inserts when dump is loaded
#
# 					 Does not work with parallelism because INSERT statements from different tables can be interleaved,
# 					 UNLOCK TABLES following the end of the inserts for one table could release locks on tables for which inserts remain.
#
# 					 i.e - --add-locks and --single-transaction are mutually exclusive
#
# --all-databases, - Dump all databases. Exclusive towards --databases. Defaults to dumping all, except few.
#  -A
#
# 							< MySQL 8.0 - includes mysql system db, also mysql.proc and mysql.event tables - with routines and events
# 							>= MySQL 8.0 - mysql.event and mysql.proc tables are not used. To include, use --routines and -events explicitly
#
# --bind-address   - On a computer having multiple network interfaces - use this option to select which interface to use for connecting to the MySQL server 
#  =<ip address>
#
# --character-sets-dir - The dir where char sets are installed
#  =<path>
#
# --column-statistics - Add ANALYZE TABLE statements to the output to generate histogram statistics for dumped tables when the dump file is reloaded.
# 								This option is disabled by default because histogram generation for large tables can take a long time.
#
# --complete-insert 	 - Write complete INSERT statements that include column names
#
# --compress, -C 		 - Compress all information sent between the client and server if both support compression
#
# --compress-output=  - By default, mysqlpump does not compress output. This option specifies output compressiion using the specified algo.
#  <algorithm> 		   Permitted are LZ4 and ZLIB.
#
# 								To uncompress compressed output - you must have an appropiate utility. If the system commands iz4 and openssl zlib are not about,
# 								MySQL includes iz4_decompress and zlib_decompress utilities that can be used to decompress mysqlpump output that was
# 								compressed using the --compress-output=LZ4 and --compress-output=ZLIB.
#
# --databases, -B 	 - Normally, mysqlpump treats the first name arg on the cmd line as a db name and any following names as table names.
# 								With this option - it treats all name args as db names. CREATE DATABASE statements are included in the output before
# 								each new DB.
#
# 								--all-databases and --databases are exclusive.
#
# --debug[=<debug options>] - Write a debugging log. A typical <debug_options> is d:t:o, <file_name>. Defaults to d:t:O, /tmp/mysqlpump.trace
#  -# [<debug_options>
#
# --debug-check - Print some debugging when the program exits
#
# --debug-info, -T - Print debugging info, memory and stats usage when the program exits.
#
# --default-auth - Hint about the client-side auth plugin to use 
#  =<plugin>
#
# --default-character-set= - Use <charset_name> as the default char set - if none specified, defaults to UTF8
#   <charset_name>
#
# --default-parallelism=<N> - The default number of threads for each parallel processing queue. Defaults to 2.
#
# 										--parallel-schemas also affects parallelism - and can be used to override the default numbers of threads.
#
# 										If we use --default-parallelism=0 and no --parallel-schemas - mysqlpump runs a single-threaded process and 
# 										creates no queues.
# 	
#  									With parallelism enabled - it is possible for output from different databases to be interleaved
#
# --defaults-extra-file=    - Read this option file after the global option file but (on Unix) before the user option file.
#   <file name> 					Relative if relative, absolute if absolute - failure to access throws an error
#
# --defaults-file= 			 - Use only the given option file. If it does not exist or cannot be accessed - error is thrown.
#   <file name> 					.mylogin.cnf is still read
#
# 										Relative if relative, absolute if absolute etc.
#
# --defaults-group-suffix=  - Regex match against suffix in groupings
#  <str>
#
# --defer-table-indexes 	 - In the dump output, defer index creation for each table until after its rows have been loaded.
# 										This works for all storage engines - but for InnoDB applies only for secondary indexes.
#
# 										Enabled by default, --skip-defer-tables-indexes to disable.
#
# --events 							Include Event Scheduler events for the dumped databases in the output. 
# 										Event dumping requires the EVENT privs for those DBs.
#
# 										The output generated by using --events contains CREATE EVENT statements to create the events.
# 										On by default - use --skip-events to disable it
#
# --exclude-databases= 		 - Do not dump the DBs in said list. This option stacks.
#  <db_list>
#
# --exclude-events= 			 - Do not dump the DBs in <event list>. Stacks.
#  <event_list>
#
# --exclude-routines/tables/triggers/users - Do not dump events/tables/triggers/users in said list. Stacks.
#
# --extended-insert=<N> 	 - Write INSERT statements using multiple-row syntax that includes several VALUES lists.
# 										Results in smaller dump file and speeds up inserts when the file is reloaded.
#
# 										Option value indicates number of rows to include in each INSERT statement. Defaults to 250.
# 										This means the total of 250 rows are bound to a INSERT statement in terms of list relation.
#
# --hex-blob 					-  Binary colums are converted to hexadecimal. BINARY, VARBINARY, BLOB and BIT are affected.
#
# --host=<host name>,      -  Dump data from the MySQL server on the given host.
#  -h <host name>
#
# --include-databases/events/routines/tables/triggers/user= Dump the databases/events/routines/tables/triggers/users in the respective list. Stacks. 		-  
# 	 <db_list>
#
# --insert-ignore 			- Write INSERT IGNORE instead of INSERT statements.
#
# --log-error-file= 			- Log warnings and errors by appending them to the named file. If this option is not given, mysqlpump writes warnings and 
# 									  errors to the std error output.
#
# --login-path=<name> 		- Read options from the named login path in the .mylogin.cnf login path file.
# 									  A "login path" is an option group containing options that specify which MySQL
# 									  to connect to and which acc to auth as. Create or modify with mysql_config_editor
#
# --max-allowed-packet=<N> - Max size of the buffer for client/server comm. Defaults to 24MB, max to 1gb
#   <file name>
#
# --net-buffer-length=<N>  - The initial size of the buffer for client/server comm. When creating multiple-row INSERT 
# 									  statements (as with the --extended-insert) - mysqlpump creates rows up to <N> bytes long.
#
# 									  If you use this option to increase the value - ensure that the MySQL server <net buffer length>
# 									  system var has a value at least this large.
#
# --no-create-db 				- Suppress any <CREATE DATABASE> statements that might otherwise be included in the output.
#
# --no-create-info, -t 		- Do not write <CREATE TABLE> statements that create each dumped table
#
# --parallel-schemas=[<N:> - Create a queue for processing the DBs in db_list. If N is given, the queue uses N threads.
#  <db list>] 					  If N is not defined - --default-parallelism defines the number of queue threads.
#
# 									  Multiple instances of this option creates multiple queues. Also creates a default queue to use
# 									  for DBs not named in any --parallel-schemas option - and for dumping user definitions if command
# 									  options select them.
#
# --password[=<password>], - The PW to use for connecting to the server. If -p is used - cannot have space between designation.
#  -p [<password>] 			  
#
# --plugin-dir=<dir name>  - The dir where to look for plugins. Specify this option if the --default-auth option is used to specify
# 									  an auth plugin but mysqlpump doesn ot find it.
#
# --port=<port num>, 	   - The TCP/IP port number to use for the connection
#  -P <port_num>
#
# --print-defaults 			- Print the program name and all options that it gets from option files
#
# --protocol= 					- Protocol to use
#  {TCP|SOCKET|PIPE|MEMORY}
#
# --replace 					- Write REPLACE statements rather than INSERT statements
#
# --result-file=<file name>- Direct output to the named file. Result file is created and its previous contents overwritten,
# 									  even if an error occurs while generating the dump.
#
# 									  Should be used on Windows to prevent \n from being converted to \r\n
#
# --routines 					- Include stored routines (procedures and functions) for the dumped DB in the output.
# 									  Requires the global SELECT priv.
#
# 									  output generated by using --routines contains CREATE PROCEDURE and CREATE FUNCTION statements to 
# 									  create the routines.
#
# 									  Enabled by default, use --skip-routines to disable it.
#
# --secure-auth 				- REMOVED
#
# --set-gtid-purged=<value>- Enables control over global transaction ID (GTID) info written to the dump file, by indicating whether
# 									  to add a SET @@global.gtid purged statement to the output.
#
# 									  This option may also cause a statement to be written to the output that disables binary logging
# 									  while the dump file is being reloaded.
#
# 									  Defaults: AUTO
# 									  OFF --> No SET statement in the output
# 									  ON  --> Add a SET statement to the output. Error occurs if GTIDs are not enabled on the server.
# 									  AUTO -> Add a SET statement to the output if GTIDs are enabled on the server.
#
# 									  The --set-gtid-purged option has the following effect on binary logging when the dump file is reloaded:
#
# 									  --set-gtid-purged=OFF:SET @@SESSION.SQL_LOG_BIN=0; is not added to the output
# 									  --set-gtid-purged=ON:SET @@SESSION.SQL_LOG_BIN=0; is added to the output
# 									  --set-gtid-purged=AUTO:SET @@SESSION.SQL_LOG_BIN=0; is added to the output if GTIDs are enabled on the server
# 									  you are backing up (that is - if AUTO is evaluated as ON)
#
# --single-transaction 		- Sets the transaction isolation mode to REPEATABLE READ and sends a START TRANSACTION SQL statement to the server before dumping data.
# 									  It is useful only with transactional tables such as InnoDB, because then it dumps the consistent state of the DB
# 									  at the time when START TRANSACTION was issued without blocking any app.
#
# 									  Only InnoDB tables are dumped in a consistent state. For example - MyISAM or MEMORY tables dumped while using this
# 									  may still change state.
#
# 									  While a --single-transaction dump is in process, to ensure a valid dump file (correct table contents and binary log coords)
# 									  no other connection should use the following statements:
#
# 									  ALTER TABLE, CREATE TABLE, DROP TABLE, RENAME TABLE, TRUNCATE TABLE
#
# 									  a consistent read is not isolated from those statements - so use of them on a table to be dumped
# 									  can cause the SELECT that is performed by mysqlpump to retrieve the table contents to obtain
# 									  incorrect contents or fail.
#
# 								     --add-locks is exclusive against --single-transaction
#
# --skip-definer 				- Omit DEFINER and SQL SECURITY clauses from the CREATE statements for views and stored programs. The dump file,
# 									  when reloaded - creates objects that use the default DEFINER and SQL SECURITY values.
#
# --skip-dump-rows, 			- Do not dump table rows
#  -d
#
# --socket= 						- For connections to localhost, the Unix socket file to use - or on Windows, name of the named pipe to use
# {<file name>|<pipe name>}, 
# -S {<file name>|<pipe name>}
#
# --ssl* 							- Options that begin with --ssl specify whether to connect to the server using SSL and indicate where to find SSL keys/certs
#
# --ssl-fips-mode= 				- Whether to use fips mode on client. 
#  {OFF|ON|STRICT}
#
# --tls-version=<protocol list> - The protocols permitted by the client for encrypted connections.
#
# --triggers 						- Include triggers for each dumped table in the output.
# 										  Enabled by default - use --skip-triggers to disable it
#
# --tz-utc 							- Enables TIMESTAMP columns to be dumped and reloaded between servers in different time zones.
# 										  mysqlpump Sets its connection time zone to UTC and adds SET TIME_ZONE='+00:00' to the dump file.
#
# 										  Without this option - TIMESTAMP columns are dumped and reloaded in the time zones local to the source
# 										  and destination server - which can cause the values to change if servers are in different time zones.
# 
# 										  --tz-utc also protects against changes due to daylight saving time.
#
# 										  Enabled by default, use --skip-tz-utc to disable it
#
# --user=<user name>, 		   - Name of MySQL user to connect with
#  -u <user_name>
#
# --users 							- Dump user accs as logical definitions in the form of CREATE USER and GRANT statements.
# 											
#                               User definitions are stored in the grant tables in the mysql system database. By default, mysqlpump
# 										  does not include the grant tables in mysql database dumps.
#
# 										  To dump the contents of the grant tables as logical definitions - use the --users option and suppress
# 										  all database dumping:
#
# 										  mysqlpump --exclude-databases=% --users
#
# --version, -V 					- Display version info and exit
#
# --watch-progress 				- Periodically display a progress indicator that provides info about the completed and total number of tables, rows, etc.
# 										  On by default - --skip-watch-progress to disable it
#
# The following section covers mysqlpump Object Selection
#
# mysqlpump has a set of inclusion and exclusion options that enable filtering of several object types and control which objects to dump:
#
# --include-databases and --exclude-databases apply to databases and all objects within them
# --include-tables and --exclude-tables apply to tables. These options also affect triggers associated with tables unless the trigger-specific
# 																			options are given.
# --include-triggers and --exclude-triggers - apply to triggers
#
# --include-routines and --exclude-routines - apply to stored procedures and functions. If a routine option matches a stored
# 															 function of the same name.
#
# --include-events and --exclude-events - apply to Event Scheduler events
#
# --include-users and --exclude-users - apply to user accounts
#
# Any inclusion or exclusion option may be given multiple times. Stacks. Order of options does not matter.
# The value of each inclusion and exclusion option is a list of namings
#
# --exclude-databases=test,world
# --include-tables=customer,invoice
#
# Wildcard chars are permitted (% as sequence, _ as regex against singular char)
#
# Example: --include-tables=t%, _____tmp matches all table names that begin with t - and all len(5) table names that end with tmp
#
# For users, a name specified without a host part is interpreted with an implied host of %.
# For example: u1 and u1@% are equivalent.
#
# Inclusion and exclusion options interact as follows:
#
# With no inclusion or exclusion options - mysqlpump dumps all databases (with a few notable exceptions)
#
# If inclusion options are given in the absence of exclusion options - only the objects named as included are dumped.
#
# If exclusion options are given in the absence of inclusion options - all objects are dumped except those named as excluded.
#
# If inclusion and exclusion options are given - all objects named as excluded and not named as inlcuded are not dumped. All others are.
#
# If multiple DBs are being dumped - it is possible to name tables, triggers and routines in a specific database by qualifying 
# the object names with the DB name.
#
# Example:
#
# mysqlpump --include-databases=db1,db2 --exclude-tables=db1.t1,db2.t2 #Dumps db1 and db2, but excludes specific tables
#
# The following options provide alternative ways to specify which DB to dump:
#
# The --all-databases option dumps all DBs (with certain exceptions). Equivalent to specifying no object options at all
#
# --include-databases=% is similar to --all-databases, but selects all databases for dumping, even those that are exceptions for --all-databases
#
# The --databases option causes mysqlpump to treat all name args as names of DBs to dump.
# Equivalent to an --include-databases option that names the same DBs.
#
# mysqlpump Parallel Processing
#
# mysqlpump can use parallelism to achieve concurrent processing. You can select concurrency between DBs (to dump multiple DBs at once)
# and within DBs (to dump multiple objects from a given DB simultaneously)
#
# By default - mysqlpump sets up one queue with two threads. You can create additional queues and control the number of threads assigned
# to each one - including the default queue:
#
# --default-parallelism=<N> specifies the default number of threads used for each queue. In the absence of this Option, N is 2.
#
# 									 The default queue always uses the default number of threads. Additional queues use the default number of threads
# 									 unless you specify otherwise.
#
# --parallel-schemas=[<N:>] sets up a processing queue for dumping the DBs named in <db_list> and optionally specifies how many
#  <db_list> 					 threads the queue uses.
#
# 									 <db_list> is a list of DB names. If the option argument begins with <N:>, the queue uses <N> threads.
# 									 Otherwise, the --default-parallelism option determines the number of queue threads.
#
# 									 Multiple instances of the --parallel-schemas option create multiple queues.
#
# 									 Names in the database list are permitted to contain the same % and _ wildcards as filtering.
#
# mysqlpump uses the default queue for processing any DBs not named explicitly with a --parallel-schemas option, and for dumping 
# user defs if cmd options select them.
#
# In general - with multiple queues, mysqlpump uses parallelism between the sets of DBs processed by the queues, to dump multiple
# DBs at once.
#
# For a queue that uses multiple threads, mysqlpump uses parallelism within DBs - to dump multiple objects from a given DB at once.
# Exceptions can occur; for example, mysqlpump may block queues while it obtains from the server lists of objects in DBs.
#
# With parallelism on - it is possible for output from different DBs to interleave. For example, INSERT statements from multiple
# tables dumped in parallel can be interleaved - they are not written in any specific order.
#
# Does not affect reloading because output statements qualify object names with DB names or are preceded by USE statements as required.
#
# The smallest scope of parallelism - is a single DB.
#
# Example:
#
# mysqlpump --parallel-schemas=db1,db2 --parallel-schemas=db3 #Partition db1 and db2 to a specific queue, another to Db3 - and a default for the rest. All queues use two threads.
#
# mysqlpump --parallel-schemas=db1,db2 --parallel-schemas=db3 --default-parallelism=4 #Same as above, except 4 threads for each queue
#
# We can also further partition thread usage if we wish:
#
# mysqlpump --parallel-schemas=5:db1,db2 --parallel-schemas=3:db3 #Run with 5 threads for queue related to db1 and db2, run with 3 for queue on db3, 2 for default to rest
#
# We can also disable multi-threading and allocate no queues
#
# --default-parallelism=0 and no --parallel-schemas options - runs a single-threaded process and creates no queues.
#
# The following pertains to mysqlpump in terms of restrictions
#
# mysqlpump does not dump the performance_schema, ndbinfo or sys schema by default. To dump any of said ones, name them
# explicitly on cmd line. Can also name them with --databases or --include-databases option
#
# mysqlpump does not dump the INFORMATION_SCHEMA schema
#
# mysqlpump does not dump InnoDB CREATE_TABLESPACE statements
#
# mysqlpump dumps user accounts in logical form using CREATE USER and GRANT statements (for example - when using the --include-users or --users option)
# For this reason, dumps of the mysql system DB do not by default include the grant tables that contain user defs:
#
# user,db,tables_priv, columns_priv, procs_priv or proxies_priv. To dump any of the grant tables, name the mysql DBs by the table names:
#
# mysqlpump mysql user db ...
#
# The following section pertains to mysqlshow.
#
# The mysqlshow client can be used to quickly see which DB exists, their tables or a table's columns or indexes.
#
# mysqlshow provides a cmd-line interface to several SQL SHOW statements. The same info can be obtained by using those statements directly.
# For example - we can issue them from the mysql client program.
#
# mysqlshow [<options>] [<db_name> [<tbl_name> [<col_name>]]]
#
# If no DB is given - a list of DB names is shown.
# If no table is given - all matching tables in the DB are shown.
# If no column is given - all matching columns and column types in the table are shown.
#
# The output displays only the names of those databases, tables or columns for which you have some privs.
# 
# If the last argument contains shell or SQL wildcard chars (*, ?, %, or _) - only those names that are matched
# by the wildcard are shown. If a DB name contains any underscores - those should be escaped with // or /.
#
# * and ? are converted into SQL % and _ wildcard chars. This might cause some confusion when you try to display
# the columns for a table with a _ in the name, because in this case - mysqlshow shows you only the table names
# that match the pattern.
#
# Can be fixed by adding an extra % last on the cmd line as a arg
#
# mysqlshow can utilize the following options:
#
# 		Format 					Desc
# --bind-address 	 Use specified network interface to connect to MySQL server
# --compress 		 Compress all information sent between client and server
# --count 			 Show the number of rows per table
# --debug 			 Write debugging log
#
# --debug-check 	 Print debug info when program exits
# --debug-info 	 Print debug info, memory and CPU stats when exiting
# --default-auth 	 Auth plugin to use
# --default-char-  Specify default charset
#   set
# --defaults-extra- Read named option file in addition to usual option files
#   file
#
# --defaults-file  Read only named option file
# --defaults-group Option group suffix value
#  -suffix
#
# --enable-cleartext Enable cleartext Auth plugin
#  -plugin 			 
# --get-server-      Request RSA public key from server
#   public-key
# --help 				Display help message and exit
# --host 				Connect to MySQL server on given host
# --keys 				Show table indexes
# --login-path 		Read login path options from .mylogin.cnf
# --no-defaults 		Read no option files
#
# --password 			Password to use when when connecting to server
# --pipe 				On Windows, connect to server using named pipe
# --plugin-dir 		Dir where plugins are installed
# --port 				TCP/IP port number for connection
# --print-defaults 	Print default options
#
# --protocol 			Connection protocol to use
# --secure-auth 		REMOVED
# --server-public-   Path name to file containing RSA public key
#   key-path
# --shared-memory    Name of the shared memory to use for shared-memory connections
#  -base-name
# --show-table-type 	Show a column indicating the table type
# --socket 				For connections to localhost, the Unix socket file to use
# --ssl-ca 				File that contains list of trusted SSL Cert Auths
#
# --ssl-capath 		Dir that contains trusted SSL Cert Auth cert files
# --ssl-cert 			File that contains X.509 cert
# --ssl-cipher 		List of permitted ciphers for connection encryption
# --ssl-crl 			File that contains cert revocation lists
# --ssl-crlpath 		Dir that contains cert revocation list files
# --ssl-fips-mode 	Whether to enable FIPS mode on the client side
#
# --ssl-key 			File that contains X.509 key
# --ssl-mode 			Security state of connection to server
# --status 				Display extra information about each table
# --tls-version 		Protocols permitted for enc. connections
# --user 				MySQL user name to use
# --verbose 			Verbose
# --version 			Verison info and exit
#
# --help, -? - Display a help message and exit
# --bind-address=<ip address> - On a computer having multiple network interfaces, use this to select which interface to use for connecting to the MySQL server.
# --character-sets-dir=<dir name> - The dir where char sets are installed
#
# --compress, -C - Compress all info sent between client and server if both support it
# --count - Show number of rows per table. Can be slow for non-MyISAM tables.
# --debug[=<debug options>], - Write a debugging log. A typical <debug_options> string is d:t:o, <file_name>. Defaults to d:t:o
#  -# [<debug_options>]
# --debug-check - Print some debug info when the program exits
# --debug-info - Print debbug info, memory and CPU usage stats upon exit
# --default-character-set=<charset name> - Use <charset_name> as default char set
#
# --default-auth=<plugin> - Hint about client-side auth plugin to use
# --defaults-extra-file=<file name> - Read this option file after the global option file but (on Unix) before the user option file.
# 											     Relative if relative, absolute if absolute - error raised if inaccessible or lack of perms.
# --defaults-file=<file name> - Use only said file. Still uses .mylogin.cnf - relative if relative, absolute if absolute.
# --defaults-group-suffix=<str> - Regex suffix matching
# 
# //cleartext, get-server-public-key
#
# --keys, -k - Show table indexes
# --host=<host name>, - Connect to MySQL server on the given host 
#  -h <host_name>
# --login-path=<name> - options from the named login path in the .mylogin.cnf - option group for MySQL server to connect to and which acc to auth as
# --no-defaults - Still reads .mylogin.cnf
# --password[=<password>], -p [<password>] - pw to use, normal dynamics in relation to no space 
# --pipe, -W - connect using named pipe. Only applies if named-pipe connections are supported
# --plugin-dir=<dir name> - Where to look for plugins, use if --default-auth can't find
#
# --port=<port num>, -P <port_num> - TCP/IP port to use for connection
# --print-defaults - Print the program name and all options that it gets from option files.
# --protocol={TCP|SOCKET|PIPE|MEMORY} - The protocol to use for the connection
# --secure-auth - REMOVED
# --server-public-key-path=<file name> - Path name to a file containing a client-side copy of the public key required by the server for RSA key pair
# 													  exchange. Must be PEM, applies to sha256_password or caching_sha2_password auth plugin.
#
# 													  Ignored for accounts that do not authenticate with said things. Also ignored if 
# 													  RSA-based PW exchange is not used.
#
# 													  If --server-public-key-path=<file name> is given and specifies a valid public key - it takes precedene over
# 													  --get-server-public-key
#
# 													  For sha256_password, this applies only if MySQL was built using OpenSSL.
#
# --shared-memory-base-name=<name> 		  On Windows, shared-memory name to use for connections made using shared memory to a local server.
# 													  Defaults to MYSQL - case-sensitive. Must be started with --shared-memory to enable shared-memory connections
#
# --show-table-type, -t 					  Show a column indicating the table type - as in SHOW FULL TABLES. The type is BASE TABLE or VIEW.
#
# --socket=<path>, -S <path> 				  For connections to localhost, the Unix socket file to use or on Windows the named pipe to use
#
# --ssl* 										  Options that begin with --ssl specify whether to connect to the server using SSL and indicate where to find SSL keys and certs.
#
# --ssl-fips-mode={OFF|ON|STRICT} 		  etc.
#
# --status, -i 								  Display extra info about each table
# --tls-version=<protocol list> 			  Protocols allowed for secure connections
# --user=<user name>, -u <user_name> 	  The MySQL user name to use when connecting to the server
# --verbose, -v 								  Verbose mode, stacks
# --version, -V 								  Display version info and exit
#
# The following covers mysqlslap , used for diagnostics to emulate client load for a MySQL Server and to report timing of each stage.
#
# The interaction is emulating as if multiple clients are accessing the server.
#
# mysqlslap [<options>]
#
# Some options such as --create or --query enables you to specify a string containing an SQL statement or a file containing statements.
# If it specifies a file - it must contain one statement per line. (Implicit delimiter is \n)
#
# Use the --delimiter to specify a different delimiter - which allows us to span multiple lines or place multiple statements on a single line.
# Comments cannot be included in terms of mysqlslap
#
# It runs in three stages:
#
# Create schema, table and optionally any stored programs or data to use for the test. This stage uses a single client connection
# 
# Run the load test. Can use many client connections
#
# Clean up (disconnect, drop table if specified) - uses a single client connection
#
# An example of 50 clients, 200 selects for each - created query integrated:
#
# mysqlslap --delimiter=";" 
#   --create="CREATE TABLE a (b int);INSERT INTO a VALUES (23)"
#   --query="SELECT * FROM a" --concurrency=50 --iterations=200
#
# Let mysqlslap build the query SQL statements with a table of two INT and Three VARCHAR columns.
# Use five clients querying 20 times each. 
#
# Do not create the table or insert the data (that is - use previous test's schema and data):
#
# mysqlslap --concurrency=5 --iterations=20 #5 clients, 20 times each
#   --number-int-cols=2 --number-char-cols=3 #2 int, 3 char
#   --auto-generate-sql #Auto build the query statements
#
# Tell the program to load the create, insert and query SQL statements from the specified files - where the
# create.sql has multiple table creation statements delimited by ';' and multiple insert statements delimited by
# ';'
#
# In this instance, the Query file has multiple queries delimited by ';'. Run all of em, then run all
# the queries in the query file with five clients (five times each):
#
# mysqlslap --concurrency=5
#   --iterations=5 --query=query.sql --create=create.sql
#   --delimiter=";"
#
# mysqlslap supports the following options - which can be specified on the cmd line or in the [mysqlslap] and [client]
# groups of an option file.
#
# Format 										Desc
# --auto-generate-sql 			Generate SQL statements automatically when they are not supplied in files or using command options
# --auto-generate-sql 			Add AUTO_INCREMENT column to automatically generated tables
#  -add-autoincrement
# --auto-generate-sql-/[execute-number, guild-primary, load-type, secondary-indexes, unique-query-number, unique-write-number, write-number]
# 										
# 										Number of queries/GUID based primary key to auto generate tables/Test load type
# 										Number of secondary indexes to add to automated generated tables/
# 									   Number of unique queries for automated tests/
# 										Number of unique queries for --auto-generate-sql-write-number/
# 										Number of row inserts to perform on each thread
# --commit 							Number of statements to execute before committing
# --compress 						Compression of info between client and server
#
# --concurrency 					Number of clients to simulate when issuing the SELECT statement
# --create 							File or string containing the statement to use for creating the table
# --create-schema 				Schema in which to run the tests
# --csv 								Generate output in comma-separated values format
# --debug 							Write debugging log
#
# --debug-check 					Print debugging information when program exits
# --debug-info 					Print debugging information, memory and CPU stats when exiting
# --default-auth 					Auth plugin to use
# --defaults-extra-file 		Read named option file in addition to usual option files
# --defaults-file 				Read only named option file
#
# --defaults-group-suffix 		Option group suffix value
# --delimiter 						Delimiter to use in SQL statements
# --detach 							Detach (close and reopen) each connection after each <N> statements
# --enable-cleartext-plugin 	Enable cleartext auth plugin
#
# --engine 							Storage engine to use for creating the table
# --get-server-public-key 		Request RSA public key from server
# --help 							Display help msg and exit
# --host 							Connect to MySQL servers or given host
# --iterations 					Number of times to run the tests
# --login-path 					Read login path options from .mylogin.cnf
# --no-defaults 					Read no option files
# --no-drop 						Do not drop any schema created during the test run
#
# --number-char-cols 			Number of VARCHAR columns to use if --auto-generate-sql is specified
# --number-int-cols 				Number of INT columns to use if --auto-generate-sql is specified
# --number-of-queries 			Limit each client to approx this number of queries
# --only-print 					Do not connect to databases, mysqlslap only prints what it would have done
# --password 						Password to use when connecting to server
# --pipe 							On Windows, connect to server using named pipe
#
# --plugin-dir 					Dir where plugins are installed
# --port 							TCP/IP port number for connection
# --post-query 					File or string containing the statement to execute after the tests have completed
# --pre-query 						File or string containing the statements to execute before running the tests
# --pre-system 					String to execute using system() before running the tests
# --print-defaults 				Print default options
# --protocol 						Connection protocol to use
#
# --query 							File or string containing the SELECT statement to use for retrieving data
# --secure-auth 					REMOVED
# --server-public-key-path 	Path name to file containing RSA public key
# --shared-memory-base-name 	The name of shared memory to use for shared-memory connections
# --silent 							Silent mode
# --socket 							For connections to localhost, the Unix socket file to use
#
# --sql-mode 						Set SQL mode for client session
# --ssl-ca 							File that contains list of trusted SSL cert auths
# --ssl-capath 					Dir that contains trusted SSL Cert Auth cert files
# --ssl-cert 						File that contains X.509 cert
# --ssl-cipher 					List of permitted ciphers for connection encryption
# --ssl-crl 						File that contains cert revocation lists
# --ssl-fips-mode 				Enabling fips mode on client side
#
# --ssl-key 						File that contains X.509 key
# --ssl-mode 						Security state of connection to server
# --tls-version 					Protocols permitted for encrypted connections
# --user 							MySQL user name to use when connecting to server
# --verbose 						Verbose mode
# --version 						Display version info and exit
#
# --help, -? - Display help and exit
# --auto-generate-sql, -a - Generate SQL statements automatically when they are not supplied in files or using command options
# --auto-generate-sql-add-autoincrement - Add an AUTO_INCREMENT column to automatically generated tables
# --auto-generate-sql-execute-number=<N> - Specifies how many queries to generate automatically
#
# --auto-generate-sql-guid-primary - Add a GUID based primary key to automatically generated tables
# --auto-generate-sql-load-type=<type> - Specify the test load type. The permissible values are:
#
# 													  read - Scans tables
# 													  write - Inserts into tables
# 													  key - Read primary keys
# 													  update - update primary keys
# 													  mixed - half inserts, half scanning selects.
#
# 													  Defaults to mixed.
#
# --auto-generate-sql-secondary-indexes= - Specifies how many secondary indexes to add to automatically generated tables. Defaults to none.
#  <N>
# --auto-generate-sql-unique-query-number= - How many different queries to generate for automatic tests. For example - if you run a key
#  <N> 													test that performs 1000 selects - you can use this option with a value of 1000 to run 1000 unique Queries.
#  													   Defaults to 10.
#
# --auto-generate-sql-unique-write-number= - How many different queries to generate for --auto-generate-sql-write-number. Defaults to 10.
#  <N>
# --auto-generate-sql-write-number=<N> 	 - How many row inserts to perform. Defaults to 100.
# --commit=<N> 									 - How many statements to execute before committing. Defaults to 0.
# --compress, -C 									 - Compress all info sent between client and server, if both support compression.
# --concurrency=<N>, -c <N> 					 - Number of parallel clients to simulate
# --create=<value> 								 - File or string containing statement to use for creating the table
# --create-schema=<value> 						 - The schema in which to run the tests. If --auto-generate-sql is also denoted - mysqlslap drops the schema
# 															at the end of the test run.
#
# 															To avoid - use --no-drop as well.
# --csv[=<file name>] 							 - Generate output in comma separated values format. Output goes to named file - or to STD out if no file
# --debug[=<debug options>], 					 - Write a debug log. A typical <debug_options> is d:t:o, <file_name> - defaults to d:t:o, /tmp/mysqlslap.trace
#  -# [<debug_options>]
# --debug-check 									 - Print some debug info when the program exits
# --debug-info, -T 								 - Print debug info, memory and CPU usage stats when exiting.
# --default-auth=<plugin> 						 - A hint about the client side auth plugin to use
# --defaults-extra-file= 						 - Read this option file after the global option file but (on Unix) before the user option file. 
#   <file name>  										If it does not exist/not found - error is thrown. Relative path is interpreted, absolute as absolute
# --defaults-file= 								 - Use only the given option file. relative if relative, absolute if absolute.
#   <file name> 										Still reads .mylogin.cnf
# --defaults-group-suffix 						 - Read not only the usual option groups - but also the regex suffix
#   =<str>
# --delimiter=<str>, 							 - Delimiter to use in the SQL statement supplied in files or using the CMD options.
#  -F <str>
# --detach=<N> 									 - Detach (close and reopen) each connection afer each <N> statements. Default is 0 (connections are not detached)
#
# --enable-cleartext-plugin 					 - Enable the mysql_clear_password cleartext auth plugin
# --engine=<engine name>, 						 - Storage engine to use for creating tables 
#  -e <engine_name>
# --get-server-public-key 						 - Request from the server the RSA public key that it uses for key pair-based PW exchange.
# 															Applies to clients that connect with caching_sha2_password Auth plugin.
#
# 															etc.
#
# --host=<host name>, 							 - Connect to the MySQL server on the given host.
#  -h <host_name>
# --iterations=<N>, 								 - Number of times to run the tests
#  -i <N>
# --login-path=<name> 							 - Read options from the named login path in the .mylogin.cnf path file.
# --no-drop 										 - Prevent mysqlslap from dropping any schema it creates during the test run.
# --no-defaults 									 - Do not read any option files. Exception is .mylogin.cnf
# --number-char-cols=<N>, 						 - Number of VARCHAR columns to use if --auto-generate-sql is specified
#  -x <N>
# --number-int-cols=<N>, 						 - Number of INT columns to use if --auto-generate-sql is specified
#  -y <N>
# --number-of-queries=<N> 						 - Limit each client to approximately this many queries. Query counting takes into account
# 															the statement delimiter. 
# 															
# 															For example - if you invoke mysqlslap as follows, the ; delimiter
# 															is recognized so that each instance of the query string counts as two queries.
# 					
# 															As a result - 5, in this case - not 10 - are inserted.
#
# 															mysqlslap --delimiter=";" --number-of-queries=10
# 																--query="use test;insert into t values(null)"
#
# --only-print 									 - Do not connect to DBs. Only prints what it would have done.
# --password[=<password>],  					 - Normal dynamics
#  -p [<password>]
# --pipe, -W 										 - Connect to the server using a named pipe. Applies only if the server supports named-pipe connections
# --plugin-dir=<dir name> 						 - The dir in which to look for plugins.
# --port=<port num>, 							 - TCP/IP port number to use for the connection
#  -P <port_num>
# --post-query=<value> 							 - File or string containing the statement to execute after the tests have completed.
# 															Execution is not counted for timing purposes.
# --post-system=<str> 							 - String to execute using system() after the tests have completed.
# 															Not counted for timing purposes.
# --pre-query=<value> 							 - File or string containing the statement to execute before running the tests.
# --pre-system=<str> 							 - The string to execute using system() before running the tests. Not counted for timing purposes
#
# --print-defaults 								 - Print the program name and all options that it gets from option files.
# --protocol={TCP|SOCKET|PIPE|MEMORY} 		 - Connection protocol to use for connecting to the server.
# --query=<value>, 								 - File or string containing the SELECT statements to use for retrieving data
#  -q <value>
# --secure-auth 									 - REMOVED
# --server-public-key-path=<file name> 	 - Path name to file containing client-side copy of the public key etc.
# --shared-memory-base-name=<name> 			 - On Windows, shared-memory name to use for connections made using shared memory to a local server.
#  														Only applies if the server supports shared-memory connections.
# --silent, -s 									 - Silent mode. No output.
# --socket=<path>, -S <path> 					 - For connections to localhost, the Unix socket file to use or on Windows - the named pipe to use.
# --sql-mode=<mode> 								 - Set the SQL mode for the client session
# --ssl* 											 - Indications of where to find certs, keys and wether to connect with SSL
# --ssl-fips-mode={OFF|ON|STRICT} 			 - Wether to enable FIPS mode on the client side.
# --tls-version=<protocol list> 				 - The protocols permitted by the client for encrypted connections.
# --user=<user name>, 							 - The MySQL user name to use when connecting to the server
#  -u <user_name>
#
# --verbose, -v 									 - Verbose mode. Stacks.
# --version, -V 									 - Display version info and exit.
#
# The following section covers Administrative and Utility programs
#
# The following pertains to ibd2sdi - InnoDB Tablespace SDI Extraction Utility
#
# ibd2sdi is a utility for extracting serialized dictionary information (SDI) from InnoDB tablespace files.
# SDI data is present all persistent InnoDB tablespace files.
#
# ----------------------------------------------
# SDI:
#
# Dictionary object metadata in a serialized form. SDI is stored in JSON format.
#
# >= 8.0.3, SDI is present in all InnoDB tablespace files except for temp tablespace and undo tablespace files.
# The presence of SDI in tablespace files provides metadata redundancy. For example - dictionary object metadata
# can be extracted from tablespace files using the ib2sdi utility if the data dictionary becomes unavailable.
#
# For a MyISAM table, SDI is stored in a .sdi metadata file in the schema dir. 
# An SDI metadata file is required to perform an IMPORT TABLE operation.
# 															
# ----------------------------------------------
#
# ibd2sdi can be run on:
# file-per-table tablespace files (*.ibd files), 
# general tablespace files (*.ibd files),
# system tablespace files (ibdata* files),
# data dict tablespace (mysql.ibd) 
#
# It is not supported for use with temp tablespaces or undo tablespaces.
#
# ib2sdi can be used at runtime or while the server is offline. 
# During DDL operations, ROLLBACK operations, and to undo log purge operations related to SDI.  
# There may be a short interval of time when ibd2sdi fails to read SDI data stored in the tablespace.
#
# ibd2sdi performs an uncommitted read of SDI from the specified tablespace. Redo logs and undo logs are not accessed.
# To invoke the ibd2sdi:
#
# ib2sdi [<options>] <file_name1> [<file_name2> <file_name3> ...]
#
# ibd2sdi supports multi-file tablespaces like the InnoDB system tablespace - but it cannot be run on more
# than one tablespace at a time.
#
# For multi-file tablespaces:
#
# ibd2sdi <ibdata1 ibdata2>
#
# The files of a multi-file tablespace must be specified in order of the ascending page number.
# If two successive files have the same space ID - the later file must start with the 
# last page number of the previous file + 1.
#
# ibd2sdi outputs SDI (containing id, type and data fields) in JSON format.
#
# ibd2sdi Options
#
# ibd2sdi supports the following options:
#
# --help, -h
#
# ibd2sdi --help
# USAGE: 	/ibd2sdi [-v] [-c <strict-check>] [-d <dump file name>] [-n] <filename1> [<filenames>]
# See http://dev.mysql.com/doc/refman/8.0/en/ibd2sdi.html for usage hints:
#
# -h, --help - Display help and exit
# -v, --version - Display version info and exit
# -#, --debug[=<name>] - Output debug log. see -> http://dev.mysql.com/doc/refman/8.0/en/dbug-package.html
# -d, --dump-file=<name> - Dump the tablespace SDI into the file passed by user.
# 									Without the filename, it will default to stdout
# -s, --skip-data - Skip retrieving data from SDI records. Retrieve only id and type
# -i, --id=<#> - Retrieve the SDI record matching the id passed by user
# -t, --type=<#> - Retrieve the SDI records matching the type passed by user
# -c, --strict-check=<name>
# 		Specify the strict checksum algo by the user.
# 		Allowed values are innodb, crc32, none
# -n, --no-check - Ignore the checksum verification
# -p, --pretty - Pretty format the SDI output. 
#     If false, SDI would be not human readable but it will be of less size
# 		(Defaults to on;  use --skip-pretty to disable)
#
# Variables (--variable-name=<value>) and boolean options {FALSE|TRUE} 
# debug 			(NO DEFAULT)
# dump-file 	(NO DEFAULT)
# skip-data 	FALSE
# id 				0
# type 			0
# strict-check crc32
# no-check 		FALSE
# pretty 		TRUE
#
# --version, -v - Displays MySQL version info. 
#
#  ibd2sdi --version
#  ibd2sdi Ver 8.0.3-dmr for Linux on x86_64 (Source distri)
#
# --debubg[=<debug options>], - Prints a debug log.
#  -# [<debug_options>]
#  
# 	ibd2sdi --debug=d:t /tmp/ibd2sdi.trace
#
# --dump-file=, -d - Dumps serialized dictionary info (SDI) into the specified dump file. 
#   If a dump file is not specified, the  tablespace SDI is dumped to stdout.
#
#   ibd2sdi --dump-file=<file_name>  ../data/test/t1.ibd
# 
# --skip-data, -s - Skip retrieval of data field values from the serialized dictionary information (SDI) and only
#                   retrieves ID, type field values - which are primary keys for SDI records.
#
# 						  ibd2sdi --skip-data ../data/test/t1.ibd
# 						  ["ibd2sdi"
#
# 						  {
# 								"type": 1,
# 							   "id": 330
# 						  }
# 						  ,
# 						  {
# 								"type": 2,
# 								"id": 7
# 						  }
# 						  ]
#
# --id=#, -i #
# 
# 	Retrieves SDI matching the specified table or tablespace object id. 
#  An object id is unique to the object type.
#
#  Table and tablespace object id's are also found in the id column of the mysql.tables and
#  mysql.tablespace data dir tables.
#
#  ibd2sdi --id=7 ../data/test/t1.ibd
#  ["ibd2sdi"
#  ,
#  {
# 		"type": 2,
# 		"id": 7,
# 		"object":
# 			{
# 		"mysqld_version_id": 80003,
# 		"dd_version": 80003,
# 		"sdi_version": 1,
# 		"dd_object_type": "Tablespace",
# 		"dd_object": {
# 			"name": "test/t1",
# 			"comment": "",
# 			"options": "",
# 			"se_private_data": "flags=16417;id=2;server_version=80003;space_version=1;"
# 			"engine": "InnoDB",
# 			"files": [
# 				{
# 					"ordinal_position": 1,
# 					"filename": "./test/t1.ibd",
# 					"se_private_data": "id=2;"
# 				}
# 			]
# 		}
#  }
#  }
#  ]
#
# --type=#, -t # - Retrieves SDI matching the specified object type. SDI is provided for table (type=1) and tablespace (type=2) objects:
# 
# ibd2sdi --type=2 ../data/test/t1.ibd
# ["ibd2sdi"
# ,
# {
# 		"type": 2,
# 		"id": 7,
# 		"object":
# 			{
# 		"mysqld_version_id": 80003,
# 		"dd_version": 80003,
# 		"sdi_version": 1,
# 		"dd_object_type": "Tablespace",
# 		"dd_object": {
# 			"name": "test/t1",
# 			"comment": "",
# 			"options": "",
# 			"se_private_data": "flags=16417;id=2;server_version=80003;space_version=1;"
# 			"engine": "InnoDB",
# 			"files": [
# 				{
# 					"ordinal_position": 1,
# 					"filename": "./test/t1.ibd",
# 					"se_private_data": "id=2;"
# 				}
# 			]
# 		}
# }
# }
# ]
#
# --strict-check, -c - Specifies a strict checksum algo for validating the checksum of pages that are read.
#   Options include innodb, crc32 and none.
#
# Strict of innodb - ibd2sdi --strict-check=innodb ../data/test/t1.ibd
# 
# Strict of crc32 - ibd2sdi -c crc32 ../data/test/t1.ibd
#
# If --strict-check is not specified, validation is performed against non-strict innodb, crc32 and none.
#
# --no-check, -n - Skip checksum validation for pages that are read - ibd2sdi --no-check ../data/test/t1.ibd
#
# --pretty, -p - Outputs SDI in JSON pretty print format. Enabled by default. 
#   If disabled, SDI is not human readable but is smaller in size. Use --skip-pretty to disable
# 
#   ibd2sdi --skip-pretty ../data/test/t1.ibd
#
# The following covers innochecksum - Offline InnoDB File Checksum Utility
#
# Innochecksum prints checksums for InnoDB files. 
#
# This tool reads an InnoDB tablespace file, calculates the checksum for each page, 
# compares the calculated checksum to the stored checksum and reports mismatches, 
# which indicate damaged pages.
#
# Originally developed to speed up verifying the integrity of tablespace files after power
# outages but can also be used after file copies.
#
# Because checksum mismatches cause InnoDB to deliberately shut down a running server,
# it may be preferable to use this tool rather than waiting for an in-production server to encounter the damaged pages.
#
# Innochecksum cannot be used on tablespace files that the server already has open.
# For such files, you should use CHECK TABLE to check tables within the tablespace.
#
# Attempting to run innochecksum on a tablespace that the server already has open will
# result in an "Unable to lock file" error.
#
# If checksum mismatches are found - you would normally restore the tablespace from backup
# or start the server and attempt to use mysqldump to make a backup of the tables within the tablespace.
#
# innochecksum [<options>] <file_name>
#
# innochecksum supports the following options. For options that refer to page numbers, the numbers are zero-based:
#
# --help, -? 
# innochecksum --help
#
# --info, -I
# Synonym for --help. Displays command line help.
# innochecksum --info
#
# --version, -V
# Displays version info
# innochecksum --version
#
# --verbose, -v
# Verbose mode; prints progress indicator to log file every five seconds. 
# 
# innochecksum --verbose - Verbose mode on
#
# innochecksum --verbose=FALSE - Verbose mode off
#
# --verbose and --log can be specified at the same time:
#
# innochecksum --verbose --log=/var/lib/mysql/test/logtest.txt
#
# To locate the progress indicator info in the log file - you can preform the following search:
#
# cat ./logtest.txt | grep -i "okay"
#
# Prints lines simply put of status, progress, etc.
#
# --count, -c - Prints a count of the number of pages in the file and exit.
# innochecksum --count ../data/test/tab1.ibd
#
# --start-page=<num>, -s <num> - Starts at this page number:
#
#  innochecksum --start-page=600 ../data/test/tab1.ibd
#
#  innochecksum -s 600 ../data/test/tab1.ibd
#
# --end-page=<num>, - End at this page number
#  -e <num>
# 							 --end-page=700 ../data/test/tab1.ibd
#
# 							 --p 700 ../data/test/tab1.ibd
# 
# --page=<num>, -p <num> - Check only this page number.
# 									innochecksum --page=701 ../data/test/tab1.ibd
#
# --strict-check, -C - Specify a strict checksum algo. Options include innodb, crc32 and none.
#
# 							  innochecksum --strict-check=innodb ../data/test/tab1.ibd #use innodb checksum
#
# 							  innochecksum -C crc32 ../data/test/tab1.ibd
#
# 							  The following conditions apply:
#
# 							  If you do not specify --strict-check - innochecksum validates against innodb, crc32 and none.
#
# 							  If none: only checksums generated by none are allowed
# 							  If innodb: only checksums generated by innodb are allowed
# 							  If crc32: only checksums generated by crc32 are allowed
#
# --no-check, -n - Ignore the checksum verification when rewriting a checksum. This option may only be used with the innochecksum
# 						 --write option. If the --write option is not specified - innochecksum will terminate.
#
# 						 Example of innodb checksum rewritten to replace invalid checksum:
#
# 						 innochecksum --no-check --write innodb ../data/test/tab1.ibd
#
# --allow-mismatches, - The max number of checksum mismatches allowed before innochecksum terminates.
#  -a 						Defaults to 0. If --allow-mismatches=<N>, where N>=0 - N mismatches are permitted and innochecksum terminates at N+1.
#
# 								When --allow-mismatches is set to 0, innochecksum terminates on the first checksum mismatch.
#
# 								In this example, an existing innodb checksum is written to set --allow-mismatches to 1.
#
# 								innochecksum --allow-mismatches=1 --write innodb ../data/test/tab1.ibd
#
# 								With --allow-mismatches set to 1, if there is a mismatch at page 600 and another at page 700 out of 1k pages
#
# 								If a mismatch at 600 and 700, it's updated for 0-599 - and 601-699 - terminates at second.
# 								Leaves 600 and 700-999 unchanged
#
# --write=<name>, 	 - Rewrite a checksum. When rewriting an invalid checksum, the --no-check option must be used together with
# 								the --write option.
#
# 								The --no-check option tells innochecksum to ignore verification of the invalid checksum.
# 								You do not have to specify the --no-check option if the current checksum is valid.
#
# 								An Algo must be specified when using the --write option. Possible values are:
#
# 								innodb - Checksum calculated in software, using the original algo from InnoDB
# 								crc32 - Checksum calculated using the crc32, possibly done with a hardware assist
# 								none - A constant number
#
# 								The --write option rewrites entire pages to disk. If the new checksum is identical to the existing
# 								checksum, the new checksum is not written to disk in order to minimize I/O.
#
# 								innochecksum obtains an exclusive lock when the --write option is used.
#
# 								In this example, a crc32 checksum is written for tab1.ibd:
#
# 								innochecksum -w crc32 ../data/test/tab1.ibd
#
# 								Here, we replace the invalid crc32 checksum:
#
# 								innochecksum --no-check --write crc32 ../data/test/tab1.ibd
#
# --page-type-summary, - Display a count of each page type in a tablespace. Example:
#  -S 						 innochecksum --page-type-summary ../data/test/tab1.ibd
#
# 								 Sample output for --page-type-summary:
#
# 								 File::./data/test/tab1.ibd
# 								 ====================PAGE TYPE SUMMARY===================
# 								 #PAGE_COUNT PAGE_TYPE
# 								 ========================================================
# 								 		2 		 Index page
# 										0      Undo log page
# 										1 		 Incode page
# 										0 		 Insert buffer free list page
# 										2 		 Freshly allocated page
# 										1 		 Insert buffer bitmap
# 									   0 		 System page
# 										0 		 Transaction system page
# 										1 		 File Space Header
# 										0 		 Extent descriptor page
# 										0 		 BLOB page
# 										0 		 Compressed BLOB page
# 									   0 		 Other type of page
# 								 =========================================================
# 								 Additional information:
# 								 Undo page type: 0 insert, 0 update, 0 other
# 								 Undo page state: 0 active, 0 cached, 0 to_free, 0 to_purge, 0 prepared, 0 other
#
# --page-type-dump,   - Dump the page type info for each page in a tablespace to stderr or stdout. Example:
#  -D 						innochecksum --page-type-dump=/tmp/a.txt ../data/test/tab1.ibd
#
# --log, -l 			 - Log output for the innochecksum tool. A log file name must be provided.
# 								Log output contains checksum values for each tablespace page.
#
# 								For uncompressed tables, LSN values are also provided. The --log replaces the --debug option,
# 								which was available in earlier releases. Example usage:
#
# 								innochecksum --log=/tmp/log.txt ../data/test/tab1.ibd
#
# 								innochecksum -l /tmp/log.txt ../data/test/tab1.ibd
#
# - Option
# Specify this to read from STD input.
# 								Specify the - option to read from STD input. 
# 								
# 								If the - option is missing when "read from standard in" is expected
# 								innochecksum will output innochecksum usage information indicating that the
# 								"-" option was omitted. Examples of usage:
#
# 								cat t1.ibd | innochecksum -
#
# 								In this example, innochecksum writes the crc32 checksum algorithm to a.ibd without
# 								changing the original t1.ibd file.
#
# 								cat t1.ibd | innochecksum --write=crc32 - > a.ibd
#
# The following section covers the case of running innochecksum on Multiple User-defined Tablespace files
#
# User defined tablespace files are denoted (.ibd)
#
# The following examples demonstrate how to run innochecksum on multiple user-defined tablespace files
#
# innochecksum ./data/test/*.ibd #Run innochecksum for all tablespace (.ibd) files in a DB called "test"
#
# innochecksum ./data/test/t*.ibd #Run innochecksum for all tablespace files (.ibd files) that start with t
#
# innochecksum ./data/*/*.ibd #Run innochecksum for all tablespace files (.ibd files) in the data dir
#
# Running innochecksum on multiple user-defined tablespace files is not supported on Windows OS, as Windows shells
# such as cmd.exe do not support glob pattern expansion.
#
# On Windows systems, innochecksum must be run separately for each user-defined tablespace file.
# 
# cmd> innochecksum.exe t1.ibd
# cmd> innochecksum.exe t2.ibd
# cmd> innochecksum.exe t3.ibd
#
# The following section covers innochecksum on Multiple System Tablespace Files
#
# By default - there is only one InnoDB system tablespace file (ibdata1) but multiple files for the system
# tablespace can be defined using the innodb data file path option.
#
# In the following example, three files for the system tablespace are defined using the innodb data file path option:
# ibdata1, ibdata2 and ibdata3
#
# ./bin/mysqld --no-defaults --innodb-data-file-path="ibdata1:10M;ibdata2:10M;ibdata3:10M:autoextend"
#
# The three above files form a logical system tablespace.
#
# To run innochecksum on multiple files that form one logical system tablespace - innochecksum requires the
# - option to read the tablespace file from Standard input - which equates to concatenating multiples files to creating one.
#
# To run the above, we would use:
#
# cat ibdata* | innochecksum -
#
# Windows CMD shell does not support globbing patterns - thus each file must be run seperately.
#
# The following covers myisam_ftdump - Used to display Full-Text Index information:
#
# myisam_ftdump displays info about FULLTEXT indexes in MyISAM tables.
# It reads MyISAM index files directly - so it must be run on the server host where the table is located.
#
# Before using myisam_ftdump, be sure to issue a FLUSH TABLES statement first if the server is running.
#
# myisam_ftdump scans and dumps the entire index - which is not fast. Does not need to be run often, however.
#
# To invoke the myisam_ftdump:
#
# myisam_ftdump [<options>] <tbl_name> <index_num>
#
# We can also specify the table name by naming its index file (a file with .MYI suffix).
#
# If we do not invoke the myisam_ftdump in the dir where the table files are located - the table
# or index file name must be preceded by the path name to the table's DB dir.
#
# Index numbers begin with 0.
#
# Assume the base of:
#
# CREATE TABLE mytexttable
# (
# 	 id 	INT NOT NULL, #Index 0
#   txt  TEXT NOT NULL, #Index 1
#   PRIMARY KEY (id),
#   FULLTEXT (txt)
# ) ENGINE=MyISAM;
#
# If the cwd is test DB dir, invoke myisam_ftdump:
#
# myisam_ftdump mytexttable 1
#
# If our path name to the test DB dir is /usr/local/mysql/data/test - you can also specify the table
# name arg using that path name.
#
# myisam_ftdump /usr/local/mysql/data/test/mytexttable 1
#
# We can also use myisam_ftdump to generate a list of index entries in order of frequency of occurence
# on Unix systems:
#
# myisam_ftdump -c mytexttable 1 | sort -r #-c is count, pipe the output and sort it - -r here is Recursive calling
#
# On Windows, can use:
#
# myisam_ftdump -c mytexttable 1 | sort /R - same as above, except /R is Recursive interaction on Windows
#
# The following options are supported by myisam_ftdump:
#
# --help, -h -? - Display a help message and exit
#
# --count, -c - Calculate per-word stats (counts and global weights)
#
# --dump, -d - Dump the index, include data offset and word weights
#
# --length, -l - Report length distribution
#
# --stats, -s - Report global index stats. Default operation if not other operation is specified
#
# --verbose, -v - Verbose. 
#
# The following section covers - myisamchk - a MyISAM Table-Maintenance Utility
#
# The myisamchk utility gets information about the DB, checks, repairs or optimizes them.
#
# myisamchk works with MyISAM tables (tables with .MYD and .MYI files for storing data and indexes)
#  
# We can also use the CHECK TABLE and REPAIR TABLE to check and repair MyISAM tables.
#
# NOTE: Not supported for partitioned tables, have backups in case of Errors.
#
# General syntax of myisamchk:
#
# myisamchk [<options>] <tbl_name> ...
#
# myisamchk defaults to checking tables - to get more info or correct tables - specify options.
#
# Path of file is relative if relative, Absolute if Absolute
#
# myisamchk *.MYI #Checks all files in CWD
#
# Absolute path check:
#
# myisamchk /path/to/database_dir/*.MYI
#
# * wildcarding is also allowed for Folders.
#
# An example of running a fast check on all MyISAM tables:
#
# myisamchk --silent --fast /path/to/datadir/*/*.MYI
#
# An example of repairing any corrupt tables and checking:
#
# myisamchk --silent --force --fast --update-state \
# 	  --key_buffer_size=64M --myisam_sort_buffer_size=64M \
# 	  --read_buffer_size=1M --write_buffer_size=1M \
# 	  /path/to/datadir/*/*.MYI
#
# Assumes >= 64M memory allocation
#
# When checking tables - no other operations are to be run on them. I.e - they must be locked - or server completely dead.
#
# Otherwise, we might get:
#
# warning: Clients are using or have not closed table properly
#
# This can occur if the table has not been closed or it has been updated - Iterating over it and modifying it in this state,
# can cause corruption and loss of data in terms of MyISAM tables.
#
# If mysqld is running - you must force it to flush table modifications, to clear buffered memory with FLUSH TABLES.
# 
# We could also just use CHECK TABLE to check tables.
#
# myisamchk supports the following options - can be specified on CMD or in the [myisamchk] group of an option file.
#
# FORMAT 					DESC
# --analyze 				Analyze the distribution of key values
# --backup 					Make a backup of the .MYD file as file_name-time.BAK
# --block-search 			Find the record that a block at the given offset belongs to
# --check 					Check the table for errors
# --check-only-changed 	Check only tables that have changed since the last check
#
# --correct-checksum 	Correct the checksum information for the table
# --data-file-length 	Maximum length of the data file (when re-creating data file when it is full)
# --debug 					Write debugging log
# --decode_bits 			?
#
# --defaults-extra-file Read named option file in addition to usual option files
# --defaults-file 		Read only named option file
# --defaults-group 		Option group suffix value
#  -suffix 
# --description 			Print some descriptive info about the table
# --extend-check 			Do very thorough table check or repair that tries to recover every possible row from the data file
# 
# --fast 					Check only tables that have not been closed properly
# --force 					Do a repair operation automatically if myisamchk finds any errors in the table
# --force 					Overwrite old temporary files. For use with the -r or -o option
# --ft_max_word_len 		Max word length for FULLTEXT indexes
# --ft_min_word_len 		Min word length for FULLTEXT indexes
# --ft_stopword_file 	Use stopwords from this file instead of built-in list
# --HELP/--help 					Display help message and exit
# 
# --information 			Print info stats about the table that is checked
# --key_buffer_size 		Size of buffer used for index blocks for MyISAM tables
# --keys-used 				A bit-value that indicates which indexes to update
# --max-record-length 	Skip rows larger than the given length if myisamchk cannot allocate memory to hold them
# --medium-check 			Do a check that is faster than an --extend-check operation
#
# --myisam_block_size 	Block size to be used for MyISAM index pages
# --myisam_sort_ 			The buffer that is allocated when sorting the index when doing a REPAIR or when creating indexes with CREATE INDEX or ALTER TABLE
#  buffer_size
# --no-defaults 			Read no option files
# --parallel-recover 	Same as -r and -n, but creates all keys in parallel using different threads
# --print-defaults 		Print default options
# --quick 					Achieve a faster repair by not modifying the data file
# --read_buffer_size 	Each thread that does a sequential scan allocates a buffer of this size for each table it scans
#
# --read-only 				Do not mark the table as checked
# --recover 				Do a repair that can fix almost any problem except unique keys that are not unique
# --safe-recover 			Do a repair using a old recovery method that reads through all rows in order and updates all index trees based on the rows found
# --set-auto-increment 	Force AUTO_INCREMENT numbering for new records to start at the given value
# --set-collation 		Specify the collation to use for sorting table indexes
# --silent 					Silent mode
# --sort_buffer_size 	The buffer that is allocated when sorting the index when doing a REPAIR or when creating indexes with CREATE INDEX or ALTER TABLE
# --sort-index 			Sort the index tree blocks in high-low order
# --sort_key_blocks 		?
#
# --sort-records 			Sort records according to a particular index
# --sort-recover 			Force myisamchk to use sorting to resolve the keys even if the temporary files would be very large
# --stats_method 			Specifies how MyISAM index stats collection code should treat NULLs
# --tmpdir 					Dir to be used for storing temp files
# --unpack 					Unpack a table that was packed with myisampack
# --update-state 			Store information in the .MYI file to indicate where the table was checked and whether the table crashed.
# --verbose 				Verbose mode
# --version 				Display version information and exit
# --write_buffer_size 	Write buffer size
#
# The following pertains to myisamchk General Options
#
# --help, -? - Display help and exit. Options are grouped by type of operation
# --HELP, -H - Displays help and exit. Presented in a single list.
# --debug=<debug options>, - Write a debugging log. Typical string is d:t:o, <file_name>. Defaults to d:t:o, /tmp/myisamchk.trace
#  -# <debug_options>
# --defaults-extra-file=<file name> - Read this option file after global option file but (On Unix) before the User option file.
# 												  Relative if relative, absolute if absolute - if cannot access file, error is thrown
# --defaults-file=<file name> - Use only the given option file. Relaive if relative, absolute if absolute - error thrown if inaccessible.
# --defaults-group-suffix - Read not only the usual option groups, but also suffix regex. Normally only reads [myisamchk]
#
# --no-defaults - Do not read any option files. .mylogin.cnf is read if exists 
# --print-defaults - Print the program name and all options that it gets from option files
# --silent, -s - Silent mode. Write output only when errors occur - stacks twice (-ss)
# --verbose, -v - Verbose mode. Prints more info about what the program does. Can be used with -d and -e. Stacks.
# --wait, -w - Instead of terminating with an error if the table is locked - wait until the table is unlocked before continuing.
# 					If you are running mysqld with external locking disabled - the table can be locked only by another myisamchk cmd
#
# We can also define the following variables with the general syntax of --var_name=value:
#
# 		Var 					 Default
# decode_bits 				 9
# ft_max_word_len 		 version-dependent
# ft_min_word_len 		 4
# ft_stopword_file 		 built-in-list
# key_buffer_size 		 523264
# myisam_block_size 		 1024
# myisam_sort_key_blocks 16
# read_buffer_size 		 262136
# sort_buffer_size 		 2097144
# sort_key_blocks 		 16
# stats_method 			 nulls_unequal
# write_buffer_size 		 262136
#
# The possible myisamchk vars and their default values can be examined with myisamchk --help:
#
# myisam_sort_buffer_size is used when the keys are repaired by sorting keys, which is the normal case when you use
# --recover. 
#
# sort_buffer_size is a deprecated synonym for myisam_sort_buffer_size
#
# key_buffer_size is used when you are checking the table with --extend-check or when the keys are repaired by inserting
# keys row by row into the table 
#
# Repairing through the key buffer is used in the following cases:
#
# You use --safe-recover
#
# The temp files needed to sort the keys would be more than twice as big as when creating the key file directly.
# This is usually the case when you have large key values for CHAR, VARCHAR or TEXT columns - because the sort operation
# needs to store the complete key values as it proceeds.
#
# If we have  a lot of tmp space and we can force myisamchk to repair by sorting - we can use the --sort-recover option.
#
# Repairing through the key buffer takes much less disk space than using sorting, but is also much slower.
#
# If we wish to have fast repairs - we can set the key_buffer_size and myisam_sort_buffer_size var to about 25%
# of our available memory.
#
# Only one of em is used at a time.
#
# myisam_block_size is the size used for index blocks.
#
# stats_method influences how NULL values are treated for index stats collection when the --analyze option is given.
# It acts like the myisam_stats_method system var.
#
# ft_min_word_len and ft_max_word_len indicate the min and max word length for FULLTEXT indexes on MyISAM tables.
# ft_stopword_file names the stopword file. 
#
# If we use myisamchk to perform an operation that modifies table indexes (such as repair or analyze), the FULLTEXT
# indexes are rebuilt using the default full-text param values for min and max word length and the stopword file unless specified otherwise.
# This can cause Queries to fail.
# 
# This can occur due to that said params are known only by the server.
# They are not stored in MyISAM index files. 
#
# To avoid the problem if you have modified the min or max word length or the stopward file in the server, specify
# the same ft_min_word_len, ft_max_word_len and ft_stopword_file values to myisamchk that we use for mysqld.
#
# For example - if we have set the min word length to 3 - we can repair a table with myisamchk as follows:
#
# myisamchk --recover --ft_min_word_len=3 <tbl_name.MYI>
#
# To ensure that myisamchk and the server uses the same values for full-text params - we can place each one in both the
# [mysqld] and [myisamchk] sections of a option file:
#
# [mysqld]
# ft_min_word_len=3
#
# [myisamchk]
# ft_min_word_len=3
#
# An alternative to using myisamchk is to use the REPAIR TABLE, ANALYZE TABLE, OPTIMIZE TABLE or ALTER TABLE.
#
# The above statements are executed by the server.
#
# The following section covers myisamchk Check options
#
# myisamchk supports the following options for table checking ops:
#
# --check, -c - Check the table for errors. Default operation if you specify no option that selects an operation type explicitly
# --check-only-changed, -C - Check only tables that have changed since the last check
# --extend-check, -e - Check the table extensively. Very slow. Extreme case usage. Can raise key_buffer_Size to help speed.
# --fast, -F - Check only tables that have not been closed properly
# --force, -f - Do a repair operation automatically if myisamchk finds any errors in the table. Same as --recover or -r
# --information, -i - Print info stats about the table that is being checked
# --medium-check, -m - Faster than --extend-check.
# --read-only, -T - Do not mark the table as checked - useful if you use myisamchk to check a table that is in use by some other app that does not use locking 
# 						  - such as mysqld when run with external locking disabled
# --update-state, -U - Store info in the .MYI file to indicate when the table was checked and whether the table crashed. Should be used to get full benefit
# 							  of the --check-only-changed option - but you should not use this option if the mysqld server is using the table and you run it with external locking off.
#
#
# The following section covers myisamchk Repair Options
#
# myisamchk supports the following options for table repair operations (operations performed when an option such as --recover or --safe-recover is given):
#
# --back, -B - Make a backup of the .MYD file as <file_name-time.BAK>
# --character-sets-dir=<dir name> - The dir where char sets are installed
# --correct-checksum - Correct the checksum info for the table
# --data-file-length=<len>, -D <len> - The max length of the data file (when re-creating data file when it is "full")
# --extend-check, -e - Do a repair that tries to recover every possible row from the data file.
# 							  Normally - this also finds a lot of garbage rows.  Extreme case usage.
# --force, -f - Overwrite old intermediate files (files with names like <tbl_name.TMD>) instead of aborting
#
# --keys-used=<val>, - For myisamchk - the option value is a bit value that indicates which indexes to update.
#  -k <val> 			  Each binary bit of the option value corresponds to a table index - where the first index is bit 0.
# 							  
# 							  An option value of 0 disables updates to all indexes, which can be used to get faster inserts.
#							  Deactivated indexes can be reactivated by using myisamchk -r.
#
# --no-symlinks, -l  - Do not follow symbolic links. Normally myisamchk repairs the table that a symlink points to. 
# 							  Deprecated past 4.0 because symlinks are not removed during repair operations.
#
# --max-record-length= - Skip rows larger than the given length if myisamchk cannot allocate memory to hold them.
#  <len>  							  
#
# --parallel-recover,  - Use the same technique as -r and -n, but create all the keys in parallel - using different threads. (beta)
#  -p 
#
# --quick, -r 			  - Achieve a faster repair by modifying only the index file - not the data file.
# 								 You can specify this option twice to force myisamchk to modify the original data file in case of duplicate keys.
#
# --recover, -r 		  - Do a repair that can fix almost any problem except unique keys that are not unique.
# 								 Use this to recover tables.
#
# 								 Data remains intact if this fails. If it fails, use --safe-recover instead.
#
# --safe-recover,  	  - Do a repair using an old recovery method that reads through all rows in order and updates all index trees
#  -o 						 based on the rows found.
#
# 								 Slower than --recover, uses less memory though.
#
# --set-collation=     - Specify the collation to use for sorting table indexes. The char set is implied by the first part of the collation name.
#  <name> 
#
# --sort-recover, 	  - Force myisamchk to use sorting to resolve the keys even if temp files would be v large
#  -n
#
# --tmpdir=<dir name>, - The path of the dir to be used for storing temp files. If not set - myisamchk uses the value of the TMPDIR env var.
#  -t <dir name> 			 --tmpdir can be set to a list of dir paths that are used successivly on rotation for creating temp files.
#								 Separation char is : on Unix, ; on Windows.
#
# --unpack, -u - Unpack a table that was packed with myisampack.
#
# The following covers myisamchk options for actions other than table checks and repairs:
#
# --analyze, -a - Analyze the distribution of key values. This improves join performance by enabling the join optimizer to better choose the order
# 						in which to join the tables and which indexes it should use.
#
# 						To obtain information about the key distribution - use a myisamchk --description --verbose <tbl name> command or
# 						the SHOW INDEX FROM <tbl_name> statement.
#
# --block-search=<offset> - Find the record that a block at the given offset belongs to.
#  -b <offset>
#
# --description, -d - Print some descriptive info about the table. Specifying the --verbose option once or twice produces more info.
#
# --set-auto-increment [=<value>], - Force AUTO_INCREMENT numbering for new records to start at the given value (or higher - if there exists
#  -A [<value>] 							 records with AUTO_INCREMENT values this large).
#
# 												 If <value> is not specified, <AUTO_INCREMENT> numbers for new records begin with the largest value in the table + 1.
#
# --sort-index, -S 	- 	Sort the index tree blocks in high-low order. Optimizes seeks and makes table scans that use indexes faster.
#
# --sort-records=<N>, - Sort records according to a particular index. This makes your data much more localized and may speed up range-based
#  -R <N> 					SELECT and ORDER BY operations that use this index.
#
# 								May be very slow at first use.
#
# 								To determine table index number - use SHOW INDEX, which displays a table's indexes in the same order
# 								that myisamchk sees them. Indexes are numbered beginning with 1.
#
# 								If keys are not packed (PACK_KEYS=0) - they have the same length - so when myisamchk sorts and moves records,
# 								it just overwrites record offsets in the index.
#
# 								If keys are packed (PACK_KEYS=1), myisamchk must unpack key blocks first - then re-create indexes and pack
# 								the key blocks again. (re-creating indexes is faster than updating offsets for each index - in this case)
#
# The following covers how to obtain table info with myisamchk:
#
# To obtain a desc of a MyISAM table or stats about it - use the commands shown here. The output from these commands is explained later in this section.
#
# myisamchk -d <tbl name> - Runs myisamchk in "describe mode" to produce a description of your table. 
# 									 If you start the MySQL server with external locking disabled - myisamchk may report an
# 									 error for a table that is updated while it runs.
#
# 									 However - because myisamchk does not change the table in describe mode - there is no risk of destroying data.
#
# myisamchk -dv <tbl name> - Adding -v runs myisamchk in verbose mode so that it produces more info about the table. Stacks.
# myisamchk -eis <tbl name> - Shows only the most important information from a table. This operation is slow because it must read the entire table.
# myisamchk -eiv <tbl name> - This is like -eis, but tells you what is being done.
#
# The <tbl_name> arg can be either the name of a MyISAM table or the name of its index file. Multiple args can be given.
# 
# Assume following table Structure:
#
# CREATE TABLE person
# (
#   id 			INT NOT NULL AUTO_INCREMENT,
# 	 last_name 	VARCHAR(20) NOT NULL,
#   first_name VARCHAR(20) NOT NULL,
#   birth 		DATE,
#   death 		DATE,
#   PRIMARY KEY  (id),
#   INDEX (last_name, first_name),
#   INDEX (birth)
# ) MAX_ROWS = 10000000 ENGINE=MYISAM;
#
# Suppose also that the table has these data and index file sizes:
# -rw-rw---- 	1 mysql 	mysql 	9347072 Aug 19 11:47 person.MYD
# -rw-rw---- 	1 mysql 	mysql 	6066176 Aug 19 11:47 person.MYI
#
# An example of myisamchk -dvv would then output:
# 
# MyISAM file: 	person
# Record format: 	Packed
# Character set: 	utf8mb4_0900_ai_ci (255)
# File-version: 	1
# Creation time: 	2017-03-30 21:21:30
# Status: 			checked, analyzed, optimized, keys, sorted index pages
# Auto increment key: 				1 	Last value: 			306688
# Data records: 				 306688 	Deleted blocks: 			  0
# Datafile parts: 			 306688 	Deleted data: 				  0
# Datafile pointer (bytes): 		4 	Keyfile pointer (bytes):  3
# Datafile length: 			9347072  Keyfile length: 	  6066176
# Max datafile length:  4294967294  Max keyfile length: 17179867159
# Recordlength: 					  54  
#
# table description:
# Key Start Len Index 	Type 					Rec/key 			Root Blocksize
# 1 	2 		4 	 unique 	long 					1 								 1024
# 2 	6 		80  multip. varchar prefix 	0 								 1024
# 		87 	80 			varchar 				0
# 3 	168 	3 	 multip. uint24 NULL 		0 								 1024
#
# Field Start Length 	Nullpos 	Nullbit 	Type
# 1 	  1 	  1 
# 2 	  2 	  4 									no zeros
# 3 	  6 	  81 									varchar
# 4 	  87 	  81 									varchar
# 5 	  168   3 				1 			1 		no zeros
# 6 	  171   3 				1 			2 		no zeros
#
# Explanations for the types of information myisamchk produces are given here. "Keyfile" refers to the index file.
# "Record" and "row" are synonymous - as are "field" and "column"
#
# The initial part of the table desc contains these values:
#
# MyISAM file - Name of the MyISAM (index) file
# Record format - The format used to store table rows. The preceding examples use Fixed length.
# 						Other possible values are Compressed and Packed. (Packed corresponds to what SHOW TABLE STATUS reports as Dynamic)
# Character set - The table default char set
# File-version  - Version of MyISAM format. Always 1.
# Creation time - When the data file was created
# Recover time  - When the index/data file was last reconstructed
# Status 		 - Table status flags. Possible values are crashed, open, changed, analyzed, optimized keys and sorted index pages.
# Auto increment key, Last value - The key number associated the table's AUTO_INCREMENT column, and most recently generated value. Does not appear if none found.
# Data records  - Number of rows in the table
# Deleted blocks - How many deleted blocks still have reserved space. can optimize tables to minimize this space.
# Datafile parts - For dynamic-row format, this indicates how many data blocks there are. For an optimized table without fragmented rows, this is the same as Data records.
# 
# Deleted data - How many bytes of unreclaimed deleted data there are. You can optimize your table to minimize this space.
# Datafile pointer - The size of the data file pointer, in bytes. Usually is 2,3,4 or 5. Most manage with 2 - cannot be controlled with MySQL.
# 							For fixed tables - this is row address. For dynamic tables, this is byte address.
# Keyfile pointer - Size of the index file pointer, in bytes. Usually 1,2 or 3. Most manage with 2 - auto calculated by MySQL. is always a block address.
# Max datafile length - How long the table data file can become, in bytes.
# Max keyfile length - How long the table index can become, in bytes.
# Recordlength - How much space each row takes, in bytes.
#
# The table desc part of the output includes a list of all keys in the table. For each key, myisamchk displays some low-level info:
#
# Key - This key's number. This value is shown only for the first column of the key. If this value is missing, the line corresponds to the
# second or later column of a multiple-column key.
#
# For the table shown in the example, there are two table description lines for the second index.
# This indicates that it is a multiple-part index with two parts.
#
# Start - Where in the row this portion of the index starts.
# Len - How long this portion of the index is. For packed numbers, this should always be the full length of the column.
# 		  For strings - it may be shorter than the full length of the indexed column - because you can index a prefix of a string column.
#
# 		  The total length of a multiple-part key is the sum of the Len values for all key parts.
# Index - Whether a key value can exist multiple times in the index. Possible values are unique or multip. (multiple)
# Type - What data type this portion of the index has. This is a MyISAM data type with the possible values packed, stripped or empty.
# Root - Address of the root index block.
# Blocksize - The size of each index block. By default is 1024, but the value may be changed at compile time when MySQL is built from source.
# Rec/key - This is a statistical value used by the optimizer. It tells how many rows there are per value for this index.
# 				A unique index always has a value of 1. This may be updated after a table is loaded (or greatly changed) with myisamchk -a.
#
# 				If this is not updated at all,a default value os 30 is given.
#
# The last part of the output provides info about each column:
#
# Field - The column number.
# Start - The byte position of the column named within table rows.
# Length - The length of the column in bytes.
# Nullpos, Nullbit - For columns that can be NULL, MyISAM stores NULL values as a flag in a byte.
# 							Depending on how many nullable columns there are, there can be one or more bytes used for this purpose.
# 							The Nullpos and Nullbit values - if nonempty, indicate which byte and bit contains that flag indicating whether the column is NULL.
#
# 							The position and number of bytes used to store NULL flags is shown in the line for field 1. This is why there are
# 							six Field lines for the person table even though it has only five columns.
#
# Type - The data type. The value may contain any of the following descriptors:
# 			constant - all rows have the same value.
# 			no endspace - Do not store endspace.
# 			no endspace, not_always - Do not store endspace and do not do endspace compression for all values
# 			no endspace, no empty - Do not store endspace. Do not store empty values
# 			table-lookup - The column was converted to an ENUM.
# 			zerofill(N) - The most significant N bytes in the value are always 0 and are not stored.
#
# 			no zeros - Do not store zeros.
# 			always zero - Zero values are stored using one bit.
#
# Huff tree - The number of the Huffman tree associated with the column.
# Bits - The number of bits used in the Huffman tree.
#
# The Huff tree and Bits fields are displayed if the table has been compressed with myisampack.
#
# an example of a myisamchk -eiv output:
#
# Checking MyISAM file: person
# Data records: 	306688 		Deleted blocks: 				0
# - check file-size
# - check record delete-chain
# No recordlinks
# - check key delete-chain
# block_size 1024:
# - check index reference
# - check data record references index: 1
# Key: 	1: 	Keyblocks used: 98% Packed: 	0% 	Max levels: 3
# - check data record references index: 2
# Key: 	2: 	Keyblocks used: 99% Packed: 	97% 	Max levels: 3
# - check data record references index: 3
# Key: 	3: 	Keyblocks used: 98% Packed: 	-14%  Max levels: 3
# Total: 		Keyblocks used: 98% Packed: 	89%
#
# - check records and index references
# *** LOTS OF ROW NUMBERS DELETED ***
#
# Records: 		  306688 	M.recordlength: 		25 Packed: 			83%
# Recordspace used: 97% 	Empty space: 			2% Blocks/Record: 1.00
# Record blocks: 306688 	Delete blocks: 		0
# Record data:  7934464 	Deleted data: 			0
# Lost space: 	  256512 	Linkdata: 		1156096
# 
# User time 43.08, System time 1.68
# Maximum resident set size 0, Integral resident set size 0
# Non-physical pagefaults 0, Physical pagefaults 0, Swaps 0
# Blocks in 0 out 7, Messages in 0 out 0, Signals 0
# Voluntary context switches 0, Involuntary context switches 0
# Maximum memory usage: 1046926 bytes (1023k)
#
# myisamchk -eiv output includes the following info:
#
# data records - Number of rows in the table
# Deleted blocks - How many deleted blocks still have reserved space. You can optimize your table to minimize this space.
# Key - The key number
# Keyblocks used - What percentage of the keyblocks are used. When a table has just been reorganized with myisamchk, the values
# 						 are very high (very near theoretical maximum)
# Packed - MySQL tries to pack key values that have a common suffix. This can only be used for indexes on CHAR and VARCHAR columns.
# 			  For long indexed strings that have similar leftmost parts - this can significantly reduce the space used.
#
# 			  In the preceeding example - the second key is 40 bytes long and a 97% reduction in space is achieved.
#
# Max levels - How deep the B-tree for this key is. Large tables with long key values get high values
# Records - How many rows are in the table.
# M.recordlength - The average row length. This is the exact row length for tables with fixed-length rows, because all rows have the same length.
# Packed - MySQL strips spaces from the end of strings. The Packed value indicates the percentage of savings achieved by doing this.
# Recordspace used - What percentage of the data file is used.
# Empty space - What percentage of the data file is unused.
# Blocks/Record - Average number of blocks per row (that is - how many links a fragmented row is compsoed of). This is always 1.0 for fixed-format tables.
#						This value should stay as close to 1.0 as possible. If it gets too large - you can reorganize the table.
# Recordblocks - How many blocks (links) are used. For fixed-format tables, this is the same as the number of rows.
# Deleteblocks - How many blocks (links) are deleted
#
# Recorddata - How many bytes in the data file are used
# Deleted data - How many bytes in the data file are deleted (unused)
# Lost space - If a row is updated to a shorter length - some space is lost. This is the sum of all such losses - in bytes.
# Linkdata - When the dynamic table format is used, row fragments are linked with pointers (4 to 7 bytes each).
# 				 Linkdata is the sum of the amount of storage used by all such pointers.
#
# The following section covers myisamchk Memory Usage:
#
# Memory allocation is important when you run myisamchk. myisamchk uses no more memory than its memory-related vars are set to.
# If you are going to use myisamchk on very large tables - you should first decide how much memory you want it to use.
#
# The default is to use about 3MB to perform repairs. By using larger values, you can get myisamchk to operate faster.
# For example, if you have more than 512MB RAM available - you could use options such as these (in addition to any other options you might specify):
#
# myisamchk --myisam_sort_buffer_size=256M \
# 						--key_buffer_size=512M   \
# 						--read_buffer_size=64M 	 \
# 						--write_buffer_size=64M ...
#
# Using --myisam_sort_buffer_size=16M is probably enough for most cases.
#
# Be aware that myisamchk uses temp files in TMPDIR. If TMPDIR points to a memory file system - out of memory
# errors can easily occur. If this happens - run myisamchk with the --tmpdir=<dir name> option to specify
# a dir located on a file system that has more space.
#
# When performing repair operations, myisamchk also needs a lot of disk space:
#
# Twice the size of the data file (the original file and copy). This space is not needed if you do a repair
# with --quick; in this case, only the index file is re-created. (This space must be available on the same file system as the original data file)
# as the copy is created in the same dir as the original.
# 
# Space for the new index file that replaces the old one. The old index file is truncated at the start of the repair operation, so you usually
# ignore this space. This space must be available on the same file system as the original data file.
#
# When using --recover or --sort-recover (but not when using --safe-recover) - you need space on disk for sorting.
# This space is allocated in the temp dir (specified by TMPDIR or --tmpdir=<dir name>). 
#
# The following formula yields the amount of space required:
#
# (largest_key + row_pointer_length) * number_of_rows * 2
#
# You can check the length of the keys and the row_pointer_length with myisamchk -dv <table name>
# The <row_pointer_length> and <number_of_rows> values are the <Datafile pointer> and <Data records> values
# in the table desc.
#
# To determine the <largest_key> value - check the Key lines in the table desc.
# The Len column indicates the number of bytes for each key part.
# For a multiple-column index, the key size is the sum of the Len values for all key parts.
#
# If disk space is an issue in relation to repairs, use --safe-recover instead of --recover
#
# The following part pertains to myisamlog - Interactions of displaying MyISAM Log File Contents
#
# myisamlog processes the contents of a MyISAM log file. To create such a file, start the server with
# a --log-isam=<log file> option.
#
# Invoke myisamlog as follows:
#
# myisamlog [<options>] [<file_name> [<tbl_name>] ...]
#
# The default operation is to update (-u).
# If a recovery is done (-r) - all writes and possibly updates and deletes are done and errors are only counted.
# The default log file name is myisam.log if no <log_file> arg is given.
#
# If tables are named on the cmd line - only those tables are updated.
#
# myisamlog supports the following options:
#
# -?, -I - display a help message and exit
# -c <N> - Execute only N amount of commands
# -f <N> - Specify the max number of open files
# -F <filepath/> - Specify the file path with a trailing slash
# -i - Display extra info before exiting
# -o <offset> - Specify the starting offset
#
# -p <N> - Removes <N> components from path
# -r - Performs a recovery operation
# -R <record_pos_file record_pos> - Specify record pos file and record pos
# -u - Perform an update operation
# -v - Verbose mode. Print more output. Stacks.
# -w <write_file> - Specify the write file
# -V - version info
#
# myisampack - Generate compressed, Read-Only MyISAM Tables
#
# The myisampack utility compresses MyISAM tables. myisampack works by compressing each column in the table separately.
# Usually, myisampack packs the data file 40% to 70%
#
# When the table is used later - the server reads into memory the info needed to decompress columns.
# This results in much better performance when accessing individual rows, because you only have to uncompress exactly one row.
#
# MySQL uses mmap() when possible to perform memory mapping on compressed tables.
# If mmap() does not work - MySQL falls back to normal read/write file operations.
#
# NOTE: 
#
# If the mysqld server was invoked with external locking disabled - it is not a good idea to invoke myisampack if the 
# table might be updated by the server during the packing process. It is better to compress tables with the server turned off.
#
# After packing a table - it becomes read only. 
#
# myisampack does not support partitioned tables.
#
# To invoke:
#
# myisampack [<options>] <file_name> ...
#
# Each file name argument should be the name of an index (.MYI) file. 
# If you are not in the DB dir, you should specify the path name to the file. 
# It is permissible to omit the .MYI extension
#
# After we compress a table with myisampack - we can use myisamchk -rq to rebuild its indexes.
# 
# 
# It also reads option files and supports the options for processing them.
#
# myisampack supports the following options: 
#
# --help, -?
# --backup, -b - Make a backup of each table's data file using the name <tbl_name>.OLD
# --character-sets-dir=<dir name> - The dir where char sets are installed.
# --debug[=<debug_options>], - Write a debugging log. A typical <debug_options> string is d:t:o, <file_name>. Defaults to d:t:o
#  -# [<debug_options>]
# --force, -f - Produce a packed table even if it becomes larger than the original or if the intermediate file from an earlier invocation
# 					 of myisampack exists.
#
# 					 myisampack creates an intermediate file named <tbl_name>.TMD in the database dir while it compresses the table.
# 					 If you kill myisampack, the .TMD file might not be deleted.
# 					 Normally, myisampack exits with an error if it finds that <tbl_name>.TMD exists.
#
# 					 With --force, myisampack packs the table anyway.
#
# --join=<big tbl name>, - Join all tables named on the cmd line into a single packed table <big_tbl_name>.
#  -j <big_tbl_name> 		All tables that are to be combined must have identical structure (same column names and types, same indexes, etc.)
# 	
# 									<big_tbl_name> must not exist prior to the join operation. All source tables named on the cmd line
# 									to be merged into <big_tbl_name> must exist. The source tables are read for the join operation but not modified.
# --silent, -s 			 - Silent mode. Writes only error outputs.
# --test, -t 				 - Do not actually pack the table, just test packing it.
# --tmpdir=<dir name>,   - Use the named dir as the location where myisampack creates temp files.
#  -T <dir_name>
# --verbose, -v 			 - Verbose. Write info about the progress of the packing ops and its result.
# --version, -V 			 - Display version info and exit
# --wait, -w 				 - Wait and retry if the table is in use. If the mysqld server was invoked with external locking disabled, it is not a good idea
# 									to invoke myisampack if the table might be updated by the server during the packing process.
#
# The following sequence of commands illustrates a typical table compression session:
#
# ls -l station
# -rw-rw-r-- 	1 monty 	my 		994128 Apr 17 19:00 station.MYD
# -rw-rw-r-- 	1 monty  my 		 53248 Apr 17 19:00 station.MYI
#
# myisamchk - dvv station
#
# MyISAM file: 		station
# Isam-version: 	2
# Creation time: 	1996-03-13 10:08:58
# Recover time:   1997-02-02 3:06:43
# Data records: 				  1192  Deleted blocks: 			  0
# Datafile parts: 			  1192  Deleted data: 			     0
# Datafile pointer (bytes): 	  2  Keyfile pointer (bytes):   2
# Max datafile length: 	 54657023  Max keyfile length: 33554431
# Recordlength: 					834
# Record format: Fixed length
#
# table description:
# Key  Start  Len  Index   Type 				Root Blocksize 	Rec/key
# 1 	 2 	  4 	 unique 	unsigned long 	1024 1024 					1
# 2 	 32 	  30 	 multip. text 			  10240 1024 					1
# 
# Field Start Length Type
# 1 	  1 	  1
# 2 	  2 	  4
# 3 	  6 	  4
# 4 	  10 	  1
# 5 	  11 	  20
# 6 	  31 	  1
# etc.
#
# myisampack station.MYI
# Compressing station.MYI: (1192 records)
# - Calculating statistics
#
# normal: 		20  empty-space: 		16 empty-zero: 		12 empty-fill:  11
# pre-space: 	 0  end-space: 		12	table-lookups: 	 5 zero: 		  7
# Original trees:  57 	After join: 17
# - Compressing file
# 87.14%
# Remember to run myisamchk -rq on compressed tables
# 
# myisamchk -rq station
# - check record delete-chain
# - recovering (with sort) MyISAM-table 'station'
# Data records: 1192
# - Fixing index 1
# - Fixing index 2
#
# mysqladmin -uroot flush-tables
#
# ls -l station
# -rw-rw-r-- 	1 monty 	my 		127874 Apr 17 19:00 station.MYD
# -rw-rw-r-- 	1 monty 	my 		 55296 Apr 17 19:04 station.MYI
#
# myisamchk -dvv station
# 
# MyISAM file: 		station
# Isam-version: 		2
# Creation time: 		1996-03-13 10:08:58
# Recover time: 		1997-04-17 19:04:26
# Data records: 					  1192 	Deleted blocks: 		    0
# Datafile parts: 				  1192 	Deleted data: 		       0
# Datafile pointer (bytes): 		  3 	Keyfile pointer (bytes): 1
#
# Max datafile length:      16777215 	Max keyfile length: 131071
# Recordlength: 						834
# Record format: Compressed
#
# table description:
# Key Start Len 	Index 	Type 			   Root 		Blocksize 	Rec/key
# 1 	2 		4 		unique 	unsigned long  10240 		1024 				1
# 2 	32 	30 	multip.  text 				54272 		1024 				1
# 
# Field Start Length Type 										Huff tree Bits
# 1 	  1 	  1 		constant 								 		  1    0
# 2 	  2 	  4 		zerofill(1) 									  2 	 9
# etc.
#
# myisampack displays the following kinds of info:
#
# normal - Number of cols for which no extra packing is used
# empty-spaces - Number of cols containing values that are only spaces. Occupies one bit.
# empty-zero - Number of cols containing values that are only binary zeros. Occupies one bit
# empty-fill - Number of integer cols that do not occupy the full byte range of their type. These are 
# 					changed to a smaller type. For example - a BIGINT column (eight bytes) can be stored
# 					as a TINYINT col (one byte) if all the values are in the range of a TINYINT (-128 to 127)
# pre-space  - Number of decimal cols that are stored with leading spaces. In this case - each value contains a count for the number of leading spaces.
# end-space  - Number of columns that have a lot of trailing space. In this case - each value contains a count for the number of trailing spaces
# table-lookup - The column had only a small number of different values, which are converted to ENUM before Huffman compression.
# zero 		 - Number of cols in which all values are zero
# Original trees - Initial number of Huffman trees.
# 
# After join - Number of distinct Huffman trees left after joining trees to save some header space.
#
# After a table has been compressed, the Field lines displayed by myisamchk -dvv include additional informaton about each col:
#
# Type - The data type. Can be one of the following:
#
# constant - Same values across all rows
# no endspace - Do not store endspace
# no endspace, not_always - Do not store endspace and do not do endspace compression for all values
# no endspace, no empty - Do not store endspace. Do not store empty values
# table-lookup - The column was converted to an ENUM.
# zerofill(<N>) - The most significant <N BYTES> in the value are always 0 and are not stored.
# no zeros - Do not store zeros
# always zero - Zero values are stored using one bit.
#
# Huff tree - Number of the Huffman tree associated with the column.
# Bits - Number of bits used in the huffman tree
#
# After you run myisampack, use myisamchk to re-create any indexes. 
# At this time, you can also sort the index blocks and create stats needed for the MySQL optimizer to work better:
#
# myisamchk -rq --sort-index --analyze <tbl_name.MYI>
#
# After you have installed the packed table into the MySQL DB dir, you should execute mysqladmin flush-tables to force
# mysqld to start using the new table.
#
# To unpack a packed table, use the --unpack option to myisamchk.
#
# The following covers mysql_config_editor - a MySQL Configuration Utility
#
# The mysql_config_editor utility enables you to store authentication creds in a obfuscated login path file named .mylogin.cnf
# 
# The file location is the %APPDATA%\MySQL directory on Windows and the current user's home dir on non-Windows systems.
# The file can be read later by MySQL client programs to obtain authentication credentials for connecting to MySQL server. 
#
# The unobfuscated format of the .mylogin.cnf login path consists of option groups, similar to other option files.
# Each option group in .mylogin.cnf is called a "login path" which is a group that permits only certain options:
#
# host, user, password, port and socket
#
# Think of a login path option group as a set of options that specify which MySQL server to connect to and which
# account to authenticate as.
#
# An unobfuscated example:
#
# [client]
# user = mydefaultname
# password = mydefaultpass
# host = 127.0.0.1
# [mypath]
# user = myothername
# password = myotherpass
# host = localhost
#
# Order of prio is: Cmd > mylogin.cnf > other option files
#
# To specify a alternative login path file name, set the MYSQL_TEST_LOGIN_FILE environment variable.
# This variable is recognized by mysql_config_editor, by standard MySQL clients and the mysql-test-run.pl testing utility.
#
# Programs use groups in the login path file as follows:
#
# mysql_config_editor operates on the client login path by default if you specify no --login-path=<name> option
# to indicate explicit pathing.
#
# Without a --login-path option - it reads the same groups from other option files as well as the loginpath file.
# i.e default groups pertaining to said command.
#
# With a --login-path option, client programs read the named login path from the login path file.
# The option groups read from other option files remain the same.
#
# mysql --login-path=<mypath>
#
# The mysql client then reads [client] and [mysql] from other option files - whilst reading [client], [mysql] and [mypath] from the login path file.
#
# Client programs read the login path file even when the --no-defaults option is used.
# 
# mysql_config_editor obfuscates the .mylogin.cnf file so it cannot be read as cleartext - and it's contents when obfuscated by client programs
# are used only in memory.
#
# In said way - a PW can be stored in a file in non-cleartext format and used later, without exposing in a Env var or cmd.
# 
# mysql_config_editor does come with a print command as to show login path file contents - but this still omits PWs.
#
# Note: .mylogin.cnf files can be unobfuscated with root privs
#
# The login path file must be readable and writable to the current user - and inaccessible to other users.
# Otherwise, mysql_config_editor ignores it and client programs do not use it either.
#
# To invoke mysql_config_editor:
#
# mysql_config_editor [<program options>] <command> [<command_options>]
#
# If the login path files does not exist - mysql_config_editor creates it.
#
# <program options> : Pertains to general mysql_config_editor options
# <command> : Pertains to what action to perform on the .mylogin.cnf login path file. 
# 				  For example - set writes a login path to the file, remove removes a login path, and print displays login path contents.
# <command_options> : Indicates any additional options specific to the command, such as the login path name and the values to use in the login path.
#
# The position of the command name within the set of program arguments is explicit.
# 
# mysql_config_editor --help set #Interprets it as "--help", ignores the set part
# mysql_config_editor set --help #Interprets it as "set --help" - as in, help command regarding set
#
# Assuming that you wish to have a client login path that defines default connection params - and a separate one for remote,,
# an example:
#
# The following will modify your .mylogin.cnf using set commands:
#
# mysql_config_editor set --login-path=client
# 		--host=localhost --user=localuser --password
# >Prompt for PW to localhost
#
# mysql_config_editor set --login-path=remote
# 		--host=remote.example.com --user=remoteuser --password
# >Prompt for PW to Remote 
#
# We can showcase groupings from the .mylogin.cnf with print --all:
#
# mysql_config_editor print --all
# [client]
# user = localuser
# password = *******
# host = localhost
# [remote]
# user = remoteuser
# password = *******
# host = remote.example.com
#
# If we omit names or --all, it prints client path by default - if there is one.
#
# The login path file can contain multiple login paths.
# A quick example of how to access remote in addition to the stnadard config ones:
#
# mysql --login-path=remote #Reads [client], [mysql] and [remote] groups form login path file
#
# Note: Groups read from later appearances - take precedence over earlier ones appearing.
#
# mysql_config_editor adds login paths to the login path file in the order we create them,
# Thus, more general ones first - more specific ones later on
#
# Ommited values can be appended in terms of specification:
# mysql --login-path=remote --host=remote2.example.com #Assuming that remote yields same login details as the remote2.example.com host, we can just redirect to that specific host
#
# The following are mysql_config_editor General options
#
# mysql_config_editor supports the following general options 
#
# --debug - Write debugging log
# --help - Display help message and exit
# --verbose - Verbose mode
# --version - Display version info and exit
#
# --help, -? - Display a general help message and exit. 
# Example: mysql_config_editor <command> --help
#
# --debug[=<debug options>], - Write a debugging log. A typical <debug_options> string is d:t:o, <file_name>.
#  -# <debug_options> 			 Defaults to d:t:o, /tmp/mysql_config_editor.trace
#
# --verbose, -v - Verbose mode.
#
# --version, -V - Display version info and exit
#
# The following covers:
# mysql_config_editor Commands and Command-Specific Options
#
# This section describes the permitted mysql_config_editor commands, and for each one - the command-specific options
# permitted following the command name on the cmd line.
#
# In addition - mysql_config_editor supports general options that can be used preceding any command.
#
# The following options are supported:
#
# help - Display a general help message and exit. This command takes no following options.
# 		
# 			To see a command-specific help message, invoke mysql_config_editor as follows, where <command> is a command other than help:
#
# 			mysql_config_editor <command> --help
# 
# print [<options>] - Print the contents of the login path file in unobfuscated form, with the exception that passwords are displayed as ****.
# 
# 							 The default login path name is <client> if no login path is named.
# 							 If both --all and --login-path are given, --all takes precedence.
#
# 							 The <print> command permits these options following the command name:
#
# 							 --help, -? - Display a help message for the <print> command and exit.
# 							 To see a general help message - use mysql_config_editor --help
# 		
# 							 --all - Print the contents of all login paths in the login path file.
# 
# 							 --login-path=<name>, -G <name> - Print the contents of the named login path.
#
# remove [<options>] - Remove a login path from the login path file - or modify a login path by removing options from it.
#
# 							  This command removes from the login path only such options as are specified with the --host, --password, --port, --socket
# 							  and --user options.
# 
# 							  	If none of the above are given - remove removes the entire login path.
#
#								mysql_config_editor remove --login-path=mypath --user #Removes the user option from login path option 
#
# 								mysql_config_editor remove --login-path=mypath #Removes the entire mypath login path
#
# 								The remove command permits these options following the cmd name:
#
# 								--help, -? - Displays a help message for the remove command and exit.
# 								
# 												 To see a general help message - use mysql_config_editor --help
#
# 								--host, -h - Remove the host name from the login path.
#
# 								--login-path=<name>, -G <name> - The login path to remove or modify. 
# 																			Default login path name is client if this option is not given.
#
#
#  							--password, -p - Removes the PW from the login path
#
# 								--port, -P - Remove the TCP/IP port number from the login path
#
# 								--socket, -S - Remove the Unix socket file name from the login path
#
# 								--user, -u - Remove the user name from the login path
#
# 								--warn, -w - Warn and prompt the user for confirmation if the command attempts to remove the default login
# 												 path (client) and --login-path=client was not specified. On by default, turn off with --skip-warn
#
# reset [<options>] - Empty the contents of the login path file.
#
# 							 The reset command permits these options following the command name:
#
# 							 --help, -? - Display a help message for the reset command and exit.
# 											  To see a general help message, use mysql_config_editor --help
#
# set [<options>] - Write a login path to the login path file.
#
# 						  This command writes to the login path only such options as are specified with the --host,
# 						  --password, --port, --socket and --user options.
#
# 						  If none of those options are given - mysql_config_editor writes the login path as an empty group.
#
# 						  The set command permits these options following the command name:
#
# 						  --help, -? - Display a help message for the set command and exit.
# 
# 											To see a general help message, use mysql_config_editor --help
#
# 						  --host=<host_name>, -h <host_name> - The host name to write to the login path.
#
# 						  --login-path=<name>, -G <name> - The login path to create. The default login path is <client> if this option is not given.
#
# 						  --password, -p - Prompt for a password to write to the login path. After mysql_config_editor displays the prompt,
# 												 type the password and press Enter. mysql_config_editor does not echo it.
#
# 												 To specify a empty password - just press Enter, and it generates:
#
# 												 password =
#
# 						  --port=<port_num>, -P <port_num> - The TCP/IP port number to write to the login path.
#
# 						  --socket=<file_name>, -S <file_name> - The Unix socket file name to write to the login path.
#
# 						  --user=<user_name>, -u <user_name> - User name to write to the login path.
#
# 						  --warn, -w - Warn and prompt the user for confirmation if the command attempts to overwrite an existing login path.
# 											On by default - turn off with --skip-warn
#
# The following section pertains to mysqlbinlog - A utility for Processing Binary Log Files
#
# The server's binary log consists of files containing "events" that describe modifications to the DB contents.
# The server writes these files in binary formatting. To display said contents in text - use the mysqlbinlog utility.
#
# You can also use mysqlbinlog to display the contents of relay log files written by a slave server in a replication setup
# because relay logs have the same format as binary logs.
#
# The binary log and relay log are covered later.
#
# Invoke mysqlbinlog as follows:
#
# mysqlbinlog [<options>] <log_file>
#
# To display contents of binary log file binlog.000003:
#
# mysqlbinlog binlog.000003
#
# The output includes events contained in binlog.000003.
# For statement-based logging, event information includes the SQL statement, the ID of the server on which it
# was executed, timestamp of execution, time taken, etc.
#
# For row-based logging, the event indicates a row change rather than an SQL statement.
#
# Events are preceded by header comments that provide additional information:
#
# # at 141 #Line start or offset in the bin log file
#
# #100309 9:28:36 server id 123 end_log_pos 245 #date, time, server, id, end_log_pos + 1 is where next event will start - timestamp is propagated to slave servers. 
#
#  Query thread_id=3350 exec_time=11 error_code=0 #id of thread, time spent executing the event on the master server. 
#  
#  #On a slave, it is the replication lag behind the master the slave is having. error_code is the raised error - 0 means no error.
#
# When using event groups - the file offset of events may be grouped together and the comments of events may be grouped together.
# Do not mistake these grouped events for blank file offsets.
#
# The output from mysqlbinlog can be re-executed (For example - by using it as input to mysql) - to redo the statements in the log.
# This is useful for recovery operations after a server crash.
#
# Normally - we use mysqlbinlog to read binary log files directly and apply them to the local MySQL server.
# It is also possible to read binary logs from a remote server by using the --read-from-remote-server option.
#
# To read remote binary logs - the connection param options can be given to indicate how to connect to the server.
# These options are --host, --password, --port, --protocol, --socket and --user.
# They are ignored except when you also use the --read-from-remote-server option.
#
# When running mysqlbinlog against a large binary log - be careful that the filesystem has enough space for the
# resulting files.
#
# To configure the directory that mysqlbinlog uses for temp files - use the TMPDIR environment variable.
#
# mysqlbinlog supports the following options, which can be specified on cmd line or in [mysqlbinlog] and [client] groups.
#
# Format 										Desc
# --base64-output 			Print binary log entries using base-64 encoding
# --bind-address 				Use specified network interface to connect to MySQL Server
# --binlog-row-event-max   Binary log max event size
#  -size
# --character-sets-dir 		Directory where char sets are installed
# --connection-server-id 	Used for testing and debugging.
# 
# --database 					List entries for just this db
# --debug 						Write debugging log
# --debug-check 				Print debug info when program exits
# --debug-info 				Print debug info, memory and CPU stats when the program exits
# --default-auth 				Auth plugin to use
# --defaults-extra-file 	Read named option file in addition to usual option files
# --defaults-file 			Read only named option file
#
# --defaults-group-suffix 	Option group suffix value
# --disable-log-bin 			Disable binary logging
# --exclude-gtids 			Do not show any of the groups in the GTID set provided
# --force-if-open 			Read binary log files even if open or not closed properly
# --force-read 				If mysqlbinlog reads a binary log event that it does not recognize - it prints a warning
#
# --get-server-public-key 	Request RSA public key from server
# --help 						Display help message and exit
# --hexdump 					Display a hex dump of the log in comments
# --host 						Connect to MySQL on the given host
# --idempotent 				Cause the server to use idempotent mode while processing binary log updates from this session only
# --include-gtids 			Show only the groups in the GTID set provided
# --local-load 				Prepare local temporary files for LOAD DATA INFILE in the specified dir
# --login-path 				Read login path options from .mylogin.cnf
#
# --no-defaults 				Read no option files
# --offset 						Skip the first N entries in the log
# --password 					Password to use when connecting to server
# --plugin-dir 				Dir where plugins are installed
# --port 						TCP/IP port number for connection
# --print-defaults 			Print default options
# --print-table-metadata 	Print table metadata
# --protocol 					Connection protocol to use
#
# --raw 							Write events in raw (binary) format to output files
# --read-from-remote 		Read the binary log from a MySQL master rather than reading a local log file
#  -master
# --read-from-remote 		Read binary log from MySQL server rather than local log file
#  -server
# --result-file 				Direct output to named file
# --rewrite-db 				Create rewrite rules for databases when playing back from logs written in row-based format. Stacks.
# --secure-auth 				REMOVED
#
# --server-id 					Extract only those events created by the server having the given server ID
# --server-id-bits 			Tell mysqlbinlog how to interpret server IDs in binary log when log was written by a
# 									mysqld having its server-id-bits-set to less than the maximum.
#
# 									Supported only by MySQL Cluster version of mysqlbinlog.
# --server-public-key-path Path name to file containing RSA public key
# --set-charset 				Add a SET NAMES charset_name statement to the output
# --shared-memory-base 		The name of shared memory to use for shared-memory connections
#  -name 
# --short-form 				Display only the statements contained in the log
# --skip-gtids 				Do not print any GTIDs; use this when writing a dump file from bin logs containing GTIDs.
# --socket 						For connections to localhost, the Unix socket file to use
# --ssl-ca 						File that contains list of trusted SSL Cert Auths
# --ssl-capath 				Dir that contains trusted SSL Cert Auth cert files
# --ssl-cert 					File that contains X.509 Cert
#
# --ssl-cipher 				List of permitted ciphers for connection encryption
# --ssl-crl 					File that  contains cert revocation lists
# --ssl-crlpath 				Dir that contains cert revocation list files
# --ssl-fips-mode 			Whether to enable FIPS mode on the client side
# --ssl-key 					File that contains X.509 key
# --ssl-mode 					Security state of connection to server
# --start-datetime 			Read binary log from first event with timestamp equal to or later than datetime argument
# --start-position 			Read binary log from first event with position equal to or greater than argument
# --stop-datetime 			Stop reading binary log at first event with timestmap equal to or greater than datetime arg
#
# --stop-never 				Stay connected to server after reading last binary log file
# --stop-never-slave- 		Slave server ID to report when connecting to server
#  server-id
# --stop-position 			Stop reading binary log at first event when position equal to or greater than arg
# --tls-version 				Protocols permitted for enc. connections
# --to-last-log 				Do not stop at the end of requested binary log from a MySQL server, but rather continue
# 									printing to end of last binary log
# --user 						MySQL user name to use when connecting to server
# --verbose 					Reconstruct row events as SQL statements
# --verify-binlog-checksum Verify checksums in binary log
# --version 					Display version info and exit
#
# The following maps the further attributes of some of the above commands:
#
# --help, -? - Display a help message and exit
# --base64-output=<value> - This option determines when events should be displayed encoded as base-64 strings using BINLOG statements.
# 									 The option has these permissible values (not case-sensitive):
#
# 									 AUTO/UNSPEC - displays BINLOG statements automatically when necessary (that is - for format desc. events and row events).
# 														If no --base64-output option is given, the effect is the same as --base64-output=AUTO
#
# 														NOTE: Automatic BINLOG display is the only safe behavior if you intend to use the output of mysqlbinlog 
# 														to re-execute binary log file contents.
#
# 														The other option values are intended only for debugging or testing purposes because they may produce output
# 														that does not include all events in executable form.
#
# 									 NEVER - Causes BINLOG statements not to be displayed. mysqlbinlog exits with an error if a row event is found that must
# 												be displayed using BINLOG.
#
# 									 DECODE-ROWS - Specifies to mysqlbinlog that you intend for row events to be decoded and displayed as commented SQL statements
# 														by also specifying the --verbose option.
#
# 														Like NEVER, DECODE-ROWS suppresses display of BINLOG statements, but unlike NEVER - it does not exit with an error
# 														if a row event is found.
#
# 									 For examples that show the effect of --base64-output and --verbose on row event output.
#
# --bind-address=<ip address> - On a computer having multiple network interfaces, use this option to select which interface to use for connecting to the MySQL server.
# --binlog-row-event-max-size=<N> - General syntax formatting and values:
#
# 												Command-Line format - --binlog-row-event-max-size=#
# 												Type 						 Numeric
# 												Default Value 			 4294967040
# 												Minimum Value 			 256
# 												Maximum Value 			 18446744073709547520
# 											
# 												The above values are in bytes. Refers to row-based binary log events size.
# 												Rows are grouped into events smaller than this size if possible.
#
# 												Value should be a multiple of 256 - Defaults to 4GB
#
# --character-sets-dir=<dir name> - The dir where char sets are installed.
#
# --connection-server-id=<server id> - specifies the server ID that mysqlbinlog reports when it connects to the server. 
# 													Can be used to avoid a conflict with the ID of a slave server or another mysqlbinlog process.
#
# 													If the --read-from-remote-server option is specified, mysqlbinlog reports a server ID of 0,
# 													which tells the server to disconnect after sending the last log file (nonblocking behavior)
#
# 													If the --stop-never option is also specified to maintain the connection to the server, mysqlbinlog
# 													reports a server ID of 1 by default instead of 0 - and --connection-server-id can be used to
# 													replace that server ID if required.
#
# --database=<db name>, -d <db_name> - This option causes mysqlbinlog to output entries from the binary log (local log only) that occur
# 													while <db_name> has been selected as the default DB by <USE>.
#
# 													The --database option for mysqlbinlog is similar to the --binlog-do-db option for mysqld, but
# 													can be used to specify only one DB. If --database is given several times, the last one is taken.
#
# 													The effects of this option depend on whether the statement-based or row-based logging format is
# 													in use, in the same way that the effects of --binlog-do-db depend on whether statement-based
# 													or row-based logging is used.
#
# 													Statement-based logging:
#
# 													The --database option works as follows:
#
# 														While <db_name> is the default DB, statements are output whether they modify tables in
# 														<db_name> or a different database.
#
# 														Unless <db_name> is selected as the default DB, statements are not output - even if they modify tables in <db_name>.
#
# 														There is an exception for CREATE DATABASE, ALTER DATABASE and DROP DATABASE. 
# 														The database being created, altered or dropped is considered to be the default database
# 														when determining whether to output the statement.
#
#													Assuming the following base of implementation:
#
# 														INSERT INTO test.t1 (i)  VALUES(100);
# 														INSERT INTO db2.t2 (j) 	 VALUES(200);
# 														USE test;
# 														INSERT INTO test.t1 (i)  VALUES(101);
# 														INSERT INTO t1 (i) 		 VALUES(102);
# 														INSERT INTO db2.t2 (j) 	 VALUES(201);
# 														USE db2;
# 														INSERT INTO test.t1 (i)  VALUES(103);
# 														INSERT INTO db2.t2 (j) 	 VALUES(202);
# 														INSERT INTO t2 (j) 		 VALUES(203);
#
# 													mysqlbinlog --database=test does not output the first two INSERT statements because there is no default DB.
# 													It outputs the three INSERT statements following USE test, but not the three INSERT statements following USE db2.
#
# 													mysqlbinlog --database=db2 does not output the first two INSERT statements because there is no default DB.
# 													It does not output the three INSERT statements after USE.test - but it does output the three after USE db2. (because default usage db2)
#
# 													Row-based logging. mysqlbinlog outputs only entires that change tables belonging to <db_name>.
# 													The default DB has no effect on this. Suppose that the binary log just described was created using
# 													row-based logging rather than statement-based logging.
#
# 													mysqlbinlog --database=test outputs only those entries that modify t1 in the test database, regardless of
# 													whether USE was issued or what the default DB is.
#
# 													If a server is running with binlog format set to MIXED - and we want to use mysqlbinlog with --database option,
# 													the modified tables must be selected by USE. (In particular, no cross-database updates should be used)
#
# 													When used together with the --rewrite-db option, the --rewrite-db option is applied first;
# 													Then the --database option is applied - using the rewritten database name.
#
# 													The order in which the options are provided makes no difference in this regard.
#
# --debug[=<debug options>], 			 	Write a debugging log. A typical <debug_options> string is d:t:o, <file_name>. Defaults to d:t:o, /tmp/mysqlbinlog.trace
#  -# [<debug options>]
#
# --debug-check 								Print debug info when the program exits
#
# --debug-info 								Print debug info, memory and CPU usage stats when exiting
#
# --default-auth=<plugin> 					A hint about the client-side auth plugin to use.
#
# --defaults-extra-file=<file name> 	Read this option file after the global option file, but (on Unix) before the user option file.
# 													Relative if relative, absolute if absolute - error if permissions denied or not found.
#
# --defaults-file=<file name> 			Use only the given option file. Relative if relative, error if non permissible or found. Still reads .mylogin.cnf
#
# --defaults-group-suffix=<str> 			Regex suffix matching in grouping 
#
# --disable-log-bin, -D 					Disable binary logging. Useful for avoiding an endless loop if we use --to-last-log option and we are sending the output
# 													to the same MySQL server.
#
# 													Useful when restoring after a crash to avoid duplication of the statements we logged.
#
# 													Causes mysqlbinlog to include a <SET sql log bin = 0> statement in its output to disable binary
# 													logging of the remaining output.
#
# 													Manipulating the session value of the sql log bin system var is a restricted operation - so 
# 													this requires permissions to set restricted session vars.
#
# --exclude-gtids=<gtid set> 				Do not display any of the groups listed in the <gtid_set>
#
# --force-if-open, -F 						Read binary log files even if they are open or were not closed properly.
#
# --force-read, -f 							With this option, if mysqlbinlog reads a binary log event that it does not recognize
# 													- it prints a warning, ignores the event and continues. Without this option - mysqlbinlog stops reading in such an event.
#
# --get-server-public-key 					Same as otherwise with RSA public key request, applies to clients authenticating caching_sha2_password auth plugin.
#
# --hexdump, -H 								Display a hex dump of the log in comments - can be useful for replicating debugging
#
# --host=<host name>, 						Get the binary log from the MySQL server on the given host.
#  -h <host name>
#
# --idempotent 								Tell the MySQL server to use idempotent mode while processing updates.
# 													Causes suppression of any duplicate-key or key-not-found errors that the server
# 													encounters in the current session while processing updates.
#
# 													May prove useful whenever it is desirable or nessecary to replay one or more binary logs
# 													to a MySQL server which may not contain all of the data to which the logs refer.
#
# 													The scope of effect for this option includes the current mysqlbinlog client and session only.
#
# --include-gtids=<gtid set> 		 		Display only the groups listed in the gtid_set
#
# --local-load=<dir name>,  				Prepare local temporary files for LOAD DATA INFILE in the specified dir.
#  -l <dir_name> 								(These are not automatically removed by any MySQL program)
#
# --login-path=<name> 						Read options from the named login path in the .mylogin.cnf login path file.
# 													This specific option group pertains to connection details to server and account to auth as.
#
# --no-defaults 								Do not read any option files. If program startup fails due to reading unknown options from an option file
# 													--no-defaults can be used to prevent them from being read.
#
# 													The exception is that the .mylogin.cnf file, it's always read.
#
# --offset=<N>, -o <N> 						Skip the first N entries in the log.
#
# --password[=<password>], 				The PW to use when connecting to the server. If you use the short option (-p) - cannot have space.
#  -p [<password>]  							If value omitted, prompted for one
#
# --plugin-dir=<dir name> 					The dir in which to look for plugins. Specify if --default-auth option is used to specify a auth plugin 
# 													but mysqlbinlog can't find it
#
# --port=<port num>, 						The TCP/IP port number to use for connecting to a remote server
#  -P <port_num>
#
# --print-defaults 							Print the program name and all the options that it gets from option files.
#
# --print-table-metadata 					Print table related metadata from the binary log. 
# 													Configure the amount of table related metadata binary logged using binlog-row-metadata
#
# --protocol={TCP|SOCKET|PIPE|MEMORY}  The connection protocol to use for connecting to the server.
# 													
# --raw 											By default, mysqlbinlog reads binary log files and writes events in text format.
# 													The --raw option tells mysqlbinlog to write them in their original binary format.
#
# 													Its use requires that --read-from-remote-server also be used because the files are requested from a server.
#
# 													mysqlbinlog writes one output file for each file read from the server.
# 													The --raw option can be used to make a backup of the Server's binary log.
#
# 													With --stop-never, the backup acts as "live" - because connection is not interuppted.
# 													Defaults to writing to a output file in the CWD with the same name as the original log files.
#
# 													Output file names can be modified using the --result-file 
#
# --read-from-remote-master=<type> 		Read binary logs from a MySQL server with the COM_BINLOG_DUMP or COM_BINLOG_DUMP_GTID commands
# 													by setting the option value to either BINLOG-DUMP-NON-GTIDS or BINLOG-DUMP-GTIDS, respectively.
#
# 													If --read-from-remote-master=<BINLOG-DUMP-GTIDS> is combined with --exclude-gtids - transactions
# 													can be filtered out on the master - avoiding unessecary network traffic.
#
# --read-from-remote-server, -R 			Read the binary log from a MySQL server rather than reading a local log file.
# 													Any connection parameter options are ignored unless this option is given as well.
#
# 													These options are --host, --password, --port, --protocol, --socket and --user.
#
# 													Requires that the remote server is running. Works only for binary log files on the remote server,
# 													not relay log files.
#
# 													This option is equivalent to --read-from-remote-master=BINLOG-DUMP-NON-GTIDS
#
# --result-file=<name>, -r <name> 		Without the --raw option, this option indicates the file to which mysqlbinlog writes text output.
#
# 													With -raw, mysqlbinlog writes one binary output file for each log file transferred from the server,
# 													writing them by default in the CWD using the same name as the original log file.
#
# 													In this case, the --result-file option value is treated as a prefix that modifies output file names.
#
# --rewrite-db='<from name->to name>' 	When reading from a row-based or statement-based log, rewrite all occurrences of <from_name> to <to_name>.
# 													Rewriting is done on the rows, for row-based logs - as well as on the USE clauses, for statement based logs.
#
# 													NOTE: Statements in which table names are qualified with DB names are not rewritten to use the new name when using this option.
#
# 													The rewrite rule employed as a value for this option is a string having the form '<from_name>-><to_name>' as shown previously,
# 													and it must be enclosed ''
#
# 													To employ it multiple times, an example:
#
# 													mysqlbinlog --rewrite-db='dbcurrent->dbold' --rewrite-db='dbtest->dbcurrent' \
# 																	binlog.00001 > /tmp/statements.sql
#
# 													When used together with the --database option, the --rewrite-db option is applied first -
# 													then --database is applied, using the rewritten DB name.
#
# 													In this case, ordering makes no difference.
#
# 													For instance, if mysqlbinlog is started with --rewrite-db='mydb->yourdb' --database=yourdb, then all
# 													updates to any tables in databases mydb and yourdb are included in said output.
#
# 													On the other hand, if it is started with --rewrite-db='mydb->yourdb' --database=mydb, then no outputs are given,
# 													because all updates to mydb are first rewritten as updates to yourdb before applying the --database option
#
# 													Thus no updates are left matching --database=mydb
#
# --server-id=<id> 							Display only events created by the server having the given server ID
#
# --set-charset=<charset name> 			Add a SET NAMES <charset name> statement to the output to specify the char set to be used for processing log files.
#
# --shared-memory-base-name=<name> 		On Windows, the shared-memory name to use for connections made using shared memory to a local server.
# 													Defaults to MySQL. Case-sensitive
#
# 													Server must be started with --shared-memory to enable shared-memory connections
#
# --short-form, -s 							Display only the statements contained in the log, without any extra information or row-based events.
# 													DEPRECATED, DO NOT USE.
#
# --skip-gtids[=(true|false)] 			Do not display any GTIDs in the output. Needed when writing to a dump file from one or more binary logs
# 													containing GTIDs, as shown:
#
# 													mysqlbinlog --skip-gtids binlog.000001 >  /tmp/dump.sql
# 													mysqlbinlog --skip-gtids binlog.000002 >> /tmp/dump.sql
# 													mysql -u root -p -e "source /tmp/dump.sql"
#
# 													Not recommended for production
#
# --socket=<path>, -S <path> 				For connections to localhost, Unix socket file to use or Windows - named pipe to use.
#
# --ssl* 										Options that begin with --ssl specify whether to connect to the server using SSL and indicate where to
# 													find SSL keys and certs.
#
# --ssl-fips-mode={OFF|ON|STRICT} 		Controlling FIPS mode on the client side.
#
# --start-datetime=<datetime> 			Start reading the binary log at the first event having a timestamp equal to or later than the <datetime> argument.
# 													The <datetime> value is relative to the local time zone on the machine where you run mysqlbinlog.
#
# 													The value should be in a format accepted for the DATETIME or TIMESTAMP data types.
#
# 													mysqlbinlog --start-datetime="2005-12-25 11:25:56" binlog.000003
#
# 													Useful for point-in-time recovery.
#
# --start-position=<N>, -j <N> 			Start reading the binary log at the first event having a position equal to or greater than <N>.
# 													This option applies to the first log file named on the cmd line.
#
# 													Useful for point-in-time recovery.
#
# --stop-datetime=<datetime> 				Stop reading the binary log at the first event having a timestamp equal to or later than the <datetime> argument.
# 													This option is useful for point-in-time recovery.
#
# --stop-never 								This option is used with --read-from-remote-server. It tells mysqlbinlog to remain connected to the server.
# 													Otherwise mysqlbinlog exits when the last log file has been transferred from the server.
#
# 													--stop-never implies --to-last-log - so only the first log file to transfer needs to be named on the cmd line.
#
# 													--stop-never is commonly used with --raw to make a live binary log backup, but can also be used without --raw
# 													to maintain a continous text display of log events as the server generates them.
#
# 													With --stop-never, by default, mysqlbinlog reports a server ID of 1 when it connects to the server.
# 													Use --connection-server-id to explicitly specify an alternative ID to report. Can be used to
# 													avoid a conflict with the ID of a slave server or another mysqlbinlog.
#
# --stop-never-slave-server-id=<id> 	DEPRECATED, use --connection-server-id instead to specify a server ID for mysqlbinlog to report.
#
# --stop-position=<N> 						Stop reading the binary log at teh first event having a position equal to or greater than <N>.
# 													Applies to the last log file named on the cmd line.
#
# 													Useful for point-in-time recovery.
#
# --tls-version=<protocol list> 			The protocols permitted by the client for encrypted connections. Depends on compilated SSL libs relative to MySQL.
#
# --to-last-log, -t 							Do not stop at the end of requested binary log from a MySQL server, but rather continue printing
# 													until the end of the last binary log.
#
# 													If this is sent to the same MySQL server, it causes an endless loop.
#
# 													Requires --read-from-remote-server.
#
# --user=<user name>, -u <user_name> 	The MySQL user name to use when connecting to a remote server
#
# --verbose, -v 								Reconstruct row events and display them as commented SQL statements.
# 													If given twice - output includes comments to indicate column data types, some metadata and row query log events.
#
# --verify-binlog-checksum, -c 			Verify checksums in binary log files.
#
# --version, -V 								Display version info and exit
#
# --open_files_limit=<value> 				Specifies number of open file descriptors to reserve
#
# We can pipe the output of mysqlbinlog into the mysql client to execute the events contained in the binary log.
# This can be done to recover from a crash with a old backup:
#
# mysqlbinlog binlog.000001 | mysql -u root -p
#
# or
#
# mysqlbinlog binlog.[0-9]* | mysql -u root -p
#
# If the statements produced by mysqlbinlog may contain BLOB values, these may cause problems when mysql processes them.
# In such a case - use mysql with --binary-mode then.
#
# We can also redirect the output of mysqlbinlog to a text file instead - if we need to modify the statement log first
# (for example - to remove statements that we do not want to execute)
#
# Example of redirection:
#
# mysqlbinlog binlog.000001 > tmpfile #Redirect unto tmpfile
# <Interlude>
# mysql -u root -p < tmpfile #Redirect from tmpfile to the DB
#
# When mysqlbinlog is invoked with the --start-position option - it displays only those events
# with an offset in the binary log greater than or equal to the given pos. (The pos must align with start of an event)
#
# Thus we can do rollbacks or rollfowards to specific time points - such as roll forward to how the DB was @ a specific time point (in tandem with --stop-datetime)
#
# The following covers how to approaching multiple file integrations: 
#
#
# mysqlbinlog binlog.000001 | mysql -u root -p  #Problematic if contains CREATE TEMPORARY TABLE statement and second uses said table
# mysqlbinlog binlog.000002 | mysql -u root -p  #The reason why it's an isssue, is that the connection is terminated between the two commands, so tmp table is dropped - have to specify them as 1 command
#
# Example:
#
# mysqlbinlog binlog.000001 binlog.000002 | mysql -u root -p
#
# Another way is to route log files to a file and then read the file:
#
# mysqlbinlog binlog.000001 > /tmp/statements.sql
# mysqlbinlog binlog.000002 >> /tmp/statements.sql
# mysql -u root -p -e "source /tmp/statements.sql"
#
# As of 8.0.12, you can also supply multiple binary log files to mysqlbinlog as streamed input using a shell pipe.
# An archive of compressed binary log files can be decompressed and provided directly to mysqlbinlog.
#
# In this example, binlog-files_1.gz contains multiple binary log files for processing.
#
# The pipeline extracts the contents of binlog-files_1.gz - pipes the binary log files to mysqlbinlog as standard input,
# and pipes the output of mysqlbinlog into mysql for execution:
#
# gzip -cd binlog-files_1.gz | ./mysqlbinlog - | ./mysql -uroot -p
#
# We can chain more than one archive file:
#
# gzip -cd binlog-files_1.gz binlog-files_2.gz | ./mysqlbinlog - | ./mysql -uroot -p
#
# For streamed input, do not use --stop-position, because mysqlbinlog cannot identify the last log file to apply this option.
#
# LOAD DATA INFILE operations: mysqlbinlog can produce output that reproduces a LOAD DATA INFILE operation without
# the original data file.
#
# mysqlbinlog copies the data to a temp file and writes a LOAD DATA LOCAL INFILE statement that refers to the file.
# The default location of the dir where said files are written is system-specific.
#
# To specify a dir explicitly, use the --local-load option
#
# Because mysqlbinlog converts LOAD DATA INFILE statements to LOAD DATA LOCAL INFILE statements (i.e, it adds LOCAL) - both the client
# and server that you use to process the statements must be configured with the LOCAL capability enabled.
#
# WARNING: The temporary files created for LOAD DATA LOCAL statements are NOT automatically deleted because they are
# 			  needed until you actually execute those statements. You should delete the temporary files yourself after
#  		  you no longer need the statement log. The files can be found in the temporary file dir and have names like:
# 			  <original_file_name-#-#>
#
# The following covers mysqlbinlog Hex Dump Format
#
# The --hexdump option causes mysqlbinlog to produce a hex dump of the binary log contents:
#
# 	mysqlbinlog --hexdump master-bin.000001
#
# The hex output consists of comment lines beginning with #, it might look as follows:
#
# /* !40019 SET @@session.max_insert_delayed_threads=0*/;
# /* !50003 SET @@OLD_COMPLETION_TYPE=@@COMPLETION_TYPE, COMPLETION_TYPE=0*/;
# at 4
# 051024 17:24:13 server id 1 end_log_pos 98
# Position 	Timestamp 	Type 		Master ID 		Size 		Master Pos 	  Flags
# <                    Hexadecimal outputs           >   62 00 00 00   00 00
# < 						  Hexadecimal outputs 			  >   |..5.0.15.debug.l|
# etc.
# 		Start: binlog v 4, server v 5.0.15-debug-log created 051024 17:24:13
# 		at startup
# ROLLBACK;
#
# The hex dump output contains the elements in the following list: (This might change)
#
# Position: The byte pos within the log file
# Timestamp: The event timestamp. In the example shown, '9d fc 5c 43' is the representation of '051024 17:24:13' in hexadecimal
# Type: The event type code
# Master ID: The server ID of the master that created the event
# Size: The size in bytes of the event
# Master Pos: The position of the next event in the original master log file.
# Flags: Event flag values.
#
# The following covers mysqlbinlog Row Event Displays:
#
# The following examples illustrate how mysqlbinlog displays row events that specify data modifications.
# These correspond to events with the WRITE_ROWS_EVENT, UPDATE_ROWS_EVENT and DELETE_ROWS_EVENT type codes.
#
# The --base64-output=DECODE-ROWS and --verbose options may be used to affect row event output.
#
# Suppose that the server is using row-based binary logging and that you execute the following sequence of statements:
#
# CREATE TABLE t
# (
# 	 id 	INT NOT NULL,
# 	 name VARCHAR(20) NOT NULL,
#   date DATE NULL,
# ) ENGINE = InnoDB;
#
# START TRANSACTION;
# INSERT INTO t VALUES(1, 'apple', NULL);
# UPDATE t SET name = 'pear', date = '2009-01-01' WHERE id = 1;
# DELETE FROM t WHERE id = 1;
# COMMIT;
#
# By default, mysqlbinlog displays row events encoded as base-64 strings using BINLOG statements.
# Omitting extraneous lines, the output for the row events produced by the preceding statement sequences might look as follows:
#
# mysqlbinlog <log_file>
#
# # at 218
# #080828 15:03:08 server id 1 end_log_pos 258 		Write_rows: 	table id 17 flags: 	STMT_END_F
# 
# BINLOG '
# <string>
# '/*!*/;
# ...
# # at 302
# #080828 15:03:08 server id 1 end_log_pos 356 		Update_rows: 	table id 17 flags: 	 STMT_END_F
#
# BINLOG '
# <string>
# '/*!*/;
# ...
# # at 400
# #080828 15:03:08 server id 1 end_log_pos 442 		Delete_rows: table id 17 flags: STMT_END_F
#
# BINLOG '
# <string>
# '/*!*/;
#
# We can convert said binary strings to closer to SQL, with --verbose or -v. Said lines pertain to the lines starting with ###
# 
# mysqlbinlog -v <log_file>
# ...
# # at 218
# #080828 15:03:08 server id 1 	end_log_pos 258 		Write_rows: table id 17 flags: STMT_END_F
# 
# BINLOG '
# <string>
# '/*!*/;
# ### INSERT INTO test.t
# ### SET
# ###   @1=1
# ###   @2='apple'
# ###   @3=NULL
# ...
# # at 302
# #080828 15:03:08 server id 1 	end_log_pos 356 		Update_rows: table id 17 	flags: STMT_END_F
#
# BINLOG '
# <string>
# '/*!*/
# ### UPDATE test.t
# ### WHERE
# ###   @1=1
# ###   @2='apple'
# ###   @3=NULL
# ### SET
# ###   @1=1
# ###   @2='pear'
# ###   @3='2009:01:01'
# ...
# # at 400
# #080828 15:03:08 server id 1 end_log_pos 442 		Delete_rows: table id 17 flags : STMT_END_F
#
# BINLOG '
# <string>
# '/*!*/
# ### DELETE FROM test.t
# ### WHERE
# ###   @1=1
# ###   @2='pear'
# ###   @3='2009:01:01'
#
# Where of, if we do it twice:
#
# mysqlbinlog -vv <log_file>
# ...
# # at 218
# #080828 15:03:08 server id 1  end_log_pos 258 	Write_rows: table id 17 flags: STMT_END_F
#
# BINLOG '
# <string>
# '/*!*/;
# ### INSERT INTO test.t
# ### SET
# ###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
# ###   @2='apple' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
# ###   @3=NULL /* VARSTRING(20) meta=0 nullable=1 is_null=1 */
# ...
# # at 302
# #080828 15:03:08 server id 1 end_log_pos 356 	Update_rows: table id 17 flags: STMT_END_F
#
# BINLOG '
# <string>
# '/*!*/;
# ### UPDATE test.t
# ### WHERE
# ###   @1=1 /*  INT meta=0 nullable=0 is_null=0 */
# ###   @2='apple' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
# ###   @3=NULL /* VARSTRING(20) meta=0 nullable=1 is_null=1 */
# ### SET
# ###   @1=1 /*  INT meta=0 nullable=0 is_null=0 */
# ###   @2='pear' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
# ###   @3='2009:01:01' /* DATE meta=0 nullable=1 is_null=0 */
# ...
# at 400
#080828 15:03:08 server id 1 	end_log_pos 442 	Delete_rows: table id 17 flags: STMT_END_F
#
# BINLOG '
# <string>
# '/*!*/;						
# ### DELETE FROM test.t
# ### WHERE
# ###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
# ###   @2='pear' /* VARSTRING(20) meta=20 nullable=0 is_null=0 */
# ###   @3='2009:01:01' /* DATE meta=0 nullable=1 is_null=0 */
#
# You can tell mysqlbinlog to suppress the BINLOG statements for row events by using the --base64-output=<DECODE-ROWS> option.
# This is similar to --base64-output=NEVER but it does not exit with an error if a row event is found.
# The combination of --base64-output=<DECODE-ROWS> and --verbose provides a convenient way to see row events
# only as SQL statements:
#
# mysqlbinlog -v --base64-output=DECODE-ROWS log_file
# # at 218
# #080828 15:03:08 server id 1 end_log_pos 258 		Write_rows: table id 17 flags: STMT_END_F
# ### INSERT INTO test.t
# ### SET
# ###   @1=1
# ###   @2='apple'
# ###   @3=NULL
# ...
# # at 302
# #080828 15:03:08 server id 1 end_log_pos 356 		Update_rows: table id 17 flags: STMT_END_F
# ### UPDATE test.t
# ### WHERE
# ###   @1=1
# ###   @2='apple'
# ###   @3=NULL
# ### SET
# ###   @1=1
# ###   @2='pear'
# ###   @3='2009:01:01'
# ...
# # at 400
# #080828 15:03:08 server id 1 	end_log_pos 442 		Delete_rows: table id 17 flags: STMT_END_F
# ### DELETE FROM test.t
# ### WHERE
# ###   @1=1
# ###   @2='pear'
# ###   @3='2009:01:01'
#
# NOTE: You should not suppress BINLOG statements if you intend to re-execute mysqlbinlog output
#
# The SQL statements produced by --verbose for row events are much more readable than the corresponding BINLOG statements.
# However, they do not correspond exactly to the original SQL statements that generated the events.
#
# The following limitations apply:
#
# The original column names are lost and replaced by @N where N is the column number
# 
# Character set information is not available in the binary log, which affects string column display:
# 		
# 		There is no distinction made between corresponding binary and nonbinary string types (BINARY and CHAR, VARBINARY and VARCHAR, BLOB and TEXT)
#     The output uses a data type of STRING for fixed-length strings and VARSTRING for variable-length strings.
#
# 		For multibyte char sets, the max number of bytes per character is not present in the binary log, so the length for string
# 		types is displayed in bytes rather than in characters. For example, STRING(4) will be used as the data type for values from either
#     of these column types:
#
# 		CHAR(4) 	CHARACTER SET latin1
# 		CHAR(2) 	CHARACTER SET ucs2
#
# 		Due to the storage format for events of type UPDATE_ROWS_EVENT, UPDATE statements are displayed with the WHERE clause preceding the SET clause.
# 
# Proper interpretation of row events requires the information from the format description event at the beginning of the binary log.
#
# Because mysqlbinlog does not know in advance whether the rest of the log contain rows row events, by default it displays the format
# description event using a BINLOG statement in the initial part of the output.
#
# If the binary log is known not to contain any events requiring a BINLOG statement (that is, no row events) - the --base64-output=NEVER option can be 
# used to prevent this header from being written.
#
# The following covers using mysqlbinlog to Back Up Binary Log Files
#
# By default, mysqlbinlog reads binary log files and displays their contents in text format. This enables you
# to examine events within the files more easily and to re-execute them (For example - by using the output as input to mysql)
#
# mysqlbinlog can read log files directly from the local file system, or, with the --read-from-remote-server option
# - it can connect to a server and request binary log contents from that server.
#
# mysqlbinlog writes text output to its standard output - or to the file named as the value of the --result-file=<file name> option
# if that option is given.
#
# mysqlbinlog can read binary log files and write new files containing the same content - that is, in binary
# format rather than text format.
#
# This capability enables you to easily back up a binary log in its original format. mysqlbinlog can make a static
# backup, backing up a set of log files and stopping when the end of the last file is reached.
#
# It can also make a continuous ("live") backup - staying connected to the server when it reaches the end of the last log
# file and continuing to copy new events as they are generated.
#
# In continuous-backup operation, mysqlbinlog runs until the connection ends (for example - when the server exits) or mysqlbinlog
# is forcibly terminated. When the connection ends, mysqlbinlog does not wait and retry the connection - unlike a slave replication server.
#
# To continue a live backup after the server has been restarted - you must also restart mysqlbinlog.
#
# Binary log backup requires that you invoke mysqlbinlog with two options at minimum:
#
# 		The --read-from-remote-server (or -R) option tells mysqlbinlog to connect to a server and request its binary log.
# 				(This is similar to a slave replication server connecting to its master server)
#
# 		The --raw option tells mysqlbinlog to write raw (binary) output, not text output
#
# Along with --read-from-remote-server - it is common to specify other options: --host indicates where the server
# is running and you may also need to specify connection options such as --user and --password
#
# Several other options are useful in conjunction with --raw:
#
# 		--stop-never: Stay connected to the server after reaching the end of the last log file and continue to read new events
#
# 		--connection-server-id=<id>: The server ID that mysqlbinlog reports when it connects to a server. 
# 											  When --stop-never is used, the default reported server ID is 1.
# 											  If this causes a conflict with the ID of a slave server or another mysqlbinlog process,
# 											  use --connection-server-id to specify an alternative server ID.
#
# 		--result-file: A prefix for output file names, as described later.
#
# To back up a server's binary log files with mysqlbinlog, you must specify file names that actually exist on the server.
# If you do not know the names, connect to the server and use the SHOW BINARY LOGS statement to see the current names.
#
# Suppose that the statement produces this output:
#
# 	SHOW BINARY LOGS;
# 	
# 		Log_name 			File_size
# 	 binlog.000130 		27459
#   binlog.000131 		13719
# 	 binlog.000132 		43268
#
# With that information, you can use mysqlbinlog to back up the binary log to the current dir as follows (enter each command on a single line):
#
# 		To make a static backup of binlog.000130 through binlog.000132, use either of the following commands:
#
# 			mysqlbinlog --read-from-remote-server --host=host_name --raw
# 				binlog.000130 binlog.000131 binlog.000132
#
# 			mysqlbinlog --read-from-remote-server --host=host_name --raw
# 				--to-last-log binlog.000130
#
# 		The first command specifies every file name explicitly. The second names only the first file and uses --to-last-log
# 		to read through the last.
#
# 		A difference between these commands is that if the server happens to open binlog.000130 before mysqlbinlog reaches the
# 		end of binlog.000132, the first command will not read it - but the second will.
#
# 		To make a live backup in which mysqlbinlog starts with binlog.000130 to copy existing log files - then stays
# 		connected to copy new events as the server generates them:
#
# 			mysqlbinlog --read-from-remote-server --host=host_name --raw --stop-never binlog.000130
#
# 		With --stop-never, it is not nessecary to specify --to-last-log to read to the last log file because that option is implied.
#
# The following pertains to Output File Naming
#
# Without --raw, mysqlbinlog produces text output and the --result-file option, if given - specifies the name of the single file
# to which all output is written.
#
# With --raw, mysqlbinlog writes one binary output file for each log file transferred from the server.
# By default, mysqlbinlog writes the files in the current directory with the same name as the original log files.
#
# To modify the output file names, use the --result-file option. In conjunction with --raw, the --result-file option
# value is treated as a prefix that modifies the output file names.
#
# Suppose that a server currently has binary log files named binlog.000999 and up.
# If you use mysqlbinlog --raw to back up the files, the --result-file option produces
# output file names as shown soon.
#
# You can write the files to a specific directory by beginning the --result-file value with the directory path.
# If the --result-file value consists only of a directory name - the value must end with the pathname separator char.
#
# Output files are overwritten if they exist:
#
# 	--result-file OPTION 		OUTPUT FILE NAMES
# --result-file=x 				xbinlog.000999 and up
# --result-file=/tmp/ 			/tmp/binlog.000999 and up
# --result-file=/tmp/x 			/tmp/xbinlog.000999 and up
#
# The following is an example of using mysqldump + mysqlbinlog for Backup and Restore
#
# The following example describes a simple scenario that shows how to use mysqldump and mysqlbinlog together to back
# up a server's data and binary log - and how to use the backup to restore the server if data loss happens.
#
# The example assumes that the server is running on host <host_name> and its first binary log file is named
# binlog.000999. 
#
# Make a continous backup of the bin log:
#
# mysqlbinlog --read-from-remote-server --host=host_name --raw
# 	--stop-never binlog.000999
#
# We can also use mysqldump to make a dump file which acts as a snapshot of the server's data.
#
# Use --all-databases, --events, and --routines to back up all data and --master-data=2 to include the
# current bin log co-ords in the dump file.
#
# mysqldump --host=host_name --all-databases --events --routines --master-data=2> <dump_file> #Select all the data, include binary log co-ords in the dump
#
# We can execute above to make snaphots. 
#
# To restore by usage of a dump file:
#
# mysql --host=host_name -u root -p < <dump_file>
#
# Assuming the binlog file looks as follows:
#
# -- CHANGE MASTER TO MASTER_LOG_FILE='binlog.001002', MASTER_LOG_POS=27284;
#
# If the most recent is binlog.001004, you can re-execute log events as follows:
#
# mysqlbinlog --start-position=27284 binlog.001002 binlog.001003 binlog.001004 | mysql --host=host_name -u root -p
#
# We may also copy the backup files to the server, if we do not have root access.
#
# The following covers how to Specify mysqlbinlog Server ID
#
# When invoked with the --read-from-remote-server option, mysqlbinlog connects to a MySQL server,
# specifies a server ID to identify itself - requests binary log files.
#
# We can use mysqlbinlog to request log files from a server in several ways:
#
# Specify an explicit named set of files: For each file, mysqlbinlog connects and issues a Binlog dump command.
# The server sends the file and disconnects. There is one connection per file.
#
# Specify the beginning file and --to-last-log: mysqlbinlog connects and issues a Binlog dump command for all files.
# The server sends all the files and disconnects.
#
# Specify the beginning file and --stop-never (implies --to-last-log): mysqlbinlog connects and issues a Binlog dump
# command for all files. The server sends all files - but does not disconnect after sending the last one.
#
# If we use --read-from-remote-server only - mysqlbinlog connects using a server ID of 0 - which tells the server to disconnect
# after sending the last requested log file.
#
# With --read-from-remote-server and --stop-never, mysqlbinlog connects using a nonzero server ID, so the server does not
# disconnect after sending the last log file. The server ID is 1 by default, but can be changed with --connection-server-id.
#
# Thus, for the first two ways of requesting files, the server disconnects because mysqlbinlog specifies a server ID of 0.
# Does not disconnect if --stop-never is given because mysqlbinlog specifies a nonzero server ID.
#
# The following covers mysqldumpslow - Summarizing Slow Query Log Files
#
# The MySQL slow query log contains info about queries that take a long time to execute.
# mysqldumpslow parses MySQL slow query log files and prints a summary of their contents.
#
# Normally - mysqldumpslow groups queries that are similar except for the particular values of number and
# string data values. It "abstracts" these values to N and 'S' when displaying summary output.
#
# The -a and -n options can be used to modify value abstracting behavior.
#
# Invoke as follows:
#
# mysqldumpslow [<options>] [<log_file> ...]
#
# The following options pertain to mysqldumpslow:
#
# -a 		   Do not abstract all numbers to N and strings to S
# -n 		   Abstract numbers with at least the specified digits
# --debug   Write debug information
# -g 		   Only consider statements that match the pattern
# --help    Display help message and exit
# -h 		   Host name of the server in the log file name
# -i 		   Name of the server instance
# -l 		   Do not subtract lock time from total time
# -r 		   Reverse the sort order
# -s 		   How to sort output
# -t 		   Display only first num queries
# --verbose Verbose mode
#
# The following covers dynamics in more detail:
#
# --help - Display help message and exit
# -a - Do not abstract all numbers to N and strings to 'S'
# --debug, -d - Run in debug mode
# -g <pattern> - Consider only queries that match the (grep-style) pattern
# -host, <host_name> - Host name of the MySQL server for *-slow.log file name.
# 							  Can contain wildcard. Default wildcard is *
# -i <name> - Name of server instance (if using mysql.server startup script)
# -l - Do not subtract lock time from total time
# -n <N> - Abstract numbers with at least <N> digits within names
# -r - Reverse the sort order
# -s <sort_Type> - How to sort the output. The value of <sort_type> should be chosen from the following list:
# 						
# 						 		t, at: Sort by query time or average query time
# 								l, al: Sort by lock time or average lock time
# 								r, ar: Sort by rows sent or average rows sent
# 								c: Sort by count
#
# 								By default, it sorts by average query time (same as -s at)
#
# -t <N> - Display only the first <N> queries in the output.
# --verbose, -v - Verbose mode. 
#
# Example output:
#
# mysqldumpslow
#
# Reading mysql slow query log from /usr/local/mysql/data/mysqld51-apple-slow.log
# Count: 1 	Time=4.32s (4s) 	Lock=0.00s 	(0s) 		Rows=0.0 (0), 	root[root]@localhost
# 	insert into t2 select * from t1
#
# Count: 3 Time=2.53s (7s) Lock=0.00s (0s) 		Rows=0.0 (0), root[root]@localhost
# 	insert into t2 select * from t1 limit N
#
# Count: 3 Time=2.13s (6s) Lock=0.00s (0s) 		Rows=0.0 (0), root[root]@localhost
# 	insert into t1 select * from t1
#
# The following covers MySQL Program Development Utilities
#
# In shell scripts, you can use the my_print_defaults program to parse option files and 
# see what options would be used by a given program.
#
# The following example shows the output that my_print_defaults might produce when asked to show
# the options found in the [client] and [mysql] groups:
#
# my_print_defaults client mysql
# --port=3306
# --socket=/tmp/mysql.sock
# --no-auto-rehash
#
# Option file handling is implemented in the C client lib simply by processing all options in the
# appropiate group or groups before any CMDline args.
#
# The following pertains to mysql_config - A utility to display options for Compiling Clients
#
# mysql_config provides you with useful information for compiling your MySQL client and connecting it to MySQL.
# It's a shell script.
#
# Note: pkg-config can be used as an alternative to mysql_config for obtaining info such as compiler flags
# or link libraries required to compile MySQL apps.
#
# mysql_config supports the following:
#
# --cflags - C compiler flags to find include files and critical compiler flags - defines used when compiling the libmysqlclient lib.
# 				 The options returned are tied to the specific compiler that was used when the library was created and might 
# 				 clash with the settings for your own compiler.
#
# 				 Using --include is more integratable in relation to portable options that contain only include paths.
#
# --cxxflags - Like -cflags, but for C++ compiler flags
#
# --include - Compiler options to find MySQL include files
#
# --libs - Libs and options required to link with the MySQL client lib.
#
# --libs r - Libs and options required to link with the thread-safe MySQL client lib.
# 				 In MySQL 8.0, all client libs are thread-safe. --libs can be used in all cases.
#
# --plugindir - Default plugin dir path name, defined when configuring MySQL
#
# --port - Default TCP/IP port number, defined when configuring MySQL
#
# --socket - Default Unix socket file, defined when configuring MySQL
#
# --variable=<var_name> - Display the value of the named config variable. 
# 								  Permitted <var_name> values are pkgincludedir (header file dir),
# 						        pkglibdir (the lib dir),
# 								  plugindir (the plugin dir)
#
# --version - Version number for MySQL distri
#
# If you invoke mysql_config with no options, it displays a list of all options that it supports and their values:
#
# mysql_config
# Usage: 	/usr/local/mysql/bin/mysql_config [options]
# Options:
# 	--cflags 		[-I/usr/local/mysql/include/mysql -mcpu=pentiumpro]
#  --cxxflags 		[-I/usr/local/mysql/include/mysql -mcpu=pentiumpro]
#  --include 		[-I/usr/local/mysql/include/mysql]
# 	--libs 			[-L/usr/local/mysql/lib/mysql -lmysqlclient
# 						 -lpthread -lm -lrt -lssl -lcrypto -ldl]
#  --libs_r 		[-L/usr/local/mysql/lib/mysql -lmysqlclient_r
# 						 -lpthread -lm -lrt -lssl -lcrypto -ldl]
#  --plugindir 	[/usr/local/mysql/lib/plugin]
# 	--socket 		[/tmp/mysql.sock]
# 	--port 			[3306]
#  --version 		 [5.8.0-m17]
#  --variable=<VAR> VAR is one of :
# 			pkgincludedir 	[/usr/local/mysql/include]
# 			pkglibdir 		[/usr/local/mysql/lib]
# 			plugindir 		[/usr/local/mysql/lib/plugin]
#
# We can use mysql_config within a CMD line using backticks to include output for particular options.
# For example, we can compile and link a MySQL client program as follows:
#
# gcc -c `mysql_config --cflags` progname.c
# gcc -o progname progname.o `mysql_config --libs`
#
# The following pertains to my_print_defaults - Used for Display Options from Option Files
#
# my_print_defaults displays the options that are present in option groups of option files. 
# The output indicates what options will be used by programs that read the specified option
# groups.
#
# For example, the mysqlcheck program reads the [mysqlcheck] and [client] option groups.
# To see what options are present in thoose groups in the standard option files, invoke the
# my_print_defaults as follows:
#
# my_print_defaults mysqlcheck client
# --user=myusername
# --password=password
# --host=localhost
#
# The output consists of options - one a line.
#
# The following options are supported in terms of my_print_defaults:
#
# --help, -? - Display a help message and exit
#
# --config-file=<file name>, - Read only the given option file
# --defaults-file=<file name>,
#  -c <file_name>
#
# --debug=<debug options>, - Write a debugging log. A typical <debug_options> string is d:t:o, <file_name>.
#  -# <debug_options> 		  Defaults to d:t:o, /tmp/my_print_defaults.trace
#
# --defaults-extra-file=<file name>, - Read this option file after global option file (but on Unix) before the user option file.
# --extra-file=<file name>,
#  -e <file_name>
#
# --defaults-group-suffix=<suffix>, - Suffix regex match option groups
#  -g <suffix>
# --login-path=<name>, - Read options from the named login path in the .mylogin.cnf login path file.
#  -L <name>
# --no-defaults, -n - Return an empty string
# --show, -s - my_print_defaults masks PWs by default. Use this to display in cleartext.
# --verbose, -v - Verbose mode.
# --version, -V - Version info and exit
#
# The following pertains to resolve_stack_dump - Used to resolve Numeric Stack Trace Dump to Symbols
#
# resolve_stack_dump resolves a numeric stack dump to symbols.
#
# Invoke:
#
# resolve_stack_dump [<options>] <symbols_file> [<numeric_dump_file>]
#
# The symbols file should include the output from the nm --numeric-sort mysqld command.
# The numeric dump file should contain a numeric stack track from mysqld.
# If no numeric dump file is named on the command line, the stack trace is read from the standard input.
#
# resolve_stack_dump supports the following options:
#
# --help, -h - Display a help message and exit.
# --numeric-dump-file=<file name>, -n <file_name> - Read the stack trace from the given file.
# --symbols-file=<file name>, -s <file_name> - Use the given symbols file.
# --version, -V - Display version info and exit.
#
# The following covers lz4_decompress - Decompress mysqlpump LZ4-Compressed Output
#
# The lz4_decompress utility decompresses mysqlpump output that was created using LZ4 compression.
#
# NOTE: If MySQL was configured with the -DWITH LZ4=system option, lz4_decompress is not built.
# 	     In this case, the system lz4 command can be used instead.
#
# Invoke lz4_decompress like this:
# lz4_decompress <input_file> <output_file>
#
# Example of usage:
#
# mysqlpump --compress-output=LZ4 > dump.lz4
# lz4_decompress dump.lz4 dump.txt
#
# To see help messages in relation to lz4_decompress, run it with no args.
# To decompress mysqlpump ZLIB-compressed output, use zlib_decompress.
#
# The following pertains to perror - Which displays error messages:
#
# perror displays the error message for MySQL or operating system error codes.
#
# perror [<options>] <errorcode> ...
#
# perror attempts to be flexible in understanding args. For example - 
#
# ER WRONG VALUE FOR VAR - can be translated as 1231, 001231, MY-1231 or MY-001231 or ER WRONG VALUE FOR VAR
#
# shell>perror 1231
# MySQL error code MY-001231 (ER_WRONG_VALUE_FOR_VAR): Variable '%-.64s' can't be set to the value of '%-.200s'
#
# If a error number is in the range where MySQL and OS sys errors overlap, perror displays both error messages:
# 
# perror 1 13
# OS error code 1: Operation not permitted
# MySQL error code MY-000001: Can't create/write to file '%s' (OS errno %d - %s)
# OS error code 13: Permission denied
# MySQL error code MY-000013: Can't get stat of '%s' (OS errno %d - %s)
#
# To obtain the error message for a MySQL Cluster error code, invoke perror with the --ndb option:
#
# perror --ndb <errorcode>
#
# The meaning of system error messages may be dependent on the OS. 
#
# perror supports the following options:
#
# --help, --info, -I, -? - Display a help message and exit
# --ndb - print the error message for a MySQL Cluster error code
# --silent, -s - Silent mode. Print only the error message
# --verbose, -v - Verbose mode
# --version, -V - Version info and exit
#
# The following covers the dynamics of resolveip - Resolve Host name to IP Address or Vice Versa
#
# The resolveip utility resolves host names to IP addresses and vice versa.
#
# Invoke as follows:
#
# resolveip [<options>] {<host_name>|<ip-addr>} ...
#
# Supports the following options:
#
# --help, --info, -?, -I - Display a help message and exit
# --silent, -s - Silent mode.
# --version, -V - Display version info and exit.
#
# The following options cover zlib_decompress - Decompress mysqlpump ZLIB-Compressed Output
#
# The zlib_decompress utility decompresses mysqlpump output that was created using ZLIB compression.
#
# Note: If we configured MySQL with the -DWITH ZLIB=system option, zlib_decompress is not built.
# 		  Then we can use openssl zlib instead.
#
# To use zlib_decompress:
#
# zlib_decompress <input_file> <output_file>
#
# Example:
#
# mysqlpump --compress-output=ZLIB > dump.zlib
# zlib_decompress dump.zlib dump.txt
#
# To see a help message, just run zlib_decompress with no args.
#
# To decompress mysqlpump LZ4-compressed output, use lz4_decompress.
#
# The following pertains to MySQL Program Env Variables:
#
# VARIABLE 										Desc
# AUTHENTICATION_PAM_LOG 				PAM authentication plugin debug logging settings
# CC 											The name of your C compiler (for running CMake)
# CXX 										Name of your C++ compiler (for running CMake)
# CC 											Name of your C compiler (for running CMake)
# DBI_USER 									Default user name for Perl DBI
# DBI_TRACE 								Trace options for Perl DBI
# HOME 										The default path for the mysql history file is $HOME/.mysql_history
# LD_RUN_PATH 								Used to specify the location of libmysqlclient.so
# LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN  Enable mysql_clear_password auth plugin
#
# LIBMYSQL_PLUGIN_DIR 					Dir in which to look for client plugins
# LIBMYSQL_PLUGINS 						Client plugins to preload
# MYSQL_DEBUG 								Debug trace options when debugging
# MYSQL_GROUP_SUFFIX 					Option group suffix value (like specifying --defaults-group-suffix)
# MYSQL_HISTFILE 							The path to the mysql history file. If this var is set, its value overrides the default for $HOME/.mysql_history
# MYSQL_HISTIGNORE 						Patterns specifying statements that mysql should not log to $HOME/.mysql_history or syslog if --syslog is given
#
# MYSQL_HOME 								The path to the dir in which the server-specific my.cnf file resides
# MYSQL_HOST 								Default host name used by the mysql cmd line client
# MYSQL_OPENSSL_UDF_DH_BITS 			Maximum key length for CREATE DH PARAMETERS()
#                _THRESHOLD
# MYSQL_OPENSSL_UDF_DSA_BITS 			Maximum DSA key length for CREATE ASYMMETRIC PRIV KEY()
# 					  _THRESHOLD 
# MYSQL_OPENSSL_UDF_RSA_BITS 			Maximum RSA key length for CREATE ASYMMETRIC PRIV KEY()
# 					  _THRESHOLD
# MYSQL_PS1 								The cmd prompt to use use in the mysql cmd line 
# MYSQL_PWD 								The default PW when connecting to mysqld. Insecure.
# MYSQL_TCP_PORT 							Default TCP/IP port number
# MYSQL_TEST_LOGIN_FILE 				The name of the .mylogin.cnf login path file
# MYSQL_TEST_TRACE_CRASH 				Whether the test protocol trace plugin crashes clients.
# MYSQL_TEST_TRACE_DEBUG 				Whether the test protocol trace plugin produces output.
# MYSQL_UNIX_PORT 						The default Unix socket file name, used for connections to localhost
# MYSQLX_TCP_PORT 						The X plugin default TCP/IP port number
#
# MYSQLX_UNIX_PORT 						The X Plugin default Unix socket file name; used for connections to localhost
# NOTIFY_SOCKET 							Socket used by mysqld to communicate with systemd
# PATH 										Used by the shell to find MySQL programs.
# PKG_CONFIG_PATH 						Location of mysqlclient.pc pkg-config file.
# TMPDIR 									The dir in which temp files are created.
# TZ 											Should be set to your local time zone
# UMASK 										The user-file creation mode when creating files
# UMASK_DIR 								The user-directory creation mode when creating dirs
# USER 										The default user name on Windows when connecting to Mysqld
#
# MYSQL_TEST_LOGIN_FILE is the path name of the login path file (the file created by mysql_config_editor).
#
# If not set, the default value is %APPDATA%\MySQL\.mylogin.cnf dir on Windows and $HOME/.mylogin.cnf on non Windows OS's
#
# The MYSQL_TEST_TRACE_DEBUG and MYSQL_TEST_TRACE_CRASH vars control the test protocol trace client plugin,
# if MySQL is built with that plugin enabled.
#
# The default UMASK and UMASK_DIR values are 0640 and 0750, respectively.
#
# MySQL assumes that the value for UMASK or UMASK_DIR is in octal if it starts with a zero.
# For example, setting UMASK=0600 is equivalent to UMASK=384 because 0600 Octal is 384 decimal.
#
# UMASK and UMASK_DIR, are not masks, they are modes.
#
# If UMASK is set, mysqld uses ($UMASK | 0600) as the mode for file creation, so that newly created files have a mode in the range
# from 0600 to 0666 (octal values)
#
# If UMASK_DIR is set, mysqld uses ($UMASK_DIR | 0700) as the base mode for dir creation, which is AND supplemented with ~(~$UMASK & 0666)
# so that newly created dirs have a mode in the range from 0700 to 0777.
#
# The AND may remove read and write permissions from the dir mode, but not execute permissions.
#
# We might need to set PKG_CONFIG_PATH if we use pkg-config in terms of MySQL programs
#
# The following covers MySQL Server Administration
#
# MySQL Server (mysqld) is the main program that does most of the work in a MySQL installation.
# The following will cover:
#
# Server configuration
# The dara dir, particularly the mysql system db
# The server log files
# Management of multiple servers on a single machine
#
# The following covers The MySQL Server
#
# mysqld is the MySQL server. The following will cover:
#
# Startup options that the server supports. You can specify these options on the cmd line, through config files or both.
#
# Server system vars. These vars reflect the current state and values of the startup options, some of which can be modified while the server is running
#
# Server status vars. These vars contain counters and stats about runtime operations
#
# How to set the server SQL mode. Modifies certain aspects of SQL syntax and semantics, for example for compability
# with code from other DBs or to control the error handling for specific situations
#
# Configuring and using IPv6 support
#
# Configuring and using time zone support
#
# Server-side help capabilities
#
# The server shutdown process. Performance and reliability considerations depending on type of table (transactional or nontransactional) and whether to use replication.
#
# NOTE: Not all storage engines are supported by all MySQL server bins and configs.
#
# The following section covers how to configure the Server.
#
# The MySQL server, mysqld has many command options and system vars that can be set at startup to configure its operation.
# To determine the default command option and system var values used by the server:
#
# mysqld --verbose --help
#
# The command produces a list of all mysqld options and config system vars. 
# Its output includes the default option and var values, might look like:
#
# abort-slave-event-count 			0
# allow-suspicious-udfs 			FALSE
# archive 								ON
# auto-increment-increment 		1
# auto-increment-offset 			1
# autocommit 							TRUE
# automatic-sp-privileges 			TRUE
# avoid-temporal-upgrade 			FALSE
# back-log 								80
# basedir 								/home/jon/bin/mysql-8.0/
# ...
# tmpdir 								/tmp
# transaction-alloc-block-size 	8192
# transaction-isolation 			REPEATABLE-READ
# transaction-prealloc-size 		4096
# transaction-read-only 			FALSE
# transaction-write-set-extraction OFF
# updatable-views-with-limit 		YES
# validate-user-plugins 			TRUE
# verbose 								TRUE
# wait-timeout 						28800
#
# To see the system vars in use on the server:
#
# SHOW VARIABLES;
#
# To see some stats and status indicators for a running server:
#
# SHOW STATUS;
#
# We can also see system vars and status through mysqladmin:
#
# mysqladmin variables
# mysqladmin extended-status
#
# Options set on cmd line are only in effect for that session, for permanance use OPtion files.
#
# The following pertains to Server Configuration Defaults:
#
# The MySQL server has many operating params, which you can change at server startup using cmd line options or config files.
# We can also change params at runtime.
#
# On Windows, the MySQL installer interacts with the user and creates a file named my.ini in the base install dir as the default option file
#
# NOTE: The extension on Windows might not be displayed (in terms of .ini or .cnf)
#
# After completing the installation process, you can edit the default option file at any time to modify the params.
#
# On non Windows, no default option file is made in terms of installation. Without a option file, it just runs with defaults.
# 
# The following pertains to Server Options, System vars and Status Vars
#
# The following contains all cmd line options, system vars, and status vars within mysqld.
#
# Cmd line options, System vars, Status vars:
#
# Name 													CMD-line 					Option file 				System Var 				Status Var 			Var Scope 		Dynamic
# abort-slave-event-count 							Yes 							Yes 							
# Aborted_clients 																																Yes 					Global 			No
# Aborted_connects 																																Yes 					Global 			No
# Acl_cache_items_count 																														Yes 					Global 			No
# activate_all_roles_on_login 					Yes 							Yes 							Yes 												Global 			Yes
# allow-suspicious-udfs 							Yes 							Yes 							
# ansi 													Yes 							Yes
# audit-log 											Yes 							Yes
# audit_log_buffer_size 							Yes 							Yes 							Yes 												Global 			No
# audit_log_compression 							Yes 							Yes 							Yes 												Global 			No
# audit_log_connection_policy 					Yes 							Yes 							Yes 												Global 			Yes
# audit_log_current_session 																						Yes						   					Both 				No
#
# audit_log_current_size 																														Yes 					Global 			No
# audit_log_encryption 								Yes 							Yes 							Yes 												Global 			No
# Audit_log_event_max_drop_size 																												Yes 					Global 			No
# Audit_log_events 																																Yes 					Global 			No
# Audit_log_events_filtered 																													Yes 					Global 			No
# Audit_log_events_lost 																														Yes 					Global 			No
# Audit_log_events_written 																													Yes 					Global 			No
#
# audit_log_exclude_accounts 						Yes 							Yes 							Yes 												Global 			Yes
# audit_log_file 										Yes 							Yes 							Yes 												Global 			No
# audit_log_filter_id 																								Yes												Both 				No
# audit_log_flush 																									Yes 												Global 			Yes
# audit_log_format 									Yes 							Yes 							Yes 												Global 			No
# audit_log_include_accounts 						Yes 							Yes 							Yes 												Global 			Yes
# audit_log_policy 									Yes 							Yes 							Yes 												Global 			No
# audit_log_read_buffer_size 						Yes 							Yes 							Yes 												Varies 			Varies
# audit_log_rotate_on_size 						Yes 							Yes 							Yes 												Global 			Yes
#
# audit_log_statement_policy 						Yes 							Yes 							Yes 												Global 			Yes
# audit_log_strategy 								Yes 							Yes 							Yes 												Global 			No
# Audit_log_total_size 																															Yes 					Global 			No
# Audit_log_write_waits 																														Yes 					Global 			No
# authentication_ldap_sasl_auth_method_name 	Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_bind_base_dn 		Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_bind_root_dn 		Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_bind_root_pwd 		Yes 							Yes 							Yes 												Global 			Yes
#
# authentication_ldap_sasl_ca_path 				Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_group_search_attr Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_group_search_ 		Yes 							Yes 							Yes 												Global 			Yes
# filter
# authentication_ldap_sasl_init_pool_size 	Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_log_status 			Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_max_pool_size 		Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_server_host 		Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_server_port 		Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_tls 					Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_sasl_user_search_attr 	Yes 							Yes 							Yes 												Global 			Yes
#
# authentication_ldap_simple_auth_method_ 	Yes 							Yes 							Yes 												Global 			Yes
# name
# authentication_ldap_simple_bind_base_dn 	Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_bind_root_dn 	Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_bind_root_pwd 	Yes 							Yes 							Yes 												Global 			yes
# authentication_ldap_simple_ca_path 			Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_group_ 			Yes 							Yes 							Yes 												Global 			Yes
# search_attr
# authentication_ldap_simple_int_pool_size 	Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_log_status 		Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_max_pool_size 	Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_server_host 		Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_server_port 		Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_tls 				Yes 							Yes 							Yes 												Global 			Yes
# authentication_ldap_simple_user_ 				Yes 							Yes 							Yes 												Global 			Yes
# search_attr
# 
# authentication_windows_log_level 				Yes 							Yes 							Yes 												Global 			No
# authentication_windows_use_principal_name 	Yes 							Yes 							Yes 												Global 			No
# auto_generate_certs 								Yes 							Yes 							Yes 												Global 			No
# auto_increment_increment 																						Yes 												Both 				Yes
# auto_increment_offset 																							Yes 												Both 				Yes
# autocommit 											Yes 							Yes 							Yes 												Both 				Yes
# automatic_sp_privileges 																							Yes 												Global 			Yes
# avoid_temporal_upgrade 							Yes 							Yes 							Yes 												Global 			Yes
# back_log																												Yes 												Global 			No
# basedir 												Yes 							Yes 							Yes 												Global 			No
# 
# big-tables 											Yes 							Yes 																				Both 				Yes
# - Variable: big_tables 																							Yes 												Both 				Yes
# bind-address 										Yes 							Yes 																				Global 			No
# - Variable: bind_address 																						Yes 												Global 			No
# Binlog_cache_disk_use 																														Yes 					Global 			No
# binlog_cache_size 							 		Yes 							Yes 							Yes 												Global 			Yes
#
# Binlog_cache_use 																																Yes 					Global 			No
# binlog-checksum 									Yes 							Yes 							
# binlog_checksum 																									Yes 												Global 			Yes
# binlog_direct_non_transactional_updates 	Yes 							Yes 							Yes												Both 				Yes
# binlog-do-db 										Yes 							Yes 
# binlog_error_action 								Yes 							Yes 							Yes 												Global 			Yes
# binlog_expire_logs_seconds 						Yes 							Yes 							Yes 												Global 			Yes
# binlog-format 										Yes 							Yes 																				Both 				Yes
# - Variable: binlog_format 																						Yes 												Both 				Yes
# binlog_group_commit_sync_delay 				Yes 							Yes 							Yes 												Global 			Yes
# binlog_group_commit_sync_no_delay_count 	Yes 							Yes 							Yes 												Global 			Yes
# binlog_gtid_simple_recovery 					Yes 							Yes 							Yes 												Global 			No
# binlog-ignore-db									Yes 							Yes 
# binlog_max_flush_queue_time 																					Yes 												Global 			Yes
# binlog_order_commits 																								Yes 												Global 			Yes
# binlog-row-event-max-size 						Yes 							Yes 	
# binlog_row_image 									Yes 							Yes 							Yes 												Both 				Yes
# binlog_row_metadata 								Yes 							Yes 							Yes 												Global 			Yes
# binlog_row_value_options 						Yes 							Yes 							Yes 												Both 				Yes
# 
# binlog-rows-query-log-events 					Yes 							Yes 
# -Variable: binlog_rows_query_log_events 	
# binlog_rows_query_log_events 					Yes 							Yes 							Yes 												Both 				Yes
# Binlog_stmt_cache_disk_use 																														Yes 				Global 			No
# binlog_stmt_cache_size 							Yes 							Yes 							Yes 												Global 			Yes
# Binlog_stmt_cache_use 																															Yes 				Global 			No
# binlog_transaction_dependency_history_size Yes 							Yes 							Yes 												Global 			Yes
# binlog_transaction_dependency_tracking 		Yes 							Yes 							Yes 												Global 			Yes
# block_encryption_mode 							Yes 							Yes 							Yes 												Both 				Yes
# bulk_insert_buffer_size 							Yes 							Yes 							Yes 												Both 				Yes
# Bytes_received 																																		Yes 				Both 				No
# Bytes_sent 																																			Yes 				Both 				No
# caching_sha2_password_auto_ 					Yes 							Yes 							Yes 												Global 			No
# generate_rsa_keys
# caching_sha2_password_private_key_path 		Yes 							Yes 							Yes 												Global 			No
# caching_sha2_password_public_key_path 		Yes 							Yes 							Yes 												Global 			No
# Caching_sha2_password_rsa_public_key 																										Yes 				Global 			No
# character_set_client 																								Yes 												Both 				Yes
# character-set-client-handshake 				Yes 							Yes 
# character_set_connection 																						Yes 												Both 				Yes
# character_set_database (note 1) 																				Yes 												Both 				Yes
# character-set-filesystem 						Yes 							Yes 																				Both 				Yes
# -Variable: character_set_filesystem 																			Yes 												Both 				Yes
# character_set_results 																							Yes 												Both 				Yes
# character-set-server 								Yes 							Yes 																				Both 				Yes
# -Variable: character_set_server 																				Yes 												Both 				Yes
# character_set_system 																								Yes 												Global 			No
# character-sets-dir 								Yes 							Yes 																				Global 			No
#
# -Variable: character_sets_dir 																					Yes 												Global 			No
# check_proxy_users 									Yes 							Yes 							Yes 												Global 			Yes
# chroot 												Yes 							Yes 	
# collation_connection 																								Yes 												Both 				Yes
# collation_database (note 1) 																					Yes 												Both 				Yes
# collation-server 									Yes 							Yes 																				Both 				Yes
# -Variable: collation_server 																					Yes 												Both 				Yes
# Com_admin_commands 																																Yes 				Both 				No
# Com_alter_db 																																		Yes 				Both 				No
# Com_alter_event 																																	Yes 				Both 				No
# Com_alter_function 																																Yes 				Both 				No
# Com_alter_procedure 																																Yes 				Both 				No
# Com_alter_resource_group 																														Yes 				Global 			No
# Com_alter_server 																																	Yes 				Both 				No
# Com_alter_table 																																	Yes 				Both 				No
# Com_alter_tablespace 																																Yes 				Both 				No
# Com_alter_user 																																		Yes 				Both 				No
# Com_alter_user_default_role 																													Yes 				Global 			No
#
# Com_analyze 																																			Yes 				Both 				No
# Com_assign_to_keycache 																															Yes 				Both 				No
# Com_begin 																																			Yes 				Both 				No
# Com_binlog 																																			Yes 				Both 				No
# Com_call_procedure 																																Yes 				Both 				No
# Com_change_db 																																		Yes 				Both 				No
# Com_change_master 																																	Yes 				Both 				No
# Com_change_repl_filter 																															Yes 				Both 				No
# Com_check 																																			Yes 				Both 				No
# Com_checksum 																																		Yes 				Both 				No
# Com_commit 																																			Yes 				Both 				No
# Com_create_db																																		Yes 				Both 				No
# Com_create_event 																																	Yes 				Both 				No
# Com_create_function 																																Yes 				Both 				No
#
# Com_create_index 																																	Yes 				Both 				No
# Com_create_procedure 																																Yes 				Both 				No
# Com_create_resource_group 																														Yes 				Global 			No
# Com_create_role 																																	Yes 				Global 			No
# Com_create_server 																																	Yes 				Both 				No
# Com_create_table 																																	Yes 				Both 				No
# Com_create_trigger 																																Yes 				Both 				No
# Com_create_udf 																																		Yes 				Both 				No
# Com_create_user 																																	Yes 				Both 				No
# Com_create_view 																																	Yes 				Both 				No
#
# Com_dealloc_sql 																																	Yes 				Both 				No
# Com_delete 																																			Yes 				Both 				No
# Com_delete_multi 																																	Yes 				Both 				No
# Com_do 																																				Yes 				Both 				No
# Com_drop_db 																																			Yes 				Both 				No
# Com_drop_event 																																		Yes 				Both 				No
# Com_drop_function 																																	Yes 				Both 				No
# Com_drop_index 																																		Yes 				Both 				No
# Com_drop_procedure 																																Yes 				Both 				No
# Com_drop_resource_group 																															Yes 				Global 			No
# Com_drop_role 																																		Yes 				Global 			No
# Com_drop_server 																																	Yes 				Both 				No
# Com_drop_table 																																		Yes 				Both 				No
# Com_drop_trigger 																																	Yes 				Both 				No
# Com_drop_user 																																		Yes 				Both 				No
# Com_drop_view 																																		Yes 				Both 				No
# Com_empty_query 																																	Yes 				Both 				No
# Com_execute_sql 																																	Yes 				Both 				No
#
# Com_explain_other 																																	Yes 				Both 				No
# Com_flush 																																			Yes 				Both 				No
# Com_get_diagnostics 																																Yes 				Both 				No
# Com_grant  																																			Yes 				Both 				No
# Com_grant_roles																																		Yes 				Global 			No
# Com_group_replication_start 																													Yes 				Global 			No
# Com_group_replication_stop 																														Yes 				Global 			No
# Com_ha_close 																																		Yes 				Both 				No
# Com_ha_open 																																			Yes 				Both 				No
# Com_ha_read 																																			Yes 				Both 				No
# Com_help 																																				Yes 				Both 				No
#
# Com_insert 																																			Yes 				Both 				No
# Com_insert_select 																																	Yes 				Both 				No
# Com_install_component 																															Yes 				Global 			No
# Com_install_plugin 																																Yes 				Both 				No
# Com_kill 																																				Yes 				Both 				No
# Com_load 																																				Yes 				Both 				No
# Com_lock_tables 																																	Yes 				Both 				No
# Com_optimize 																																		Yes 				Both 				No
# Com_preload_keys 																																	Yes 				Both 				No
# Com_prepare_sql 																																	Yes 				Both 				No
# Com_purge 																																			Yes 				Both 				No
# Com_purge_before_date 																															Yes 				Both 				No
# Com_release_savepoint 																															Yes 				Both 				No
# Com_rename_table 																																	Yes 				Both 				No
#
# Com_rename_user 																																	Yes 				Both 				No
# Com_repair 																																			Yes 				Both 				No
# Com_replace 																																			Yes 				Both 				No
# Com_replace_select 																																Yes 				Both 				No
# Com_reset 																																			Yes 				Both 				No
# Com_resignal 																																		Yes 				Both 				No
# Com_revoke 																																			Yes 				Both 				No
# Com_revoke_all 																																		Yes 				Both 				No
# Com_revoke_roles 																																	Yes 				Global 			No
# Com_rollback 																																		Yes 				Both 				No
# Com_rollback_to_savepoint 																														Yes 				Both 				No
# Com_savepoint 																																		Yes 				Both 				No
# Com_select 																																			Yes 				Both 				No
# Com_set_option 																																		Yes 				Both 				No
# Com_set_resource_group 																															Yes 				Global 			No
# Com_set_role 																																		Yes 				Global 			No
#
# Com_show_authors 																																	Yes 				Both 				No
# Com_show_binlog_events 																															Yes 				Both 				No
# Com_show_binlogs 																																	Yes 				Both 				No
# Com_show_charsets 																																	Yes 				Both 				No
# Com_show_collations 																																Yes 				Both 				No
# Com_show_contributors 																															Yes 				Both 				No
# Com_show_create_db 																																Yes 				Both 				No
# Com_show_create_event 																															Yes 				Both 				No
# Com_show_create_func 																																Yes 				Both 				No
# Com_show_create_proc 																																Yes 				Both 				No
# Com_show_create_table 																															Yes 				Both 				No
# Com_show_create_trigger 																															Yes 				Both 				No
# Com_show_create_user 																																Yes 				Both 				No
# Com_show_databases 																																Yes 				Both 				No
# Com_show_engine_logs 																																Yes				Both 				No
# Com_show_engine_mutex 																															Yes 				Both 				No
# Com_show_engine_status 																															Yes 				Both 				No
# Com_show_errors 																																	Yes 				Both 				No
#
# Com_show_events 																																	Yes 				Both 				No
# Com_show_fields 																																	Yes 				Both 				No
# Com_show_function_code 																															Yes 				Both 				No
# Com_show_function_status 																														Yes 				Both 				No
# Com_show_grants 																																	Yes 				Both 				No
# Com_show_keys 																																		Yes 				Both 				No
# Com_show_master_status 																															Yes 				Both 				No
# Com_show_ndb_status 																																Yes 				Both 				No
# Com_show_new_master 																																Yes 				Both 				No
# Com_show_open_tables																																Yes 				Both 				No
# Com_show_plugins 																																	Yes 				Both 				No
# Com_show_privileges 																																Yes 				Both 				No
# Com_show_procedure_code 																															Yes 				Both 				No
# Com_show_procedure_status 																														Yes 				Both 				No
# Com_show_processlist 																																Yes 				Both 				No
# Com_show_profile 																																	Yes 				Both 				No
# Com_show_profiles 																																	Yes 				Both 				No
# Com_show_relaylog_events 																														Yes 				Both 				No
# Com_show_slave_hosts 																																Yes 				Both 				No
# 
# Com_show_slave_status 																															Yes 				Both 				No
# Com_show_slave_status_nonblocking 																											Yes 				Both 				No
# Com_show_status 																																	Yes 				Both 				No
# Com_show_storage_engines 																														Yes 				Both 				No
# Com_show_table_status 																															Yes 				Both 				No
# Com_show_tables 																																	Yes 				Both 				No
# Com_show_triggers 																																	Yes 				Both 				No
# Com_show_variables 																																Yes 				Both 				No
# Com_show_warnings 																																	Yes 				Both 				No
# Com_shutdown 																																		Yes 				Both 				No
# Com_signal 																																			Yes 				Both 				No
# Com_slave_start 																																	Yes 				Both 				No
# Com_slave_stop 																																		Yes 				Both 				No
# Com_stmt_close 																																		Yes 				Both 				No
# Com_stmt_execute 																																	Yes 				Both 				No
#
# Com_stmt_fetch 																																		Yes 				Both 				No
# Com_stmt_prepare 																																	Yes 				Both 				No
# Com_stmt_reprepare 																																Yes 				Both 				No
# Com_stmt_reset 																																		Yes 				Both 				No
# Com_stmt_send_long_data 																															Yes 				Both 				No
# Com_truncate 																																		Yes 				Both 				No
# Com_uninstall_component 																															Yes 				Global 			No
# Com_uninstall_plugin 																																Yes 				Both 				No
# Com_unlock_tables 																																	Yes 				Both 				No
# Com_update 																																			Yes 				Both 				No
# Com_update_multi 																																	Yes 				Both 				No
# Com_xa_commit 																																		Yes 				Both 				No
# Com_xa_end 																																			Yes 				Both 				No
# Com_xa_prepare 																																		Yes 				Both 				No
# Com_xa_recover 																																		Yes 				Both 				No
# Com_xa_rollback 																																	Yes 				Both 				No
# Com_xa_start 									- 																									Yes 				Both 				No
# completion_type 								Yes 					Yes 									Yes 													Both 				Yes
# Compression 																																			Yes 				Session 			No
# concurrent_insert 								Yes 					Yes 									Yes 													Global 			Yes
# connect_timeout 								Yes 					Yes 									Yes 													Global 			Yes
# 
# Connection_control_delay_generated 																											Yes 				Global 			No
# connection_control_failed_ 					Yes 					Yes 									Yes 													Global 			Yes
# connections_threshold
# connection_control_max_connection_delay Yes 					Yes 									Yes 													Global 			Yes
# connection_control_min_connection_delay Yes 					Yes 									Yes 													Global 			Yes
# Connection_errors_accept 																														Yes 				Global 			No
# Connection_errors_internal 																														Yes 				Global 			No
# Connection_errors_max_connections 																											Yes 				Global 			No
# Connection_errors_peer_address 																												Yes 				Global 			No
# Connection_errors_select 																														Yes 				Global 			No
# Connection_errors_tcpwrap 																														Yes 				Global 			No
# Connections 																																			Yes 				Global 			No
# console 											Yes 					Yes 
# core-file 										Yes 					Yes
# core_file 																										Yes 													Global 			No
# Created_tmp_disk_tables 																															Yes 				Both 				No
# Created_tmp_files 																																	Yes 				Global 		 	No
# Created_tmp_tables 																																Yes 				Both 				No
# cte_max_recursion_depth 						Yes 					Yes 									Yes 													Both 				Yes
# daemon_memcached_enable_binlog 			Yes 					Yes 									Yes 													Global 			No
# daemon_memcached_engine_lib_name 			Yes 					Yes 									Yes 													Global 			No
# daemon_memcached_engine_lib_path 			Yes 					Yes 									Yes 													Global 			No
# daemon_memcached_option 						Yes 					Yes 									Yes 													Global 			No
#
# daemon_memcached_r_batch_size 				Yes 					Yes 									Yes 													Global 			No
# daemon_memcached_w_batch_size 				Yes 					Yes 
# daemonize 										Yes 					Yes
# datadir 											Yes 					Yes 									Yes 													Global 			No
# date_format 																										Yes 													Global 			No
# datetime_format 																								Yes 													Global 			No
# debug 												Yes 					Yes 									Yes 													Both 				Yes
# debug_sync 																										Yes 													Session 			Yes
# debug-sync-timeout 							Yes 					Yes 	
# default_authentication_plugin 				Yes 					Yes 									Yes 													Globla 			No
# default_collation_for_utf8mb4 										Yes 									Yes 													Both 				Yes
# default_password_lifetime 					Yes 					Yes 									Yes 													Global 			Yes
# default-storage-engine 						Yes 					Yes 																							Both 				Yes
# -Variable: default_storage_engine 																		Yes 													Both 				Yes
# default-time-zone 								Yes 					Yes 
# default_tmp_storage_engine 					Yes 					Yes 									Yes 													Both 				Yes
# default_week_format 							Yes 					Yes 									Yes 													Both 				Yes
# defaults-extra-file 							Yes
# defaults-file 									Yes
# defaults-group-suffix 						Yes
# delay-key-write 								Yes 					Yes 																							Global 			Yes
# - Variable: delay_key_write 																				Yes 													Global 			Yes
# Delayed_errors 																																			Yes 			Global 			No
# 
# delayed_insert_limit 							Yes 					Yes 									Yes 													Global 			Yes
# Delayed_insert_threads 																																Yes 			Global 			No
# delayed_insert_timeout 						Yes 					Yes 									Yes 													Global 			Yes
# delayed_queue_size 							Yes 					Yes 									Yes 													Global 			Yes
# Delayed_writes 																																			Yes 			Global 			No
# des-key-file 									Yes 					Yes 
# disabled_storage_engines 					Yes 					Yes 									Yes 													Global 			No
# disconnect_on_expired_password 			Yes 					Yes 									Yes 													Global 			No
# disconnect-slave-event-count 				Yes 					Yes 
# div_precision_increment 						Yes 					Yes 									Yes 													Both 				Yes
# dragnet.log_error_filter_rules 			Yes 					Yes 									Yes 													Global 			Yes
# dragnet.Status 																																			Yes 			Global 			No
# early-plugin-load 								Yes 					Yes 
# enable-named-pipe 								Yes 					Yes
# - Variable: named_pipe 
# end_markers_in_json 																							Yes 													Both 				Yes
# enforce-gtid-consistency 					Yes 					Yes 									Yes 													Global 			Yes
# enforce_gtid_consistency 					Yes 					Yes 									Yes 													Global 			Yes
# eq_range_index_dive_limit 																					Yes 													Both 				Yes
# 
# error_count 																										Yes 													Session 			No
# event-scheduler 								Yes 					Yes 																							Global 			Yes
# - Variable: event_scheduler 																				Yes													Global 			Yes
# executed-gtids-compression-period 		Yes 					Yes 
# - Variable: executed_gtids_ 																				Yes 													Global 			Yes
#   compression_period
# executed_gtids_compression_period 																		Yes 													Global 			Yes 					
# exit-info 										Yes 					Yes 
# expire_logs_days 								Yes 					Yes 									Yes 													Global 			Yes
# explicit_defaults_for_timestamp 			Yes 					Yes 									Yes 													Both 				Yes
# external-locking 								Yes 					Yes 									
# - Variable: skip_external_locking 
# external_user 																									Yes 													Session			No
# federated											Yes 					Yes 
# Firewall_access_denied 																																	Yes 		Global 			No
# Firewall_access_granted 																																	Yes 		Global 			No
# Firewall_cached_entries 																																	Yes 		Global 			No
# flush 												Yes 					Yes 									Yes 													Global 			Yes
# Flush_commands 																																				Yes 		Global 			No
# flush_time 										Yes 					Yes 									Yes 													Global 			Yes
# foreign_key_checks 																							Yes 													Both 				Yes
# ft_boolean_syntax 								Yes 					Yes 									Yes 													Global 			Yes
# ft_max_word_len 								Yes 					Yes 									Yes 													Global 			No
# ft_min_word_len 								Yes 					Yes 									Yes 													Global 			No
# ft_query_expansion_limit 					Yes 					Yes 									Yes 													Global 			No
# ft_stopword_file 								Yes 					Yes 									Yes 													Global 			No
# gdb 												Yes 					Yes 
# general-log 										Yes 					Yes 																							Global 			Yes
# -Variable: general_log 																						Yes 													Global 			Yes
# 
# general_log_file 								Yes 					Yes 									Yes 													Global			Yes
# group_concat_max_len 							Yes 					Yes 									Yes 													Both 				Yes
# group_replication_allow_local_disjoint 	Yes 					Yes 									Yes 													Global 			Yes
# _gtids_join
# group_replication_allow_local_lower 		Yes 					Yes 									Yes 													Global 			Yes
# _version_join
# group_replication_auto_ 						Yes 					Yes 									Yes 													Global 			Yes
# increment_increment
# group_replication_bootstrap_ 				Yes 					Yes 									Yes 													Global 			Yes
# group
# group_replication_communication_debug_ 	Yes 					Yes 									Yes 													Global 			Yes
# options
#
# group_replication_components 				Yes 					Yes 									Yes 													Global 			Yes
# group_replication_compression_threshold Yes 					Yes 									Yes 													Global 			Yes
# group_replication_enforce 					Yes 					Yes 									Yes 													Global 			Yes
# _update_everywhere_checks
# group_replication_exit_state_action 		Yes 					Yes 									Yes 													Global 			Yes
# group_replication_flow 						Yes 					Yes 									Yes 													Global 			Yes
# _control_applier_threshold
# group_replication_flow 						Yes 					Yes 									Yes 													Global 			Yes
# _control_certifier_threshold 				
#
# group_replication_flow_control 			Yes 					Yes 									Yes 													Global 			Yes
# _hold_percent
# group_replication_flow_control 			Yes 					Yes 									Yes 													Global 			Yes
# _max_commit_quota
# group_replication_flow_control 			Yes 					Yes 									Yes 													Global 			Yes
# _member_quota_percent 
# group_replication_flow_control 			Yes 					Yes 									Yes 													Global 			Yes
# _min_quota 	
# group_replication_flow_control 			Yes 					Yes 									Yes 													Global 			Yes
# _min_recovery_quota
# group_replication_flow_control 			Yes 					Yes 									Yes 													Global 			Yes
# _control_mode
# group_replication_flow_control 			Yes 					Yes 									Yes 													Global 			Yes
# _control_period 
# group_replication_flow_control 			Yes 					Yes 									Yes 													Global 			Yes
# _control_release_percent
#
# group_replication_force_members 			Yes 					Yes 									Yes 													Global 			Yes
# group_replication_group_name 				Yes 					Yes 									Yes 													Global 			Yes
# group_replication_group_seeds 				Yes 					Yes 									Yes 													Global 			Yes
# group_replication_gtid_assignment  		Yes 					Yes 									Yes 													Global 			Yes
# _block_size
# group_replication_ip_whitelist 			Yes 					Yes 									Yes 													Global 			Yes
# group_replication_local_address 			Yes 					Yes 									Yes 													Global 			Yes
# group_replication_member_expel_timeout 	Yes 					Yes 									Yes 													Global 			Yes
# group_replication_member_weight 			Yes 					Yes 									Yes 													Global 			Yes
# group_replication_poll_spin_loops 		Yes 					Yes 									Yes 													Global 			Yes
#
# group_replication_primary_member 																										Yes 						Global 			No
# group_replication_recovery_complete_at 	Yes 					Yes 									Yes 													Global 			Yes
# group_replication_recovery_ 				Yes 					Yes 									Yes 													Global 			Yes
# get_public_key
# group_replication_recovery_ 				Yes 					Yes 									Yes 													Global 			Yes
# public_key_path
# group_replication_recovery_ 				Yes 					Yes 									Yes 													Global 			Yes
# reconnect_interval
# group_replication_recovery_retry_count 	Yes 					Yes 									Yes 													Global 			Yes
# group_replication_recovery_ssl_ca 		Yes 					Yes 									Yes 													Global 			Yes
# group_replication_recovery_ssl_capath 	Yes 					Yes 									Yes 													Global 			Yes
# group_replication_recovery_ssl_cert 		Yes 					Yes 									Yes 													Global 			Yes
# group_replication_recovery_ssl_cipher 	Yes 					Yes 									Yes 													Global 			Yes
# group_replication_recovery_ssl_crl 		Yes 					Yes 									Yes 													Global 			Yes
# group_replication_recovery_ssl_crlpath 	Yes 					Yes 									Yes 													Global 			Yes
# 
# group_replication_recovery_ssl_key 		Yes 					Yes 									Yes 													Global 			Yes
# group_replication_recovery 					Yes 					Yes 									Yes 													Global 			Yes
# _ssl_verify_server_cert
# group_replication_recovery_use_ssl 		Yes 					Yes 									Yes 													Global 			Yes
# group_replication_single_primary_mode 	Yes 					Yes 									Yes 													Global 			Yes
# group_replication_ssl_mode 					Yes 					Yes 									Yes 													Global 			Yes
# group_replication_start_on_boot 			Yes 					Yes 									Yes 													Global 			Yes
# group_replication_transaction 				Yes 					Yes 									Yes 													Global 			Yes
# _size_limit
# group_replication_unreachable_ 			Yes 					Yes 									Yes 													Global 			Yes
# majority_timeout
#
# gtid_executed 																									Yes 													Varies 			No
# gtid-executed-compression-period 			Yes 					Yes 	
# - Variable: gtid_executed 					
# _compression_period
# gtid_executed_compression_period 																			Yes 													Global 			Yes
# gtid-mode 										Yes 					Yes 																							Global 			Yes
# - Variable: gtid_mode 																						Yes 													Global 			Yes
# gtid_mode 																										Yes 													Global 			Yes
# gtid_next 																										Yes 													Session 			Yes
# gtid_owned 																										Yes 													Both 				No
# gtid_purged 																										Yes 													Global 			Yes
# Handler_commit 																																Yes 						Both 				No
# Handler_delete 																																Yes 						Both 				No
# Handler_external_lock 																													Yes 						Both 				No
# Handler_mrr_init 																															Yes 						Both 				No
# Handler_prepare 																															Yes 						Both 				No
# Handler_read_first 																														Yes 						Both 				No
# Handler_read_key 																															Yes 						Both 				No
# Handler_read_last 																															Yes 						Both 				No
# Handler_read_next 																															Yes 						Both 				No
# Handler_read_prev 																															Yes 						Both 				No
# Handler_read_rnd 																															Yes 						Both 				No
# Handler_read_rnd_next 																													Yes 						Both 				No
#
# Handler_rollback 																															Yes 						Both 				No
# Handler_savepoint 																															Yes 						Both 				No
# Handler_savepoint_rollback 																												Yes 						Both 				No
# Handler_update 																																Yes 						Both 				No
# Handler_write 																																Yes 						Both 				No
# have_compress 																									Yes 													Global 			No
# have_crypt 																										Yes 													Global 			No
# have_dynamic_loading 																							Yes 													Global 			No
# have_geometry 																									Yes 													Global 			No
# have_openssl 																									Yes 													Global 			No
# have_profiling 																									Yes 													Global 			No
# have_query_cache 																								Yes 													Global 			No
# have_rtree_keys 																								Yes 													Global 			No
# have_ssl 																											Yes 													Global 			No
# have_statement_timeout 																						Yes 													Global 			No
#
# have_symlink 									-						-										Yes 													Global 			No
# help 												Yes  					Yes 
#
# histogram_generation_max_mem_size 		Yes 					Yes 									Yes 													Both 				Yes
# host_cache_size 																								Yes 													Global 			Yes
# hostname 																											Yes 													Global 			No
# identity 																											Yes 													Session 			Yes
# ignore-builtin-innodb 						Yes 					Yes 																							Global 			No
# - Variable: ignore_builtin_innodb 																		Yes 													Global 			No
# information_schema_stats_expiry 			Yes 					Yes 									Yes 													Both 				Yes
# init_connect 									Yes 					Yes 									Yes 													Global 			Yes
# init-file 										Yes 					Yes 																							Global 			No
# - Variable: init_file 																						Yes 													Global 			No
# init_slave 										Yes 					Yes 									Yes 													Global 			Yes
# initialize 										Yes 					Yes 
# initialize-insecure 							Yes 					Yes 
# innodb 											Yes 					Yes
# innodb_adaptive_flushing 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_adaptive_flushing_lwm 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_adaptive_hash_index 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_adaptive_hash_index_parts 			Yes 					Yes 									Yes 													Global 			No
# innodb_adaptive_max_sleep_delay 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_api_bk_commit_interval 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_api_disable_rowlock 					Yes 					Yes 									Yes 													Global 			No
# innodb_api_enable_binlog 					Yes 					Yes 									Yes 													Global 			No
# innodb_api_enable_mdl 						Yes 					Yes 									Yes 													Global 			No
# innodb_api_trx_level 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_autoextend_increment 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_autoinc_lock_mode 					Yes 					Yes 									Yes 													Global 			No
# innodb_available_undo_logs 																											Yes 							Global 			No
# innodb_background_drop_list_empty 		Yes 					Yes 									Yes 													Global 			Yes
#
# innodb_buffer_pool_bytes_data 																										Yes 							Global 			No
# innodb_buffer_pool_bytes_dirty 																									Yes 							Global 			No
# innodb_buffer_pool_chunk_size 				Yes 					Yes 									Yes 													Global 			No
# innodb_buffer_pool_debug 					Yes 					Yes 									Yes 													Global 			No
# innodb_buffer_pool_dump_at_shutdown 		Yes 					Yes 									Yes 													Global 			Yes
# innodb_buffer_pool_dump_now 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_buffer_pool_dump_pct 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_buffer_pool_dump_status 																									Yes 							Global 			No
# innodb_buffer_pool_filename 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_buffer_pool_in_core_file 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_buffer_pool_instances 				Yes 					Yes 									Yes 													Global 			No
#
# innodb_buffer_pool_load_abort 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_buffer_pool_load_at_startup 		Yes 					Yes 									Yes 													Global 			No
# innodb_buffer_pool_load_now 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_buffer_pool_load_status 																									Yes 							Global 			No
# innodb_buffer_pool_pages_data 																										Yes 							Global 			No
# innodb_buffer_pool_pages_dirty 																									Yes 							Global 			No
# innodb_buffer_pool_pages_flushed 																									Yes 							Global 			No
# innodb_buffer_pool_pages_free 																										Yes 							Global 			No
# innodb_buffer_pool_pages_latched 																									Yes 							Global 			No
# innodb_buffer_pool_pages_misc 																										Yes 							Global 			No
# innodb_buffer_pool_pages_total 																									Yes 							Global 			No
# innodb_buffer_pool_read_ahead 																										Yes 							Global 			No
#
# innodb_buffer_pool_read_ahead_evicted 																							Yes 							Global 			No
# innodb_buffer_pool_read_ahead_rnd 																								Yes 							Global 			No
# innodb_buffer_pool_read_requests 																									Yes 							Global 			No
# innodb_buffer_pool_reads 																											Yes 							Global 			No
# innodb_buffer_pool_resize_status 																									Yes 							Global 			No
# innodb_buffer_pool_size 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_buffer_pool_wait_free 																										Yes 							Global 			No
# innodb_buffer_pool_write_requests 																								Yes 							Global 			No
# innodb_change_buffer_max_size 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_change_buffering  					Yes 					Yes 									Yes 													Global 			yes
# innodb_change_buffering_debug 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_checkpoint_disabled 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_checksum_algorithm 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_cmp_per_index_enabled 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_commit_concurrency 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_compress_debug 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_compression_ 							Yes 					Yes 									Yes 													Global 			Yes
# failure_threshold_pct
#
# innodb_compression_level 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_compression_pad_pct_max 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_concurrency_tickets 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_data_file_path 						Yes 					Yes 									Yes 													Global 			No
# innodb_data_fsyncs 																													Yes 							Global 			No
# innodb_data_home_dir 							Yes 					Yes 									Yes 													Global 			No
# innodb_data_pending_fsyncs 																											Yes 							Global 			No
# innodb_data_pending_reads 																											Yes 							Global 			No
# innodb_data_pending_writes 																											Yes 							Global 			No
# innodb_data_read 																														Yes 							Global 			No
# innodb_data_reads 																														Yes 							Global 			No
# innodb_data_writes 																													Yes 							Global 			No
# innodb_data_written 																													Yes 							Global 			No
# innodb_dblwr_pages_written 																											Yes 							Global 			No
# innodb_dblwr_writes 																													Yes 							Global 			No
# innodb_ddl_log_crash_reset_debug 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_deadlock_detect 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_dedicated_server 						Yes 					Yes 									Yes 													Global 			No
# innodb_default_row_format 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_directories 							Yes 					Yes 									Yes 													Global 			No
# 
# innodb_disable_sort_file_cache 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_doublewrite 							Yes 					Yes 									Yes 													Global 			No
# innodb_fast_shutdown 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_fil_make_page_dirty_debug 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_file_per_table 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_fill_factor 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_flush_log_at_timeout 																				Yes 													Global 			Yes
# innodb_flush_log_at_trx_commit 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_flush_method 							Yes 					Yes 									Yes 													Global 			No
# innodb_flush_neighbors 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_flush_sync 								Yes 					Yes 									Yes 													Global 			Yes
# innodb_flushing_avg_loops 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_force_load_corrupted 				Yes 					Yes 									Yes 													Global 			No
# innodb_force_recovery 						Yes 					Yes 									Yes 													Global 			No
# innodb_fsync_threshold 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_ft_aux_table 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_ft_cache_size 							Yes 					Yes 									Yes 													Global 			No
# innodb_ft_enable_diag_print 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_ft_enable_stopword 					Yes 					Yes 									Yes 													Both 				Yes
# innodb_ft_max_token_size 					Yes 					Yes 									Yes 													Global 			No
#
# innodb_ft_min_token_size 					Yes 					Yes 									Yes 													Global 			No
# innodb_ft_num_word_optimize 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_ft_result_cache_limit 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_ft_server_stopword_table 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_ft_sort_pll_degree 					Yes 					Yes 									Yes 													Global 			No
# innodb_ft_total_cache_size 					Yes 					Yes 									Yes 													Global 			No
# innodb_ft_user_stopword_table 				Yes 					Yes 									Yes 													Both 				Yes
# innodb_have_atomic_builtins 																											Yes 						Global 			No
# innodb_io_capacity 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_io_capacity_max 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_limit_optimistic_insert_debug 	Yes 					Yes 									Yes 													Global 			Yes
# innodb_lock_wait_timeout 					Yes 					Yes 									Yes 													Both  			Yes
# innodb_log_buffer_size 						Yes 					Yes 									Yes 													Global 			Varies
# innodb_log_checkpoint_fuzzy_now 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_log_checkpoint_now 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_log_checksums 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_log_compressed_pages 				Yes 					Yes 									Yes 													Global 			Yes
#
# innodb_log_file_size 							Yes 					Yes 									Yes 													Global 			No
# innodb_log_files_in_group 					Yes 					Yes 									Yes 													Global 			No
# innodb_log_group_home_dir 					Yes 					Yes 									Yes 													Global 			No
# innodb_log_spin_cpu_abs_lwm 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_log_spin_cpu_pct_hwm 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_log_wait_for_flush_spin_hwm 		Yes 					Yes 									Yes 													Global 			Yes
# innodb_log_waits 																															Yes 						Global 			No
# innodb_log_write_ahead_size 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_log_write_requests 																												Yes 						Global 			No
# innodb_log_writes 																															Yes 						Global 			No
# innodb_lru_scan_depth 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_max_dirty_pages_pct 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_max_dirty_pages_pct_lwm 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_max_purge_lag 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_max_purge_lag_delay 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_max_undo_log_size 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_merge_threshold_set_all_debug 	Yes 					Yes 									Yes 													Global 			Yes
# innodb_monitor_disable 						Yes 					Yes 									Yes 													Global 			Yes
#
# innodb_monitor_enable 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_monitor_reset 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_monitor_reset_all 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_num_open_files 																													Yes 						Global 			No
# innodb_numa_interleave 						Yes 					Yes 									Yes 													Global 			No
# innodb_old_blocks_pct 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_old_blocks_time 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_online_alter_log_max_size 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_open_files 								Yes 					Yes 									Yes 													Global 			No
# innodb_optimize_fulltext_only 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_os_log_fsyncs 																														Yes 						Global 			No
# innodb_os_log_pending_fsyncs 																											Yes 						Global 			No
# innodb_os_log_pending_writes 																											Yes 						Global 			No
# innodb_os_log_written 																													Yes 						Global 			No
# innodb_page_cleaners 							Yes 					Yes 									Yes 													Global 			No
# innodb_page_size 																															Yes 						Global 			No
# innodb_page_size 								Yes 					Yes 									Yes 													Global 			No
#
# innodb_pages_created 																							 							Yes						Global 			No
# innodb_pages_read 																															Yes 						Global 			No
# innodb_pages_written 																														Yes 						Global 			No
# innodb_parallel_read_threads 				Yes 					Yes 									Yes 													Session 			Yes
# innodb_print_all_deadlocks 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_print_ddl_logs 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_purge_batch_size 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_purge_rseg_truncate_frequency 	Yes 					Yes 									Yes 													Global 			Yes
# innodb_purge_threads 							Yes 					Yes 									Yes 													Global 			No
# innodb_random_read_ahead 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_read_ahead_threshold 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_read_io_threads 						Yes 					Yes 									Yes 													Global 			No
# innodb_read_only 								Yes 					Yes 									Yes 													Global 			No
# innodb_redo_log_encrypt 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_replication_delay 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_rollback_on_timeout 					Yes 					Yes 									Yes 													Global 			No
# innodb_rollback_segments 					Yes 					Yes 									Yes 													Global 			Yes
# 
# innodb_row_lock_current_waits 																											Yes 						Global 			No
# innodb_row_lock_time 																														Yes 						Global 			No
# innodb_row_lock_time_avg 																												Yes 						Global 			No
# innodb_row_lock_time_max 																												Yes 						Global 			No
# innodb_row_lock_waits 																													Yes 						Global 			No
# innodb_rows_deleted 																														Yes 						Global 			No
# innodb_rows_inserted 																														Yes 						Global 			No
# innodb_rows_read 																															Yes 						Global 			No
# innodb_rows_updated 																														Yes 						Global 			No
# innodb_saved_page_number_debug 			Yes 					Yes 									Yes 													Global 			Yes
# innodb_scan_directories 						Yes 					Yes 									Yes 													Global 			No
# innodb_sort_buffer_size 						Yes 					Yes 									Yes 													Global 			No
# innodb_spin_wait_delay 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_stats_auto_recalc 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_stats_include_delete_marked 		Yes 					Yes 									Yes 													Global 			Yes
# innodb_stats_method 							Yes 					Yes 									Yes 													Global 			Yes
# innodb_stats_on_metadata 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_stats_persistent 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_stats_persistent_sample_pages 	Yes 					Yes 									Yes 													Global 			Yes
# innodb_stats_transient_sample_pages 		Yes 					Yes 									Yes 													Global 			Yes
# innodb-status-file 							Yes 					Yes 
# innodb_status_output 							Yes 					Yes 									Yes 													Global 			Yes
#
# innodb_status_output_locks 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_strict_mode 							Yes 					Yes 									Yes 													Both 				Yes
# innodb_sync_array_size 						Yes 					Yes 									Yes 													Global 			No
# innodb_sync_debug 								Yes 					Yes 									Yes 													Global 			No
# innodb_sync_spin_loops 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_table_locks 							Yes 					Yes 									Yes 													Both 				Yes
# innodb_temp_data_file_path 					Yes 					Yes 									Yes 													Global 			No
# innodb_temp_tablespaces_dir 				Yes 					Yes 									Yes 													Global 			No
# innodb_thread_concurrency 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_temp_sleep_delay 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_tmpdir 									Yes 					Yes 									Yes 													Both 				Yes
# innodb_truncated_status_writes 																											Yes 					Global 			No
#
# innodb_trx_purge_view_update_only_debug Yes 					Yes 									Yes 													Global 			Yes
# innodb_trx_rseg_n_slots_debug 				Yes 					Yes 									Yes 													Global 			Yes
# innodb_undo_directory 						Yes 					Yes 									Yes 													Global 			No
# innodb_undo_log_encrypt 						Yes 					Yes 									Yes 													Global 			Yes
# innodb_undo_log_truncate 					Yes 					Yes 									Yes 													Global 			Yes
# innodb_undo_logs 								Yes 					Yes 									Yes 													Global 			Yes
# innodb_undo_tablespaces 						Yes 					Yes 									Yes 													Global 			Varies
# innodb_use_native_aio 						Yes 					Yes 									Yes 													Global 			No
# innodb_version 																									Yes 													Global 			No
# innodb_write_io_threads 						Yes 					Yes 									Yes 													Global 			No
# insert_id 																										Yes 													Session 			Yes
# install 											Yes 
# install-manual 									Yes 
# interactive_timeout 							Yes 					Yes 									Yes 													Both 				Yes
# internal_tmp_disk_storage_engine 			Yes 					Yes 									Yes 													Global 			Yes
# internal_tmp_mem_storage_engine 			Yes 					Yes 									Yes 													Both 				Yes
# join_buffer_size 								Yes 					Yes 									Yes 													Both 				Yes
# keep_files_on_create  						Yes 					Yes 									Yes 													Both 				Yes
#
# Key_blocks_not_flushed 																														Yes					Global 			No
# Key_blocks_unused 																																Yes 					Global 			No
# Key_blocks_used 																																Yes 					Global 			No
# key_buffer_size 								Yes 					Yes 									Yes 													Global 			Yes
# key_cache_age_threshold 						Yes 					Yes 									Yes 													Global 			Yes
# key_cache_block_size 							Yes 					Yes 									Yes 													Global 			Yes
# key_cache_division_limit 					Yes 					Yes 									Yes 													Global 			Yes
# Key_read_requests 																																Yes 					Global 			No
# Key_reads 																																		Yes 					Global 			No
# Key_write_requests 																															Yes 					Global 			No
# Key_writes 																																		Yes 					Global 			No
# keyring_aws_cmk_id 							Yes 					Yes 									Yes 													Global 			Yes
# keyring_aws_conf_file 						Yes 					Yes 									Yes 													Global 			No
# keyring_aws_data_file 						Yes 					Yes 									Yes 													Global 			No
#
# keyring_aws_region 							Yes 					Yes 									Yes 													Global 			Yes
# keyring_encrypted_file_data 				Yes 					Yes 									Yes 													Global 			Yes
# keyring_encrypted_file_password 			Yes 					Yes 									Yes 													Global 			Yes
# keyring_file_data 								Yes 					Yes 									Yes 													Global 			Yes
# keyring-migration-destination 				Yes 					Yes
# keyring-migration-host 						Yes 					Yes
# keyring-migration-password 					Yes 					Yes
# keyring-migration-port 						Yes 					Yes
# keyring-migration-socket 					Yes 					Yes
# keyring-migration-source 					Yes 					Yes
# keyring-migration-user 						Yes 					Yes
# keyring_okv_conf_dir 							Yes 					Yes 									Yes 													Global 			Yes
# keyring_operations 																							Yes 													Global 			Yes
# language 											Yes 					Yes 									Yes 													Global 			No
# large_files_support 																							Yes 													Global 			No
# large_page_size 																								Yes 													Global 			No
# large-pages 										Yes 					Yes 																							Global 			No
# - Variable: large_pages 																						Yes 													Global 			No
# last_insert_id 																									Yes 													Session 			Yes
# Last_query_cost 																																Yes 					Session 			No
# Last_query_partial_plans 																													Yes 					Session 			No
# lc-messages 										Yes 					Yes 																							Both 				Yes
# - Variable: lc_messages 																						Yes 													Both 				Yes
# lc-messages-dir 								Yes 					Yes 																							Global 			No
# - Variable: lc_messages_dir 																				Yes 													Global 			No
# lc_time_names 																									Yes 													Both 				Yes
# license 																											Yes 													Global 			No
# local_infile 																									Yes 													Global 			Yes
#
# local-service 									Yes 															
# lock_wait_timeout 								Yes 					Yes 									Yes 													Both 				Yes
# Locked_connects 																								 								 Yes 					Global 			No
# locked_in_memory 																								Yes 													Global 			No
# log-bin 											Yes 					Yes 									Yes 													Global 			No
# log_bin 																											Yes 							 						Global 			No
# log_bin_basename 																								Yes 													Global 			No
# log-bin-index 									Yes 					Yes 
# log_bin_index 																									Yes 													Global 			No
# log-bin-trust-function-creators 			Yes 					Yes 																							Global 			Yes
# - Variable: log_bin_trust_function_creators 															Yes 													Global 			Yes
# log-bin-use-v1-row-events 					Yes 					Yes 																							Global 			No
# - Variable: log_bin_use_v1_row_events 																	Yes 													Global 			No
# log_bin_use_v1_row_events 					Yes 					Yes 									Yes 													Global 			No
# log_builtin_as_identified_by_password 	Yes 					Yes 									Yes 													Global 			Yes
# log-error 										Yes 					Yes 																							Global 			No
# - Variable: log_error 																						Yes 													Global 			No
# log_error_filter_rules 						Yes 					Yes 									Yes 													Global 			Yes
#
# log_error_services 							Yes 					Yes 									Yes 													Global 			Yes
# log_error_suppression_list 					Yes 					Yes 									Yes 													Global 			Yes
# log_error_verbosity 							Yes 					Yes 									Yes 													Global 			Yes
# log-isam 											Yes 					Yes 
# log-output 										Yes 					Yes 																							Global 			Yes
# - Variable: log_output 																						Yes 													Global 			Yes
# log-queries-not-using-indexes 				Yes 					Yes 																							Global 			Yes
# - Variable: log_queries_not_ 																				Yes 													Global 			Yes
# using_indexes
# log-raw 											Yes 					Yes 
# log-short-format 								Yes 					Yes
# log-slave-updates 								Yes 					Yes 																							Global  			No
# Variable: log_slave_updates 																				Yes 													Global 			No
# log_slave_updates 								Yes 					Yes 									Yes 													Global 			No
# log_slow_admin_statements 																					Yes 													Global 			Yes
# log_slow_slave_statements 																					Yes 													Global 			Yes
# log_statements_unsafe_for_binlog 																			Yes 													Global 			Yes
# log_syslog 										Yes 					Yes 									Yes 													Global 			Yes
# log_syslog_facility 							Yes 					Yes 									Yes 													Global 			Yes
# log_syslog_include_pid 						Yes 					Yes 									Yes 													Global 			Yes
# log_syslog_tag 									Yes 					Yes 									Yes 													Global 			Yes
# log-tc 											Yes 					Yes
#
# log-tc-size 										Yes 					Yes
# log_throttle_queries_not_using_indexes 																	Yes 													Global 			Yes
# log_timestamps 									Yes 					Yes 									Yes 													Global 			Yes
# log-warnings 									Yes 					Yes 																							Global 			Yes
# - Variable: log_warnings 																					Yes 													Global 			Yes
# long_query_time 								Yes 					Yes 									Yes 													Both 				Yes
# low-priority-updates 							Yes 					Yes 																							Both 				Yes
# - Variable: low_priority_updates 																			Yes 													Both 				Yes
# lower_case_file_system 																						Yes 													Global 			No
# lower_case_table_names 						Yes 					Yes 									Yes 													Global 			No
# mandatory_roles 								Yes 					Yes 									Yes 													Global 			Yes
# master-info-file 								Yes 					Yes 
# master-info-repository 						Yes 					Yes 
# - Variable: master_info_repository 
# master_info_repository 						Yes 					Yes 									Yes 													Global 			Yes
# master-retry-count 							Yes 					Yes 
# master-verify-checksum 						Yes 					Yes
# - Variable: master_verify_checksum
#
# master_verify_checksum 																						Yes 													Global 			Yes
# max_allowed_packet 							Yes 					Yes 									Yes 													Both 				Yes
# max_binlog_cache_size 						Yes 					Yes 									Yes 													Global 			Yes
# max-binlog-dump-events 						Yes 					Yes 
# max_binlog_size 								Yes 					Yes 									Yes 													Global 			Yes
# max_binlog_stmt_cache_size 					Yes 					Yes 									Yes 													Global 			Yes
# max_connect_errors 							Yes 					Yes 									Yes 													Global 			Yes
# max_connections 								Yes 					Yes 									Yes 													Global 			Yes
# max_delayed_threads 							Yes 					Yes 									Yes 													Both 				Yes
# max_digest_length 								Yes 					Yes 									Yes 													Global 			No
# max_error_count 								Yes 					Yes 									Yes 													Both 				Yes
# max_execution_time 																														Yes 						Both 				Yes
# Max_execution_time_exceeded 																											Yes 						Both 				No
# Max_execution_time_set 																													Yes 						Both 				No
# Max_execution_time_set_failed 																											Yes 						Both 				No
# max_heap_table_size 							Yes 					Yes 									Yes 													Both 				Yes
# max_insert_delayed_threads 																					Yes 													Both 				Yes
# max_join_size 									Yes 					Yes 									Yes 													Both 				Yes
# max_length_for_sort_data 					Yes 					Yes 									Yes 													Both 				Yes
#
# max_points_in_geometry 						Yes 					Yes 									Yes 													Both 				Yes
# max_prepared_stmt_count 						Yes 					Yes 									Yes 													Global 			Yes
# max_relay_log_size 							Yes 					Yes 									Yes 													Global 			Yes
# max_seeks_for_key 								Yes 					Yes 									Yes 													Both 				Yes
# max_sort_length 								Yes					Yes 									Yes 													Both  			Yes
# max_sp_recursion_depth 						Yes 					Yes 									Yes 													Both 				Yes
# max_tmp_tables 																									Yes 													Both 				Yes
# Max_used_connections 																														Yes 						Global 			No
# Max_used_connections_time 																												Yes 						Global 			No
# max_user_connections 							Yes 					Yes 									Yes 													Both 				Yes
# max_write_lock_count 							Yes 					Yes 									Yes 													Global 			Yes
# mecab_charset 																																Yes 						Global 			No
# mecab_rc_file 									Yes 					Yes 									Yes 													Global 			No
# memlock 											yes 					Yes 
# - variable: locked_in_memory 				
# metadata_locks_cache_size 																					Yes 													Global 			No
# metadata_locks_hash_instances 																				Yes 													Global 			No
# min-examined-row-limit 						Yes 					Yes 									Yes 													Both 				Yes
# multi_range_count 								Yes 					Yes 									Yes 													Both 				Yes
# myisam-block-size 								Yes 					Yes 
# myisam_data_pointer_size 					Yes 					Yes 									Yes 													Global 			Yes
# myisam_max_sort_file_size 					Yes 					Yes 									Yes 													Global 			Yes
# myisam_mmap_size 								Yes 					Yes 									Yes 													Global 			No
# myisam-recover-options 						Yes 					Yes 
# - Variable: myisam_recover_options
# myisam_recover_options 																						Yes 													Global 			No
# myisam_repair_threads 						Yes 					Yes 									Yes 													Both 				Yes
# myisam_sort_buffer_size 						Yes 					Yes 									Yes 													Both 				Yes
# myisam_stats_method 							Yes 					Yes 									Yes 													Both 				Yes
# myisam_use_mmap 								Yes 					Yes 									Yes 													Global 			Yes
# 
# mysql_firewall_mode 							Yes 					Yes 									Yes 													Global 			Yes
# mysql_firewall_trace 							Yes 					Yes 									Yes 													Global 			Yes
# mysql_native_password_proxy_users 		Yes 					Yes 									Yes 													Global 			Yes
# mysqlx 											Yes 					Yes 									Yes 													Global 			No
# Mysqlx_aborted_clients 																														Yes 					Global 			No
# Mysqlx_address 																																	Yes 					Global 			No
# mysqlx-bind-address 							Yes 					Yes 									Yes 													Global 			No
# mysqlx_bind_address 							Yes 					Yes 									Yes 													Global 			No
# Mysqlx_bytes_received 																														Yes 					Both 				No
# Mysqlx_bytes_sent 																																Yes 					Both 				No
# mysqlx-connect-timeout 						Yes 					Yes 									Yes 													Global 			Yes
# mysqlx_connect_timeout 						Yes 					Yes 									Yes 													Global 			Yes
# Mysqlx_connection_accept_errors 																											Yes 					Both 				No
# Mysqlx_connection_errors 																													Yes 					Both 				No
# Mysqlx_connections_accepted 																												Yes 					Global 			No
# Mysqlx_connections_closed 																													Yes 					Global 			No
# Mysqlx_connections_rejected 																												Yes 					Global 			No
# Mysqlx_crud_create_view 																														Yes 					Both 				No
# Mysqlx_crud_delete 																															Yes 					Both 				No
# Mysqlx_crud_drop_view 																														Yes 					Both 				No
# Mysqlx_crud_find 																																Yes 					Both 				No
# Mysqlx_crud_insert 																															Yes 					Both 				No
#
# Mysqlx_crud_modify_view 																														Yes 					Both 				No
# Mysqlx_crud_update 																															Yes 					Both 				No
# mysqlx_document_id_unique_prefix 			Yes 					Yes 									Yes 													Global 			Yes
# Mysqlx_errors_sent 																															Yes 					Both 				No
# Mysqlx_errors_unknown_message_type 																										Yes 					Both 				No
# Mysqlx_expect_close 																															Yes 					Both 				No
# Mysqlx_expect_open 																															Yes 					Both 				No
# mysqlx-idle-worker-thread-timeout 		Yes 					Yes 									Yes 													Global 			Yes
# mysqlx_idle_worker_thread_timeout 		Yes 					Yes 									Yes 													Global 			Yes
# Mysqlx_init_error 																																Yes 					Both 				No
# mysqlx-interactive-timeout 					Yes 					Yes 									Yes 													Global 			Yes
# mysqlx_interactive_timeout 					Yes 					Yes 									Yes 													Global 			Yes
# mysqlx-max-allowed-packet 					Yes 					Yes 									Yes 													Global 			Yes
# mysqlx_max_allowed_packet 					Yes 					Yes 									Yes 													Global 			Yes
#
# mysqlx-max-connections 						Yes 					Yes 									Yes 													Global 			Yes
# mysqlx_max_connections 						Yes 					Yes 									Yes 													Global 			Yes
# mysqlx-min-worker-threads 					Yes 					Yes 									Yes 													Global 			Yes
# mysqlx_min_worker_threads 					Yes 					Yes 									Yes 													Global 			Yes
# Mysqlx_notice_other_sent 																													Yes 					Both 				No
# Mysqlx_notice_warning_sent 																													Yes 					Both 				No
# Mysqlx_port 																																		Yes 					Global 			No
# mysqlx-port 										Yes 					Yes 									Yes 													Global 			No
# mysqlx_port 										Yes 					Yes 									Yes 													Global 			No
# mysqlx-port-open-timeout 					Yes 					Yes 									Yes 													Global 			No
# mysqlx_port_open_timeout 					Yes 					Yes 									Yes 													Global 			No
# mysqlx-read-timeout 							Yes 					Yes 									Yes 													Session 			Yes
# mysqlx_read_timeout 							Yes 					Yes 									Yes 													Session 			Yes
# Mysqlx_rows_sent 																																Yes 					Both 				No
# Mysqlx_sessions 																																Yes 					Global 			No
# Mysqlx_sessions_accepted 																													Yes 					Global 			No
# Mysqlx_sessions_closed 																														Yes 					Global 			No
# Mysqlx_sessions_fatal_error 																												Yes 					Global 			No
# Mysqlx_sessions_killed 																														Yes 					Global 			No
# Mysqlx_sessions_rejected 																													Yes 					Global 			No
# Mysqlx_socket 																																	Yes 					Global 			No
# mysqlx-socket 									Yes 					Yes 									Yes 													Global 			No
# mysqlx_socket 									Yes 					Yes 									Yes 													Global 			No
# Mysqlx_ssl_accept_renegotiates 																											Yes 					Global 			No
#
# Mysqlx_ssl_accepts 																															Yes 					Global 			No
# Mysqlx_ssl_active 																																Yes 					Both 				No
# mysqlx-ssl-ca 									Yes 					Yes  									Yes 													Global 			No
# mysqlx-ssl-capath 								Yes 					Yes 									Yes 													Global 			No
# mysqlx-ssl-cert 								Yes 					Yes 									Yes 													Global 			No
# Mysqlx_ssl_cipher 																																Yes 					Both 				No
# mysqlx-ssl-cipher 								Yes 					Yes 
# Mysqlx_ssl_cipher_list 																														Yes 					Both 				No
# mysqlx-ssl-crl 									Yes 					Yes 									Yes 													Global 			No
# mysqlx-ssl-crlpath 							Yes 					Yes 									Yes 													Global 			No
# Mysqlx_ssl_ctx_verify_depth 																												Yes 					Both 				No
# Mysqlx_ssl_ctx_verify_mode 																													Yes 					Both 				No
# Mysqlx_ssl_finished_accepts 																												Yes 					Global 			No
# mysqlx-ssl-key 									Yes 					Yes 									Yes 													Global 			No
# Mysqlx_ssl_server_not_after 																												Yes 					Global 			No
# Mysqlx_ssl_server_not_before 																												Yes 					Global 			No
# Mysqlx_ssl_verify_depth 																														Yes 					Global 			No
# Mysqlx_ssl_verify_mode 																														Yes 					Global 			No
# Mysqlx_ssl_version 																															Yes 					Both 				No
# Mysqlx_stmt_create_collection 																												Yes 					Both 				No
# Mysqlx_stmt_create_collection_index 																										Yes 					Both 				No
# Mysqlx_stmt_disable_notices 																												Yes 					Both 				No
# Mysqlx_stmt_drop_collection 																												Yes 					Both 				No
# Mysqlx_stmt_drop_collection_index 																										Yes 					Both 				No
# Mysqlx_stmt_enable_notices 																													Yes 					Both 				No
# Mysqlx_stmt_ensure_collection 																												Yes 					Both 				No
# Mysqlx_stmt_execute_mysqlx 																													Yes 					Both 				No
# Mysqlx_stmt_execute_sql 																														Yes 					Both 				No
# Mysqlx_stmt_execute_xplugin 																												Yes 					Both 				No
# Mysqlx_stmt_kill_client 																														Yes 					Both 				No
# Mysqlx_stmt_list_clients 																													Yes 					Both 				No
# Mysqlx_stmt_list_notices 																													Yes 					Both 				No
# 
# Mysqlx_stmt_list_objects 																													Yes 					Both 				No
# Mysqlx_stmt_ping 																																Yes 					Both 				No
# mysqlx-wait-timeout 							Yes 					Yes 									Yes 													Session 			Yes
# mysqlx_wait_timeout 							Yes 					Yes 									Yes 													Session 			Yes
# Mysqlx_worker_threads 																														Yes 					Global 			No
# Mysqlx_worker_threads_active 																												Yes 					Global 			No
# mysqlx-write-timeout 							Yes 					Yes 									Yes 													Session 			Yes
# mysqlx_write_timeout 							Yes 					Yes 									Yes 													Session 			Yes
# named_pipe 																										Yes 													Global 			No
# Ndb_api_bytes_received_count 																												Yes 					Global 			No
# Ndb_api_bytes_received_count_session 																									Yes 					Session 			No
# Ndb_api_bytes_received_count_slave 																										Yes 					Global 			No
# Ndb_api_bytes_sent_count 																													Yes 					Global 			No
# Ndb_api_bytes_sent_count_slave 																											Yes 					Global 			No
# Ndb_api_event_bytes_count_injector 																										Yes 					Global 			No
# Ndb_api_event_data_count_injector 																										Yes 					Global 			No
#
# Ndb_api_event_nondata_count_injector 																									Yes 					Global 			No
# Ndb_api_pk_op_count 																															Yes 					Global 			No
# Ndb_api_pk_op_count_session 																												Yes 					Session 			No
# Ndb_api_pk_op_count_slave 																													Yes 					Global 			No
# Ndb_api_pruned_scan_count  																													Yes 					Global 			No
# Ndb_api_pruned_scan_count_session 																										Yes 					Session 			No
# Ndb_api_range_scan_count_slave 																											Yes 					Global 			No
# Ndb_api_read_row_count 																														Yes 					Global 			No
# Ndb_api_read_row_count_session 																											Yes 					Session 			No
# Ndb_api_scan_batch_count_slave 																											Yes 					Global 			No
# Ndb_api_table_scan_count 																													Yes 					Global 			No
# Ndb_api_table_scan_count_session 																											Yes 					Session 			No
#
# Ndb_api_trans_abort_count 																													Yes 					Global 			No
# Ndb_api_trans_abort_count_session 																										Yes 					Session 			No
# Ndb_api_trans_abort_count_slave 																											Yes 					Global 			No
# Ndb_api_trans_close_count 																													Yes 					Global 			No
# Ndb_api_trans_close_count_session 																										Yes 					Session 			No
# Ndb_api_trans_close_count_slave 																											Yes 					Global 			No
# Ndb_api_trans_commit_count 																													Yes 					Global 			No
# Ndb_api_trans_commit_count_session 																										Yes 					Session 			No
# Ndb_api_trans_commit_count_slave 																											Yes 					Global 			No
# Ndb_api_trans_local_read_row_count_slave 																								Yes 					Global 			No
# Ndb_api_trans_start_count 																													Yes 					Global 			No
# Ndb_api_trans_start_count_session 																										Yes 					Session 			No
# Ndb_api_trans_start_count_slave 																											Yes 					Global 			No
# Ndb_api_uk_op_count 																															Yes 					Global 			No
# Ndb_api_uk_op_count_slave 																													Yes 					Global 			No
# Ndb_api_wait_exec_complete_count 																											Yes 					Global 			No
# Ndb_api_wait_exec_complete_count_session 																								Yes 					Session 			No
# Ndb_api_wait_exec_complete_count_slave 																									Yes 					Global 			No
# Ndb_api_wait_meta_request_count 																											Yes 					Global 			No
# Ndb_api_wait_meta_request_count_session 																								Yes 					Session 			No
# Ndb_api_wait_nanos_count 																													Yes 					Global 			No
# Ndb_api_wait_nanos_count_session 																											Yes 					Session 			No
#
# Ndb_api_wait_nanos_count_slave 																											Yes 					Global 			No
# Ndb_api_wait_scan_result_count 																											Yes 					Global 			No
# Ndb_api_wait_scan_result_count_session 																									Yes 					Session 			No
# Ndb_api_wait_scan_result_count_slave 																									Yes 					Global 			No
# ndb-batch-size 									Yes 					Yes 									Yes 													Global 			No		
# ndb-blob-write-batch-bytes 					Yes 					Yes 									Yes 													Both 				Yes
# ndb-cluster-connection-pool 				Yes 					Yes 									Yes 													Global 			No
# ndb-cluster-connection-pool-nodeids 		Yes 					Yes 									Yes 													Global 			No
# Ndb_cluster_node_id 																															Yes 					Both 				No
# Ndb_config_from_host 																															Yes 					Both 				No
# Ndb_config_from_port 																															Yes 					Both 				No
# Ndb_conflict_fn_epoch_trans 																												Yes 					Both 				No
# Ndb_conflict_fn_max 																															Yes 					Global 			No
# Ndb_conflict_fn_old 																															Yes 					Global 			No
# Ndb_conflict_trans_detect_iter_count 																									Yes 					Global 			No
# Ndb_conflict_trans_row_reject_count 																										Yes 					Global 			No
# ndb-connectstring 								Yes 					Yes 
# ndb-deferred-constraints 					Yes 					Yes 																							Both 				Yes
# - Variable: ndb_deferred_constraints 																	Yes 													Both 				Yes
# ndb_deferred_constraints 					Yes 					Yes 									Yes 													Both 				Yes
# ndb-distribution 								Yes 					Yes 																							Global 			Yes
# - Variable: ndb_distribution 																				Yes 													Global 			Yes
# ndb_distribution 								Yes 					Yes 									Yes 													Global 			Yes
# ndb_eventbuffer_free_percent 				Yes 					Yes 									Yes 													Global 			Yes
# ndb_eventbuffer_max_alloc 					Yes 					Yes 									Yes 													Global 			Yes
# ndb_force_send 									Yes 					Yes 									Yes 													Both 				Yes
# ndb_index_stat_enable 						Yes 					Yes 									Yes 													Both 				Yes
# ndb_index_stat_option 						Yes 					Yes 									Yes 													Both 				Yes
# ndb_join_pushdown 																								Yes 													Both 				Yes
# Ndb_last_commit_epoch_server 																												Yes 					Global 			No
# Ndb_last_commit_epoch_session 																												Yes 					Session 			No
# ndb-log-apply-status 							Yes 					Yes 																							Global 			No
# 
# - Variable: ndb_log_apply_status 																			Yes 													Global 			No
# ndb_log_apply_status 							Yes 					Yes 									Yes 													Global 			No
# ndb_log_binlog_index 							Yes 															Yes 													Global 			Yes
# ndb-log-empty-epochs 							Yes 					Yes 									Yes 													Global 			Yes
# ndb-log-empty-update 							Yes 					Yes 									Yes 													Global 			Yes
# ndb-log-transaction-id 						Yes 					Yes 																							Global 			No
# - Variable: ndb_log_transaction_id 																		Yes 													Global 			No
# ndb_log_updated_only 							Yes 					Yes 									Yes 													Global 			Yes
# ndb-mgmd-host 									Yes 					Yes 
# Ndb_number_of_data_nodes 																													Yes  					Global 			No
# ndb_optimization_delay 																						Yes 													Global 			Yes
# ndb_optimized_node_selection 				Yes 					Yes 									Yes 													Global 			No
# Ndb_pushed_queries_defined 																													Yes 					Global 			No
# Ndb_pushed_queries_executed 																												Yes 					Global 			No
# ndb_recv_thread_activation_threshold 																	Yes 													Global 			Yes
# ndb_recv_thread_cpu_mask 																					Yes  													Global 			Yes
# ndb_report_thresh_binlog_epoch_slip 		Yes 					Yes 									Yes 													Global 			Yes
# ndb_report_thresh_binlog_mem_usage 		Yes 					Yes 									Yes 													Global 			Yes
# Ndb_scan_count 																																	Yes 					Global 			No
# 
# ndb_show_foreign_key_mock_tables 			Yes 					Yes 									Yes 													Global 			Yes
# Ndb_slave_max_replicated_epoch 																			Yes 													Global 			No
# ndb_table_no_logging 																							Yes 													Session 			Yes
# ndb-transid-mysql-connection-map 			Yes 
# ndb_use_transactions 							Yes 					Yes 									Yes 													Both 				Yes
# ndb_version 																										Yes 													Global 			No
# ndb_version_string 																							Yes 													Global 			No
# ndb-wait-setup 									Yes 					Yes 									Yes 													Global 			No
# ndbinfo_database 																								Yes 													Global 			No
# ndbinfo_max_rows 								Yes 															Yes 													Both 				Yes
# ndbinfo_show_hidden 							Yes 															Yes 													Both 				Yes
# ndbinfo_version 																								Yes 													Global 			No
# net_buffer_length 								Yes 					Yes 									Yes 													Both 				Yes
# net_read_timeout 								Yes 					Yes 									Yes 													Both 				Yes
# net_retry_count 								Yes 					Yes 									Yes 													Both 				Yes
# net_write_timeout 								Yes 					Yes 									Yes 													Both 				Yes
# new 												Yes 					Yes 									Yes 													Both 				Yes
# ngram_token_size 								Yes 					Yes 									Yes 													Global 			No
#
# no-dd-upgrade 									Yes 					Yes 
# no-defaults 										Yes 
# no-monitor 										Yes 					Yes
# Not_flushed_delayed_rows 																														Yes 				Global 			No
# offline_mode 									Yes 					Yes 									Yes 													Global 			Yes
# old 												Yes 					Yes 									Yes 													Global 			No
# old-alter-table 								Yes 					Yes 																							Both 				Yes
# - Variable: old_alter_table 																				Yes 													Both 				Yes
# old_passwords 																									Yes 													Both 				Yes
# old-style-user-limits 						Yes 					Yes 
# Ongoing_anonymous_gtid_violating_transaction_count 																						Yes 				Global 			No
# Ongoing_anonymous_transaction_count 																											Yes 				Global 			No
# Ongoing_automatic_gtid_violating_transaction_count 																						Yes 				Global 			No
# Open_files 																																			Yes 				Global 			No
# open-files-limit 								Yes 					Yes 																							Global 			No
# - Variable: open_files_limit 																				Yes 													Global 			No
# Open_streams 																																		Yes 				Global 			No
# Open_table_definitions 																															Yes 				Global 			No
# Open_tables 																																			Yes 				Both 				No
# Opened_files 																																		Yes 				Global 			No
# Opened_table_definitions 																														Yes 				Both 				No
# Opened_tables 																																		Yes 				Both 				No
# optimizer_prune_level 						Yes 					Yes 									Yes 													Both 				Yes
# optimizer_search_depth 						Yes 					Yes 									Yes 													Both 				Yes
# 
# optimizer_switch 								Yes 					Yes 									Yes 													Both 				Yes
# optimizer_trace 																								Yes 													Both 				Yes
# optimizer_trace_features 																					Yes  													Both 				Yes
# optimizer_trace_limit 																						Yes 													Both 				Yes
# optimizer_trace_max_mem_size 																				Yes 													Both 				Yes
# optimizer_trace_offset 																						Yes 													Both 				Yes
# original_commit_timestamp 																					Yes 													Session 			Yes
# parser_max_mem_size 							Yes 					Yes 									Yes 													Both 				Yes
# password_history 								Yes 					Yes 									Yes 													Global 			Yes
# password_require_current 					Yes 					Yes 									Yes 													Global 			Yes
# password_reuse_interval 						Yes 					Yes  									Yes 													Global 			Yes
# performance_schema 							Yes 					Yes  									Yes 													Global 			No
# Performance_schema_accounts_lost 																												Yes 				Global 			No
# performance_schema_accounts_size 			Yes 					Yes 									Yes 													Global 			No
# Performance_schema_cond_classes_lost 																										Yes 				Global 			No
# Performance_schema_cond_instances_lost 																										Yes 				Global 			No
#
# performance-schema-consumer 				Yes 					Yes
# -events-stages-current 
#
# performance-schema-consumer 				Yes 					Yes
# -events-stages-history 
#
# performance-schema-consumer 				Yes 					Yes
# -events-stages-history-long 				
#
# performance-schema-consumer 				Yes 					Yes
# -events-statements-current
#
# performance-schema-consumer 				Yes 					Yes
# -events-statements-history
#
# performance-schema-consumer 				Yes 					Yes
# -events-statements-history-long 		
#
# performance-schema-consumer 				Yes 					Yes
# -events-transactions-current 
#
# performance-schema-consumer 				Yes 					Yes
# -events-transactions-history 
#
# performance-schema-consumer 				Yes 					Yes
# -events-transactions-history-long 	
#
# performance-schema-consumer 				Yes 					Yes
# -events-waits-current 
#
# performance-schema-consumer 				Yes 					Yes
# -events-waits-history
# 
# performance-schema-consumer 				Yes 					Yes
# -events-waits-history-long 
#
# performance-schema-consumer 				Yes 					Yes
# -global-instrumentation 
#
# performance-schema-consumer 				Yes 					Yes
# -statements-digest 
#
# performance-schema-consumer 				Yes 					Yes
# -thread-instrumentation 
#
# Performance_schema_digest_lost 																												Yes 				Global 			No
# performance_schema_digests_size 			Yes 					Yes 									Yes 													Global 			No	
# performance_schema_error_size 				Yes 					Yes 									Yes 													Global 			No
# performance_schema_ 							Yes 					Yes 									Yes 													Global 			No
# events_stages_history_long_size
#
# performance_schema_events_ 					Yes 					Yes 									Yes 													Global 			No
# stages_history_size 
#
# performance_schema_events_ 					Yes 					Yes 									Yes 													Global 			No
# statements_history_long_size 
#
# performance_schema_events_ 					Yes 					Yes 									Yes 													Global 			No
# statements_history_size 
# 
# performance_schema_events_ 					Yes 					Yes 									Yes 													Global 			No
# transactions_history_long_size
#
# performance_schema_events_ 					Yes 					Yes 									Yes 													Global 			No
# transactions_history_size 
#
# performance_schema_events_ 					Yes 					Yes 									Yes 													Global 			No
# waits_history_long_size 
#
# performance_schema_events_ 					Yes 					Yes 									Yes 													Global 			No
# waits_history_size 
#
# Performance_schema_file_ 																														Yes 				Global 			No
# classes_lost
#
# Performance_schema_file_ 																														Yes 				Global 			No
# handles_lost
#
# Performance_schema_file_ 																														Yes 				Global 			No
# instances_lost
#
# Performance_schema_hosts_lost 																													Yes 				Global 			No
#
# performance_hosts_size  						Yes 					Yes 									Yes 													Global 			No
# Performance_schema_index_stat_lost 																											Yes 				Global 			No
# performance_schema-instrument 				Yes 					Yes 																		
# Performance_schema_locker_lost 																												Yes 				Global 			No
# performance_schema_max_cond_classes 		Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_cond_instances 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_digest_length 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_ 							Yes 					Yes 									Yes 													Global 			Yes
# max_digest_sample_age
# performance_schema_max_file_classes 		Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_file_handles 		Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_file_instances 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_index_stat 		Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_memory_classes 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_metadata_locks 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_mutex_classes 	Yes 					Yes 									Yes 													Global 			No
#
# performance_schema_max_mutex_instances 	Yes 					Yes 									Yes 													Global 			No
#
# performance_schema_max_ 						Yes 					Yes 									Yes 													Global 			No
# prepared_statements_instances
#
# performance_schema_ 							Yes 					Yes 									Yes 													Global 			No
# max_program_instances
#
# performance_schema_ 							Yes 					Yes 									Yes 													Global 			No
# max_rwlock_classes 
#
# performance_schema_max_socket_classes 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_socket_instances Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_sql_text_length 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_stage_classes 	Yes 					Yes 									Yes 													Global 			No
# performance_schema 							Yes 					Yes 									Yes 													Global 			No
# _max_statement_classes 
# performance_schema 							Yes 					Yes 									Yes 													Global 			No
# _max_statement_stack 
#
# performance_schema_max_table_handles 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_table_instances 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_table_lock_stat 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_thread_classes 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_max_thread_instances Yes 					Yes 									Yes 													Global 			No
# Performance_schema_memory_classes_lost 																								Yes 						Global 			No
# Performance_schema_metadata_lock_lost 																								Yes 						Global 			No
# Performance_schema_mutex_classes_lost 																								Yes 						Global 			No
# Performance_schema_mutex_instances_lost 																							Yes 						Global 			No
# Performance_schema_nested_statement_lost 																							Yes 						Global 			No
# Performance_schema_prepared_statements_lost 																						Yes 						Global 			No
# Performance_schema_program_lost 																										Yes 						Global 			No
# Performance_schema_rwlock_classes_lost 																								Yes 						Global 			No
# Performance_schema_rwlock_instances_lost 																							Yes 						Global 			No
# Performance_schema_session_connect_attrs_longest_seen 																			Yes 						Global 			No
# Performance_schema_session_connect_attrs_lost 																					Yes 						Global 			No
#
# performance_schema_ 							Yes 					Yes 									Yes 													Global 			No
# session_connect_attrs_size 
#
# performance_schema_setup_actors_size 	Yes 					Yes 									Yes 													Global 			No
# performance_schema_setup_objects_size 	Yes 					Yes 									Yes 													Global 			No
# Performance_schema_socket_classes_lost 																								Yes 						Global 			No
#
# Performance_schema_ 																														Yes 						Global 			No
# socket_instnaces_lost 
#
# Performance_schema_stage_classes_lost 																								Yes 						Global 			No
# Performance_schema_statement_classes_lost 																							Yes 						Global 			No
# Performance_schema_table_handles_lost 																								Yes 						Global 			No
# Performance_schema_table_instances_lost 																							Yes 						Global 			No
# Performance_schema_table_lock_stat_lost 																							Yes 						Global 			No
# Performance_schema_thread_classes_lost 																								Yes 						Global 			No
# Performance_schema_thread_instances_lost 																							Yes 						Global 			No
# Performance_schema_users_lost 																											Yes 						Global 			No
# performance_schema_users_size 				Yes 					Yes 									Yes 													Global 			No
# persisted_globals_load 						Yes 					Yes 									Yes 													Global 			No
# pid-file 											Yes 					Yes 																							Global 			No
# - Variable: pid_file 																							Yes 													Global 			No
# plugin 											Yes 					Yes 	
# plugin_dir 										Yes 					Yes  									Yes 													Global 			No
# plugin-load 										Yes 					Yes 
# plugin-load-add 								Yes 					Yes
# port 												Yes 					Yes  									Yes 													Global 			No
# port-open-timeout 								Yes 					Yes 									
# 
# preload_buffer_size 							Yes 					Yes 									Yes 													Both 				Yes
# Prepared_stmt_count 																														Yes 						Global 			No
# print-defaults 									Yes 
# profiling 																										Yes 													Both 				Yes
# profiling_history_size 						Yes 					Yes 									Yes 													Both 				Yes
# protocol_version 																								Yes 													Global 			No
# proxy_user 																										Yes 													Session 			No
# pseudo_slave_mode 																								Yes 													Session 			Yes
# psuedo_thread_id 																								Yes 													Session 			Yes
# Qcache_free_blocks 																														Yes 						Global 			No
# Qcache_free_memory 																														Yes 						Global 			No
# Qcache_hits 																																	Yes 						Global 			No
# Qcache_inserts     																														Yes 						Global 			No
# Qcache_lowmem_prunes 																														Yes 						Global 			No
# Qcache_not_cached 																															Yes 						Global 			No
# Qcache_queries_in_cache 																													Yes 						Global 			No
# Qcache_total_blocks 																														Yes 						Global 			No
# Queries 																																		Yes 						Both 				No
# 
# query_alloc_block_size 						Yes 					Yes 									Yes 													Both 				Yes
# query_cache_limit 								Yes 					Yes 									Yes 													Global 			Yes
# query_cache_min_res_unit 					Yes 					Yes 									Yes 													Global 			Yes
# query_cache_size 								Yes 					Yes 									Yes 													Global 			Yes
# query_cache_type 								Yes 					Yes 									Yes 													Both 				Yes
# query_cache_wlock_invalidate 				Yes 					Yes 									Yes 													Both 				Yes
# query_prealloc_size 							Yes 					Yes 									Yes 													Both 				Yes
# Questions 																																	Yes 						Both 				No
# rand_seed1 																										Yes 													Session 			Yes
# rand_seed2 																										Yes 													Session 			Yes
# range_alloc_block_size 						Yes 					Yes 									Yes 													Both 				Yes
# range_optimizer_max_mem_size 				Yes 					Yes 									Yes 													Both 				Yes
# rbr_exec_mode 																									Yes 													Both 				Yes
#
# read_buffer_size 								Yes 					Yes 									Yes 													Both 				Yes
# read_only 										Yes 					Yes 									Yes 													Global 			Yes
# read_rnd_buffer_size 							Yes 					Yes 									Yes 													Both 				Yes
# regexp_stack_limit 							Yes 					Yes 									Yes 													Global 			Yes
# regexp_time_limit 								Yes 					Yes 									Yes 													Global 			Yes
# relay-log 										Yes 					Yes 																							Global 			No
# - Variable: relay_log 																						Yes 													Global 			No
# relay_log_basename 																							Yes 													Global 			No
# relay-log-index 								Yes 					Yes 									 														Global 			No
# - Variable: relay_log_index 																				Yes 													Global 			No
# relay_log_index 								Yes 					Yes 									Yes 													Global 			No
# relay-log-info-file 							Yes 					Yes 																							
# - Variable: relay_log_info_file 
# relay_log_info_file 							Yes 					Yes 									Yes 													Global 			No
# relay-log-info-repository 					Yes 					Yes 	
# - Variable: relay_log_info_repository 	
# relay_log_info_repository 																					Yes 													Global 			Yes
# relay_log_purge 								Yes 					Yes 									Yes 													Global 			Yes
# relay-log-recovery 							Yes 					Yes 
# - Variable: relay_log_recovery 
# relay_log_recovery 							Yes 					Yes 									Yes 													Global 			No
# relay_log_space_limit 						Yes 					Yes 									Yes 													Global 			No
# remove 											Yes
# replicate-do-db 								Yes 					Yes
# replicate-do-table 							Yes 					Yes
# replicate-ignore-db 							Yes 					Yes
# replicate-ignore-table 						Yes 					Yes
# replicate-rewrite-db 							Yes 					Yes
# replicate-same-server-id 					Yes 					Yes
# replicate-wild-do-table 						Yes 					Yes
# replicate-wild-ignore-table 				Yes 					Yes
# report-host 										Yes 					Yes 																							Global 			No
# - Variable: report_host 																						Yes 													Global 			No
# report-password 								Yes 					Yes 																							Global 			No
# - Variable: report_password 																				Yes 													Global 			No
# report-port 										Yes 					Yes 																							Global 			No
# - Variable: report_port 																						Yes 													Global 			No
# report-user 										Yes 					Yes 																							Global 			No
# - Variable: report_user 																						Yes 													Global 			No
# require_secure_transport 					Yes 					Yes 									Yes 													Global 			Yes
# resultset_metadata 																							Yes 													Session 			Yes
# 
# rewriter_enabled 																								Yes 													Global 			Yes
# Rewriter_number_loaded_rules 																												Yes 					Global 			No
# Rewriter_number_reloads 																														Yes 					Global 			No
# Rewriter_number_rewritten_queries 																										Yes 					Global 			No
# Rewriter_reload_error 																														Yes 					Global 			No
# rewriter_verbose 																								Yes 													Global 			Yes
# rpl_read_size 									Yes 					Yes 									Yes 													Global 			Yes
# Rpl_semi_sync_master_clients 																												Yes 					Global 			No
# rpl_semi_sync_master_enabled 																				Yes 													Global 			Yes
# Rpl_semi_sync_master_net_avg_wait_time 																									Yes 					Global 			No
# Rpl_semi_sync_master_net_wait_time 																										Yes 					Global 			No
# Rpl_semi_sync_master_net_waits 																											Yes 					Global 			No
# Rpl_semi_sync_master_no_times 																												Yes 					Global 			No
# Rpl_semi_sync_master_no_tx 																													Yes 					Global 			No
# Rpl_semi_sync_master_status 																												Yes 					Global 			No
# Rpl_semi_sync_master_timefunc_failures 																									Yes 					Global 			No
# rpl_semi_sync_master_timeout 																				Yes 													Global 			Yes
# rpl_semi_sync_master_trace_level 																			Yes 													Global 			Yes
# Rpl_semi_sync_master_tx_avg_wait_time 																									Yes 					Global 			No
# Rpl_semi_sync_master_tx_wait_time 																										Yes 					Global 			No
# Rpl_semi_sync_master_tx_waits 																												Yes 					Global 			No
# rpl_semi_sync_master_wait_for_slave_count 																Yes 													Global 			Yes
#
# rpl_semi_sync_master_wait_no_slave 																		Yes 													Global 			Yes
# rpl_semi_sync_master_wait_point 																			Yes 													Global 			Yes
# Rpl_semi_sync_master_wait_pos_backtraverse 																							Yes 					Global 			No
# Rpl_semi_sync_master_wait_sessions 																										Yes 					Global 			No
# Rpl_semi_sync_master_yes_tx 																												Yes 					Global 			No
# rpl_semi_sync_slave_enabled 																				Yes 													Global 			Yes
# Rpl_semi_sync_slave_status 																													Yes 					Global 			No
# rpl_semi_sync_slave_trace_level 																			Yes 													Global 			Yes
# rpl_stop_slave_timeout 						Yes 					Yes 									Yes 													Global 			Yes
# Rsa_public_key 																																	Yes 					Global 			No
#
# safe-user-create 								Yes 					Yes 
# schema_definition_cache 						Yes 					Yes 									Yes 													Global 			Yes
# Secondary_engine_execution_count 																											Yes 					Both 				No
# secure-auth 										Yes 					Yes 																							Global 			Yes
# - Variable: secure_auth 																						Yes 													Global 			Yes
# secure-file-priv 								Yes 					Yes 																							Global 			No
# - Variable: secure_file_priv 																				Yes 													Global 			No
#
# Select_full_join 																																Yes 					Both 				No
# Select_full_range_join 																														Yes 					Both 				No
# Select_range 																																	Yes 					Both 				No
# Select_range_check 																															Yes 					Both 				No
# Select_scan 																																		Yes 					Both 				No
# server-id 										Yes 					Yes 																							Global 			Yes
# - Variable: server_id 																						Yes 													Global 			Yes
# server_uuid 																										Yes 													Global 			No
# session_track_gtids 							Yes 					Yes 									Yes 													Both 				Yes
# session_track_schema 							Yes 					Yes 									Yes 													Both 				Yes
# session_track_stat_change 					Yes 					Yes 									Yes 													Both 				Yes
# session_track_system_variables 			Yes 					Yes 									Yes 													Both 				Yes
# 
# session_track_transaction_info 			Yes 					Yes 									Yes 													Both 				Yes
# sha256_password_auto_generate_rsa_keys 	Yes 					Yes 									Yes 													Global			No
# sha256_password_private_key_path 			Yes 					Yes 									Yes 													Global 			No
# sha256_password_proxy_users 				Yes 					Yes 									Yes 													Global 			Yes
# sha256_password_public_key_path 			Yes 					Yes 									Yes 													Global 			No
# shared_memory 									Yes 					Yes 									Yes 													Global 			No
# shared_memory_base_name 						Yes 					Yes 									Yes 													Global 			No
# show_compability_56 							Yes 					Yes 									Yes 													Global 			Yes
# show_create_table_verbosity 				Yes 					Yes 									Yes 													Both 				Yes
# show_old_temporals 							Yes 					Yes 									Yes 													Both 				Yes
# show-slave-auth-info 							Yes 					Yes 
# simplified_binlog_gtid_recovery 			Yes 					Yes 									Yes 													Global 			No
# skip-character-set-client-handshake 		Yes 					Yes 
# skip-concurrent-insert 						Yes 					Yes
# - Variable: concurrent_insert 
# skip-event-scheduler 							Yes 					Yes 									
# skip_external_locking 						Yes 					Yes 									Yes 													Global 			No
# skip-grant-tables 								Yes 					Yes 
# skip-host-cache 								Yes 					Yes
# skip-name-resolve 								Yes 					Yes 																							Global 			No
# - Variable: skip_name_resolve 																				Yes 													Global 			No
# skip-ndbcluster 								Yes 					Yes 																							
# skip-networking 								Yes 					Yes 																							Global 			No
# - Variable: skip_networking 																				Yes 													Global 			No
# skip-new 											Yes 					Yes 
# skip-show-database 							Yes 					Yes 																							Global 			No
# - Variable: skip_show_database 																			Yes 													Global 			No
# skip-slave-start 								Yes 					Yes 
# skip-ssl 											Yes 					Yes
# skip-stack-trace 								Yes 					Yes
# slave_allow_batching 							Yes 					Yes 									Yes 													Global 			Yes
# slave-checkpoint-group 						Yes 					Yes 
# - Variable: slave_checkpoint_group 
# slave_checkpoint_period 						Yes 					Yes 									Yes 													Global 			Yes
# slave_compressed_protocol 					Yes 					Yes 									Yes 													Global 			Yes
# slave_exec_mode 								Yes 					Yes 									Yes 													Global 			Yes
#
# Slave_heartbeat_period 																												Yes 							Global 			No
# Slave_last_heartbeat 																													Yes 							Global 			No
# slave-load-tmpdir 								Yes 					Yes 																							Global 			No
# - Variable: slave_load_tmpdir 																				Yes 													Global 			No
# slave-max-allowed-packet 					Yes 					Yes 
# - Variable: slave_max_allowed_packet 	
# slave_max_allowed_packet 																					Yes 													Global 			Yes
# slave-net-timeout 								Yes 					Yes 																							Global 			Yes
# - Variable: slave_net_timeout 																				Yes 													Global 			Yes
# Slave_open_temp_tables 																												Yes 							Global 			No
# slave-parallel-type 							Yes 					Yes 
# - variable: slave_parallel_type 
# slave_parallel_type 																							Yes 													Global 			Yes
# slave-parallel-workers 						Yes 					Yes 
# - Variable: slave_parallel_workers 		
# slave_parallel_workers 						Yes 															Yes 													Global 			Yes
# slave-pending-jobs-size-max 				Yes 
# - Variable: slave_pending_jobs_size_max 
# slave_pending_jobs_size_max 				Yes 															Yes 													Global 			Yes
# 
# slave_preserve_commit_order 				Yes 															Yes 													Global 			Yes
# Slave_received_heartbeats 																											Yes 							Global 			No
# Slave_retried_transactions 																											Yes 							Global 			No
# Slave_rows_last_search_algorithm_used 																							Yes 							Global 			No
# slave-rows-search-algorithms 				Yes 					Yes 
# - Variable: slave_rows_search_algorithms
# slave_rows_search_algorithms 																				Yes 													Global 			Yes
# Slave_running 																															Yes 							Global 			No
# slave-skip-errors 								Yes 					Yes 																							Global 			No
# - Variable: slave_skip_errors 																				Yes 													Global 			No
# slave-sql-verify-checksum 					Yes 					Yes 
# slave_sql_verify_checksum 																					Yes 													Global 			Yes
# slave_transaction_retries 					Yes 					Yes 									Yes 													Global 			Yes
# slave_type_conversions 						Yes 					Yes 									Yes 													Global 			No
# Slow_launch_threads 																													Yes 							Both 				No
# slow_launch_time 								Yes 					Yes 									Yes 													Global 			Yes
# Slow_queries 																															Yes 							Both 				No
# slow-query-log 									Yes 					Yes 																							Global 			Yes
# - Variable: slow_query_log 																					Yes 													Global 			Yes
# slow_query_log_file 							Yes 					Yes 									Yes 													Global 			Yes
#
# slow-start-timeout 							Yes 					Yes 
# socket 											Yes 					Yes 									Yes 													Global 			No
# sort_buffer_size 								Yes 					Yes 									Yes 													Both 				Yes
# Sort_merge_passes 																														Yes 							Both 				No
# Sort_range 																																Yes 							Both 				No
# Sort_rows 																																Yes 							Both 				No
# Sort_scan 																																Yes 							Both 				No
# sporadic-binlog-dump-fail 					Yes 					Yes 
# sql_auto_is_null 																								Yes 													Both 				Yes
# sql_big_selects 																								Yes 													Both 				Yes
# sql_buffer_result 																								Yes 													Both 				Yes
# sql_log_bin 																										Yes 													Session 			Yes
# sql_log_off 																										Yes 													Both 				Yes
# sql-mode 											Yes 					Yes 																							Both 				Yes
# - Variable: sql_mode 																							Yes 													Both 				Yes
# sql_notes 																										Yes 													Both 				Yes
# sql_quote_show_create 																						Yes 													Both 				Yes
# sql_require_primary_key 						Yes 					Yes 									Yes 													Both 				Yes
# sql_safe_updates 																								Yes 													Both 				Yes
# sql_select_limit 																								Yes 													Both 				Yes
# sql_slave_skip_counter 																						Yes 													Global 			Yes
# sql_warnings 																									Yes 													Both 				Yes
# ssl 												Yes 					Yes 												
# 
# Ssl_accept_renegotiates 																												Yes 							Global 			No
# Ssl_accepts 																																Yes 							Global 			No
# ssl-ca 											Yes 					Yes 																							Global 			No
# - Variable: ssl_ca 																							Yes 													Global 			No
# Ssl_callback_cache_hits 																												Yes 							Global 			No
# ssl-capath 										Yes 					Yes 																							Global 			No
# - Variable: ssl_capath 																						Yes 													Global 			No
# ssl-cert 											Yes 					Yes 																							Global 			No
# - Variable: ssl_cert 																							Yes 													Global 			No
# Ssl_cipher 																																Yes 							Both 				No
# ssl-cipher 										Yes 					Yes 																							Global 			No
# - Variable: ssl_cipher 																						Yes 													Global 			No
# Ssl_cipher_list 																														Yes 							Both 				No
# Ssl_client_connects 																													Yes 							Global 			No
# Ssl_connect_renegotiates 																											Yes 							Global 			No
# ssl-crl 											Yes 					Yes 																							Global 			No
# - Variable: ssl_crl 																							Yes 													Global 			No
# ssl-crlpath 										Yes 					Yes 																							Global 			No
# - Variable: ssl_crlpath 																						Yes 													Global 			No
# Ssl_ctx_verify_depth 																													Yes 							Global 			No
# Ssl_ctx_verify_mode 																													Yes 							Global 			No
# Ssl_default_timeout 																													Yes 							Both 				No
# Ssl_finished_accepts 																													Yes 							Global 			No
#
# Ssl_finished_connects 																												Yes 							Global 			No
# ssl_fips_mode 									Yes 					Yes 									Yes 													Global 			Yes
# ssl-key 											Yes 					Yes 																							Global 			No
# - Variable: ssl_key 																							Yes 													Global 			No
# Ssl_server_not_after 																													Yes 							Both 				No
# Ssl_server_not_before 																												Yes 							Both 				No
# Ssl_session_cache_hits 																												Yes 							Global 			No
# Ssl_session_cache_misses 																											Yes 							Global 			No
# Ssl_session_cache_mode 																												Yes 							Global 			No
# Ssl_session_cache_overflows 																										Yes 							Global 			No
# Ssl_session_cache_size 																												Yes 							Global 			No
# Ssl_session_cache_timeouts 																											Yes 							Global 			No
# Ssl_sessions_reused 																													Yes 							Both 				No
# Ssl_used_session_cache_entries 																									Yes 							Global 			No
# Ssl_verify_depth 																														Yes 							Both 				No
# Ssl_verify_mode 																														Yes 							Both 				No
# Ssl_version 																																Yes 							Both 				No
# standalone 										Yes 					Yes 
# stored_program_cache 							Yes 					Yes 									Yes 													Global 			Yes
# stored_program_definition_cache 			Yes 					Yes 									Yes 													Global 			Yes
# super-large-pages 								Yes 					Yes 
# super_read_only 								Yes 					Yes 									Yes 													Global 			Yes
# symbolic-links 									Yes 					Yes 
# sync_binlog 										Yes 					Yes 									Yes 													Global 			Yes
# sync_master_info 								Yes 					Yes 									Yes 													Global 			Yes
# 
# sync_relay_log 									Yes 					Yes 									Yes 													Global 			Yes
# sync_relay_log_info 							Yes 					Yes 									Yes 													Global 			Yes
# sysdate-is-now 									Yes 					Yes 
# syseventlog.facility 							Yes 					Yes 									Yes 													Global 			Yes
# syseventlog.include_pid 						Yes 					Yes 									Yes 													Global 			Yes
# syseventlog.tag 								Yes 					Yes 									Yes 													Global 			Yes
# system_time_zone 																								Yes 													Global 			No
# table_definition_cache 																						Yes 													Global 			Yes
# Table_locks_immediate 																												Yes 							Global 			No
# Table_locks_waited 																													Yes 							Global 			No
# table_open_cache 																								Yes 													Global 			Yes
# Table_open_cache_hits 																												Yes 							Both 				No
# table_open_cache_instances 																					Yes 													Global 			No
# Table_open_cache_misses 																												Yes 							Both 				No
# Table_open_cache_overflows 																											Yes 							Both 				No
# tablespace_definition_cache 				Yes 					Yes 									Yes 													Global 			Yes
# tc-heuristic-recover 							Yes 					Yes 
# Tc_log_max_pages_used 																												Yes 							Global 			No
# Tc_log_page_size 																														Yes 							Global 			No
# Tc_log_page_waits 																														Yes 							Global 			No
# temp-pool 										Yes 					Yes 
# 
# temptable_max_ram 								Yes 					Yes 									Yes 													Global 			Yes
# thread_cache_size 								Yes 					Yes 									Yes 													Global 			Yes
# thread_handling 								Yes 					Yes 									Yes 													Global 			No
# thread_pool_algorithm 						Yes 					Yes 									Yes 													Global 			No
# thread_pool_high_priority_connection 	Yes 					Yes 									Yes 													Both 				Yes
# thread_pool_max_unused_threads 			Yes 					Yes 									Yes 													Global 			Yes
# thread_pool_prio_kickup_timer 				Yes 					Yes 									Yes 													Both 				Yes
# thread_pool_size 								Yes 					Yes 									Yes 													Global 			No
# thread_pool_stall_limit 						Yes 					Yes 									Yes 													Global 			Yes
#
# thread_stack 									Yes 					Yes 									Yes 													Global 			No
# Threads_cached 																															Yes 							Global 			No
# Threads_connected 																														Yes 							Global 			No
# Threads_created 																														Yes 							Global 			No
# Threads_running 																														Yes 							Global 			No
# time_format 																										Yes 													Global 			No
# time_zone 																										Yes 													Both 				Yes
# timestamp 																										Yes 													Session 			Yes
# tls_version 										Yes 					Yes 									Yes 													Global 			No
# tmp_table_size 									Yes 					Yes 									Yes 													Both 				Yes
# tmpdir 											Yes 					Yes 									Yes 													Global 			No
# transaction_alloc_block_size 				Yes 					Yes 									Yes 													Both 				Yes
# transaction_allow_batching 																					Yes 													Session 			Yes
# transaction-isolation 						Yes 					Yes  																							Both 				Yes
# - Variable: transaction_isolation 																		Yes 													Both 				Yes
# transaction_prealloc_size 					Yes 					Yes 									Yes 													Both 				Yes
# transaction-read-only 						Yes 					Yes 																							Both 				Yes
# - Variable: transaction_read_only 																		Yes 													Both 				Yes
# 
# transaction_write_set_extraction 			Yes 															Yes 													Both 				Yes
# tx_isolation 																									Yes 													Both 				Yes
# tx_read_only 																									Yes 													Both 				Yes
# unique_checks 																									Yes 													Both 				Yes
# updatable_views_with_limit 					Yes 					Yes 									Yes 													Both 				Yes
# Uptime 																																	Yes 							Global 			No
# Uptime_since_flush_status 																											Yes 							Global 			No
# use_secondary_engine 																							Yes 													Session 			Yes
# user 												Yes 					Yes 
# validate-password 								Yes 					Yes
# validate_password_check_user_name 		Yes 					Yes 									Yes 													Global 			Yes
# validate_password_dictionary_file 																		Yes 													Global 			Yes
# validate_password_dictionary_file_last_parsed 																				Yes 							Global 			No
# validate_password_dictionary_file_words_count 																				Yes 							Global 			No
# validate_password_length 																					Yes 													Global 			Yes
# validate_password_mixed_case_count 																		Yes 													Global 			Yes
# validate_password_number_count 																			Yes 													Global 			Yes
# validate_password_policy 																					Yes 													Global 			Yes
# validate_password_special_char_count 																	Yes 													Global 			Yes
# validate_password.check_user_name 		Yes 					Yes 									Yes 													Global 			Yes
# validate_password.dictionary_file 																		Yes 													Global 			Yes
# validate_password.dictionary_file_last_parsed 																				Yes 							Global 			No
# validate_password.dictionary_file_words_count 																				Yes 							Global 			No
# validate_password.length 																					Yes 													Global 			Yes
# validate_password.mixed_case_count 																		Yes 													Global 			Yes
# validate_password.number_count 																			Yes 													Global 			Yes
# validate_password.policy 																					Yes 													Global 			Yes
# validate_password.special_char_count 																	Yes 													Global 			Yes
# validate_user_plugins 																						Yes 													Global 			No
# verbose 											Yes 					Yes 
# version 																											Yes 													Global 			No
# version_comment 																								Yes 													Global 			No
# version_compile_machine 																						Yes 													Global 			No
# version_compile_os 																							Yes 													Global 			No
# version_compile_zlib 																							Yes 													Global 			No
# version_tokens_session 						Yes 					Yes 									Yes 													Both 				Yes
# version_tokens_session_number 				Yes 					Yes 									Yes 													Both 				No
# wait_timeout 									Yes 					Yes 									Yes 													Both 				Yes
# warning_count 																									Yes 													Session 			No
# windowing_use_high_precision 				Yes 					Yes 									Yes 													Both 				Yes
#
# The following pertain to the Server Command Options of mysqld:
#
# mysqld reads options from the [mysqld] and [server] groups.
# mysqld_safe reads options from the [mysqld], [server], [mysqld_safe] and [safe_mysqld] groups.
#
# mysql.server reads options from the [mysqld] and [mysql.server] groups
#
# Memory allocations in size and defaulting is dependant upon platform.
#
# Values default to bytes in memory allocations in terms of buffer sizes, lengths, and stack sizes - unless specified otherwise.
#
# Note: Values are hints - MySQL retains freedom in assignments.
#
# 		Property 					 
# --allow-suspicious-udfs 		 					 						  
# 
#   cmd-line format - --allow-suspicious-udfs 
# 	 Type 				 Boolean
#   Default Value 	 FALSE
#
# 	 Controls whether user-defined functions that have only an xxx symbol for the main function can be loaded.
#   By default - is off and only UDFs that have at least one auxilliary symbol can be loaded; prevents attempts at loading
# 	 functions from shared object files other than those containing legit UDFs.
#
# --ansi
# 
# 	 cmd-line format 	--ansi
#
# 	 Use standard (ANSI) SQL Syntax instead of MySQL syntax. 
#   For more precise control over the server SQL mode - use --sql-mode instead.
#
# --basedir=<dir name>, -b <dir name>
#
# 	 cmd-line format 			--basedir=dir_name
# 	 System Var 				basedir
# 	 Scope 						Global
# 	 Dynamic 				 	No
# 	 SET_VAR Hint Applies  	No
#   Type 						Dir name
#   Default (>= 8.0.2) 		parent of mysqld installation dir
#   Default (<= 8.0.1) 		configuration-dependent default
#
# 	 The path to the MySQL installation dir. This option sets the basedir system var.
#
# 	 The server executable determines its own full path name at startup and uses the parent of the dir in which
# 	 it is located as the default basedir value.
#
# 	 This in turn enables the server to use that basedir when searching for server-related info such as the share dir containing error messages.
#
# --big-tables
#
# 	cmd-line format 			--big-tables
# 	System var 					big_tables
# 	Scope 						Global, Session
# 	Dynamic 						Yes
# 	SET_VAR Hint: 				No
# 	Type 							Boolean
# 	Default 						OFF
#
# 	Enable large result sets by saving all temp sets in files. This option prevents most 
# 	"table full" errors, but also slows down queries for which in-memory tables would suffice.
#
# 	The server is able to handle large result sets automatically by using memory for smaller temp tables and
#  switching to disk tables where necessary.
#
# --bind-address=<addr>
#
# cmd-line format 			--bind-address=addr
# System var 					bind_address
# Scope 							Global
# Dynamic 						No
# SET_VAR Hint Applies 		No
# Type 							String
# Default to 					*
#
# The MySQL server listens on one or more network sockets for TCP/IP connections.
# Each socket is bound to one address - but it is possible for an address to map onto
# multiple network interfaces.
#
# To specify how the server should listen for TCP/IP connections, use the --bind-address option at server startup
#
# < 8.0.13 - Accepts a single address value, which may specify a single non-wildcard IP address or host name, or one of the
#  			 wildcard address formats that permit listening on multiple network interfaces (*, 0.0.0.0 or ::)
#
# >= 8.0.13 - accepts a single value as just described, or a list of comma-separated values. When the opption names a list of
#  			  multiple values, each value must specify a single non-wildcard IP address or host name - i.e NONE may have (*, 0.0.0.0, or ::)
#
# IPs can be specified as IPv4 or IPv6. For any option that is a host name - the server resolves the name to an IP and binds to that address.
# If a host name resolves to multiple IP addresses, the server uses the first IPv4 address if there are any, or the first IPv6 address otherwise.
#
# The server treats different types of addresses as follows:
#
# 		If the address is *, the server accepts TCP/IP connections on all server host IPv4 interfaces - and IPv6 if supported.
# 		This is the default behavior.  - If multiple values are specified, this is not allowed as a value.
#
# 		If the address is 0.0.0.0, the server accepts TCP/IP connections on all server host IPv4 interfaces. Not permitted with a list of several values.
#
# 		If the address is ::, the server accepts TCP/IP connections on all server host IPv4 and IPv6 interfaces. Not permitted with a list of several values.
#
# 		If the address is an IPv4-mapped address, the server accepts TCP/IP connections for that address - in either IPv4 or IPv6.
#	 	Example: If server is bound to ::ffff:127.0.0.1 - Clients can connect using --host=127.0.0.1 or --host=::ffff:127.0.0.1
#
# 		If the address is a regular IPv4 or IPv6 address - such as 127.0.0.1 or ::1, the server accepts TCP/IP only for that IPv4 or IPv6.
#
# 		If binding to any address fails, server procedure fails and does not start.
#
# 		Some examples:
#
# 		--bind-address=* - Listens on all IPv4 or IPv6 - specified by *
#
# 		--bind-address=198.51.100.20 - Listens only on the 198.51.100.20 IPv4 address.
#
# 		--bind-address=198.51.100.20, 2001:db8:0:f101::1 - The server listens on the 198.51.100.20 IPv4 and 2001:db8:0:f101::1 IPv6
#
# 		--bind-address=198.51.100.20,* - Produces an error, Can't use wildcards with multiple designated values.
#
# 		When --bind-address names a single value (wildcard or non-wildcard) - the server listens on a single socket, which for a wildcard
# 		address may be bound to multiple network interfaces. 
#
# 		When it lists multiple values - the server listens on one socket per value - with each socket bound to a single network
# 		interface. This scaling is linear, i.e 1:1. Can come to affect connection-acceptance efficiency depending on the OS - long lists can cause overhead.
#
# 		If we intend to bind the server to a specific address - the mysql.user grant table must contain an account with admin privs that can connect to that 
# 		address.
#
# 		Otherwise - we cannot shut down the server. For example - if we bind the server to * - we can connect to it using all existing accounts.
# 		But if we bind to ::1, we'd need admin privs on root in terms of ::1 - as in 'root'@'::1' exists in the mysql.user table.
#
# --binlog-format={ROW|STATEMENT|MIXED}
#
# 		cmd line format: 		--binlog-format=format
# 		System var: 			binlog_format
# 		Scope 					Global, Session
# 		Dynamic 					Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Defaults: 				ROW
# 		Can take: 				ROW, STATEMENT, MIXED
#
# 		Specify wether to use row-based, statement-based or mixed replication. Statement is default in >= 8.0
#
# 	 	Sometimes the var cannot be changed during runtime - or causes replication to fail.
#
# 		Setting the binary logging format without enabling binary logging sets the binlog format global sys var and logs a warning.
# 
# --character-sets-dir=<dir name>
#
# 		cmd line format: 		--character-sets-dir=dir_name
# 		Sys Var: 				character_sets_dir
# 		Scope: 					Global
# 		Dynamic 					No
# 		SET_VAR Hint: 			No
# 		Type: 					Dir name
#
# 		The dir where char sets are installed
#
# --character-set-client-handshake
# 
# 		cmd line format: 		--character-set-client-handshake
# 		Type: 					Boolean
# 		Defaults: 				TRUE
#
# 		Do not ignore char set info sent by the client. 
# 		To ignore client info and use the default server char set, use --skip-character-set-client-handshake.
# 		(Causes behavior akin to MySQL 4.0)
#
# --character-set-filesystem=<charset name>
# 		
# 		cmd line format: 		--character-set-filesystem=name
# 		System Var: 			character_set_filesystem
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Defaults: 				Binary
#
# 		The filesystem char set. Sets the char set filesystem System var.
#
# --character-set-server=<charset name>, -C <charset_name>
#
# 		cmd line format: 		--character-set-server
# 		System var: 			character_set_server
# 		Scope: 					global, session
#		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (>= 8.0.1): 	utf8mb4
# 		Default (8.0.0): 		latin1
#
# 		Use <charset_name> as the default server char set. To specify a nondefault char set - use --collation-server to specify the collation.
#
# --chroot=<dir name>, -r <dir_name>
#
# 	 	cmd line format: 		--chroot=dir_name
# 		Type: 					Dir name
#
# 		Put the mysqld server in a closed env during startup by using the chroot() system call.
# 		Recommended security measure - limits interaction of LOAD_DATA_INFILE and SELECT ... INTO OUTFILE
#
# --collation-server=<collation_name>
#
# 		cmd line format: 		--collation-server
# 		System var: 			collation_server
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (>= 8.0.1) 	utf8mb4_0900_ai_ci
# 		Default (8.0.0) 		latin1_swedish_ci
#
# 		Use collation_name as the default server collation.
#
# --console
#
# 		cmd line format: 		--console 
# 		OS: 						Windows
#
# 		Cause the default error log destination to be the console. This affects log writers that base
# 		their own output destination on the default destination.
#
# 		Takes precedence over --log-error if both are given
#
# --core-file
# 
# 		cmd line format: 		--core-file
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Write a core file if mysqld dies. Name and location of the core file is system dependent.
# 		On Linux, a core file named core.pid is written to the current working dir of the process, which for
# 		mysqld is the data dir.
#
# 		pid is the process ID of the server process. On macOS, a core file named core.pid is written
# 		to the /cores dir. On Solaris, use the coreadm cmd to specify where to write the core file and how to name it.
#
# 		For some systems, to get a core file you must also specify the --core-file-size option to mysqld_safe.
# 		On some systems, such as Solaris, you do not get a core file if you are also using the --user option.
# 		
# 		This may cause the need to write ulimit -c unlimited before starting the server.
#
# 		To reduce the size of core files - the innodb buffer pool in core file options can be disabled to prevent
# 		InnoDB buffer pool pages from being written to core files.
# 
# --daemonize, -D
# 		
#
# 		cmd line format: 			--daemonize[={OFF|ON}]
# 		Type 							Boolean
# 		Default: 					OFF
#
# 		Causes the server to run as a traditional, forking daemon, permitting it to work with OS systems that use
# 		systemd for process control.
#
# 		Mutually exclusive with --initialize and --initialize-secure
#
# 		If the server is started using the --daemonize option and is not connected to a tty device - a default log error option
# 		of --log-error="" is used in absence of explicit log file, to direct the error output to the default log file.
#
# 		-D is shorthand for this command.
#
# --datadir=<dir name>, -h <dir_name>
#
# 		cmd line format: 		--datadir=<dir_name>
# 		System var: 			datadir
# 		Scope:					Global
# 		Dynamic: 				No
# 		SET_VAR hint 			No
# 		Type: 					Dir name
#
# 		Path to the MySQL server data dir. This option sets the datadir sys var.
#
# --debug[=<debug options>], -# [<debug_options>]
#
# 		cmd line format: 		--debug[=<debug_options>]
# 		Sys var: 				debug
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR hint 			No
# 		Type: 					String
# 		default (Windows): 	d:t:i:O, \mysqld.trace
# 		default (Unix): 		d:t:i:o, /tmp/mysqld.trace
#
# 		If MySQL is configured with the -DWITH_DEBUG=1 CMake option, you can use this option to get a trace
# 		file of what mysqld is doing.
#
# 		A typical <debug_options> string is d:t:o, <file_name>.
# 		
# 		Using -DWITH_DEBUG=1 to configure MySQL with debug support enables you to use the --debug="d,parser_debug" option
# 		when you start the server.
#
# 		This causes the Bison parser that is used to process SQL statements to dump a parser trace to the server's STD error output.
# 		Typically, this output is written to the error log.
#
# 		Stacks. Values that begin with + or - are subtracted from the previous value. For example:
# 		--debug=T --debug=+P sets the value to P:T
#
# --debug-sync-timeout[=N]
# 		
# 		cmd line format: 			--debug-sync-timeout[=#]
# 		Type: 						Integer
#
# 		Controls whether the Debug Sync facility for testing and debugging is enabled. Use of Debug Sync
# 		requires that MySQL be configured with the -DENABLE_DEBUG_SYNC=1 CMake option.
#
# 		If not compiled-in, this option is not available. The option value is timeout in seconds.
# 		Defaults to 0, which disables Debug Sync.
#
# 		To enable it, specify a value greater than 0; this value also becomes the default timeout for
# 		individual synchronization points.
#
# 		If the option is given without a value - the timeout is set to 300 seconds.
#
# --default-storage-engine=<type>
#
# 		cmd line format: 			--default-storage-engine=name
# 		System var: 				default_storage_engine
# 		Scope: 						Global, Session
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						Enumeration
# 		Defaults to: 				InnoDB
#
# 		Set the default storage engine for tables. Sets the storage engine for permanent tables only.
# 		To set for temp tables - set the default_tmp_storage_engine sys Var.
#
# 		If you disable the default storage engine at server startup, you must set the default engine for both
# 		permanent and temp tables to a different engine or the server won't start
#
# --default-time-zone=<timezone>
#
# 		cmd line format: 			--default-time-zone=name
# 		Type: 						String
#
# 		Set the default server time zone. This option sets the global time zone Sys var.
# 		If not given, defaults to sys time zone - same as sys time zone sys var
#
# --defaults-extra-file=<file name>
#
# 		Read this option file after the global option file but (on Unix) before the user option file.
# 		If the file does not exist or is otherwise inaccessible, an error occurs.
# 		Relative if relative, Absolute if Absolute.
#
# 		Must be the first option given if used on the cmd line.
#
# --defaults-file=<file name>
# 
#		Read only the given option file. If the file does not exist or is otherwise inaccessible, an error occurs.
# 		Relative if relative, absolute if absolute.
#
# 		Still reads mysqld-auto.cnf
#
# 		Must be first option on cmd, except if server is started with --defaults-file and --install (or --install-manual) options.
# 		(Then --install/--install-manual must be first)
#
# --defaults-group-suffix=<str>
#
# 		Read not only the usual option groups - but also the groups with usual names and suffix of <str>.
# 		Regex onm suffix of groups to read.
#
# --delay-key-write[={OFF|ON|ALL}]
#
# 		cmd line format: 		--delay-key-write[=name]
# 		Sys var: 				delay_key_write
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR hint: 			No
# 		Type: 					Enumeration
# 		Default: 				ON
# 		ACCEPTS: 				ON/OFF/ALL
#
# 		Specify how to use delayed key writes. Delayed key writing causes key buffers not to be flushed between
# 		writes for MyISAM tables.
#
# 		OFF disables delayed key writes.
# 		ON enables delayed key writes for those tables that were created with the DELAY_KEY_WRITE option.
# 		ALL delay key writes for all MyISAM tables.
#
# 		NOTE: If set to ALL, one should not use MyISAM tables from within another program (such as another MySQL server or
# 				myisamchk) when the tables are in use. Causes index corruption if you do.
#
# --des-key-file=<file name>
#
# 	 	cmd line format: 		--des-key-file=<file_name>
# 		Deprecated: 			Yes
#
# --early-plugin-load=<plugin list>
#
# 		cmd line format: 		--early-plugin-load=<plugin_list>
# 		Type: 					String
# 		Defaults: 				Empty string
#
# 		This option tells the server which plugins to load before loading mandatory built-in plugins and before storage engine initialization.
# 		If multiple --early-plugin-load options are given, only the last one is used.
#
# 		The option value is a semicolon-separated list of <name>=<plugin_library> and <plugin_library> values.
#
# 		Each <name> is the name of a plugin to load, and <plugin_library> is the name of the library file that contains the plugin code.
# 		If a plugin library is named without any preceding plugin name - the server loads all plugins in the library.
#
# 		The server looks for plugin lib files in the dir named by the <plugin dir> Sys var.
#
# 		For example, if plugins named myplug1 and myplug2 have lib files myplug1.so and myplug2.so, use this option to perform an early plugin load:
#
# 			mysqld --early-plugin-load="myplug1=myplug1.so;myplug2=myplug2.so"
#
# 		Quotes are used around the arg value because otherwise a ; is treated as command eliminator in terms of for instance Unix systems.
#
# 		Each named plugin is loaded early for a single invocation of mysqld only.
# 		After a restart, the plugin is not loaded early unless --early-plugin-load is used again.
#
# 		If the server uses --initialize or --initialize-secure, plugins specified by --early-plugin-load are not loaded.
#
# 		If the server is run with --help, plugins specified by --early-plugin-load are loaded but not initialized. Ensures that
# 		plugin options are displayed in the help messages.
#
# 		Default of --early-plugin-load value is empty. To load the keyring_file plugin, you must use an explicit --early-plugin-load option with
# 		a nonempty value.
#
# 		The InnoDB tablespace encryption feature relies on the keyring_file plugin for encryption key management,
# 		and the keyring_file plugin must be loaded prior to storage engine initialization to facilitate InnoDB recovery for encrypted tables.
#
# 		Admins who want the keyring_file plugin loaded at startup should use the appropiate nonempty option value.
# 		For example - keyring_file.so on Unix and keyring_file.dll on Windows.
#
# --enable-named-pipe
#
# 		cmd line format: 			--enable-named-pipe
# 		Platform specific: 		Windows
#
# 		Enable support for named pipes. Applies only on Windows.
#
# --event-scheduler[=<value>]
# 		
# 		cmd line format: 			--event-scheduler[=<value>]
# 		Sys var: 					event_scheduler
# 		Scope: 						Global
# 		Dynamic: 					Yes
# 		SET_VAR hint: 				No
# 		Type: 						Enumeration
# 		Default (>= 8.0.3) 		On
# 		Default (<= 8.0.2) 		OFF
# 		Valid: 						ON/OFF/DISABLED
#
# 		For more info on this, see --event-scheduler.
# 		Enable, disable - start or stop the event scheduler.
#
# --exit-info[=<flags>], -T [<flags>]
#
# 		cmd line format: 			--exit-info[=<flags>]
# 		Type: 						Integer
#
# 		This is a bitmask of different flags that you can use for debugging the mysqld server.
# 		
# --external-locking
#
# 		cmd line format: 			--external-locking
# 		Type: 						Boolean
# 		Defaults: 					FALSE
#
# 		Enable external locking (system locking), which is disabled by default.
#
# 		If you use this option on a system on which lockd does not fully work (such as Linux),
# 		mysqld can easily deadlock.
#
# 		To disable external locking explicitly, use --skip-external-locking.
#
# 		External locking affects only MyISAM table access. 
#
# --flush
#
# 		cmd line format: 			--flush
# 		Sys Var 						flush
# 		Scope: 						Global
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						Boolean
# 		Defaults: 					OFF
#
# 		Flush (synchronize) all changes to disk after each SQL statement. 
#
# 		Normally, MySQL does a write of all changes to disk only after each SQL statement
# 		and lets the OS handle the synch to disk.
#
# 		Note: If activated, flush time is ignored.
#
# --gdb 
#
# 		cmd line format: 			--gdb
# 		Type: 						Boolean
# 		default: 					FALSE
#
# 		Install an interrupt handler for SIGINT (needed to stop mysqld with ^C to set breakpoints) and disable stack tracking
# 		and core file handling.
#
# 		On Windows, this option also suppresses the forking that is used to implement the RESTART statement:
#
# 			Forking enables one process to act as a monitor to the other, which acts as the server.
#
# 			However, forking makes determining the server process to attach to for debugging more difficult,
# 			so starting the server with --gdb suppresses forking.
# 
# 			For a server started with this, RESTART simply exits and does not restart.
#
# 			In non-debug settings, --no-monitor may be used to suppress forking the monitor process.
#
# --general-log[={0|1}]
#
# 		cmd line format: 			--general-log
# 		Sys var: 					general_log
# 		Scope: 						Global
# 		Dynamic: 					Yes
# 		SET_VAR hint: 				No
# 		Type: 						Boolean
# 		Defaults: 					OFF
#
# 		Specify the initial general query log state. With no argument or an argument of 1, the --general-log option enables the log.
# 		If omitted or given with an arg of 0 - the option disables the log.
#
# --initialize, -I
#
# 		cmd line format: 			--initialize
# 		Type: 						Boolean
# 		Defaults: 					OFF
#
# 		Initializes a mysql installation by creating the data dir and populating the tables in the mysql system DB.
# 		
# 		When the server is started with --initialize, some functionality is unavailable that limits the statements permitted
# 		in any file named by the --init-file option.
#
# 		In addition, disabled_storage_engine sys var has no effect.
#
# 		--initialize is mutually exclusive with --daemonize 
#
# 		-I is a synonym for --initialize
#
# --initialize-insecure
#
# 		cmd line format: 			--initialize-insecure
# 		Type: 						Boolean
# 		Default: 					OFF
#
# 		This option is used to initialize a MySQL installation by creating the data dir and populating the tables
# 		in the mysql system DB. This option implies --initialize.
#
# 		--initialize-insecure is mutually exclusive with --daemonize.
#
# --init-file=<file name>
#
# 		cmd line format: 			--init-file=file_name
# 		Sys var: 					init_file
# 		Scope: 						Global 
# 		Dynamic: 					No
# 		SET_VAR Hint: 				No
# 		Type: 						File name
#
# 		Read the SQL statements from this file at the startup. Each statement must be on a single line and should not include comments.
#
# 		If the server is started with the --initialize or --initialize-insecure option, it operates in bootstrap mode and some
# 		functionality is unavailable that limits the statements permitted in the file.
#
# 		These include statements that are related to account management (such as CREATE USER or GRANT), replication and global transaction identifiers.
#
# --innodb-<xxx>
#
# 		Set an option for the InnoDB storage engine. The InnoDB options are listed later.
#
# --install [<service name>]
# 
# 		cmd line format: 			--install [service_name]
# 		Platform: 					Windows
#
# 		Install the server as a Windows Service that starts automatically when Windows does as well.
# 		Defaults to MySQL if no Service_name value is given.
#
# 		If server is started with --defaults-file and --install, --install must be first.
#
# --install-manual [<service name>]
# 		
# 		cmd line format: 			--install-manual [<service_name>]
# 		Platform: 					Windows
#
# 		Install the server as a Windows service that must be started manually. Does not start automatically during Windows boot cycle.
# 		Default service name is MySQL if no service_name is given.
#
# 		--install-manual first if --defaults-file and --install-manual given.
#
# --language=<lang name>, -L <lang name>
#
# 		cmd line format: 			--language=name
# 		Deprecated: 				Yes; use lc-messages-dir
# 		Sys Var: 					language
# 		Scope: 						Global
# 		Dynamic: 					No
# 		SET_VAR Hint: 				No
# 		Type: 						Dir name
# 		Default value: 			/usr/local/mysql/share/mysql/english/
#
# 		The language to use for error messages. <lang_name> can be given as the language name or as the full path name to the dir
# 		where the language files are installed.
#
# 		--lc-messages-dir and --lc-messages should be used rather than --language, which is deprecated (and handeled as an alias for --lc-messages-dir).
# 		--language will be removed in a future MySQL release.
#
# --large-pages
# 
# 		cmd line format: 			--large-pages
# 		Sys var: 					large_pages
# 		Scope: 						Global
# 		Dynamic: 					No
# 		SET_VAR hint: 				No
# 		Platform specific: 		Linux
# 		Type: 						Boolean
# 		Default: 					FALSE
#
# 		Some hardware/OS architechtures support memory pages greater than the default (4kb normally)
# 		The actual implementation of this support depends on the underlying hardware and OS.
#
# 		Applications that perform a lot of memory accesses may obtain performance improvements by using
# 		large pages due to reduced Translation Lookaside Buffer (TLB) Misses.
#
# 		Disabled by default.
#
# 		MySQL supports the Linux implementation of large page support (which is called HugeTLB) in Linux.
#
# 		For solaris, this pertains to --super-large-pages.
#
# --lc-messages=<locale name>
#
# 		cmd line format: 			--lc-messages=name
# 		Sys var: 					lc_messages
# 		Scope: 						Global, Session
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						String
# 		Default: 					en_US
#
# 		The locale to use for error messages. Defaults to en_US. The server converts
# 		the args to a language name and combines it with the value of --lc-messages-dir to produce the location
# 		for the error message file.
#
# --lc-messages-dir=<dir name>
#
# 		cmd line format: 			--lc-messages-dir=dir_name
# 		Sys var: 					lc_messages_dir
# 		Scope: 						Global
# 		Dynamic: 					No
# 		SET_VAR Hint: 				No
# 		Type: 						Dir name
#
# 		The dir where error messages are located. The server uses the value together with the value
# 		of --lc-messages to produce the location for the error message file.
#
# --local-service
#
# 		cmd line format: 			--local-service
# 		
# 		Windows based: A --local-service option following the service name causes the server to run using the
# 							LocalService Windows acc that has limited sys privs.
#
# 							If both --defaults-file and --local-service are given following the service name, they can be in any order.
#
# --log-error[=<file name>]
#
# 		cmd line format: 			--log-error[=file_name]
# 		Sys var: 					log_error
# 		Scope: 						Global
# 		Dynamic: 					No
# 		SET_VAR Hint: 				No
# 		Type: 						File name
#
# 		Set the default error log dest. to the named file. This affects log writers that base their own
# 		output dest on the default dest.
#
# 		If the option names no file, the default error log dest on Unix and Unix-like systems is a file named <host_name.err> in the data Dir.
# 		The default destination on Windows is the same, unless the --pid-file option is specified.
#
# 		In that case, the file name is the PID file base name with a suffix of .err in the data dir.
#
# 		If the option names a file, the default destination is that file (with an .err suffix added if the name has no suffix),
# 		located under the data dir unless an absolute path name is given to specify a different location.
#
# 		If error log output cannot be redirected to the error log file, an error occurs and startup fails.
#
# 		On Windows, --console takes precedence over --log-error if both are given. In this case, the default error log destination is
# 		the console rather than a file.
#
# --log-isam[=<file name>]
#
# 		cmd line format: 		--log-isam[=file_name]
# 		Type: 					File name
#
# 		Log all MyISAM changes to this file (used only when debugging MyISAM)
#
# --log-output=<value>, ...
#
# 		cmd line format: 		--log-output=name
# 		Sys var: 				log_output
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Set
# 		Defaults: 				FILE
# 		Valid: 					TABLE, FILE, NONE
#
# 		This option determines the destination for general query log and slow query log output.
# 		The option value can be given as one or more of the words TABLE, FILE or NONE.
#
# 		TABLE select logging to the general log and slow_log tables in the mysql database as a destination.
# 		FILE selects logging to log files as a destination.
# 		NONE disables logging.
#
# 		If NONE is present in the option value, it takes precedence over any other words that are present.
# 		TABLE and FILE can both be given to select to both log output destinations.
#
# 		This option selects log output destinations, but does not enable log output.
# 		To do that, use the --general_log and --slow_query_log options.
#
# 		For FILE logging, the --general_log_file and -slow_query_log_file options determine the log file location.
#
# --log-queries-not-using-indexes
# 
# 		cmd line format: 		--log-queries-not-using-indexes
# 		System variable: 		log_queries_not_using_indexes
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		If you are using this option with the slow query log enabled, queries that are expected to retrieve all rows are logged.
#
# 		This option does not necessarily mean that no index is used. For example - a query that uses a full index scan uses an index
# 		but would be logged because the index would not limit the number of rows.
#
# --log-raw 
#
# 		cmd line format: 		--log-raw[=<value>]
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Passwords in certain statements written to the general query log, slow query log and binary log are rewritten by the server
# 		not to occur literally in plain text.
#
# 		Password rewriting can be suppressed for the general query log by starting the server with the --log-raw option.
# 		This option may be useful for diagnostic purposes, to see the exact text of statements as received by the server,
# 		but for security reasons is not recommended for production use.
#
# 		If a query rewrite plugin is installed, the --log-raw option affects statement logging as follows:
#
# 			Without --log-raw, the server logs the statement returned by the query rewrite plugin. This may differ from the statement as received.
#
# 			With --log-raw, the server logs the original statement as received.
#
# --log-short-format
#
# 		cmd line format: 		--log-short-format
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		Log less information to the slow query log, if it has been activated.
#
# --log-tc=<file name>
#
# 		cmd line format: 		--log-tc=file_name
# 		Type: 					File name
# 		Default: 				tc.log
#
# 		The name of the memory-mapped transaction coordinator log file (for XA transactions that affect multiple storage engines
# 		when the binary log is disabled).
#
# 		The default name is tc.log. The file is created under the data dir if not given as a full path name. Unused.
#
# --log-tc-size=<size>
#
# 		cmd line format: 		--log-tc-size=#
# 		Type: 					integer
# 		Default: 				6 * page * size
# 		Minimum value: 		6 * page * size
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		The size in bytes of the memory-mapped transaction coordinator log. 
# 		Defaul and min values are 6 times the page size, and the value must be a multiple of the page size.
#
# --log-warnings[=<level>], -W [<level>]
#
# 		cmd line format: 		--log-warnings[=#]
# 		Deprecated: 			YES (removed in 8.0.3)
#     Sys var: 				log_warnings
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Int
# 		Default value: 		2
# 		Min val: 				0
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<a lot>
#
# 		DEPRECATED - Use log error verbosity sys var instead.
#
# --low-priority-updates
#
# 		cmd line format: 		--low-priority-updates
# 		Sys var: 				low_priority_updates
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		Give table-modifying operations (INSERT, REPLACE, DELETE, UPDATE) lower prio than selects..
# 		This can also be done using { INSERT | REPLACE | DELETE | UPDATE } LOW PRIORITY ... to lower the prio of only one query,
# 		or by SET LOW_PRIORITY_UPDATES=1 to change the priority in one thread.
#
# 		This affects only storage engines that use only table-level locking (MyISAM, MEMORY, MERGE)
#
# --min-examined-row-limit=<number>
#
# 		cmd line format: 		--min-examined-row-limit=#
# 		Sys var: 				min_examined_row_limit
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Min value: 				0
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		When this option is set - queries which examine fewer than <number> rows are not written to the slow query log. Default is 0.
#
# --memlock
#
# 		cmd line format: 		--memlock
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		Lock the mysqld process in memory. This option might help if you have a problem where the OS is causing mysqld to swap to disk.
#
# 		--memlock works on systems that support the mlockall() system call; this includes Solaris, most Linux distributions that use a 2.4 or higher kernel,
# 		and perhaps other Unix systems.
#
# 		On Linux systems, you can tell whether or not mlockall() (and thus this option) is supported by checking to see whether or not it is defined
# 		in the system mman.h file, as follows:
#
# 		grep mlockall /usr/include/sys/mman.h
#
# 		If mlockall() is supported, you should see in the output of the previous command something as follows:
#
# 		extern int mlockall (int __flags) __THROW;
#
# 		NOTE: Do not use on a system that does not support mlockall(). Will crash, if you do.
#
# 		Might need to run as root, but can be circumvented with limits.conf changing as well.
#
# --myisam-block-size=<N>
#
# 		cmd line format: 		--myisam-block-size=#
# 		Type: 					integer
# 		Default: 				1024
# 		Min value: 				1024
# 		Max value: 				16384
#
# 		Block size used for MyISAM index pages.
#
# --myisam-recover-options[=<option>[, <option>] ...]]
# 	
# 		cmd line format: 		--myisam-recover-options[=<name>]
# 		Type: 					Enumeration
# 		Default: 				Off
# 		Valid values: 			OFF/DEFAULT/BACKUP/FORCE/QUICK
#
# 		Set the MyISAM storage engine recovery mode. The option value is any combination of the values of
# 		OFF, DEFAULT, BACKUP, FORCE or QUICK.
#
# 		If you specify multiple values, separate them by commas. Specifying the option with no argument is the same
# 		as specifying DEFAULT, and specifying with an explicit value of "" disables recovery (same as OFF).
#
# 		If recovery is enabled, each time mysqld opens a MyISAM table, it checks whether the table is marked as crashed
# 		or was not closed properly. (The last option works only if you are running with external locking disabled).
#
# 		If this is the case, mysqld runs a check on the table. If the table was corrupted, mysqld attempts to repair it.
#
# 		The following options pertain to how the repair works:
#
# 		OFF 		No recovery
# 		DEFAULT 	Recovery without backup, forcing or quick checking
# 		BACKUP 	If hte data file was changed during recovery, save a backup of the <tbl_name>.MYD file as <tbl_name-datetime>.BAK
# 		FORCE 	Run recovery even if we would lose more than one row from the .MYD file
# 		QUICK 	Do not check the rows in the table if there are not any delete blocks.
#
# 		Before the server automatically repairs a table, it writes a note about the repair to the error log.
#
# 		If you want to be able to recover from most problems without user intervention - you should use the options
# 		BACKUP, FORCE. This forces a repair of a table even if some rows would be deleted, but it keeps the old data file
# 		as a backup so that you can later examine what occured.
#
#
# --no-defaults
#
# 		Do not read any option files. If program startup fails due to reading unknown options from an option file, --no-defaults
# 		prevents crashing in relation to reading.
#
# --no-dd-upgrade
#
# 		cmd line format: 				--no-dd-upgrade
# 		Introduced: 					8.0.4
# 		Type: 							Boolean
# 		Default: 						FALSE
#
# 		Prevents the automatic upgrade of data dictionary tables when starting the MySQL server. This option would typically be used
# 		when starting the MySQL server following an in-place upgrade of the MySQL server to a new version, which may include changes to
# 		data dictionary table defs.
#
# 		When --no-dd-upgrade is specified, and the server finds that the data dictionary version of the server is different from the 
# 		version stored in the data dictionary, startup fails with an error stating that data dictionary upgrade is prohibited.
#
# 		During a normal startup, the data dictionary version of the server is compared to the version stored in the data dictionary
# 		to determine if data dictionary table defs should be upgraded.
#
# 		If an upgrade is necessary and supported, the server creates data dictionary tables with updated definitions, copies persisted
# 		metadata to the new tables, automatically replaces the old tables with new ones, and reinitializes the data dir.
#
# 		If an upgrade is not necessary, startup continues without updating data dir tables.
#
# --no-monitor
#
# 	   cmd line format: 				--no-monitor
# 		Introduced: 					8.0.12
# 		Platform based: 				Windows
# 		Type: 							Boolean
# 		Default: 						FALSE
#
# 		Suppresses the forking that is used to implement the RESTART statement.
# 		Forking enables one process to act as a monitor to the other, which acts as the server.
#
# 		For a server started with this option, RESTART simply exits and does not restart.
#
# 		Case of < 8.0.12 - can use --gdb for workaround.
#
# --old-alter-table
#
# 		cmd line format: 				--old-alter-table
# 		Sys Var: 						old_alter_table
# 		Scope: 							Global, Session
# 		Dynamic: 						Yes
# 		SET_VAR Hint: 					No
# 		Type: 							Boolean
# 		Default: 						OFF
#
# 		When this option is given, the server does not use the optimized method of processing an ALTER TABLE operation.
# 		It reverts to using a temp table, copying over the data - and then renames the temp table to the original - as per MySQL <= 5.0
#
# --old-style-user-limits
#
# 		cmd line format: 				--old-style-user-limits
# 		Type: 							Boolean
# 		Default: 						FALSE
#
# 		Enable old-style user limits. (Causes account resource limits to be counted seperately for each host from which a user connected rather than per acc row in the user table)
#
# --open-files-limit=<count>
#
# 		cmd line format: 				--open-files-limit=#
# 		Sys Var: 						open_files_limit
# 		Scope: 							Global
# 		Dynamic: 						No
# 		SET_VAR Hint: 					No
# 		Type: 							Int
# 		Default: 						5000, can be adjusted
# 		min: 								0
# 		max: 								OS dependant
#
# 		Changes the number of file descriptors available to mysqld. You should try increasing the value of this option if
# 		mysqld gives you the error "Too many open files".
#
# 		mysqld uses the option value to reserve desc with setrlimit().
# 		Internally, the maximum value for this option is the max unsigned integer value,
# 		but the actual max is OS dependant.
#
# 		If the requested number of file desc cannot be allocated, mysqld writes a warning to the error log.
#
# 		mysqld may attempt to allocate more than the requested number of desc (if they are available) using the values of max_connections
# 		and table_open_cache to estimate whether more descriptors will be needed.
#
# 		On Unix, the value cannot be set greater than ulimit -n
#
# --performance-schema-xxx
# 
# 		Configure a Performance Schema Option.
#
# --pid-file=<file name>
#
# 		cmd line format: 	--pid-file=<file_name>
# 		Sys Var: 			pid_file
# 		Scope: 				Global
# 		Dynamic: 			No
# 		SET_VAR Hint: 		No
# 		Type: 				File name
#
# 		Path name of the process ID file. The server creates the file in teh data dir unless an absolute path name is given to specify
# 		a different dir.
#
# 		If specified - must specify a value.
#
# 		If not specified, defaults to <host_name>.pid - where host name is name of the host machine.
#
# 		The process ID file is used by other programs such as mysqld_safe to determine the servers process ID.
# 		On Windows, this variable also affects the default error log file name.
#
# --plugin-xxx
#
# 		Specifies an option that pertains to a server plugin. 
#
# 		For example, many storage engines can be built as plugins, and for such engines, options for them
# 		can be specified with a --plugin prefix.
#
# 		Thus, the --innodb_file_per_table option for InnoDB can be specified as --plugin-innodb_file_per_table
#
# 		For boolean options, that can be enabled or disabled, the --skip prefix and other alternatives are supported.
#
# 		For example - --skip-plugin-innodb_file_per_table disables innodb_file_per_table.
#
# 		The rationale for the --plugin prefix is that it enables plugin options to be specified unambiguously if there is a 
# 		name conflict with a built-in server option.
#
# 		For example, if named --sql-mode - it would conflict with built in systems. To circumvent, specify with --plugin first.
#
# --plugin-load=<plugin list>
#
# 		cmd line format: 			--plugin-load=<plugin_list>
# 		Type: 						String
#
# 		This option tells the server to load the named plugins at startup.
#
# 		If multiple --plugin-load options are given, only last one is used. Additional may be loaded using --plugin-load-add.
#
# 		The option value is a semicolon listed of <name>=<plugin_library> and <plugin_library> values.
#
# 		Each <name> is the name of a plugin to load - and <plugin_library> is the name of the library file that contains 
# 		the plugin code.
#
# 		If a plugin library is named without any preceding plugin name, the server loads all plugins in the library.
# 		The server looks for plugin lib files in the dir named by the <plugin dir> sys var.
#
# 		For example - if plugins named myplug1 and myplug2 have lib files - myplug1.so and myplug2.so, use this to perform an early plugin load:
#
# 		mysqld --plugin-load="myplug1=myplug1.so;myplug2=myplug2.so"
#
# 		This differs from INSTALL PLUGIN in that it's localized to one invocation of mysqld - Which adds one entry to the mysql.plugins table to cause
# 		the plugin to be loaded for every normal server startup.
#
# 		Under normal startup, the server determines which plugins to load by reading the mysql.plguins system table.
#
# 		If the server is started with the --skip-grant-tables option - it does not consult the mysql.plugins table and does not load plugins
# 		listed there.
#
# 		--plugin-load allows for plugins to be loaded even when --skip-grant-tables is given.
# 		--plugin-load also enables plugins to be loaded at startup that cannot be loaded at runtime.
#
# --plugin-load-add=<plugin list>
#
# 		cmd line format: 			--plugin-load-add=plugin_list
# 		Type: 						String
#
# 		This option complements the --plugin-load option. 
# 		--plugin-load-add adds a plugin or plugins to the set of plugins to be loaded at startup.
#
# 		The argument format is the same as for --plugin-load. --plugin-load-add can be used to avoid specifying a large
# 		set of plugins as a single long unwieldy --plugin-load argument.
#
# 		--plugin-load-add can be used instead of --plugin-load, but any ones that precedes --plugin-load, resets the set to load.
#
# 		i.e: 	--plugin-load=x --plugin-load-add=y   		--> 		--plugin-load="x;y"
#
# 				--plugin-load-add=y 	--plugin-load=x 		--> 		--plugin-load=x
#
# --port=<port_num>, -P <port_num>
#
# 		cmd line format: 		--port=#
# 		Sys var: 				port
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				3306
# 		Min value: 				0
# 		Max value: 				65535
#
# 		Port number to use for listening on to TCP/IP connections. On Unix/akin, >= 1024 if not started by root
#
# --port-open-timeout=<num>
#
# 		cmd line format: 		--port-open-timeout=#
# 		Type: 					int
# 		Default: 				0
#
# 		On some systems, when the server is stopped, the TCP/IP port might not become available immediately.
# 		If the server is restarted quickly afterwards, its attempt to reopen the port can fail.
#
# 		This indicates how many seconds the server should wait for the TCP/IP port to become free if it cannot be opened.
# 		Defaults to not wait.
#
# --print-defaults
#
# 		Print the program name and all options that it gets from option files.
# 		PWs are masked. Must be first - except in relaiton to --defaults-file or --defaults-extra-file.
#
# --remove [<service_name>]
#
# 		cmd line format: 		--remove [service_name]
# 		platform: 				Windows
#
# 		Removes a MySQL Windows service. Default service name is MySQL if no <service_name> value is given.
#
# --safe-user-create
#
# 		cmd line format: 		--safe-user-create
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		If this option is enabled, a user cannot create new MySQL users by using the GRANT statement unless the user has the INSERT privs
# 		for the mysql.user table or any column in the table.
#
# 		If you want a user to have the ability to create new users that have those privs that the user has the right to grant,
# 		grant the user the following privs:
#
# 		GRANT INSERT(user) 	ON mysql.user 	TO 'user_name'@'host_name';
#
# 		Ensures that the user cannot change any priv columns directly - but has to use the GRANT statement to give privs to other users.
#
# --secure-auth
#
# 		cmd line format: 		--secure-auth
# 		DEPRECATED: 			8.0.3
# 		Sys var: 				secure_auth
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					BOOLEAN
# 		Default: 				ON
# 		VALID: 					ON
#
# --secure-file-priv=<dir name>
#
# 		cmd line format: 		--secure-file-priv=dir_name
# 		Sys var: 				secure_file_priv
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				platform specific
# 		Valid: 					empty string, dirname, NULL
#
# 		Sets the secure file priv sys var - which is used to limit the effect of data import and export operations,
# 		such as those performed by the LOAD DATA and SELECT ... INTO OUTFILE statements and the LOAD FILE() function.
#
# --shared-memory
#
# 		cmd line format: 		--shared-memory[={0,1}]
# 		Sys var: 				shared_memory
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Platform: 				Windows
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		Enables shared-memory connections by local clients. Can only be done on Windows.
#
# --shared-memory-base-name=<name>
#
# 		cmd line format: 		--shared-memory-base-name=name
# 		System var: 			shared_memory_base_name
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Platform: 				Windows
# 		Type: 					String
# 		Default: 				MYSQL
#
# 		Name of the shared memory to use for shared-memory connections. Case sensitive.
#
# --skip-concurrent-insert
#
# 		Turns off the ability to select and insert at the same time on MyISAM tables. 
#
# --skip-event-scheduler
#
# 		cmd line format: 		--skip-event-scheduler
# 									--disable-event-scheduler
#
# 		Turns the Event Scheduler OFF. Not the same as disabling the event scheduler - that would require --event-scheduler=DISABLED;
#
# --skip-grant-tables
#
# 		cmd line format: 		--skip-grant-tables
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		Causes the server to start without using the privilege system at all, which gives
# 		anyone with access to the server unrestricted access to all DBs.
#
# 		Can cause a running server to start using the grant tables again by executing mysqladmin flush-privileges
# 		or mysqladmin reload cmd from a sys shell or by issuing a MySQL FLUSH PRIVILEGES statement after connecting to the server.
#
# 		If the server is started with the --skip-grant-tables option to disable authentication checks, the server enables
# 		--skip-networking automatically to prevent remote connections.
#
# 		Also causes the server to suppress during its startup sequence the loading of user-defined functions (UDFs),
# 		scheduled events and plugins that were installed with the INSTALL PLUGIN statement.
#
# 		To cause plugins to be loaded anyway, use the --plugin-load option: --skip-grant-tables also causes the 
# 		disabled_storage_engines sys var to have no effect.
#
# 		Does not cause loading of server components to be suppressed during server startup.
#
# 		FLUSH PRIVILEGES might be executed implicitly by other actions performed after startup.
# 		For example, mysql_upgrade flushes the priv during the upgrade procedure.
#
# --skip-host-cache
#
# 		cmd line format: 		--skip-host-cache
#
# 		Disable use of the internal host cache for faster name-to-IP resolution.
# 		In this case, the server performs a DNS lookup every time a client connects.
#
# 		Use of --skip-host-cache is similar to setting the host_cache_size sys var to 0,
# 		but host_cache_size is more flexible - due to ability of integration of resizing, enabling or disabling,
# 		host cache at runtime, not just at server startup.
#
# 		If you start the server with --skip-host-cache - that does not prevent changes to the value of host_cache_size,
# 		but such changes have no effect and the cache is not re-enabled even if host_cache_size is set larger than 0.
#
# --skip-innodb
#
# 		Disable the InnoDB storage engine. In this case, because the default storage engine is InnoDB, the server will not
# 		start unless you also use --default-storage-engine and --default-tmp-storage-engine to set the default to some other
# 		engine for both permanent and TEMPORARY tables.
#
# 		The InnoDB storage engine cannot be disabled, and the --skip-innodb option is deprecated and has no effect.
# 		Results in a warning.
#
# --skip-name-resolve
#
# 		cmd line format: 		--skip-name-resolve
# 		Sys Var: 				skip_name_resolve
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Do not resolve host names when checking client connections. Use only IP addresses.
# 		If used - all Host column values in the grant table must be IP addresses.
#
# 		Depending on the network configuration of your system and the Host values for your accounts,
# 		clients may need to connect using an explicit --host option - such as --host=127.0.0.1 or --host=::1
#
# 		Example: If on, 127.0.0.1 does not resolve to localhost. Must be designated with:
#
# 		CREATE USER 'root'@'127.0.0.1' IDENTIFIED BY 'root-password';
# 		CREATE USER 'root'@'::1' IDENTIFIED BY 'root-password';
#
# --skip-networking
#
# 		cmd line format: 		--skip-networking
# 		Sys Var: 				skip_networking
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
#
# 		Do not listen for TCP/IP connections at all. All interactions with mysqld must be done through named pipes or shared memory or Unix sockets.
# 		Recommended for systems with only local clients permitted.
#
# 		If the server is started with the --skip-grant-tables option to disable authentication checks, the server enables --skip-networking to prevent remote connections.
#
# --ssl*
#
# 		Specify whether to permit clients to connect using SSL and indicate where to find SSL keys/Certs.
#
# --standalone
#
# 		cmd line format: 		--standalone
# 		Platform: 				Windows
#
# 		Instructs MySQL server to not run as a service.
#
# --super-large-pages
#
# 		cmd line format: 		--super-large-pages
# 		Platform: 				Solaris
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		Standard use of large pages in MySQL attempts to use the largest size supported, up to 4MB.
# 		Under Solaris, super large pages is up to 256MB of pages.
#
# 		Can be turned on/off with: --super-large-pages or --skip-super-large-pages option.
#
# --symbolic-links, --skip-symbolic-links
#
# 		cmd line format: 		--symbolic-links
# 		Deprecated: 			8.0.2
# 		Type: 					Boolean
# 		Default (8.0.2 >=) 	OFF
# 		Default (8.0.1 <=) 	ON
#
# 		Enable or disable symbolic link support. On Unix, enabling symbolic links means that you can link a MyISAM index file or
# 		data file to another dir with the INDEX DIR or DATA DIR option of the CREATE TABLE statement.
#
# 		If deleting or renaming the table - the files that its symbolic links point to also are deleted or renamed.
#
# 		Symbolic link support, --symbolic-links - is deprecated. Disabled by default. have_symlink sys var is also deprecated
# 		Does not pertain to Windows.
#
# --skip-show-database
#
# 		cmd line format: 		--skip-show-database
# 		Sys Var: 				skip_show_database
# 		Scope: 					Global
#		Dynamic: 				No
# 		SET_VAR Hint: 			No
#
# 		This option sets the skip_show_database sys var that controls who is permitted to use the SHOW DATABASE.
#
# --skip-stack-trace
#
# 		cmd line format: 		--skip-stack-trace
#
# 		Do not write stack traces. Useful when running mysqld under a debugger.
# 		On some systems, you also must use this option to get a core file.
#
# --slow-query-log[={0|1}]
#
# 		cmd line format: 		--slow-query-log
# 		Sys Var: 				slow_query_log
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Specify the initial slow query log state. With no argument or an argument of 1, the --slow-query-log
# 		option enables the log. If omitted or given 0 - disables the log.
#
# --slow-start-timeout=<timeout>
#
# 		cmd line format: 		--slow-start-timeout=#
# 		Type: 					Integer
# 		Default: 				15000
#
# 		Controls the Windows service control manager's service start timeout.
# 		Max number of milliseconds that the service control manager waits before trying to kill the Windows service during startup.
# 		Default value is 15000 (15 seconds).
#
# 		0 is no timeout. 
#
# --socket=<path>
#
# 		cmd line format: 		--socket={file_name|pipe_name}
# 		Sys Var: 				socket
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (Other)  		/tmp/mysql.sock
# 		Default (Windows) 	MySQL
#
# 		On Unix, specifies the Unix socket file to use when listening for local connections.
# 		The default value is /tmp/mysql.sock.
#
# 		If this option is given, the server creates the file in the data dir unless an absolute path name is given
# 		to specify a different dir.
#
# 		On Windows, the option specifies the pipe name to use when listening for local connections that used a named pipe.
# 		Default is MySQL (not case sensitive)
#
# --sql-mode=<value>[,<value>[,<value> ...]]
#
# 		Cmd line format: 		--sql-mode=name
# 		Sys Var: 				sql_mode
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Set
# 		Default (>= 8.0.11) 	ONLY_FULL_GROUP_BY STRICT_TRANS_TABLES NO_ZERO_IN_DATE NO_ZERO_DATE
# 									ERROR_FOR_DIVISION_BY_ZERO NO_ENGINE_SUBSTITUTION
#
# 		Default (<= 8.0.4) 	ONLY_FULL_GROUP_BY STRICT_TRANS_TABLES NO_ZERO_IN_DATE
# 									NO_ZERO_DATE ERROR_FOR_DIVISION_BY_ZERO NO_AUTO_CREATE_USER
# 									NO_ENGINE_SUBSTITUTION
# 		
# 		Valid (>= 8.0.11) 	ALLOW_INVALID_DATES
# 									ANSI_QUOTES
# 									ERROR_FOR_DIVISION_BY_ZERO
# 									HIGH_NOT_PRECEDENCE
# 									IGNORE_SPACE
# 									NO_AUTO_VALUE_ON_ZERO
#
# 									NO_BACKSLASH_ESCAPES
# 									NO_DIR_IN_CREATE
# 									NO_ENGINE_SUBSTITUTION
# 									NO_UNSIGNED_SUBTRACTION
# 									NO_ZERO_DATE
#
# 									NO_ZERO_IN_DATE
# 									ONLY_FULL_GROUP_BY
# 									PAD_CHAR_TO_FULL_LENGTH
# 									PIPES_AS_CONCAT
# 									REAL_AS_FLOAT
#
# 									STRICT_ALL_TABLES
# 									STRICT_TRANS_TABLES
# 									TIME_TRUNCATE_FRACTIONAL
#
# 		Valid Values (>= 8.0.1, <= 8.0.4)
# 	
# 									ALLOW_INVALID_DATES
# 									ANSI_QUOTES
# 									ERROR_FOR_DIVISION_BY_ZERO
# 									HIGH_NOT_PRECEDENCE
# 									IGNORE_SPACE
# 									NO_AUTO_CREATE_USER
# 									NO_AUTO_VALUE_ON_ZERO
# 									NO_BACKSLASH_ESCAPES
# 									NO_DIR_IN_CREATE
# 									NO_ENGINE_SUBSTITUTION
# 									NO_FIELD_OPTIONS
# 									NO_KEY_OPTIONS
#
# 									NO_TABLE_OPTIONS
# 									NO_UNSIGNED_SUBTRACTION
# 									NO_ZERO_DATE
# 									NO_ZERO_IN_DATE
# 									ONLY_FULL_GROUP_BY
# 									
# 									PAD_CHAR_TO_FULL_LENGTH
# 									PIPES_AS_CONCAT
# 									REAL_AS_FLOAT
# 									STRICT_ALL_TABLES
# 									STRICT_TRANS_TABLES
# 									TIME_TRUNCATE_FRACTIONAL
#
# 		Valid (8.0) 			ALLOW_INVALID_DATES
# 									ANSI_QUOTES
# 									ERROR_FOR_DIVISION_BY_ZERO
# 									HIGH_NOT_PRECEDENCE
# 									IGNORE_SPACE
# 									NO_AUTO_CREATE_USER
# 									NO_AUTO_VALUE_ON_ZERO
# 									NO_BACKSLASH_ESCAPES
#
# 									NO_DIR_IN_CREATE
# 									NO_ENGINE_SUBSTITUTION
# 									NO_FIELD_OPTIONS
# 									NO_KEY_OPTIONS
# 									NO_TABLE_OPTIONS
#
# 									NO_UNSIGNED_SUBTRACTION
# 									NO_ZERO_DATE
# 									NO_ZERO_IN_DATE
# 									ONLY_FULL_GROUP_BY
# 									PAD_CHAR_TO_FULL_LENGTH
# 									
# 									PIPES_AS_CONCAT
# 									REAL_AS_FLOAT
# 									STRICT_ALL_TABLES
# 									STRICT_TRANS_TABLES
#
# The above refers to setting of the SQL mode.
#
# The startup can configure these during install process, or option files that the server reads at startup.
#
# --sysdate-is-now
#
# 	cmd line format: 			--sysdate-is-now
# 	Type: 						Boolean
# 	Default: 					FALSE
#
# 	SYSDATE() by default returns the time at which it executes, not the time at which the statement in which
# 	it occurs begins executing.
#
# 	This differs from the be´havior of NOW().
#
# 	Causes the SYSDATE() to be an alias for NOW().
#
# --tc-heuristic-recover={COMMIT|ROLLBACK}
#
# 	cmd line format: 			--tc-heuristic-recover=name
# 	Type: 						Enumeration
# 	Default: 					COMMIT
# 	Valid: 						COMMIT, ROLLBACK
#
# 	Type of decision to use in the heuristic recovery process. 
# 	To use this option, two or more storage engines that support XA transactions must be installed.
#
# --temp-pool
#
# 	cmd line format: 			--temp-pool
# 	Deprecated: 				Yes (Removed in 8.0.1)
# 	Type: 						Boolean
# 	Default (other): 			FALSE
# 	Default (Linux): 			TRUE
# 
# 	Removed in 8.0.1
#
# --transaction-isolation=<level>
#
# 	cmd line format: 			--transaction-isolation=name
# 	Sys Var: 					transaction_isolation
# 	Scope: 						Global, Session
# 	Dynamic: 					Yes
# 	SET_VAR Hint: 				No
# 	Type: 						Enumeration
# 	Default: 					REPEATABLE-READ
# 	Valid: 						READ-UNCOMMITTED
# 									READ-COMMITTED
# 									REPEATABLE-READ
# 									SERIALIZABLE
#
# 	Sets the default transaction isolation level. The <level> value can be:
# 	READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ or SERIALIZABLE.
#
# 	The default transaction isolation level can also be set at runtime using the SET TRANSACTION
# 	statement or by setting the transaction_isolation SYS VAR.
#
# --transaction-read-only
#
# 	cmd line format: 			--transaction-read-only
# 	Sys Var: 					transaction_read_only
# 	Scope: 						Global, Session
# 	Dynamic: 					Yes
# 	SET_VAR Hint: 				No
# 	Type: 						Boolean
# 	Default: 					OFF
#
# 	Sets the default transaction access mode. By default, read-only mode is disabled, so the mode is read/write.
#
# 	To set the default transaction access mode at runtime, use the SET TRANSACTION statement or set the
# 	transaction read only SYS VAR.
#
# --tmpdir=<dir name>, -t <dir_name>
#
# 	cmd line format: 			--tmpdir=dir_name
# 	Sys Var: 					tmpdir
# 	Scope: 						Global
# 	Dynamic: 					No
# 	SET_VAR Hint: 				No
# 	Type: 						Dir name
#
# 	Path of the dir to use for creating temp files. Might be useful if your default /tmp dir resides on a platform that is too small to hold temp tables.
# 	Accepts several paths that are used in round-robin typing.
#
# 	Separation char: : on Unix, ; on Windows.
#
# 	If the MySQL server is acting as a replication slave - you should not set --tmpdir to point to a dir on a memory-based file system or to a dir
# 	that is cleared when the server host restarts.
#
# 	A replication slave needs some of its temp files to survive a machine restart so that it can replicate temp tables or LOAD DATA INFILE operations.
# 	If files in the temp file dir are lost when the server restarts, replication fails.
#
# --user={<user name>|<user id>}, -u {<user_name>|<user_id>}
#
# 	cmd line format: 			--user=name
# 	Type: 						String
#
# 	Run the mysqld server as the user having the name <user_name> or the numeric user ID <user_id>.
# 	"User" here is sys acc, not MySQL users in grant tables.
#
# 	Mandatory when starting mysqld as root. Server changes its ID during its startup sequence, causing it to run
# 	as that particular user rather than as root.
#
# 	To avoid a possible security hole where a user adds a --user=root option to my.cnf file,
# 	mysqld only runs with the first --user - attempting several causes a warning.
#
# 	/etc/my.cnf and $MYSQL_HOME/my.cnf run before CMD line. Thus, put another user than root in /etc/my.cnf (found before any other)
#
# --verbose, -v - Use this option with the --help option for detailed help.
#
# --version, -V - Display version info and exit.
#
# The following pertains to Server System Variables and more coverage about their inner workings.
#
# Sys vars can be set at server startup using options on the cmd line or in an option file.
#
# Most of them can be changed dynamically at runtime using the SET statement, which enables you to modify
# operation of the server without having to stop and restart it.
#
# We can also use Sys var values in expressions.
#
# At runtime, setting a global sys var value normally requires the SYSTEM VARIABLES ADMIN or SUPER privilege.
# Setting a session sys var normally reqs no privs - can be done by any user, there are exceptions though.
#
# based on current versioning (option files, compiled in defaults): mysqld --verbose --help
#
# Based on compiled in defaults, ignoring option files: mysqld --no-defaults --verbose --help
# 
# Current values run on server can also be seen with SHOW VARIABLES or the Performance Schema sys var tables.
#
# In terms of options, 1 and 0 act as logical booleans (TRUE and FALSE, respectively)
#
# Relative paths pertain to the data dir - such as /var/mysql/data
#
# activate_all_roles_on_login
#
# 		cmd line format: 		--activate-all-roles-on-login
# 		Introduced: 			8.0.2
# 		Sys Var: 				activate_all_roles_on_login
# 		Scope: 					Global
# 		Dynamic: 				yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Whether to enable automatic activation of all granted roles when users log in to the server:
#
# 			If activate_all_roles_on_login is enabled, the server activates all roles granted to each account at login time.
# 			This takes precedence over default roles specified with SET DEFAULT ROLE.
#
# 			If activate_all_roles_on_login is disabled, the server activates the default roles specified with SET DEFAULT ROLE, if any, at login time.
#
# 			Granted roles include those granted explicitly to the user and those named in the mandatory_roles SYS VAR.
#
# 			activate_all_roles_on_login applies only at login time, and at the beginning of execution for stored programs and views that execute
# 			in definer context.
#
# 			To change the active roles within a session, use SET_ROLE. 
#        To change the active roles for a stored program, the program body should execute SET ROLE.
#
# authentication_windows_log_level
#
# 		cmd line format: 		--authentication-windows-log-level
# 		Introduced: 			8.0.11
# 		Sys var: 				authentication_windows_log_level
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				2
# 		Min value: 				0
# 		Max value: 				4
#
# 		Available only if the authentication_windows Windows auth plugin is enabled and debugging code is enabled.
#
# 		Sets the log level for Windows auth Plugin:
#
# 		0 		No logging
# 		1 		Log only error messages
# 		2 		Log level 1 messages and warning messages
# 		3 		Log level 2 messages and information notes
# 		4 		log level 3 messages and debug messages
#
# authentication_windows_use_principal_name
# 		
# 		cmd line format: 		--authentication-windows-use-principal-name
# 		Introduced: 			8.0.11
# 		Sys Var: 				authentication_windows_use_principal_name
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				ON
#
# 		Is available only if the authentication_windows Windows auth plugin is enabled.
#
# 		A client that authenticates using the InitSecurityContext() function should provide a string identifying
# 		the service to which it connects.
#
# 		MySQL uses the principal name (UPN) of the account under which the server is running. 
# 		The UPN has the form <user_id@computer_name> and need not be registered anywhere to be used.
#
# 		The UPN is sent by the server at the beginning of authentication handshake.
#
# 		This variable controls whether the server sends the UPN in the initial challenge.
# 		By default, the variable is enabled.
#
# 		For security reasons, it can be disabled to avoid sending the server's account name to a client in clear text.
# 		If the variable is disabled, the server always sends a 0x00 byte in the first challenge, the client does not
# 		specify <targetName>, and as a result - NTLM authentication is used.
#
# 		If the server fails to obtain its UPN (which will happen primarily in environments that do not support Kerberos authentication),
# 		the UPN is not sent by the server and NTLM authentication is used.
#
# autocommit
#
# 		cmd line format: 	--autocommit[=#]
# 		Sys Var: 			autocommit
# 		Scope: 				Global, Session
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				Boolean
# 		Default: 			ON
#
# 		The autocommit mode. If set to 1, all changes to a table take effect immediately. 
# 		If set to 0 - you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
#
# 		If autocommit is 0 and you change it to 1, MySQL performs an automatic COMMIT of any open transaction.
# 		Another way to begin a transaction is to use a START TRANSACTION or BEGIN statement.
#
# 		By default, client connections begin with autocommit set to 1. To cause clients to begin with a default of 0,
# 		set the global autocommit value by starting the server with the --autocommit=0 option.
#
# 		Option file usage:
#
# 		[mysqld]
# 		autocommit=0
#
# automatic_sp_privileges
#
# 		Sys Var: 			automatic_sp_privileges
# 		Scope: 				Global
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				Boolean
# 		Default: 			TRUE
#
# 		When set to 1 (Default), the server automatically grants the EXECUTE and ALTER ROUTINE privs to the
# 		creator of a stored routine - if the user cannot already execute and alter or drop the routine.
#
# 		(The ALTER ROUTINE priv is required to drop the routine). The server also automatically drops those 
# 		privs from the creator when the routine is dropped. If automatic_sp_privileges is 0, the server does
# 		not automatically add or drop these privs.
#
# 		The creator of a routine is the account used to execute the CREATE statement for it.
# 		This might not be the same as the account named as the DEFINER in the routine def.
#
# auto_generate_certs
#
# 		cmd line format: 		--auto-generate-certs[={OFF|ON}]
# 		System Var: 			auto_generate_certs
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				ON
#
# 		This variable is available if the server was compiled using OpenSSL. Controls whether 
# 		the server autogenerates SSL key and certificate files in the data dir, if they do not already exist.
#
# 		At startup, the server automatically generates server-side and client-side SSL cert and key files in the data dir
# 		if the auto_generate_certs SYS Var is enabled, no SSL options other than --ssl is on and the server-side SSL files are 
# 		missing from the data dir.
#
# 		These files enable secure client connections using SSL.
#
# 		The sha256_password_auto_generate_rsa_keys and caching_sha2_password_auto_generate_rsa_keys SYS vars are related,
# 		but control autogeneration of RSA key-pair files for secure PWs using RSA over unencrypted connections.
#
# avoid_temporal_upgrade
#
# 		cmd line format: 		--avoid-temporal-upgrade={OFF|ON}
# 		Deprecated: 			Yes
# 		Sys var. 				avoid_temporal_upgrade
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		This variable controls whether ALTER TABLE implicitly upgrades temporal columns found to be in pre-5.6.4 format
# 		(TIME, DATETIME and TIMESTAMP columns without support for fractional seconds precision)
#
# 		Upgrading such columns require a table rebuild, which prevents any use of fast alternations that might otherwise
# 		apply to the operation to be performed.
#
# 		This variable is disabled by default - Enabling it causes ALTER TABLE not to rebuild temporal columns and thereby be able to
# 		take advantage of fast alterations.
#
# 		DEPRECATED, will be removed.
#
# back log
#
# 		Sys var: 				back_log
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				-1 (autosizing)
# 		min: 						1
# 		max: 						65535
#
#		Number of oustanding connection requests MySQL can have.
# 		This comes into play when the main MySQL thread gets very many connection requests in a very short time.
# 		It takes a small gap of time for the main thread to then check the connection and start a new thread.
#
# 		The back_log indicates how many requests can be stacked during this short time before MySQL momentarily stops answering new requests.
#
# 		Only increase this if you expect a large number of connections in a short amount of time.
#
# 		Basically the size of the listen queue for incoming TCP/IP connections.
#
# 		OS has it's own limitations. Cannot be set higher than this limit.
#
# 		defaults to max connections, adjusts max permitted number of connections.
#
# 		the Unix call of listen() system call has more details.
#
# basedir
#
# 		cmd line format: 		--basedir=dir_name
# 		Sys Var: 				basedir
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Dir name
# 		Default (8.0.2 >=) 	parent of mysqld install dir
# 		default (8.0.1 <=) 	configuration-dependant default
#
# 		Path of the MySQL install base dir
#
# big_tables
#
# 		Cmd line format: 		--big-tables
# 		Sys Var: 				big_tables
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		If set to 1 - all temp tables are stored on disk rather than in memory.
# 		This is a little slower, but the error "The table <tbl_name> is full" does not occur for SELECT operations that require
# 		a large temp table.
#
# 		Default value for a new connection is 0 (use in-memory temp tables).
# 		Normally, you should never need to set this Var.
#
# 		When in-memory internal temporary tables are managed by the TempTable storage engine 
# 		(the default), and max amount of memory that can be occupied by the TempTable storage engine is exceeded,
# 		the TempTable storage engine starts storing data to temp files on Disk.
#
# 		When in-memory temporary tables are managed by the MEMORY storage engine,
# 		in-memory tables are automatically converted to disk-based tables as required.
#
# bind_address
#
# 		cmd line format: 		--bind-address=addr
# 		Sys Var: 				bind_address
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Defaults: 				*
#
# 		Value of the --bind-address option
#
# block_encryption_mode
#
# 		cmd line format: 		--block-encryption-mode=#
# 		Sys Var: 				block_encryption_mode
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				aes-128-ecb
#
# 		This controls the block encryption mode for block-based algorithms such as AES.
# 		It affects encryption for AES_ENCRYPT() and AES_DECRYPT().
#
# 		block_encryption_mode takes a value in aes-<keylen>-<mode> format, where <keylen> is the key length
# 		in bits and <mode> is the encryption mode.
#
# 		The value is not case-sensitive. Permitted <keylen> values are 128, 192 and 256.
#
# 		Permitted encryption depend on whether MySQL was compiled using OpenSSL or wolfSSL:
#
# 			For OpenSSL, permitted <mode> values are: ECB, CBC, CFB1, CFB8, CFB128, OFB
#
# 			For wolfSSL, permitted <mode> values are: ECB, CBC
#
# 		For example - the following is 256 bits key length with AES encryption with the CBC mode:
#
# 			SET block_encryption_mode = 'aes-256-cbc';
#
# 		An error occurs for attempts to set block_encryption_mode to a value containing an unsupported key length
# 		or a mode that the SSL lib does not support.
#
# bulk_insert_buffer_size
#
# 		cmd line format: 		--bulk-insert-buffer-size=#
# 		Sys Var: 				bulk_insert_buffer_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				8388608
# 		Min value: 				0
# 		Max value (64-bit) 	a lot
# 		Max value (32-bit) 	less
#
# 		MyISAM uses a special tree-like cache to make bulk inserts faster for INSERT ... SELECT, INSERT ... VALUES (...),
# 		(...), ... and LOAD DATA INFILE when adding data to nonempty tables.
#
# 		This variable limits the size of the cache tree in bytes per thread. 
# 		Setting it to 0 disables this optimization. Defaults to 8MB.
#
# 		(MySQL 8.0.14 >=) : Setting the session value of this SYS var is a restricted operation.
# 								  The session user must have privs sufficient to set restricted session vars.
#
# caching_sha2_password_auto_generate_rsa_keys
#
# 		cmd line format: 		--caching-sha2-password-auto-generate-rsa-keys[={OFF|ON}]
# 		Introduced: 			8.0.4
# 		Sys Var: 				caching_sha2_password_auto_generate_rsa_keys
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				ON
#
# 		Available if the server was compiled using OpenSSL. The server uses it to determine whether to autogenerate
# 		RSA private/public key-pair files in the data dir if they do not already exist.
#
# 		At startup, the server automatically generates RSA private/public key-pair files in the data dir if all of the following is true:
#
# 			The sha256_password_auto_generate_rsa_keys or caching_sha2_password_auto_generate_rsa_keys sys var is Enabled
#
# 			No RSA options are specified
#
# 			No RSA files are in the data dir.
#
# 			The key-pair files enable secure password exchange using RSA over unencrypted connections for accounts authenticated
# 			by the sha256_password or caching_sha2_password plugin
#
# 			auto_generate_certs SYS var is related but controls autogeneration of SSL cert and key files needed for Secure connections using SSL.
#
# caching_sha2_password_private_key_path
#
# 		cmd line format: 			--caching-sha2-password-private-key-path=file_name
# 		introduced: 				8.0.3
# 		Sys Var: 					caching_sha2_password_private_key_path
# 		Scope: 						Global
# 		Dynamic: 					No
# 		SET_VAR Hint: 				No
# 		Type: 						File Name
# 		Default: 					private_key.pem
#
# 		This variable specifies the path name of the RSA private key file for the caching_sha2_password auth plugin.
# 		If relative, it's relative to server data dir. File must be in PEM format.
#
# 		Because a private key is stored within - access should be restricted to MySQL.
#
# caching_sha2_password_public_key_path
#
# 		Cmd line format: 			--caching-sha2-password-public-key-path=file_name
# 		Introduced: 				8.0.3
# 		Sys Var: 					caching_sha2_password_public_key_path
# 		Scope: 						Global
# 		Dynamic: 					No
# 		SET_VAR Hint: 				No
# 		Type: 						File name
# 		Default: 					public_key.pem
#
# 		Same as above, except for a public key.
#
# character_set_client
#
# 		Sys var: 					character_set_client
# 		Scope: 						Global, Session
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						String
# 		Default (>= 8.0.1) 		utf8mb4
# 		Default (8.0.0) 			utf8
#
# 		Char set for statements that arrive from the client.
#
# 		The session value of this var is set using the char set requested by the client when the client
# 		connects to the server.
#
# 		Many clients support a --default-character-set option to enable this char set to be specified explicitly.
#
# 		The global value of the variable is used to set the session value in cases when the client-requested value is unknown
# 		or not available - or the server is configured to ignore client requests
#
# 		examples:
#
# 		The client requests a char set not known to the server. For example, a japanese-enabled client requests sjis when connecting
# 		to a server not configured with sjis support.
#
# 		The client is from a version of MySQL older than MySQL 4.1 - i.e, does not require a char set
#
# 		mysqld started with the --skip-character-set-client-handshake option - ignores client char set configs.
#
# 		Some char sets are invalid for client char sets. Trying to use them as the character_set_client value produces an error.
#
# character_set_connection
#
# 		Sys var: 				character_set_connection
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (>= 8.0.1) 	utf8mb4
# 		Default (8.0.0) 		utf8
# 
# 		The char set used for literals specified without a char set introducer and for number-to-string conversion.
#
# character_set_database
#
# 		Sys var: 				character_set_database
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (>= 8.0.1) 	utf8mb4
# 		Default (8.0.0) 		latin1
# 		Footnote: 				Dynamic - but server should be designating this value by itself.
# 		
# 		The char set used by the default DB. The server sets this var whenever the default DB changes.
# 		If there is no default DB, the var has the same value as character_set_server.
#
# 		(8.0.14 >=) setting the session value of this system variable is a restricted operation.
# 		The session user must have privileges sufficient to set restricted session variables.
#
# 		The global character_set_database and collation_database SYS vars are deprecated, will be removed.
#
# 		Since they are deprecated - attempting to assign them causes a warning.
#
# 		The session vars is read only in the future.
#
# 		Can still access for reading purposes in relation to DB charset and collation.
#
# character_set_filesystem
#
# 		cmd line format: 			--character-set-filesystem=name
# 		Sys var: 					character_set_filesystem
# 		Scope: 						Global, Session
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						String
# 		Default: 					binary
#
# 		The file system char set. Used to interpret string literals that refers to file names, such as 
# 		in the LOAD_DATA_INFILE and SELECT_..._INTO_OUTFILE statements and the LOAD_FILE() function.
#
# 		Such file names are converted from character_set_client to character_set_filesystem before the file opening
# 		attempt occurs.
#
# 		Default is binary, which means no conversion occurs. 
# 		For systems on which multibyte file names are permitted, a different value may be used.
#
# 		For example, if using UTF-8 in the system - we can set this to 'utf8mb4'
#
# 		(MySQL 8.0.14)	- This is a restricted operation - session user must have privs sufficient to set restricted session vars.
#
# character_set_results
#
# 		Sys Var: 				character_set_results
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (>= 8.0.1) 	utf8mb4
# 		Default (8.0.0) 		utf8
#
# 		The char set used for returning query results to the client.
# 		This includes result data such as column values, result metadata such as column names and error messages.
#
# character_set_server
#
# 		cmd line format: 		--character-set-server
# 		Sys Var: 				character_set_server
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (>= 8.0.1) 	utf8mb4
# 		Default (8.0.0) 		latin1
#
# 		The servers default char set
#
# character_set_system
#
# 		Sys var: 				character_set_system
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				utf8
#
# 		The char set used by the server for storing identifiers. Value is always utf8.
#
# character_sets_dir
#
# 		cmd line format: 		--character-sets-dir=dir_name
# 		Sys Var: 				character_sets_dir
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Dir name
#
# 		The dir where char sets are installed.
#
# check_proxy_users
#
# 		cmd line format: 		--check-proxy-users=[={OFF|ON}]
# 		Sys var: 				check_proxy_users
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Some authentication plugins implement proxy user mapping for themselves (for example, the PAM and Windows auth plugins)
# 		Other authentication plugins do not support proxy users by default.
#
# 		Of these, some can request that the MySQL server itself map proxy users according to granted proxy privs:
#
# 		mysql_native_password_sha256_password
#
# 		If the check_proxy_users SYS Var is enabled, the server performs proxy user mapping for any authentication plugins that make
# 		such a request.
#
# 		However, it may also be necessary to enable plugin-specific system variables to take advantage of server proxy user mapping support:
#
# 			For the mysql_native_password plugin, enable mysql_native_password_proxy_users
#
# 			For the sha256_password plugin, enable sha256_password_proxy_users
#
# collation_connection
#
# 		Sys var: 				collation_connection
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
#
# 		The collation of the connection char set. 
#
# 		collation_connection is important for comparisons of literal strings.
#
# 		For comparisons of strings with column values, collation_connection does not matter because columns
# 		have their own collation, which has a higher collation precedence.
#
# collation_database
#
# 		Sys var: 				collation_database
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (>= 8.0.1) 	utf8mb4_0900_ai_ci
# 		Default (8.0.0) 		latin1_swedish_ci
# 		Footnote: 				Dynamic - leave interaction to server.
#
# 		Collation used by the default DB. The server sets this var whenever the default DB changes.
#
# 		If there is no default DB, the var has the same value as collation server.
#
# 		(MySQL 8.0.14 >=) Setting the session value of this system variable is a restricted operation.
# 								The session user must have privs sufficient to set restricted session vars.
#
# 		The global character_set_database and collation_database SYS var is deprecated and assignment causes a warning.
# 		
# 		Read only in the future.
#
# collation_server
#
# 		cmd line format: 		--collation-server
# 		Sys Var: 				collation_server
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (>= 8.0.1) 	utf8mb4_0900_ai_ci
# 		Default (8.0.0) 		latin1_swedish_ci
#
# 		Servers default collation
#
# completion_type
#
# 		cmd line format: 		--completion-type=#
# 		Sys Var: 				completion_type
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Default: 				NO_CHAIN
# 		Valid values: 			NO_CHAIN, CHAIN, RELEASE, 0, 1, 2
#
# 		The transaction completion type. This variable can take the values shown in the following:
#
# 		Name 						DESC
# 	
# 		NO_CHAIN/0  			COMMIT and ROLLBACK are unaffected. Default value.
#
# 		CHAIN/1 					COMMIT and ROLLBACK are equivalent to COMMIT AND CHAIN and ROLLBACK AND CHAIN respectively.
# 									(A new transaction starts immediately with the same isolation level as the just-terminated transaction)
#
# 		RELEASE/2 				COMMIT and ROLLBACK are equivalent to COMMIT RELEASE and ROLLBACK RELEASE, respectively.
# 									(The server disconnects after terminating the transaction)
#
# 		completion_type affects transactions that begin with START_TRANSACTION or BEGIN and end with COMMIT or ROLLBACK.
#
# 		Does not apply to implicit commits. Does not apply to XA_COMMIT, XA_ROLLBACK or autocommit=1.
#
# concurrent_insert
#
# 		cmd line format: 		--concurrent-insert[=#]
# 		Sys Var: 				concurrent_insert
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Default: 				AUTO
# 		VALID: 					NEVER, AUTO, ALWAYS, 0, 1, 2
#
# 		If AUTO - MySQL permits INSERT and SELECT statements to run concurrently for MyISAM tables that have no free blocks in
# 		the middle of the data file.
#
# 		If you start mysqld with --skip-new, this variable is set to NEVER.
#
# 		Values:
#
# 		Name 				DESC
# 		
# 		NEVER/0 			Disables concurrent inserts
#
# 		AUTO/1 			Enables concurrent insert for MyISAM tables that do not have holes.
#
# 		ALWAYS/2 		Enables concurrent inserts for all MyISAM tables - even those that have holes.
# 							For a table with a hole - new rows are inserted at the end of the table if it is in
# 							use by another thread. 
#
# 							Otherwise - MySQL aquires a normal write lock and inserts the row into the hole.
#
# connect_timeout
#
# 		cmd line format: 		--connect-timeout=#
# 		Sys var: 				connect_timeout
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				10
# 		Min: 						2
# 		Max: 						31536000
#
# 		Number of seconds mysqld waits for a connection packet before responding with Bad handshake.
# 		Defaults 10 seconds.
#
# 		Increasing the connect_timeout value might help if clients frequently encounters errors of the form:
# 		
# 		Lost connection to MySQL server at 'XXX', system error: <errno>
#
# core_file
#
# 		Sys var: 				core_file
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Whether to write a core file if the server crashes. Is set by the --core-file option.
#
# 		Under some circumstances, disabling innodb_buffer_pool_in_core_file can cause core_file to be disabled.
#
# cte_max_recursion_depth
#
# 		cmd line format: 		--cte-max-recursion-depth=#
# 		Introduced: 			8.0.3
# 		Sys Var: 				cte_max_recursion_depth
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				1000
# 		Min: 						0
# 		Max: 						<a lot>
#
# 		The common table expression (CTE) maxium recursion depth.
# 		The server terminates execution of any CTE that recurses more levels than the values of this var.
#
# datadir
#
# 		cmd line format: 		--datadir=dir_name
# 		Sys Var: 				datadir
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Dir name
#
# 		The path to the MySQL server data dir. Relative paths are resolved with respect to the CWD.
# 		If the server will be started automatically (Where you can't assume the CWD) - specify datadir as absolute
#
# debug
# 		
# 		cmd line format: 		--debug[=debug_options]
# 		Sys Var: 				debug
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default (Windows) 	d:t:i:O, \mysqld.trace
# 		Default (Unix) 		d:t:i:o, /tmp/mysqld.trace
#
# 		Indicates the current debugging settings. 
# 		Available only for servers built with debugging support.
#
# 		Initial value comes from the value of instances of the --debug option given at server startup.
# 		Global and Session values may be set at runtime.
#
# 		Setting the session value of this Sys var is a restricted operation.
# 		Must have permission to set restricted session vars.
#
# 		Example of modifying debugging status:
#
# 		SET debug = 'T'; #base declaration
# 		SELECT @@debug; #Select the attribute
#
# 		@@debug
# 		
# 		T
#
# 		SET debug = '+P'; #Add P as part of operations
# 		SELECT @@debug;
# 
# 		@@debug
#
# 		P:T
#
# 		SET debug = '-P'; #Remove P as part of operations
# 		SELECT @@debug;
#
# 		T
#
# debug_sync
#
# 		Sys var: 		debug_sync
# 		Scope: 			Session
# 		Dynamic: 		Yes
#	 	SET_VAR Hint: 	No
# 		Type: 			String
#
# 		The variable is the user interface to the Debug Sync facility.
# 		Use of Debug Sync requires that MySQL be configured with the -DENABLE_DEBUG_SYNC=1 CMake option.
#
# 		If Debug Sync is not compiled in, this sys var is not available.
#
# 		The global var value is read only and indicates whether the facility is enabled.
# 		By default, Debug Sync is disabled and the value of debug_sync is OFF.
#
# 		If the server is started with --debug-sync-timeout=<N>, where <N> is a timeout value greater than 0,
# 		Debug Sync is enabled and the value of debug_sync is ON - <current signal> (the signal name)
#
# 		<N> becomes the default timeout for individual synchronization points.
#
# 		The session value can be read by any user and will have the same value as the global variable.
# 		The session value can be set to control synchronization points.
#
# 		Setting the session value of this Sys Var is a restricted operation.
#
# 		Covered more in terms of MySQL internals: Test Synchronization
#
# default_authentication_plugin
#
# 		cmd line format: 				--default-authentication_plugin=plugin_name
# 		Sys Var: 						default_authentication_plugin
# 		Scope: 							Global
# 		Dynamic: 						No
# 		SET_VAR Hint: 					No
# 		Type: 							Enumeration
#
# 		Default (>= 8.0.4) 			caching_sha2_password
#
# 		Default (<= 8.0.3) 			mysql_native_password
#
# 		Valid (>= 8.0.3) 				mysql_native_password
# 											sha256_password
# 											caching_sha2_password
#
# 		Valid (<= 8.0.2) 				mysql_native_password
# 											sha256_password
#
# 		The default auth plugin. Permitted values are:
#
# 			mysql_native_password: Use MySQL native PWs.
# 
# 			sha256_password: Use SHA-256 PWs.
#
# 			caching_sha2_password: Use SHA-256 passwords. (Default auth plugin rather than mysql_native_password)
#
# 		This value affects these aspects of server operations:
#
# 			Determines which authentication plugin the server assigns to new accounts created by CREATE USER and GRANT statements that 
# 			do not explicitly specify an authentication plugin.
#
# 			For an account created with the following statement, the server associates the account with the default auth plugin and assigns
# 			the account the given PW - hashed as required by that plugin:
#
# 				CREATE USER ... IDENTIFIED BY 'cleartext password';
#
# default_collation_for_utf8mb4
#
# 		Introduced: 		8.0.11
# 		Sys Var: 			default_collation_for_utf8mb4
# 		Scope: 				Global, Session
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				Enumeration
# 		Valid: 				utf8mb4_0900_ai_ci 
# 								utf8mb4_general_ci
#
# 		For interal use by replication. This SYS VAR is set to the default collation for the utf8mb4 char set.
#
# 		The value of the Var is replicated from a master to a slave so that the slave can correctly process data
# 		originating from a master with a different default collation for utf8mb4.
#
# 		Primarily intended to support replication from MySQL 5.7 or older master servers to MySQL 8.0 slave server,
# 		or group replication with a MySQL 5.7 primary node and one or more MySQL 8.0 secondaries.
#
# 		The default collation for utf8mb4 in MySQL 5.7 is utf8mb4_general_ci, but utf8mb4_0900_ai_ci in MySQL 8.0
#
# 		If the slave does not recieve a value for the Var, it assumes the master is from an earlier release and sets
# 		the value to the previous default collation utf8mb4_general_ci.
#
# 		Is a restircted operation, requires privs to set.
#
# 		The default utf8mb4 collation is used in the following statements:
#
# 			SHOW COLLATION and SHOW CHARACTER SET.
#
# 			CREATE TABLE and ALTER TABLE having a CHARACTER SET utf8mb4 clause without a COLLATION clause, either for 
# 			the table char set or for a column char set.
#
# 			CREATE DATABASE and ALTER DATABASE having a CHARACTER SET utf8mb4 clause without a COLLATION clause.
#
# 			Any statement containing a string literal of the form _utf8mb4'<some text>' without a COLLATION clause.
#
# default_password_lifetime
#
# 		cmd line format: 		--default-password-lifetime=#
# 		Sys Var: 				default_password_lifetime
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Min value: 				0
# 		Max: 						65535
#
# 		Defines the global automatic password expiration policy. The default_password_lifetime value is 0,
# 		which disables automatic password expiration.
#
# 		If the value of default_password_lifetime is a positive int <N>, it indicates the permitted password lifetime; PWs must be changed every <N> days.
#
# 		The global PW expiration policy can be overwritten with individual accounts using the PW expiration option of CREATE USER and ALTER USER statements.
#
# default_storage_engine
#
# 		cmd line format: 		--default-storage-engine=name
# 		Sys var: 				default_storage_engine
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Default: 				InnoDB
#
# 		The default storage engine. This variable sets the storage engine for permanent tables only. To set the storage engine
# 		for TEMPORARY tables, set the default_tmp_storage_engine SYS var.
#
# 		To see which storage engines are available and on - we can use SHOW ENGINES or query the INFORMATION_SCHEMA ENGINES table.
#
# 		If you disable the default storage engine at server startup, you must set the default engine for both permanent and TEMPORARY
# 		tables to a different engine or the server won't start.
#
# default_tmp_storage_engine
#
# 		Cmd line format: 		--default-tmp-storage-engine=name
# 		Sys Var: 				default_tmp_storage_engine
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Enumerator
# 		Default: 				InnoDB
#
# 		The default storage engine for TEMPORARY tables (created with CREATE TEMPORARY TABLE)
# 		To set the storage engine for permanent tables - set the default_storage_Engine SYS VAR.
#
# 		If you disable the default storage engine at server startup, you must set the default engine for both
# 		permanent and TEMPORARY tables to a different engine or the server won't start.
#
# default_week_format
#
# 		cmd line format: 		--default-week-format=#
# 		Sys Var: 				default_week_format
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Min: 						0
# 		Max: 						7
#
# 		Default mode value to use for the WEEK() function
#
# delay_key_write
#
# 		cmd line format: 		--delay-key-write[=name]
# 		Sys Var: 				delay_key_write
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Default: 				ON
# 		Valid: 					ON, OFF, ALL
#
# 		This option applies only to MyISAM tables. 
#     It can have one of the following values to affect handling of the DELAY_KEY_WRITE table option that can be used in CREATE TABLE statements.
#
# 		OFF - 	DELAY_KEY_WRITE is ignored.
# 		ON  - 	MySQL honors any DELAY_KEY_WRITE option specified in CREATE_TABLE statements. DEFAULT.
# 		ALL - 	All new opened tables are treated as if they were created with the DELAY_KEY_WRITE option on.
#
# 		If this option is on, the key buffer is not flushed for the table on every index update - but only when the table is closed.
# 		This speeds up writes on keys a lot - but if you use this feature, you should add automatic checking of all MyISAM tables by
# 		starting with --myisam-recover-options , example:
#
# 		--myisam-recover-options=BACKUP, FORCE
#
# 		If external locking is on with --external-locking, there is no protection against index corruption for tables that use
# 		delayed key writes.
#
# delayed_insert_limit
#
# 		cmd line format: 			--delayed-insert-limit=#
# 		Deprecated: 				Yes
# 		Sys var: 					delayed_insert_limit
# 		Scope: 						Global
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						Integer
# 		Default: 					100
# 		Min: 							1
# 		Max (64-bit) 				<a lot>
# 		Max (32-bit) 				<less>
#
# 		This Sys var is deprecated (DELAYED inserts are not supported), will be removed.
#
# delayed_insert_timeout
#
# 		cmd line format: 			--delayed-insert-timeout=#
# 		Deprecated: 				Yes
# 		Sys Var: 					delayed_insert_timeout
# 		Scope: 						Global
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						Integer
# 		Default: 					300
#
# 		Deprecated, same as above.
#
# delayed_queue_size
#
# 		cmd line format: 			--delayed-queue-size=#
# 		Deprecated: 				Yes
# 		Sys Var: 					delayed_queue_size
# 		Scope: 						Global
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						Integer
# 		Default: 					1000
# 		Min: 							1
# 		Max (64-bit) 				<a lot>
# 		Max (32-bit) 				<less>
#
# 		Deprecated
#
# disabled_storage_engines
#
# 		cmd line format: 			--disabled-storage-engines=engine[, engine]...
# 		Sys Var: 					disabled_storage_engines
# 		Scope: 						Global
# 		Dynamic: 					No
# 		SET_VAR Hint: 				No
# 		Type: 						String
# 		Default: 					empty string
#
# 		indicates which storage engines cannot be used to create tables or tablespaces.
# 		For example,to prevent new MyISAM or FEDERATED tables from being created - start with the lines as follows:
#
# 			[mysqld]
# 			disabled_storage_engines="MyISAM,FEDERATED"
#
# 		By default - disabled_storage_engines is empty (no engines disabled) - but can be defined with a comma-listed list.
# 
# 		Values included cause said values to not be able to be used to create tables or tablespaces with CREATE_TABLE or CREATE_TABLESPACE,
# 		and cannot be used with ALTER_TABLE_..._ENGINE or ALTER_TABLESPACE_..._ENGINE to change existing storage engines of tables or tablespaces.
#
# 		Doing so causes a ER_DISABLED_STORAGE_ENGINE error
#
# 		disabled_storage_engines does not restrict other DDL statements for existing tables, such as CREATE_INDEX,
# 		TRUNCATE_TABLE, ANALYZE_TABLE, DROP_TABLE or DROP_TABLESPACE.
#
# 		This permits a smooth transition so that existing tables or tablespaces that use a disabled engine can be migrated to a 
# 		permitted engine by means such as ALTER_TABLE_..._ENGINE_<permitted_engine>
#
# 		It is permitted to set the default_storage_engine or default_tmp_storage_engine SYS var to a storage engine that is disabled.
#
# 		However, it does make the database crash upon attempting to be utilized if used in tandem with this stature. (Can be used for debugging)
#
# 		disabled_storage_engines is disabled and has no effect if the server is started with any of these options:
#
# 			--initialize, --initialize-insecure, --skip-grant-tables
#
# 		Setting this can cause a error with mysqld_upgrade
#
# disconnect_on_expired_password
#
# 		Cmd line format: 		--disconnect-on-expired-password[=#]
# 		Sys Var: 				disconnect_on_expired_password
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				ON
#
# 		This var controls how the server handles clients with expired passwords:
#
# 			If the client indicates that it can handle expires passwords, the value of disconnect_on_expired_password
# 			is irrelevant. The server permits the client to connect but puts it in sandbox mode.
#
# 			If the client does not indicate that it can handle expires passwords, it handles it according to disconnect_on_expired_password:
#
# 				Enabled -> Disconnects the client
#
# 				Disabled -> permits, but keeps in Sandbox mode
#
# div_precision_increment
#
# 		cmd line format: 			--div-precision-increment=#
# 		Sys Var: 					div_precision_increment
# 		Scope: 						Global, Session
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				Yes
# 		Type: 						Integer
# 		Default: 					4
# 		Min: 							0
# 		Max: 							30
#
# 		This variable indicates the number of digits by which to increase the scale of the result of division operations performed with
# 		the / operator.
#
# dragnet.log_error_filter_rules
#
# 		cmd line format: 			--dragnet.log-error-filter-rules
# 		Introduced: 				8.0.4
# 		Sys Var: 					dragnet.log_error_filter_rules
# 		Scope: 						Global
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						String
# 		Default: 					IF prio>=INFORMATION THEN drop. IF EXISTS source_line THEN unset source_line.
#
# 		The filter rules that control operation of the log_filter_dragnet error log filter component.
# 		If log_filter_dragnet is not installed, dragnet.log_error_filter_rules is N/A.
#
# 		If log_filter_dragnet is installed but off, dragnet.log_error_filter_rules have no effect.
#
# 		(MySQL 8.0.12 >=) - the dragnet.Status variable can be consulted to determine the result of the most
# 		recent assignment to dragnet.log_error_filter_rules
#
# 		(MySQL 8.0.12 <)  - the dragnet.Status assignment upon success, spawned a warning:
#
# 			mysql> SET GLOBAL dragnet.log_error_filter_rules = 'IF prio <> 0 THEN unset prio.';
# 			Query OK, 0 rows affected, 1 warning (0.00 sec)
#
# 			mysql> SHOW WARNINGS\G
# 			******************************** 1. row *******************************************
# 			Level: Note
# 			Code:  4569
# 			Message: filter configuration accepted:
# 						SET @@global.dragnet.log_error_filter_rules='IF prio!=ERROR THEN unset prio.';
#
# 		The value displayed by SHOW_WARNINGS indicates the "decompiled" canonical rep. after the rule set has been
# 		successfully parsed and compiled into internal form.
#
# 		Semantically, this canonical form is identical to the value assigned to dragnet.log_error_filter_rules,
# 		but there may be some differences between the assigned and canonical values, as illustrated:
#
# 			<> goes to !=
#
# 			Numeric prio of 0 is changed to SEVERITY level ERROR
#
# 			Optional spaces are gone
#
# end_markers_in_json
#
# 		Sys var: 		end_markers_in_json
# 		Scope: 			Global, Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	Yes
# 		Type: 			Boolean
# 		Default: 		OFF
#
# 		Whether optimizer JSON output should add end markers.
#
# eq_range_index_dive_limit
#
# 		Sys var: 		eq_range_index_dive_limit
# 		Scope: 			Global, Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	Yes
# 		Type: 			Integer
# 		Default: 		200
# 		Min: 				0
# 		Max: 				<a lot>
#
# 		This variable indicates the number of equality ranges in an equality comparison condition when the optimizer
# 		should switch from using index drives to index statistics in estimating the number of qualifying rows.
#
# 		It applies to evaluation of expressions that have either of these equivalent forms, where the optimizer uses
# 		a nonunique index to look up <col_name> values:
#
# 			col_name IN(val1, ..., valN)
# 			col_name = val1 OR ... OR col_name = valN
#
# 		In both cases, the expression contains N equality ranges.
#
# 		The optimizer can make row estimates using index dives or index statistics.
#
# 		If eq_range_index_dive_limit is greater than 0, the optimizer uses existing index
# 		statistics instead of index dives if there are eq_range_index_dive_limit or more equality ranges.
#
# 		Thus, to permit use of index dives for up to <N> equality ranges, set eq_range_index_dive_limit to N + 1.
# 		To disable use of index statistics and always use index dives regardless of <N>, set this to 0.
#
# 		To update the table index stats for best estimates, use ANALYZE_TABLE.
#
# error_count
#
# 		Number of errors that resulted from the last statement that generated messages. is Read only.
#
# event_scheduler
#
# 		cmd line format: 		--event-scheduler[=value]
# 		Sys Var: 				event_scheduler
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Default (>= 8.0.3) 	ON
# 		Default (<= 8.0.2) 	OFF
# 		Valid: 					ON, OFF, DISABLED
#
# 		This variable indicates the status of the Event Scheduler.
#
# explicit_defaults_for_timestamp
#
# 		cmd line format: 		--explicit-defaults-for-timestamp=#
# 		Deprecated: 			Yes
# 		Sys Var: 				explicit_defaults_for_timestamp
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default (>= 8.0.2) 	ON
# 		Default (<= 8.0.1) 	OFF
#
# 		This sys var determines whether the server enables certain nonstandard behaviors for default values and NULL value
# 		handling in TIMESTAMP columns.
#
# 		By default, explicit_defaults_for_timestamp is enabled, which disables the nonstandard behaviors.
# 		Disabling explicit_defaults_for_timestamp results in a warning.
#
# 		Setting this in scope of session is a restricted operation. Requires privs to allow for setting.
#
# 		If explicit_defaults_for_timestamp is disabled - the server enables the nonstandard behaviors and handles TIMESTAMP cols as follows:
#
# 			TIMESTAMP columns not explicitly declared with the NULL attribute are automatically declared with the NOT NULL attribute.
# 			Assigning such a column value of NULL is permitted and sets the column to the current timestamp.
#
# 			The first TIMESTAMP column in a table, if not explicitly declared with the NULL attribute or an explicit DEFAULT 
# 			or ON UPDATE attribute, is automatically declared with the DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP attributes.
#
# 			TIMESTAMP columns following the first one, if not explicitly declared with the NULL attribute or an explicit DEFAULT,
# 			are automatically declared as DEFAULT '0000-00-00 00:00:00'. For inserted rows that specify no explicit value for such
# 			a column, it defaults to the above with no warnings.
#
# 			Strict SQL mode or the NO ZERO DATE SQL mode being on - can cause invalidation of defaulting to 0000-00-00 00:00:00 may be invalid.
# 			Be aware that the TRADITIONAL SQL mode includes strict mode and NO ZERO DATE.
#
# 		The above is deprecated and will be removed.
#
# 		If explicit_defaults_for_timestamp is on, the server disables the above and handles instead with:
#
# 			It is not possible to assign a TIMESTAMP column a value of NULL to set it to the current timestamp.
# 			To do such, you must use NOW() or CURRENT_TIMESTAMP.
#
# 			TIMESTAMP columns not explicitly declared with the NOT NULL attribute are automatically declared with the
# 			NULL attribute and permit NULL values. (i.e - Assigning it NULL, causes it to be NULL)
#
# 			TIMESTAMP columns declared with the NOT NULL attribute do not permit NULL values.
# 			For inserts that specify NULL for such a column, the result is an error, regardless of mode.
#
# 			TIMESTAMP cols explicitly declared with the NOT NULL attribute and without an explicit DEFAULT attribute
# 			are treated as having no default value. (if Strict is not on, the implicit default is '0000-00-00 00:00:00' and a Warning.
#
# 			No TIMESTAMP cols are automatically declared with the DEFAULT CURRENT_TIMESTAMP or ON UPDATE CURRENT_TIMESTAMP attribs.
# 			(Must be explicitly declared)
#
# 			The first TIMESTAMP col in a table is not handled differently from TIMESTAMP cols following the first one.
#
# 		If explicit_defaults_for_timestamp is disabled at start, this warning crops up:
#
# 			[Warning] TIMESTAMP with implicit DEFAULT value is deprecated.
# 			Please use --explicit_defaults_for_timestamp server option
#
# 		NOTE: --explicit_defaults_for_timestamp is deprecated as well. Will be removed.
#
# external_user
#
# 		Sys var: 		external_user
# 		Scope: 			Session
# 		Dynamic: 		No
# 		SET_VAR Hint: 	No
# 		Type: 			String
#
# 		External user name used during the authentication process, as set by the plugin used to authenticate the client.
# 		With native MySQL auth or if the plugin does not set the value - this is NULL. (Relates to Poxy users)
#
# flush
#
# 		cmd line format: 	--flush
# 		Sys Var: 			flush
# 		Scope: 				Global
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				Boolean
# 		Default: 			OFF
#
# 		If ON, the server flushes (synchs) all changes to disk after each SQL statement.
# 		Normally, MySQL does a write of all changes to disk only after each SQL statement
# 		and lets the OS handle the Sync to disk.
#
# 		Starts with ON if we start mysqld with --flush.
#
# 		NOTE: if enabled, flush_time does nothing, and changing it does nothing.
#
# flush_time
#
# 		cmd line format: 	--flush-time=#
# 		Sys var: 			flush_time
# 		Scope: 				Global
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				Integer
# 		Default: 			0
# 		Min: 					0
#
# 		If set to a nonzero value, all tables are closed every flush_time seconds to free up resources and synch unflushed data to disk.
# 		Only use for systems with small amounts of resources.
#
# foreign_key_checks
#
# 		Sys Var: 			foreign_key_checks
# 		Scope: 				Global, Session
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		Yes
# 		Type: 				Boolean
# 		Default: 			ON
#
# 		If set to 1 (the default), foreign key constraints for InnoDB tables are checked.
# 		If set to 0, foreign key constraints are ignored, with a couple of exceptions.
#
# 		When re-creating a table that was dropped, an error is returned if the table definition
# 		does not conform to the foreign key constraints referencing the table.
#
# 		Likewise, an ALTER_TABLE operation returns an error if a foreign key definition is incorrectly formed.
#
# 		Typically, you leave this enabled during normal ops. Disabling can be used for reloading InnoDB tables
# 		in a order different from that required by their parent/child relationships.
#
# 		Setting foreign_key_checks to 0 also affects data definition statements: 
#
# 		DROP_SCHEMA drops a schema even if it contains tables that have foreign keys 
# 		that are referred to by tables outside the schema, and DROP_TABLE drops tables 
# 		that have foreign keys that are reffered by other tables.
#
# 		NOTE: Setting this to 1, does not trigger a scan of the existing table data. Therefore,
# 				rows added to the table while foreign_key_checks = 0 will not be verified for consistency.
#
# 				Dropping an index required by a foreign key constraint is not permitted, even with foreign_key_checks=0
# 				The foreign key constraint must be removed before dropping the index.
#
# ft_boolean_syntax
#
# 		cmd line format: 	--ft-boolean-syntax=name
# 		Sys Var: 			ft_boolean_syntax
# 		Scope: 				Global
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				String
# 		Default: 			+ -><()~*:""&|
#
# 		The list of operators supported by boolean full-text searches performed using IN BOOLEAN MODE.
#
# 		The rules for changing the default of this is:
#
# 			Operator function is defined by pos in string
#
# 			Replacement must be 14 chars
#
# 			Each char must be an ASCII nonalphanumeric char
#
# 			Either the first or second char must be a space.
#
# 			No duplicates are permitted except the phrase quoting operators in pos 11 and 12.
# 			These two chars are not required to be the same, but they are the only two that may be.
#
# 			Pos 10, 13 and 14 (defaults to :, &, |) are reserved for future extensions.
#
# ft_max_word_len
#
# 		cmd line format: 		--ft-max-word-len=#
# 		Sys Var: 				ft_max_word_len
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Min: 						10
#
# 		Max length of word in a MyISAM FULLTEXT index.
#
# 		NOTE: FULLTEXT indexes on MyISAM tables must be rebuilt after changing this var. Use REPAIR TABLE <tbl_name> QUICK.
#
# ft_min_word_len
#
# 		cmd line format: 		--ft-min-word-len=#
# 		Sys Var: 				ft_min_word_len
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				4
# 		Min: 						1
#
# 		The min length of the word to be included in a MyISAM FULLTEXT index.
#
# 		NOTE: FULLTEXT indexes on MyISAM tables must be rebuilt after changing this var. Use REPAIR TABLE <tbl_name> QUICK.
#
# ft_query_expansion_limit
#
# 		Cmd line format: 		--ft-query-expansion-limit=#
# 		Sys Var: 				ft_query_expansion_limit
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				20
# 		Min: 						0
# 		Max: 						1000
#
# 		number of top matches to use for full-text searches performed using WITH QUERY EXPANSION.
#
# ft_stopword_file
#
# 		cmd line format: 		--ft-stopword-file=file_name
# 		Sys Var: 				ft_stopword_file
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					File name
#
# 		The file from which to read the list of stopwords for full-text searches on MyISAM tables.
# 		The server looks for the file in the data directory unless an absolute path name is given to specify a different dir.
#
# 		All the words from the file are used;, comments are not.
#
# 		By default, a list of stopwords is used (defined in storage/myisam/ft_static.c file)
#
# 		Setting this to '' disables stopword filtering.
#
# 		FULLTEXT indexes on MyISAM tables must be rebuilt after changing this var or the contents of the stopword file.
# 		Use REPAIR TABLE <tbl_name> QUICK.
#
# general_log
#
# 		cmd line format: 		--general-log
# 		Sys Var: 				genral_log
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Whether the general query log is enabled. Can be 0/OFF to disable the log or 1/ON to enable.
#
# 		Default depends on whether the --general_log option is given.
#
# 		The destination for log output is controlled by the log_output SYS_VAR; if that value is NONE, no log entries
# 		are written even if the log is enabled.
#
# general_log_file
#
# 		cmd line format: 		--general-log-file=file_name
# 		Sys Var: 				general_log_file
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					File name
# 		Default: 				host_name.log
#
# 		Name of the general query log file. Defaults to <host_name.log> but the initial value can be changed with --general_log_file option.
#
# group_concat_max_len
#
# 		Cmd line format: 		--group-concat-max-len=#
# 		Sys Var: 				group_concat_max_len
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Int
# 		Default: 				1024
# 		Min: 						4
# 		Max (64-bit) 			<a lot>
# 		Min (32-bit) 			<less>
#
# 		Max permitted result length in bytes for the GROUP_CONCAT() function. Defaults to 1024.
#
# have_compress
#
# 		Yes if the zlib compression lib is available to the server, NO if not.
# 		If not, the COMPRESS() and UNCOMPRESS() functions cannot be used.
#
# have_crypt
# 		
# 		REMOVED
#
# have_dynamic_loading
#
#		Yes if mysqld supports dynamic loading of plugins, NO if not.
# 		If NO, cannot use options such as --plugin-load to load plugins at server startup, or the
# 		INSTALL_PLUGIN statement to load plugins at runtime.
#
# have_geometry
#
# 		YES if the server supports spatial data types, NO if not.
#
# have_openssl
#
# 		This variable is an alias for have_ssl
#
# have_profiling
#
# 		YES if statement profiling capability is present, NO if not.
# 		If present, the profiling system variable controls whether this capability is enabled or disabled.
#
# 		DEPRECATED.
#
# have_query_cache
#
# 		Query cache was removed in 8.0.3, have_query_cache is deprecated, always NO.
#
# have_rtree_keys
#
# 		YES if RTREE indexes are available, NO if not. (Used for Spatial indexes in MyISAM tables)
#
# have_ssl
#
# 		Yes if mysqld supports SSL connections, NO if not. DISABLED if server was compiled with SSL, but not activated with the respective --ssl-xxx option
#
# have_statement_timeout
#
# 		Sys_Var: 		have_statement_timeout
# 		Scope: 			Global
# 		Dynamic: 		No
# 		SET_VAR Hint: 	No
# 		Type: 			Boolean
#
# 		Whether the statement execution timeout feature is available. 
# 		Can be NO if the background thread used by this feature, could not be initialized.
# 		
# have_symlink
#
# 		YES if symbolic link support is enabled, NO if not.
# 		Required on UNIX for support of the DATA DIRECTORY and INDEX DIRECTORY table options.
#
# 		If the server is started with --skip-symbolic-links - this value is Disabled.
#
# 		Means nothing on Windows.
#
# 		NOTE: Symbolic links are deprecated in support and stature.
#
# histogram_generation_max_mem_size
#
# 		cmd line format: 		--histogram-generation-max-mem-size=#
# 		Introduced: 			8.0.2
# 		Sys Var: 				histogram_generation_max_mem_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		DEFAULT: 				20000000
# 		min value: 				1000000
# 		max (64-bit) 			<a lot>
# 		max (32-bit) 			<less>
#
# 		Max amount of memory for generating histogram stats.
#
# 		Setting this is a restricted ops, reqs privs.
#
# host_cache_size
#
# 		Sys Var: 				host_cache_size
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				-1 (Autosizing, do not assign)
#		Min: 						0
# 		Max: 						65536
#
# 		Size of the internal host cache. Setting it to 0 disables the host cache.
#
# 		Changing the cache size at runtime implicitly causes a FLUSH HOSTS ops to clear the host cache
# 		and truncate the host_cache table.
#
# 		Defaults to 128 + 1 for a value of max_connections up to 500, plus 1 for every 20 above 500, up to 2k.
#
# 		Using --skip-host-cache is similar to setting the host_cache_size SYS_VAR to 0, but host_cache_size can be set during
# 		runtime - not just startup.
#
# 		If started with --skip-host-cache, modification attempts are simply ignored.
#
# hostname
#
# 		Sys var: 				hostname
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					String
#
# 		The server sets this var to the server host name at startup.
#
# identity
#
# 		Synonym for the last_insert_id var. Exists for compability with other DB systems.
# 		can be read with SELECT @@identity, and set it using SET identity.
#
# init_connect
#
# 		cmd line format: 		--init-connect=name
# 		Sys Var: 				init_connect
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
#
# 		A string to be executed by the server for each client that connects. 
# 		The string consists of one or more SQL statements, separated by ; chars.
#
# 		For example, each client session begins by default with autocommit mode enabled.
# 		For older servers (< 5.5.8) - there is no global autocommit SYS_VAR to specify that autocommit
# 		should be off by default - but can be circumvented with:
#
# 		SET GLOBAL init_connect='SET autocommit=0';
#
# 		Can also beb set on cmd or in a option file:
#
# 		[mysqld]
# 		init_connect='SET autocommit=0'
#
# 		For users with SUPER priv or CONNECTION_ADMIN - the content of init_connect is not executed.
#
# 		(MySQL 8.0.5 >=) 	init_connect is skipped for any client with an expired PW.
#
# 		Allows for connection and changing of PW.
#
# information_schema_stats_expiry
#
# 		cmd line format: 		--information-schema-stats-expiry=value
# 		Introduced: 			8.0.3
# 		Sys Var: 				information_schema_stats_expiry
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				86400
# 		min: 						0
# 		Max: 						<a lot>
#
# 		Some of the information_schema tables that contain columns that provide table stats:
#
# 		STATISTICS.CARDINALITY
# 		TABLES.AUTO_INCREMENT
# 		TABLES.AVG_ROW_LENGTH
# 		TABLES.CHECKSUM
# 		TABLES.CHECK_TIME
# 		TABLES.CREATE_TIME
# 		TABLES.DATA_FREE
# 		TABLES.DATA_LENGTH
# 		TABLES.INDEX_LENGTH
# 		TABLES.MAX_DATA_LENGTH
# 		TABLES.TABLE_ROWS
# 		TABLES.UPDATE_TIME
#
#		Said columns represent the dynamic table metadata - information that changes as table contents change.
#
# 		By default, MySQL retrieves cached values for those columns from the mysql.index_stats and mysql.table_stats dictionary tables
# 		when the columns are queried, which is more efficient than retrieving stats directly from the storage engine.
#
# 		If cached stats are not available or have expired, MySQL retrieves the latest stats from the storage engine
# 		and caches them in the mysql.index_stats and mysql.table_stats dictionary tables.
#
# 		Subsequent queries retrieve the cachhed stats until the cached stats expire.
#
# 		The information_schema_stats_expiry session var defines the period of time before cached stats expire.
# 		The default is 24 hours (86400 secs), but the time period can be extended to as much as one year.
#
# 		To update cached values at any time for a given table, use ANALYZE TABLE.
#
# 		To always retrieve the latest directly from the storage engine and bybpass cached values, set information_schema_stats_expiry to 0.
#
# 		Querying stats columns does not store or update stats in the mysql.index_stats and mysql.table_stats dictionary tables under said circumstnaces:
#
# 			When cached stats have not expired
#
# 			When information_schema_stats_expiry is set to 0
#
# 			When the server is started in read_only, super_read_only, transaction_read_only or innodb_read_only
#
# 			When the query also fetches Performance Schema Data
#
# 		information_schema_stats_expiry is a session var, and each client session can define its own expiration value.
# 		Stats that are retrieved from the storage engine and cached by one session are available to other sessions.
#
# init_file
#
# 		Cmd line format: 		--init-file=file_name
# 		Sys Var: 				init_file
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					File name
#
# 		The name of the file specified with the --init-file option when you start the server.
#
# 		This should be a file containing SQL statements that you want the server to execute when it starts.
#
# 		Each statement must be on a single line and no comments. 
#
# innodb_xxx
#
# 		InnoDB sys vars are listed later.
#
# 		Said Vars control many aspects of storage, memory use and I/O patterns for InnoDB tables, and are called for in relation to InnoDB default storage engines.
#
# insert_id
# 
# 		The value to be used by the following INSERT or ALTER_TABLE statement when inserting an AUTO_INCREMENT value.
# 		Mainly used with the binary log.
#
# interactive_timeout
#
# 		cmd line format: 		--interactive-timeout=#
# 		Sys Var: 				interactive_timeout
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				28800
# 		Min: 						1
#
# 		The number of seconds the server waits for acitvity on an interactive connection before closing it.
# 		An interactive client is defined as a client that uses the CLIENT_INTERACTIVE option to mysql_real_connect()
#
# internal_tmp_disk_storage_engine
#
# 		cmd line format: 		--internal-tmp-disk-storage-engine=#
# 		Sys Var: 				internal_tmp_disk_storage_engine
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Default: 				INNODB
# 		Valid: 					MYISAM
# 									INNODB
#
# 		The storage engine for on-disk internal temp tables. Permitted values are MYISAM and INNODB (Default)
#
# 		The optimizer uses the storage engine defined by internal_tmp_disk_storage_engine for on-disk internal temporary tables.
#
# 		When using internal_tmp_disk_storage_engine=INNODB (the default), queries that generate on-disk internal temp tables that exceed
# 		InnoDB row or column limits will return Row size too large or Too many columns errors.
#
# 		The workaround is to set internal_tmp_disk_storage_engine to MYISAM.
#
# internal_tmp_mem_storage_engine
#
# 		cmd line format: 		--internal-tmp-mem-storage-engine=#
# 		introduced: 			8.0.2
# 		SYS Var: 				internal_tmp_mem_storage_engine
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Enumeration
# 		Default: 				TempTable
# 		Valid: 					TempTable, MEMORY
#
# 		The storage engine for in-memory internal temporary tables.
#
# 		The optimizer uses the storage engine defined by internal_tmp_mem_storage_engine for in-memory internal temp tables.
#
# join_buffer_size
#
# 		cmd line format: 		--join-buffer-size=#
# 		Sys Var: 				join_buffer_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				262144
# 		Min value: 				128
# 		Max (Other, 64-bit) 	<most>
# 		Max (Other, 32-bit) 	<less>
# 		Max (Windows) 			<less>
#
# 		The min size of the buffer that is used for plain index scans, range index scans, and joins that do not 
# 		use indexes and thus perform full table scans.
#
# 		Normally - the best way to get fast joins is to add indexes. Increase the value of join_buffer_size to get a faster
# 		full join when adding indexes is not possible.
#
# 		One join buffer is allocated for each full join between two tables. For a complex join between several tables for which 
# 		indexes are not used, multiple join buffers might be nessecary.
#
# 		Unless Batched Key Access (BKA) is used, there is no gain from setting the buffer larger than required to hold each
# 		matching row - and all joins allocate at least the min size, thus, careful with global min designation.
#
# 		It is better to have the global be small, and allow for session values that are larger - when thye perform large joins.
# 		Memory allocation time can cause large performance drops if the global size is larger than needed by most queries that use it.
#
# 		When BKA is used, the value of join_buffer_size defines how large the batch of keys is in each request to the storage engine.
# 		The larger the buffer, the more sequential access will be to the right hand table of a join operation, which can significantly 
# 		improve performance.
#
# 		Defaults to 256kb, max is 4gb-1. Larger is allowed for 64-bit (Windows throws a warning and sets to max)
#
# keep_files_on_create
#
# 		cmd line format: 		--keep-files-on-create=#
# 		Sys Var: 				keep_files_on_create
# 		Scope: 					Global ,Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		if a MyISAM table is created with no DATA DIR option, the .MYD file is created in the DB directory.
# 		By default, if MyISAM finds an existing .MYD file in this case, it overwrites it.
#
# 		The same applies to .MYI files for tables created with no INDEX DIRECTORY option.
# 		To suppress this behavior, set the keep_files_on_create var to ON(1), which causes MyISAM to not overwrite
# 		existing files and returns an error instead. 
#
# 		If a MyISAM table is created with a DATA DIRECTORY or INDEX DIRECTORY option and an existing .MYD or .MYI file is found,
# 		MyISAM always returns an error. It will not overwrite a file in the specified dir.
#
#
# key_buffer_size
#
# 		cmd line format: 		--key-buffer-size=#
# 		Sys Var: 				key_buffer_size
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				8388608
# 		Min value: 				8
# 		Max value(64-bit) 	OS_PER_PROCESS_LIMIT
# 		Max (32-bit) 			4294967295
#
# 		Index blocks for MyISAM tables are buffered and are shared by all threads. key_buffer_size is the size of the buffer used
# 		for index blocks. The key buffer is also known as the key cache.
#
# 		The max permissible setting for key_buffer_size is 4gb-1 on 32-bit platforms.
#
# 		Larger are allowed on 64-bit - Realistic size might be less. 
#
# 		The above is akin to a "hint" of request of setting to - value can be overwritten by underlying OS or Hardware etc.
#
# 		You can increase the value to get better index handling for all reads and multiple writes; on a System whose primary
# 		function is to run MySQL using the MyISAM storage engine, 25% of the total machine memory is fine.
#
# 		If assigned too large of a value, the underlying OS which handles file system caching for data reads will start to lag
#
# 		For even more speed when writing many rows at the same time, use LOCK_TABLES.
#
# 		You can check the performance of the key buffer by issuing a SHOW_STATUS statement and examining the Key_read_requests,
# 		Key_reads, Key_write_requests and Key_writes status.
#
# 		The Key_reads/Key_read_requests ratio should normally be less than 0.01.
#
# 		The Key_writes/Key_write_requests ratio is usually near 1 if you use mostly updates and deletes,
# 		but can be smaller in case of updating many rows at the same time or using the DELAY_KEY_WRITE table option.
#
# 		The fraction of the key buffer in use can be determined using key_buffer_size in conjunction with the Key_blocks_unused
# 		status variable and buffer block size, which is available from the key_cache_block_size Sys_var:
#
# 		- ((Key_blocks_unused * key_cache_block_size) / key_buffer_size)
#
# 		This value is an approximation because some space in the key buffer is allocated internally for admin structs.
# 		Factors that influence the amount of overhead for these structures include block size and pointer size.
#
# 		As block size increases, the percentage of the key buffer lost to overhead tends to decrease.
#
# 		larger blocks result in a smaller number of read ops (because more keys are obtained per read),
# 		but an increase in reads of keys that are not examined (if not all keys in a block are relevant to a query)
#
# 		It is possible to create Multiple MyISAM key caches. The size limit of 4gb applies to each cache individually, not as a group.
#
# key_cache_age_threshold
#
# 		Cmd line format: 		--key-cache-age-threshold=#
# 		Sys var: 				key_cache_age_threshold
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				300
# 		Min: 						100
# 		Max value (64-bit): 	<a lot>
# 		Max value (32-bit): 	<less>
#
# 		Controls the demotion of buffers from hot sublist of a key cache to the warm sublist.
# 		Lower values causes demotion to happen more quickly.
#
# 		Min 100. default 300.
#
# key_cache_block_size
#
# 		cmd line format: 		--key-cache-block-size=#
# 		Sys var: 				key_cache_block_size
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				1024
# 		Min: 						512
# 		Max: 						16384
#
# 		Size in bytes of blocks in the key cache. Defaults to 1024.
#
# key_cache_division_limit
#
# 		cmd line format: 		--key-cache-division-limit=#
# 		Sys var: 				key_cache_division_limit
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				100
# 		Min: 						1
# 		mx: 						100
#
# 		The division point between the hot and warm sublist of the key cache buffer list.
# 		The value is the % of the buffer list to use for the warm sublist.
#
# large_files_support
#
# 		Sys var: 				large_files_support
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
#
# 		Whether mysqld was compiled with options for large file support.
#
# large_pages
#
# 		cmd line format: 		--large-pages
# 		Sys var: 				large_pages
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Platform: 				Linux
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		Whether large page support is enabled (via the --large-pages option)
#
# large_page_size
#
# 		Sys var: 				large_page_size
# 		scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
#
# 		If large page support is enabled, this shows the size of memory pages.
# 		Large memory pages are supported only on Linux, on other OS's - this is always 0.
#
# last_insert_id
#
# 		The values to be returned from LAST_INSERT_ID(). This is stored in the binary log when you use
# 		LAST_INSERT_ID() in a statement that updates a table.
#
# 		Setting this var does not update the value returned by the mysql_insert_id() C API Function
#
# lc_messages
#
# 		cmd line format: 		--lc-messages=name
# 		Sys Var: 				lc_messages
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				en_US
#
# 		The locale to use for error messages. The default is en_US. THe server converts the argument
# 		to a language name and combines it with the value of lc_messages_dir to produce the location
# 		for the error message file.
#
# lc_messages_dir
#
# 		cmd line format: 		--lc-messages-dir=dir_name
# 		Sys var: 				lc_messages_dir
# 		Scope: 					global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Dir name:
#
# 		The dir where error messages are located. The server uses the value together with the values of lc_messages
# 		to produce the location for the error message file.
#
# lc_time_names
#
# 		Sys var: 				lc_time_names
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
#
# 		This var specifies the locale that contorls the language used to display day and month names and abbreviations.
# 		This var affects the output from the DATE_FORMAT(), DAYNAME() and MONTHNAME() functions.
#
# 		Locale names are POSIX-style values such as 'ja_JP' or 'pt_BR'. Default is 'en_US' regardless of your system locale setting.
#
# license
#
# 		Sys var: 				license
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				GPL
#
# 		Type of license the server has
#
# local_infile
#
# 		Sys var: 				local_infile
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			no
# 		Type: 					Boolean
# 		Default (>= 8.0.2) 	OFF
# 		Default (<= 8.0.1) 	oN
#
# 		This variable controls server-side LOCAL capability for LOAD_DATA statements. 
#
# 		Depending on the local_infile setting, the server refuses or permits local data loading 
# 		by clients that have LOCAL enables on the client side.
#
#		To explicitly cause the server to refuse or permit LOAD_DATA_LOCAL statements (regardless of how client programs and libs are configed at build time
# 		or runtime) - start mysqld with local_infile disabled or enabled, respectively.
#
# 		local_infile can also be set at runtime.
#
# lock_wait_timeout
#
# 		Cmd line format: 		--lock-wait-timeout=#
# 		Sys var: 				lock_wait_timeout
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				31536000
# 		Min: 						1
# 		Max: 						31536000
#
# 		Specifies the timeout in seconds for attempts to aquire metadata locks. The permissible value ranges from
# 		1 to 1 year. Default is 1 year.
#
# 		This timeout applies to all statements that use metadata locks. These include DML and DDL operations on tables, views, stored
# 		procedures and stored functions, as well as LOCK_TABLES, FLUSH_TABLES_WITH_READ_LOCK and HANDLER statements.
#
# 		This timeout does not apply to implicit accesses to System tables in the mysql DB, such as grant tables modified by GRANT or REVOKE
# 		statements or table logging statements.
#
# 		This timeout does apply to Sys tables accessed directly, such as with SELECT or UPDATE.
#
# 		The timeout value applies separately for each metadata lock attempt. A given statement can require more than one lock, so it is possible
# 		for the statement to block for longer than the lock_wait_timeout value before reporting a timeout error. When lock timeout occurs, ER_LOCK_WAIT_TIMEOUT
# 		is reported.
#
# 		lock_wait_timeout also defines the amount of time that a LOCK_INSTANCE_FOR_BACKUP statement waits for a lock before giving up.
#
# locked_in_memory
#
# 		sys var: 				locked_in_memory
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 
# 		Whether mysqld was locked in memory with --memlock.
#
# log_error
#
# 		cmd line format: 		--log-error[=file_name]
# 		Sys var: 				log_error
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					File name
#
# 		The default error log destination. If the destination is the console, the value is stderr.
# 		Otherwise, the destination is a file and the log error value is the file name.
#
# log_error_filter_rules
#
# 		cmd line format: 		--log-error-filter-rules
# 		Introduced: 			8.0.2
# 		Removed: 				8.0.4
# 		SYS VAR: 				log_error_filter_rules
# 		Scope: 					Global
#  	Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default value: 		set by server
#
# 		The filter rules for error logging. This variable is unused. Removed.
#
# log_error_services
#
# 		cmd line format: 		--log-error-services
# 		Introduced: 			8.0.2
# 		Sys var: 				log_error_services
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				log_filter_internal; log_sink_internal
#
# 		The components to enable for error logging. This variable may contain a list with 0,1 or many elements.
#
# 		In the latter case, elements may be delimited by ; or (MySQL >= 8.0.12) , + SPACE.
#
# 		A given setting cannot use both ; and , +´SPACE separators.
#
# 		Components order is significant because the server executes components in the order listed.
# 		Any loadable (not built in) component named in the log_error_services value must first be installed
# 		with INSTALL_COMPONENT.
#
# log_error_suppression_list
#
# 		Cmd line format: 		--log-error-suppression-list=value
# 		Introduced: 			8.0.13
# 		Sys var: 				log_error_suppression_list
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				''
#
# 		This enables specifying which diagnostics should not be written to the error log when they occur
# 		with a severity of WARNING or INFORMATION.
#
# 		For example, if a particular type of warning occurs frequently but is not of interest (and thus may be
# 		considered undesirable "noise" in the error log) you can suppress that.
#
# 		The variable value may be empty string for no suppression, or a list of one or more comma separated values indicating
# 		the error codes to suppress.
#
# 		The numeric value of each code to be suppressed must be in a permitted range:
#
# 			1 up to (but less than) 1000: Global error codes that are shared by the server and clients
#
# 			10000 and higher: Server error codes intended to be written ot the error log (not sent to clients)
#
# 		Attempts to assign an error code not in a permitted range produces an error and the var value remains unchanged.
#
# 		Error codes may be specified in a numeric or symbolic form. A numeric code may be specified with or without the MY- prefix.
#
# 		Leading 0's in the numeric part are not significant. Examples of permitted code format:
#
# 			31
# 			00031
# 			MY-31
# 			MY-00031
# 			ER_SERVER_SHUTDOWN_COMPLETE
#
# 		List of error codes comes later.
#
# 		The server can generate messages for a given error code at different severities, so suppression for a message
# 		associated with an error code listed in log_error_suppression_list depends on its severity.
#
# 		Suppose that hte variable has a value of '10000, 10001, MY-10002'
#
# 		Messages for those codes are not written to the error log if generated with a SEVERITY of WARNING or INFORMATION.
#
# 		Messages generated with a severity of ERROR or SYSTEM are not suppressed and are written to the error log.
#
# 		The effect of log_error_suppression_list combines with that of log_error_verbosity.
#
# 		Consider a server started with these settings:
#
# 		[mysqld]
# 		log_error_verbosity=2 			# error and warning messages only
# 		log_error_suppression_list='10000,10001,MY-10002'
#
# 		In this case, log_error_verbosity discards all messages with INFORMATION severity.
#
# 		Of the remaining messages, log_error_suppression_list discards messages with WARNING severityy
# 		and any of the named error codes.
#
#
# 		NOTE: log_error_verbosity defaults to 2, so its effect on suppression of all INFORMATION messages is by
# 		default as above. You must set it to 3, if you want log_error_suppression_list to affect messages with INFORMATION severity.
#
# 		Example:
#
# 		[mysqld]
#		log_error_verbosity=1 #Error messages only
#
# 		Discards all messages with WARNING and INFORMATION severity.
#
# 		Setting log_error_suppression_list has no effect because all error codes it might suppress
# 		are already discarded due to the log_error_verbosity setting. 	
#
# 		log_error_suppression_list (like log_error_verbosity) affects the log_filter_internal error log filter,
# 		which is on by default.
#
# 		If that filter is turned off, error code suppression does not occur and must be modeled using whatever
# 		filter service is used instead where desired (for example, with individual filter rules when using
# 		log_filter_dragnet).
#
# log_error_verbosity
#
# 		cmd line format: 		--log-error-verbosity=#
# 		Sys var: 				log_error_verbosity
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default (>= 8.0.4) 	2
# 		Default (<= 8.0.3) 	3
# 		Min: 						1
# 		Max: 						#
# 
# 		The verbosity for handling events intended for the error log, as filtered by the log_filter_internal
# 		error log filter component, which is enabled by default.
#
# 		If log_filter_internal is disabled, log_error_verbosity has no effect
#
# 		The following is the verbosity levels:
#
# 		Error messages: 		1
# 		Error and Warnings: 	2
# 		Error, Warning,Info: 3
#
# 		Selected important sys messages about non-error situations are printed to the error log regardless
# 		of the log_error_verbosity value.
#
# 		These messages include startup and shutdown messages, and some significant changes to settings.
#
# 		The effect of log_error_verbosity combines with that of log_error_suppression_list.
#
# log_output
#
# 		Cmd line format: 		--log-output=name
# 		Sys var: 				log_output
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Set
# 		Default: 				File
# 		Valid: 					TABLE, FILE, NONE
#
# 		The destination for general query log and slow query log output.
# 		The value can be a comma-separated list of one or more of the words TABLE (log of tables),
# 		FILE (log to files), or NONE (do not log to tables or files).
#
# 		The default value is FILE. NONE, if present takes precedence over any other specifiers.
#
# 		If the value is NONE log entries are not written even if the logs are enabled.
# 		If the logs are not enabled, no logging occurs even if the value of log_output is not NONE.
#
# log_queries_not_using_indexes
#
# 		cmd line format: 	--log-queries-not-using-indexes
# 		Sys var: 			log_queries_not_using_indexes
# 		Scope: 				Global
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type:    			Boolean
# 		default: 			OFF
#
# 		Whether queries that do not use indexes are logged to the slow query log.
#
# log_slow_admin_statements
#
# 		Sys var: 			log_slow_admin_statements
# 		Scope: 				Global
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				Boolean
# 		Default: 			OFF
#
# 		Include slow administrative statements in the statements written to the slow query log.
#
# 		Administrative statements include ALTER_TABLE, ANALYZE_TABLE, CHECK_TABLE, CREATE_INDEX,
# 		DROP_INDEX, OPTIMIZE_TABLE and REPAIR_TABLE
#
# log_syslog
#
# 		cmd line format: 		--log-syslog[={0|1}]
# 		Deprecated: 			8.0.2 (removed in 8.0.13)
# 		Sys var: 				log_syslog
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default (Windows, <= 8.0.1) 	ON
# 		Default (Unix, <= 8.0.1) 		OFF
# 		Default (>= 8.0.2) 				ON (when error logging to system log is enabled)
#
# 		Prior to (8.0) this var controlled whether to perform error logging to the system log (the Event log on Windows, Syslog on Unix/UNIX based systems)
#
# 		In MySQL 8.0, the log_sink_syseventlog log component implements error logging to the system log.
# 		Thus this type of logging can be enabled by adding that component to the log_error_services SYS var.
#
# 		log_syslog is removed. (just deprecated before 8.0.13)
#
# log_syslog_facility
#
# 		cmd line format: 		--log-syslog-facility=value
# 		Removed: 				8.0.13
# 		Sys var: 				log_syslog_facility
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				daemon
#
# 		This var was removed in 8.0.13 and replaced by syseventlog.facility
#
# log_syslog_include_pid
#
# 		cmd line format: 		--log-syslog-include-pid[={0|1}]
# 		removed: 				8.0.13
# 		Sys var: 				log_syslog_include_pid
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				ON
#
# 		This was removed in 8.0.13 and replaced by syseventlog.include_pid
#
# log_syslog_tag
#
# 		cmd line format: 		--log-syslog-tag=tag
# 		Removed: 				8.0.13
# 		Sys var: 				log_syslog_tag
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					String
# 		Default: 				empty string
#
# 		Removed in 8.0.13 and replaced by syseventlog.tag
#
# log_timestamps
#
# 		cmd line format: 		--log-timestamps=#
# 		Sys var: 				log_timestamps
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Default: 				UTC
# 		Valid: 					UTC, SYSTEM
#
# 		Controls the time zone of timestamps in messages written to the error log and in general query log and slow query
# 		log messages written to files.
#
# 		Does not affect the time zone of general query log and slow query log messages written to tables (mysql.general_log, mysql.slow_log).
#
# 		Rows retrieved from those tables can be converted from the local system time zone to any desired time zone with CONVERT_TZ() or by
# 		setting the session time_zone sys var.
#
# 		Permitted log_timestamps values are UTC (default) and SYSTEM (local system time zone)
#
# 		Timestamps are written using ISO 8601 / RFC 3339 format: YYYY-MM-DDThh:mm:ss.uuuuu plus a tail value of Z signifying
# 		Zulu time (UTC) or +hh:mm (offset from UTC)
#
# log_throttle_queries_not_using_indexes
#
# 		Sys var: 			log_throttle_queries_not_using_indexes
# 		Scope: 				Global
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				Integer
# 		Default: 			0
#
# 		If log_queries_not_using_indexes is enabled, the log_throttle_queries_not_using_indexes variable
# 		limits the number of such queries per minute that can be written to the slow query log.
#
# 		A value of 0 (default) means "No limit".
#
# log_warnings
#
# 		cmd line format: 		--log-warnings[=#]
# 		Deprecated: 			Yes (removed in 8.0.3)
# 		Sys var: 				log_warnings
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				2
# 		Min: 						0
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		Removed in 8.0.3 - use the log_error_verbosity sys_var instead.
#
# long_query_time
#
# 		cmd line format: 		--long-query-time=#
# 		Sys var: 				long_query_time
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Numeric
# 		Default: 				10
# 		Min: 						0
#
# 		If a query takes longer than this many seconds, the server increments the Slow_queries status var.
# 		If the slow query log is enabled, the query is logged to the slow query log file.
#
# 		This value is measured in real time, not CPU time - so a query that is under Threshold on a lightly loaded
# 		system may be above Threshold on a heavy loaded one.
#
# 		The value of this var can be specified to a resolution of microseconds.
#
# 		For logging to tables, only integer times are written; the microseconds part is ignored.
#
# low_priority_updates
#
# 		cmd line format: 		--low-priority-updates
# 		Sys var: 				low_priority_updates
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		If set to 1, all INSERT, UPDATE, DELETE and LOCK TABLE WRITE statements wait until there is no pending
# 		SELECT or LOCK TABLE READ on the affected table.
#
# 		This affects only storage engines that use only table-level locking (such as MyISAM, MEMORY and MERGE)
#
# lower_case_file_system
#
# 		Sys var: 				lower_case_file_system
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
#
# 		This var describes the case sensitivity of file names on the file system where the data dir
# 		is located.
#
# 		OFF means file names are case-sensitive, ON means they are not case-sensitive.
#
# 		This var is read only because it reflects a file system attribute and setting it would have
# 		no effect on the file system.
#
# lower_case_table_names
#
# 		cmd line format: 		--lower-case-table-names[=#]
# 		Sys var: 				lower_case_table_names
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Min: 						0
# 		Max: 						2
#
# 		If set to 0, table names are stored as specified and comparisons are case-sensitive.
#
# 		If set to 1, table names are stored in lowercase on disk and comparisons are not case sensitive.
#
# 		If set to 2, table names are stored as given but compared in lowercase.
#
# 		This option also applies to DB names and table aliases. 
#
# 		On Windows the default is 1. On macOS, default is 2. On Linux, 2 is not supported - enforced 0.
#
# 		You should NOT set lower_case_table_names to 0 if you are running MySQL on a system where the data dir
# 		resides on a case-insensitive file system (such as on Windows or macOS).
#
# 		Is an unsupported combination that could result in a hang condition when running an INSERT INTO ... SELECT ... FROM <tbl_name>
# 		operation with the wrong <tbl_name> letter case.
#
# 		With MyISAM - accessing table names using different letter cases could cause index corruption.
#
# 		An error message is printed and the server exits if you attempt to start the server with --lower_case_table_names=0 on
# 		a case-insensitive file system.
#
# 		If you are using InnoDB tables, you should set this variable to 1 on all platforms to force names to be converted
# 		to lowercase.
#
# 		The setting of this variable in MySQL 8.0 affects the behavior of replication filtering options with regard
# 		to case sensitivity. (Bug #51639)
#
# 		It is prohibited to start the server with a lower_case_table_names setting that is different from the setting used
# 		when the server was initialized.
#
# 		The restriction is necessary because collations used by various data dictionary table fields are based on the
#	 	setting defined when the server is initialized and restarting the server with a different setting would
# 		introduce inconsistencies with respect to how identifiers are ordered and compared.
#
# mandatory_roles
#
# 		cmd line format: 				--mandatory-roles=value
# 		introduced: 					8.0.2
# 		Sys var: 						mandatory_roles
# 		Scope: 							Global
# 		Dynamic: 						Yes
# 		SET_VAR Hint: 					No
# 		Type: 							String
# 		Default: 						empty string
#
# 		Roles the server should treat as mandatory. In effect, these roles are automatically
# 		granted to every user, although setting mandatory_roles does not actually change any
# 		user accounts, and the granted roles are not visible in the mysql.role_edges system table.
#
# 		The var value is a comma separated name:
#
# 		SET PERSIST mandatory_roles = '`role1`@`%`, `role2`,role3,role4@localhost';
#
# 		Setting mandatory_roles requires the ROLE_ADMIN priv, in addition to the SYSTEM_VARIABLES_ADMIN or SUPER
# 		priv normally required to set a global system var.
#
# 		Role names consist of a user part and host part in user_name@host_name format.
# 		The host part, if omitted, defaults to %
#
# 		User names and host names, if quoted, must be written in a fashion permitted for quoting within quoted strings.
#
# 		Roles named in the value of mandatory_roles cannot be revoked with REVOKE or dropped with DROP_ROLE or DROP_USER.
#
# 		Mandatory roles, like explicitly granted roles, do not take effect until activated.
#
# 		At login time, role activation occurs for all granted roles if the activate_all_roles_on_login sys_var is enabled,
# 		or only for roles that are set as default roles otherwise.
#
# 		At runtime, SET_ROLE activates roles.
#
# 		Roles that do not exist when assigned to mandatory_roles but are created later may require special treatment
# 		to be considered mandatory.
#
# 		SHOW_GRANTS displays mandatory roles according to the rules showcased later.
#
# max_allowed_packet
#
# 		cmd line format: 		--max-allowed-packet=#
# 		Sys var: 				max_allowed_packet
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default (>= 8.0.3) 	67108864
# 		Default (<= 8.0.2) 	4194304
# 		Min: 						1024
# 		Max: 						1073741824
#
# 		Max size of one packet or any generated/intermediate string or any parameter sent by the mysql_stmt_send_long_data() C API function.
# 		The default is 64MB.
#
# 		The packet message buffer is initialized to net_buffer_length bytes, but can grow up to max_allowed_packet bytes when needed.
# 		This value by default is small, to catch large (possibly incorrect) packets.
#
# 		You must increase this value if you are using large BLOB columns or long strings.
# 		It should be as big as the largest BLOB you want to use.
#
# 		The protocol limit for max_allowed_packet is 1GB. The value should be a multiple of 1024: nonmultiples are rounded down to the nearest
# 		multiple.
#
# 		When you change the message buffer size by changing the value of the max_allowed_packet variable, you should also change
# 		the buffer size on the client side if your client program permits it.
#
# 		The default max_allowed_packet value built in to the client library is 1GB, but individual client programs
# 		might override this.
#
# 		For example, mysql and mysqldump have defaults of 16MB and 24MB, respectively.
#
# 		They also enable you to change the client-side value by setting max_allowed_packet on the cmd line or in an option file.
#
# 		The session value of this var is read only. The client can receive up to as many bytes as the session value.
# 		However, the server will not send to the client more bytes than the current global max_allowed_packet value.
# 		(The global value could be less than the session value if the global value is changed after the client connects.)
#
# max_connect_errors
#
# 		cmd line format: 		--max-connect-errors=#
# 		Sys var: 				max_connect_errors
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				100
# 		Min: 						1
# 		Max (64-bit) 			<a lot>
# 		max (32-bit) 			<less>
#
# 		If more than this many successive connection requests from a host are interuppted without a successful
# 		connection, the server blocks that host from further connections.
#
# 		You can unblock blocked hosts by flushing the host cache. To do so, issue a FLUSH_HOSTS statement or execute
# 		a mysqladmin flush-hosts command.
#
# 		If a connection is established successfully within fewer than max_connect_errors attempts after a previous connection
# 		was interrupted, the error count for the host is cleared to 0.
#
# 		However, once a host is blocked, flushing the host cache is the only way to unblock it. Default is 100.
#
# max_connections
#
# 		Cmd line format: 		--max-connections=#
# 		Sys var: 				max_connections
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				151
# 		Min: 						1
# 		Max: 						100000
#
# 		max permitted number of simultaneous client conns.
#
# max_delayed_threads
#
# 		cmd line format: 		--max-delayed-threads=#
# 		deprecated: 			Yes
# 		Sys var: 				max_delayed_threads
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				20
# 		Min: 						0
# 		Max: 						16384
#
# 		This sys var is deprecated (because DELAYED inserts are not supported), will be removed.
#
# max_digest_length
#
# 		cmd line format: 		--max-digest-length=#
# 		Sys var: 				max_digest_length
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				1024
# 		Min: 						0
# 		Max: 						1048576
#
# 		max number of bytes available for computing normalized statement digests.
#
# 		Once said amount of space is used during digest computation, truncation occurs:
# 		No further tokens from a parsed statement are collected or figure into its digest value.
#
# 		Statements that differ only after that many bytes of parsed tokens produce the same 
# 		normalized statement digest and are considered identical if compared or if aggregated for digest stats.
#
# 		Decreasing the max_digest_length value reduces memory use but causes the digest value of more statements
# 		to become indistinguishable if they differ only at the end.
#
# 		Increasing the value permits longer statements to be distinguished but increases memory use, particularly
# 		for workloads that involve large number of simultaneous sessions (the server allocates max_digest_length bytes per session)
#
# 		The parser uses this system var as a limit on the max length of normalized statement digests that it computes.
# 		The Performance Schema, if it tracks statement digests, makes a copy of the digest value, using the performance_schema_max_digest_length,
# 		sys var as a limit on the max length of digests that it stores.
#
# 		Consequently, if performance_schema_max_digest_length is less than max_digest_length digest values stored in the Performance
# 		Schema are truncated relative to the original digest values.
#
# max_error_count
#
# 		cmd line format: 		--max-error-count=#
# 		Sys var: 				max_error_count
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default (>= 8.0.3) 	1024
# 		Default (<= 8.0.2) 	64
# 		Min: 						0
# 		Max: 						65535
#
# 		Max number of error, warning and info messages to be stored for display by the SHOW_ERRORS and SHOW_WARNINGS statements.
# 		This is the same as the number of condition areas in the diagnostics area, and thus the number of conditions that can be
# 		inspected by GET_DIAGNOSTICS.
#
# max_execution_time
#
# 		cmd line format: 		--max-execution-time=#
# 		Sys var: 				max_execution_time
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				0
#
# 		The execution timeout for SELECT statements, in milliseconds.
# 		If the value is 0, timeouts are not enabled.
#
# 		max_execution_time applies as follows:
#
# 			The global max_execution_time value provides the default for the session value for new connections.
# 			The session value applies to SELECT executions executed within the session that include no MAX_EXECUTION_TIME(N)
# 			optimizer hint or for which N is 0.
#
# 			max_execution_time applies to read-only SELECT statements. Statements that are not read only are those that 
# 			invoke a stored function that modifies data as a side effect.
#
# 			max_execution_time is ignored for SELECT statements in stored programs.
#
# max_heap_table_size
#
# 		cmd line format: 		--max-heap-table-size=#
# 		Sys var: 				max_heap_table_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					16777216
# 		Min value: 				16384
# 		Max value (64-bit) 	<a lot>
# 		Max value (32-bit) 	<less>
#
# 		Sets the maximum size to which user-created MEMORY tables are permitted to grow.
# 		The value of the variable is used to calculate MEMORY table MAX_ROWS values.
#
# 		Setting this variable has no effect on any existing MEMORY table, unless the table is
# 		re-created with a statement such as CREATE_TABLE or altered with ALTER_TABLE or TRUNCATE_TABLE
#
# 		A server restart also sets the maximum size of existing MEMORY tables to the global max_heap_table_size 
#
# 		This var is also used in conjunction with tmp_table_size to limit the size of internal in-memory tables.
#
# 		max_heap_table_size is not replicated.
#
# max_insert_delayed_threads
#
# 		deprecated: 			Yes
# 		Sys var: 				max_insert_delayed_threads
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
#
# 		Synonym to max_delayed_threads
#
# 		Deprecated because DELAYED inserts are not supported.
#
# max_join_size
#
# 		cmd line format: 		--max-join-size=#
# 		Sys var: 				max_join_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				<a lot>
# 		Min: 						1
# 		Max: 						<a lot>
# 
# 		Do not permit statements that probably need to exaime more than max_join_size rows (for single-table statements)
# 		or row combinations (for multiple-table statements) or that are likely to do more than max_join_size disk seeks.
#
# 		By setting this value, you can catch statements where keys are not used properly and that would probably take a long time.
# 		Set this if you use to perform joins that lack a WHERE clause, that take a long time or return more than millions of rows.
#
# 		Setting this var to other than DEFAULT resets the value of sql_big_selects to 0.
#
# 		If you set the sql_big_selects value again, the max_join_size var is ignored.
#
# max_length_for_sort_data
#
# 		Cmd line format: 		--max-length-for-sort-data=#
# 		Sys var: 				max_length_for_sort_data
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		DEFAULT (>= 8.0.1) 	4096
# 		Default (8.0.0) 		1024
# 		Min: 						4
# 		Max: 						<max>
#
# 		The cutoff on the size of index values that determines which filesort algo to use.
#
# max_points_in_geometry
#
# 		cmd line format: 		--max-points-in-geometry=integer
# 		Sys var: 				max_points_in_geometry
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				65536
# 		Min: 						3
# 		Max: 						1048576
#
# 		Max value of the points_per_circle argument to the ST_BUFFER_Strategy() function
#
# max_prepared_stmt_count
#
# 		cmd line format: 		--max-prepared-stmt-count=#
# 		Sys var: 				max_prepared_stmt_count
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				16382
# 		Min: 						0
# 		Max: 						1048576
#
# 		This variable limits the total number of prepared statements in the server.
#
# 		It can be used in environments where there is the potentional for denial-of-service attacks
# 		based on running the server out of memory by preparing huge number of statements.
#
# 		If the value is set lower than the current number of prepared statements, existing statements are not
# 		affected and can be used, but no new statements can be prepared until the current number drops below the limit.
#
# 		
# max_seeks_for_key
#
# 		cmd line format: 		--max-seeks-for-key=#
# 		Sys Var: 				max_seeks_for_key
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default (64-bit) 		<a lot>
# 		Default (32-bit) 		<less>
# 		min: 						1
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		Limit the assumed max number of seeks when looking up rows based on a key.
# 		The MySQL optimizer assumes that no more than this number of key seeks are
# 		required when searching for matching rows in a table by scanning an index, regardless
# 		of the actual cardinality of the index.
#
# 		By setting it to a low value, for instance 100 - you can force MySQL to prefer indexes
# 		instead of table scans.
#
# max_sort_length
#
# 		cmd line format: 		--max-sort-length=#
# 		Sys var: 				max_sort_length
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				1024
# 		Min: 						4
# 		Max: 						<a lot>
#
# 		The number of bytes to use when sorting data values. The server uses only the first max_sort_length
# 		bytes of each value and ignore the rest.
#
# 		Consequently, values that differ only after the first max_sort_length bytes compare as equal for
# 		GROUP BY, ORDER BY and DISTINCT operations.
#
# 		Increasing this may require increasing the value of sort_buffer_size as well.
#
# max_sp_recursion_depth
#
# 		cmd line format: 		--max-sp-recursion-depth[=#]
# 		Sys var: 				max_sp_recursion_depth
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Max: 						255
#
# 		The number of times that any given stored procedure may be called recursively.
# 		The default value for this option is 0, which completely disables recursion in stored
# 		procedures.
#
# 		Max is 255.
#
# 		Stored procedure recursion increases the demand on thread stack space.
#
# 		If you increase the value of max_sp_recursion_depth, it may be necessary 
# 		to increase thread stack size by increasing the value of thread_stack at server startup.
#
# max_tmp_tables
#
# 		REMOVED 
#
# max_user_connections
#
# 		cmd line format: 		--max-user-connections=#
# 		Sys var: 				max_user_connections
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Min: 						0
# 		Max: 						4294967295
#
# 		The max number of simultaneous connections permitted to any given MySQL user account.
# 		A value of 0 (the default) means "No limit".
#
# 		This variable has a global value that can be set at server startup or runtime.
#
# 		It also has a read-only session value that indicates the effective simultaneous-connection
# 		limit that applies to the account associated with the current session. The session value is initalized as
# 		follows: 				
#
# 		If the user account has a nonzero MAX_USER_CONNECTIONS resource limit, the session max_user_connections is set to that limit.
#
# 		Otherwise, the session max_user_connections session value is set to the global value.
#
# 		Account resource limits are specified, using the CREATE_USER or ALTER_USER statement.
#
# max_write_lock_count
#
# 		cmd line format: 		--max-write-lock-count=#
#  	Sys var: 				max_write_lock_count
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default (64-bit) 		<a lot>
# 		Default (32-bit) 		<less>
# 		Min: 						1
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		After this many write locks, permit some pending read lock requests
# 		to be processed in between.
#
# mecab_rc_file
#
# 		cmd line format: 		--mecab-rc-file
# 		Sys var: 				mecab_rc_file
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Dir name
#
# 		The mecab_rc_file option is used when setting up the MeCab full-text parser.
#
# 		The mecab_rc_file option defines the path to the mecabrc configuration file, which is the configuration
# 		file for MeCab. The option is read-only and can only be set at startup.
#
# 		The mecabrc configuration file is required to initialize MeCab.
#
# metadata_locks_cache_size
#
# 		deprecated: 			Yes (removed in 8.0.13)
# 		Sys var: 				metadata_locks_cache_size
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				1024
# 		Min: 						1
# 		Max: 						A LOT
#
# 		REMOVED in 8.0.13
#
# metadata_locks_hash_instances
#
# 		DeprecateD: 			Yes (removed in 8.0.13)
# 		Sys var: 				metadata_locks_hash_instances
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				8
# 		Min: 						1
# 		Max: 						1024
#
# 		Removed in 8.0.13
#
# min_examined_row_limit
#
# 		cmd line format: 		--min-examined-row-limit=#
# 		Sys Var: 				min_examined_row_limit
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Min: 						0
# 		Max (64-bit): 			<a lot>
# 		Max (32-bit): 			<less>
#
# 		Queries that examine fewer than this number of rows are not logged to the slow query log.
#
# multi_range_count
#
# 		cmd line format: 		--multi-range-count=#
# 		Deprecated: 			Yes (Removed in 8.0.3)
# 		Sys var: 				multi_range_count
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				256
# 		Min: 						1
# 		Max: 						<a lot>
#
# 		Removed in 8.0.3
#
# myisam_data_pointer_size
#
# 		cmd line format: 		--myisam-data-pointer-size=#
# 		Sys var: 				myisam_data_pointer_size
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				6
# 		Min: 						2
# 		Max: 						7
#
# 		Default point size in bytes, to be used by CREATE TABLE for MyISAM tables when no MAX_ROWS
# 		option is specified.
#
# 		This variable cannot be less than 2 or larger than 7. Default to 6.
#
# myisam_max_sort_file_size
#
# 		cmd line formT: 		--myisam-max-sort-file-size=#
# 		SYS var: 				myisam_max_sort_file_size
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					integer
# 		Default (64-bit) 		<a lot>
# 		Default (32-bit) 		<less>
#
# 		The max size of the temp file that MySQL is permitted to use while re-creating a MyISAM index
# 		(during REPAIR_TABLE, ALTER_TABLE, or LOAD_DATA_INFILE)
#
# 		If the file size would be larger than this value, the index is created using the key cache instead
# 		, which is slower. Given in bytes.
#
# 		If MyISAM index files exceed the size and disk space available, increasing the value may help performance.
# 		The space must be available in the file system containing the dir where the original index file is located.
#
# myisam_mmap_size
#
# 		cmd line format: 		--myisam-mmap-size=#
# 		Sys var: 				myisam_mmap_size
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default (64-bit) 		<a lot>
# 		Default (32-bit) 		<less>
# 		Min: 						7
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		The max amount of memory to use for memory mapping compressed MyISAM files.
# 		If many compressed MyISAM tables are used, the value can be decreased to reduce
# 		the likelihood of memory-swapping problems.
#
# myisam_recover_options
#
# 		Sys_var: 				myisam_recover_options
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
#
# 		The value of the --myisam-recover-options option
#
# myisam_repair_threads
#
# 		Cmd line format: 		--myisam-repair-threads=#
# 		Sys var: 				myisam_repair_threads
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				1
# 		Min: 						1
# 		Max value (64-bit) 	<a lot>
# 		Max value (32-bit) 	<less>
#
# 		If greater than 1, MyISAM table indexes are created in parallel (each index in its own thread)
# 		during the Repair by sorting process.
#
# 		Multithread repair is still in beta.
#
# myisam_sort_buffer_size
#
# 		cmd line format: 		--myisam-sort-buffer-size=#
# 		Sys Var: 				myisam_sort_buffer_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				8388608
# 		Min: 						4096
# 		Max (other, 64-bit) 	<a lot>
# 		Max (other, 32-bit) 	<less>
# 		Max (windows, 64-bit)<a lot>
# 		Max (Windows, 32-bit)<less>
#
# 		The size of the buffer that is allocated when sorting MyISAM indexes during a REPAIR_TABLE
# 		or when creating indexes with CREATE_INDEX or ALTER_TABLE
#
# myisam_stats_method
#
# 		Cmd line format: 		--myisam-stats-method=name
# 		Sys var: 				myisam_stats_method
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Enumeration
# 		Default: 				nulls_unequal
# 		Valid: 					nulls_equal, nulls_unequal, nulls_ignored
#
# 		How the server treats NULL values when collecting statistics about the distribution of index values for MyISAM tables.
# 		
# 		nulls_equal - All NULL index values are considered equal and form a single value group that has a size equal to number of NULL values.
# 		nulls_unequal - NULL values are considered unequal, and each NULL forms a distinct group value of size 1.
# 		nulls_ignored - NULL values are ignored.
#
# 		The method that is used for generating table stats influences how the optimizer chooses indexes for query execution
#
# myisam_use_mmap
#
# 		cmd line format: 		--myisam-use-mmap
# 		Sys var: 				myisam_use_mmap
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Use memory mapping for reading and writing MyISAM tables.
#
# mysql_native_password_proxy_users
#
# 		cmd line format: 		--mysql-native-password-proxy-users=[={OFF|ON}]
# 		Sys var: 				mysql_native_password_proxy_users
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Controls whether the mysql_native_password built-in authentication plugin supports
# 		proxy users. It has no effect unless the check_proxy_users SYS_VAR is on.
#
# named_pipe
#
# 		Sys var: 			named_pipe
# 		Scope: 				global
# 		Dynamic: 			No
# 		SET_VAR Hint: 		No
# 		Platform: 			Windows
# 		Type: 				Boolean
# 		Default: 			OFF
#
# 		Indicates whether the server supports connections over named pipes.
#
# net_buffer_length
#
# 		cmd line format: 		--net-buffer-length=#
# 		Sys var: 				net_buffer_length
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				16384
# 		Min: 						1024
# 		Max: 						1048576
#
# 		Each client thread is associated with a connection buffer and a result buffer.
#
# 		Both begin with a size given by net_buffer_length but are dynamically enlarged up to
# 		max_allowed_packet bytes as needed.
#
# 		The result buffer shrinks to net_buffer_length after each SQL statement.
#
# 		This var should not normally be changed, but in case of having very small amounts of memory,
# 		you can set it to the expected length of statements sent by clients.
#
# 		If statements exceed this length, the connection buffer is automatically enlarged.
# 		The max value to which net_buffer_length can be set is 1MB.
#
# 		Session value of this is read only.
#
# net_read_timeout
#
# 		Cmd line format: 		--net-read-timeout=#
# 		Sys var: 				net_read_timeout
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				30
# 		Min: 						1
#
# 		The number of seconds to wait for more data from a connection before aborting the read.
#
# 		When the server is reading from the client, net_read_timeout is the timeout value controlling
# 		when to abort.
#
# 		When the server is writing to the client, net_write_timeout is the timeout value controlling when to
# 		abort.
#
# 		See also slave_net_timeout
#
# net_retry_count
#
# 		cmd line format: 		--net-retry-count=#
# 		Sys var: 				net_retry_count
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				10
# 		Min: 						1
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		If a read or write on a communication port is interuppted, retry this many times before giving up.
#
# 		This should be set pretty high on FreeBSD because internal interuppts are sent to all threads.
#
# net_write_timeout
#
# 		cmd line format: 		--net-write-timeout=#
# 		Sys var: 				net_write_timeout
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				60
# 		Min: 						1
#
# 		Number of seconds to wait for a block to be written to a connection before aborting the write.
# 		(See also net_read_timeout)
# 
# new
#
# 		cmd line format: 		--new
# 		Sys var: 				new
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Disabled by: 			skip-new
# 		Type: 					Boolean
# 		Default: 				FALSE
#
# 		Used in 4.0 to turn on some 4.1 behaviors, retained for backwards comp. always off.
#
# ngram_token_size
#
# 		cmd line format: 		--ngram-token-size
# 		Sys var: 				ngram_token_size
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				2
# 		Min: 						1
# 		Max: 						10
#
# 		Defines the n-gram token size for the n-gram full-text parser.
# 		The ngram_token_size option is read-only and can only be modified at startup.
#
# offline_mode
#
# 		cmd line format: 		--offline-mode=val
# 		Sys Var: 				offline_mode
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Whether the server is in "offline mode", which has these characteristics:
#
# 			Connected client users who do not have the CONNECTION_ADMIN or SUPER privs are disconnected on the next request,
# 			with an appropiate error.
#
# 			Disconnection includes terminating running statements and releasing locks. Such clients also cannot initiate new connections,
# 			and receive an appropiate error.
#
# 			Connected client users who have the CONNECTION_ADMIN or SUPER privs are not disconnected, and can initiate new connections to
# 			manage the server.
#
# 			Replication slave threads are permitted to keep applying data to the server.
#
# 		Only users who have the SYSTEM_VARIABLES_ADMIN or SUPER priv can control offline mode.
#
# 		To put a server in offline mode, change the value of the offline_mode SYS_VAR from OFF to ON.
#
# 		To resume normal ops, change offline_mode from ON to OFF. In offline mode, clients that are 
# 		refused access receive an ER_SERVER_OFFLINE_MODE error.
#
# old
#
# 		cmd line format: 		--old
# 		Sys_var: 				old_alter_table
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		old is a compability var. Disabled by default, but can be enabled at startup to revert the server to behaviors present in older verisons.
#
# 		When old is enabled, it changes the default scope of index hints to that used prior to MySQL 5.1.17.
#
# 		That is, index hints with no FOR clause apply only to how indexes are used for retrieval and not to resolution
# 		of ORDER BY or GROUP BY clauses.
#
# 		Take care about enabling this in a replication setup.
#
# 		With statement-based binary logging, having different modes for master and slave - might lead to replication errors.
#
# old_alter_table
#
# 		Cmd line format: 		--old-alter-table
# 		Sys var: 				old_alter_table
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		When this variable is enabled, the server does not use optimized method of processing an ALTER_TABLE operation.
# 		It reverts to using a temporary table, copying over the data and then renaming the temporary table to the original,
# 		as used by MySQL 5.0 and earlier.
#
# 		ALTER TABLE ... DROP PARTITION with old_alter_table=ON rebuilds the partitioned table and attempts to move data
# 		from the dropped partition to another partition with a compatible PARTITION ... VALUES def.
#
# 		Data that cannot be moved to another partition is deleted. In earlier releases, ALTER TABLE ... DROP PARTITION 
# 		with old_alter_table=ON deletes data stored in the partition and drops the partition.
#
# old_passwords
#
# 		Deprecated: 		Yes (removed in 8.0.11)
# 		Sys var: 			old_passwords
# 		Scope: 				Global, Session
# 		Dynamic: 			Yes
# 		SET_VAR Hint: 		No
# 		Type: 				Enumeration
# 		Default: 			0
# 		Valid: 				0, 2
#
# 		REMOVED in 8.0.11
#
# open_files_limit
#
# 		Cmd line format: 		--open-files-limit=#
# 		Sys var: 				open_files_limit
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				5000, with possible adjustment
# 		Min: 						0
# 		Max: 						platform dependent
#
# 		The number of files that the OS permits mysqld to open.
#
# 		The value of this variable at runtime is the real value permitted by the system and might
# 		be different from the value you specify at server startup.
#
# 		The value is 0 on systems where MySQL cannot change the number of open files.
#
# 		The effective open_files_limit value is based on the value specified at system startup (if any) and the values
# 		of max_connections and table_open_cache using the following:
#
# 		1) 10 + max_connections + (table_open_cache * 2)
# 		2) max_connections + 5
# 		3) OS limit if +
# 		4) if OS limit is INF 
# 			open_files_limit value specified at startup, 5000 if None
#
# 		The server bases it's max on the max of the above three - If that many cannot be obtained,
# 		the server attempts to obtain as many as the system will permit.
#
# optimizer_prune_level
#
# 		cmd line format: 		--optimizer-prune-level[=#]
# 		Sys var: 				optimizer_prune_level
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Boolean
# 		Default: 				1
#
# 		Controls the heuristic applied during query optimization to prune less-promising
# 		partial plans from the optimizer search space.
#
# 		A value of 0 disables heuristics so that the optimizer performs an exhaustive search.
# 		A value of 1 causes the optimizer to prune plans based on the number of rows retrieved by intermediate plans.
#
# optimizer_search_depth
#
# 		cmd line format: 		--optimizer-search-depth[=#]
# 		Sys_var: 				optimizer_search_depth
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				62
# 		Min: 						0
# 		Max: 						62
#
# 		The max depth of search performed by the query optimizer. Values larger than
# 		the number of relations in a query result in better query plans, but take longer
# 		to generate an execution plan for a query.
#
# 		Values smaller than the number of relations in a query return an execution plan
# 		quicker, but the resulting plan may be far from being optimal.
#
# 		If set to 0, the system automatically picks a reasonable value.
#
# optimizer_switch
#
# 		cmd line format: 		--optimizer-switch=value
# 		Sys_var: 				optimizer_switch
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Set
# 		Valid (>= 8.0.13) 	batched_key_access={on|off}
# 									block_nested_loop={on|off}
# 									condition_fanout_filter={on|off}
#									derived_merge={on|off}
# 									duplicateweedout={on|off}
#
# 									engine_condition_pushdown={on|off}
# 									firstmatch={on|off}
# 									index_condition_pushdown{on|off}
# 									index_merge={on|off}
# 									index_merge_intersection={on|off}
# 									index_merge_union={on|off}
# 									loosescan={on|off}
# 									materialization={on|off}
#
# 									mrr={on|off}
# 									mrr_cost_based={on|off}
# 									semijoin={on|off}
# 									skip_scan={on|off}
# 									subquery_materialization_cost_based={on|off}
# 									use_index_extensions={on|off}
# 									use_invisible_indexes={on|off}
#
# 		Valid (>= 8.0.3, <= 8.0.12)
#
# 									batched_key_access={on|off}
# 									block_nested_loop={on|off}
# 									condition_fanout_filter={on|off}
# 									derived_merge={on|off}
# 									duplicateweedout={on|off}
# 									engine_condition_pushdown={on|off}
# 									firstmatch={on|off}
# 									index_condition_pushdown={on|off}
# 									index_merge={on|off}
# 									index_merge_intersection={on|off}
# 									index_merge_sort_union={on|off}
#
# 									index_merge_union={on|off}
# 									loosescan={on|off}
# 									materialization={on|off}
# 									mrr={on|off}
# 									mrr_cost_based={on|off}
# 									semijoin={on|off}
# 									subquery_materialization_cost_based={on|off}
# 									use_index_extensions={on|off}
# 									use_invisible_indexes={on|off}
#
# 		Valid (<= 8.0.2) 		batched_key_access={on|off}
# 									block_nested_loop={on|off}
# 									condition_fanout_filter={on|off}
# 									derived_merge={on|off}
# 									duplicateweedout={on|off}
# 									engine_condition_pushdown={on|off}
#
# 									firstmatch={on|off}
# 									index_condition_pushdown={on|off}
# 									index_merge={on|off}
# 									index_merge_intersection={on|off}
# 									index_merge_sort_union={on|off}
# 									index_merge_union={on|off}
# 									loosescan={on|off}
# 									materialization={on|off}
# 									mrr={on|off}
# 									mrr_cost_based={on|off}
# 
# 									semijoin={on|off}
# 									subquery_materialization_cost_based={on|off}
# 									use_index_extensions={on|off}
#
# 		The optimizer_switch SYS_VAR enables control over optimizer behavior.
#
# 		The value of this var is a set of flags, each of which has a value of on
# 		or off to indicate whether the corresponding optimizer behavior is enabled or disabled.
#
# 		This variable has global and session values and can be changed at runtime.
#
# 		The global default can be set at server startup.
#
# 		To see the current set of optimizer flags, select the variable value:
#
# 		SELECT @@optimizer_switch\G
# 		***************************** 1. row **********************************
# 		@@optimizer_switch: 	index_merge=on,index_merge_union=on (off if it's off), etc.
#
# optimizer_trace
#
# 		Sys var: 		optimizer_trace
# 		Scope: 			Global, Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	No
# 		Type: 			String
#
# 		Controls the optimizer tracing.
#
# optimizer_trace_features
#
# 		Sys var: 		optimizer_trace_features
# 		Scope: 			Global, Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	no
# 		Type: 			String
#
# 		Enables or disabled selected optimizer tracing features.
#
# optimizer_trace_limit
#
# 		Sys var: 		optimizer_trace_limit
# 		Scope. 			Global, Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	No
# 		Type: 			Integer
# 		Default: 		1
#
# 		Max number of optimizer traces to display.
#
# optimizer_trace_max_mem_size
#
# 		Sys var: 		optimizer_trace_max_mem_size
# 		Scope: 			Global, Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	Yes
# 		Type: 			Integer
# 		Default (>= 8.0.4) 1048576
# 		Default (<= 8.0.3) 16384
#
# 		The max cumulative size of stored optimizer traces.
#
# optimizer_trace_offset
#
# 		Sys var: 		optimizer_trace_offset
# 		Scope: 			Global, Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	No
# 		Type: 			Integer
# 		Default: 		-1
#
# 		The offset of optimizer traces to display.
#
# performance_schema_xxx
#
# 		Performance Schema sys vars, listed later.
# 		Can be used to configure performance schema ops.
#
# parser_max_mem_size
#
# 		cmd line format: 		--parser-max-mem-size=N
# 		Sys var: 				parser_max_mem_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default (64-bit) 		<a lot>
# 		Default (32-bit) 		<less>
# 		Min: 						10000000
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		The max amount of memory available to the parser. 
# 		The default value places no limit on memory available.
# 		
# 		The value can be reduced to protect against out-of-memory situations caused by
# 		parsing long or complex SQL statements.
#
# password_history
#
# 		cmd line format: 		--password-history=#
# 		Introduced: 			8.0.3
# 		Sys var: 				password_history
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Min: 						0
# 		Max: 						4294967295
#
# 		This variable defines the global policy for controlling reuse of previous passwords based on
# 		required minimum number of password changes.
#
# 		For an account password used previously, this variable indicates the number of subsequent account password
# 		changes that must occur before the password can be used.
#
# 		If the value is 0 (default), there is no reuse restriction based on number of PW changes.
#
# 		Changes to this variable apply immediately to all accounts defined with the PASSWORD HISTORY DEFAULT option.
#
# 		The global number-of-changes password reuse policy can be overridden as desired for individual accounts using
# 		the PASSWORD HISTORY option of the CREATE USER and ALTER USER statements.
#
# password_require_current
#
# 		cmd line format: 		--password-require-current[={OFF|ON}]
# 		Introduced: 			8.0.13
# 		Sys var: 				password_require_current
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		Defines the global policy for controlling whether attempts to change an acc PW must specify the current PW to be replaced.
#
# 		Changes to this var apply immediately to all accounts defined with the PASSWORD REQUIRE CURRENT DEFAULT option.
#
# 		The global verification-required policy can be overriden as desired for individual accounts using the
# 		PASSWORD REQUIRE option of the CREATE_USER and ALTER_USER statements.
#
# password_reuse_interval
#
# 		cmd line format: 		--password-reuse-interval=#
# 		Introduced: 			8.0.3
# 		Sys var: 				password_reuse_interval
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				0
# 		Min: 						0
# 		Max: 						<a lot>
#
# 		This variable defines the global policy for controlling reuse of previous PWs based on time elapsed.
# 		For an account PW used previously, this var indicates the number of days that must pass before the PW can be reused.
#
# 		If the value is 0 (default), there is no reuse restriction based on time elapsed.
#
# 		Changes to this var apply instantly to all accounts defined with the PASSWORD REUSE INTERVAL DEFAULT option.
#
# 		The global time-elapsed PW reuse policy can be overridden as desired for individual accounts using the PASSWORD REUSE INTERVAL
# 		option of the CREATE_USER and ALTER_USER statements.
#
# persisted_globals_load
#
# 		cmd line format: 		--persisted-globals-load[=ON|OFF]
# 		Sys var: 				persisted_globals_load
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				ON
#
# 		Whether to load persisted configuration settings from the mysqld-auto.cnf file in the data dir.
# 		The server normally processes this file at startup after all other option files.
#
# 		Disabling this causes the server startup sequence to skip mysqld-auto.cnf
#
# 		To modify the contents of mysqld-auto.cnf, use the SET_PERSIST, SET_PERSIST_ONLY and
# 		RESET_PERSIST statements.
#
# pid_file
#
# 		cmd line format: 		--pid-file=file_name
# 		Sys var: 				pid_file
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					File name
#
# 		The path name of the process ID file. This var can be set with the --pid-file option.
#
# 		The server creates the file in the data dir unless an absolute path name is given
# 		to specify a different dir.
#
# 		If you specify the --pid-file option, you must specify a value.
#
# 		If you do not specify the --pid-file option, MySQL uses a default
# 		value of <host_name>.pid where <host_name> is the name of the host machine.
#
# 		The process ID file is used by other programs such as mysqld_safe to determine 
# 		the server's process ID.
#
# 		On Windows, this var also affects the default error log file name.
#
# plugin_dir
#
# 		cmd line format: 		--plugin-dir=dir_name
# 		Sys var: 				plugin-dir
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
#  	Type: 					Dir name
# 		Default: 				BASEDIR/lib/plugin
#
# 		Path name of the plugin dir.
#
# 		If the plugin dir is writable by server, it may be possible for a user to write
# 		executable code to a file in the dir using SELECT ... INTO DUMPFILE
#
# 		This can be prevented by making plugin_dir read only to the server or by setting
# 		--secure-file-priv to a dir where SELECT writes can be made safely.
#
# port
#
# 		cmd line format: 		--port=#
# 		Sys var: 				port
# 		Scope: 					Global
# 		Dynamic: 				No
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				3306
# 		Min: 						0
# 		Max: 						65535
#
# 		Number of port on which the server listens for TPC/IP conns.
# 		Can be set with --port
#
# preload_buffer_size
#
# 		cmd line format: 		--preload-buffer-size=#
# 		Sys var: 				preload_buffer_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				32768
# 		Min: 						1024
# 		Max: 						<a lot>
#
# 		Size of the buffer that is allocated when preloading indexes.
#
# profiling
#
# 		If set to 0 or OFF (the default), statement profiling is disabled.
#
# 		If set to 1 or ON, statement profiling is enabled and the SHOW PROFILE
#  	and SHOW PROFILES statements provide access to profiling information.
#
# 		Deprecated.
#
# profiling_history_size
#
# 		Number of statements for which to maintain profiling information if profiling is enabled.
# 		Default is 15.
#
# 		max is 100. Setting this 0 disables profiling.
#
# 		Deprecated.
#
# protocol_version
#
# 		Sys var: 		protocol_version
# 		Scope: 			Global
# 		Dynamic: 		No
# 		SET_VAR Hint: 	No
# 		Type: 			Integer
#
# 		The version of the client/server protocol used by the MySQL server.
#
# proxy_user
#
# 		Sys var: 		proxy_user
# 		scope: 			Session
# 		Dynamic: 		No
# 		SET_VAR Hint: 	No
# 		Type: 			String
#
# 		If the current client is a proxy for another user, this var is the proxy user account name.
# 		Otherwise, this var is NULL.
#
# pseudo_slave_mode
#
# 		Sys var: 		pseudo_slave_mode
# 		Scope: 			Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	No
# 		Type: 			Integer
#
# 		This var is used for internal server use.
#
# 		AS of MySQL 8.0.14, setting the session value of this sys var is a restricted ops.
#
# 		The session user must have the privs to set it.
#
# 		In MysQL >= 8.0.14 - pseudo_slave_mode has the following effects on the handling of a statement that
# 		sets one or more unsupported or unknown SQL modes:
#
# 			If true - the server ignores the unsupported mode and raises a warning
#
# 			If false - the server rejects the statement with ER_UNSUPPORTED_SQL_MODE
#
# 		mysqlbinlog sets this var to true prior to executing any other SQL.
#
# pseudo_thread_id
#
# 		Sys var: 		pseudo_thread_id
# 		Scope: 			Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	No
# 		Type: 			Integer
#
# 		Used for internal server use
#
# 		Setting this is a restricted ops, must have privs
#
# query_alloc_block_size
#
# 		Cmd line format: 		--query-alloc-block-size=#
# 		Sys var: 				query_alloc_block_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				8192
# 		Min: 						1024
# 		Max: 						<a lot>
# 		Block size: 			1024
#
# 		The allocation size of memory blocks that are allocated for objects created during statement parsing
# 		and execution. 
#
# 		If you have problems with memory fragmentation, it might help to increase this param.
# 		
# query_cache_limit
#
# 		Cmd line format: 		--query-cache-limit=#
# 		DeprecateD: 			Yes (removed in 8.0.3)
# 		Sys var: 				query_cache_limit
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				1048576
# 		Min: 						0
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		REMOVED in 8.0.3
#
# query_cache_min_res_unit
#
# 		Cmd line format: 		--query-cache-min-res-unit=#
# 		Deprecated: 			Yes (Removed in 8.0.3)
# 		Sys var: 				query_cache_min_res_unit
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					integer
# 		Default: 				4096
# 		Min: 						512
# 		Max (64-bit) 			<a lot>
# 		Max (32-bit) 			<less>
#
# 		REMOVED in 8.0.3
#
# query_cache_size
#
# 		cmd line format: 				--query-cache-size=#
# 		Deprecated: 					Yes (removed in 8.0.3)
# 		Sys var: 						query_cache_size
# 		Scope: 							Global
# 		Dynamic: 						Yes
# 		SET_VAR Hint: 					No
# 		Type: 							Integer
# 		Default (64-bit, >= 8.0.1) 0
#  	Default (64-bit, 8.0.0) 	1048576
#
# 		Default (32-bit, >= 8.0.1) 0
# 		Default (32-bit, 8.0.0) 	1048576
# 
# 		Min: 								0
#
# 		Max (64-bit) 					<a lot>
# 		Max (32-bit) 					<less>
#
# 		REMOVED in 8.0.3
#
# query_cache_type
#
# 		Cmd line format: 			--query-cache-type=#
# 		Deprecated: 				Yes (Removed in 8.0.3)
# 		Sys var: 					query_cache_type
# 		Scope: 						Global, Session
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						Enumeration
# 		Default: 					0
# 		Valid: 						0, 1, 2
#
# 		Removed in 8.0.3
#
# query_cache_wlock_invalidate
#
# 		cmd line format: 			--query-cache-wlock-invalidate
# 		Deprecated: 				Yes (Removed in 8.0.3)
# 		Sys var: 					query_cache_wlock_invalidate
# 		Scope: 						Global, Session
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						Boolean
# 		Default: 					FALSE
#
# 		Removed in 8.0.3
#
# query_prealloc_size
#
# 		cmd line format: 			--query-prealloc-size=#
# 		Sys var: 					query_prealloc_size
# 		Scope: 						Global, Session
# 		Dynamic: 					Yes
# 		SET_VAR Hint: 				No
# 		Type: 						Integer
# 		Default: 					8192
# 		Min: 							8192
# 		Max (64-bit) 				<a lot>
# 		Max (32-bit) 				<less>
# 		Block size: 				1024
#
# 		The size of the persistent buffer used for statement parsing and execution.
# 		This buffer is not freed between statements.
#
# 		If you are running complex queries, a larger query_prealloc_size value might
# 		be helpful in improving performance, because it can reduce the need for the server
# 		to perform memory allocation during query execution operations.
#
# rand_seed1
#
# 		sys var: 				rand_seed1
# 		Scope: 					Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
#
# 		The rand_seed1 and rand_seed2 vars exist as session vars only, and can be set but not read.
# 		The variable - but not their values - are shown in the output of SHOW_VARIABLES.
#
# 		The purpose of these vars is to support replication of the RAND() function.
# 		For statements that invoke RAND(), the master passes two values to the slave -
# 		where they are used to seed the RNG.
#
# 		The slave uses these values to set the session vars rand_seed1 and rand_seed2 so that RAND()
# 		on the slave generates the same value as on the master.
#
# rand_seed2
# 
# 		Same as rand_seed1
#
# range_alloc_block_size
#
# 		Cmd line format: 		--range-alloc-block-size=#
# 		Sys var: 				range_alloc_block_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				4096
# 		Min: 						4096
# 		Max (64-bit) 			<a lot>
# 		Max: 						<less>
# 		Block size: 			1024
#
# 		Size of blocks that are allocated when doing range optimization.
#
# range_optimizer_max_mem_size
#
# 		cmd line ormat: 		--range-optimizer-max-mem-size=N
# 		Sys var: 				range_optimizer_max_mem_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Integer
# 		Default: 				8388608
# 		Min: 						0
# 		Max: 						<a lot>
#
# 		The limit on memory consumption for the range optimizer.
# 		A value of 0 means "no limit".
#
# 		If an execution plan considered by the optimizer uses the range access
# 		method but the optimizer estimates that the amount of memory needed for this
# 		method would exceed the limit - it abandons the plan and considers other plans.
#
# rbr_exec_mode
#
# 		sys var: 		rbr_exec_mode
# 		Scope: 			Global, Session
# 		Dynamic: 		Yes
# 		SET_VAR Hint: 	No
# 		Type: 			Enumeration
# 		Default: 		STRICT
# 		Valid: 			IDEMPOTENT, STRICT
#
# 		For internal use by mysqlbinlog.
# 		The variable switches the server between IDEMPOTENT mode and STRICT mode.
#
# 		IDEMPOTENT mode causes suppression of duplicate-key and no-key found errors
# 		in BINLOG statements generated by mysqlbinlog.		
#
# 		This mode is useful when replaying a row-based binary log on a server that causes
# 		conflicts with existing data. 
#
# 		mysqlbinlog sets this mode when you specify the --idempotent option by writing the following:
#
# 		SET SESSION RBR_EXEC_MODE=IDEMPOTENT;
#
# 		As of MySQL 8.0.14 - setting the session value of this sys var is a restricted ops.
# 		Reqs privs.
#
# read_buffer_size
#
# 		cmd line format: 		--read-buffer-size=#
# 		Sys var: 				read_buffer_size
# 		Scope: 					Global, Session
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			Yes
# 		Type: 					Integer
# 		Default: 				131072
# 		Min: 						8200
# 		Max: 						<a lot>
#
# 		Each thread that does a sequential scan for a MyISAM table allocates a buffer of this size (in bytes)
# 		for each table it scans.
#
# 		If you do many sequential scans, you might want to increase this value.
#
# 		Value of this var should be % 4kb. If it set to a value which is not, it's rounded down to closest % 4kb value.
#
# 		Is also used in the following context for all storage engines:
#
# 			For caching the indexes in a temporary file (not a temp table), when sorting rows for ORDER BY.
#
# 			For bulk insert into partitions.
#
# 			For caching results of nested queries.
#
# 		read_buffer_size is also used in one other storage engine-specific way: To determine the memory block size
# 		for MEMORY tables.
#
# read_only
#
# 		cmd line format: 		--read-only
# 		Sys var: 				read_only
# 		Scope: 					Global
# 		Dynamic: 				Yes
# 		SET_VAR Hint: 			No
# 		Type: 					Boolean
# 		Default: 				OFF
#
# 		When the read_only sys var is enabled, the server permits no client updates except
# 		from users who have the CONNECTION_ADMIN or SUPER privs.
#
# 		This var is disabled by default.
#
# 		The server also supports a super_read_only sys var (disabled by default), which has these effects:
#
# 			If super_read_only is enabled, the server prohibits client updates, even from users who have the SUPER priv.
#
# 			Setting super_read_only to ON implicitly forces read_only to ON.
#
# 			Setting read_only to OFF implicitly forces super_read_only to OFF.
#
# 		Even with read_only enabled, the server permits these operations:
#
# 			Updates performed by slave threads, if the server is a replication slave. 
#
# 			In replication setups, it can be useful to enable read_only on slave servers
# 			to ensure that slaves accept updates only from the master server and not from clients.
#
# 			Use of ANALYZE_TABLE or OPTIMIZE_TABLE statements. The purpose of read-only mode is to prevent
# 			changes to table structure or contents.
#
# 			Analysis and optimization do not qualify as such changes. 
#
# 			This means for example, that consistency checks on read-only replication slaves can be performed with
# 			mysqlcheck --all-databases --analyze
#
# 			Operations on TEMPORARY tables
#
# 			Inserts into the log tables (mysql.general_log and mysql.slow_log)
#
# 			Updates to Performance Schema tables, such as UPDATE or TRUNCATE TABLE operations.
#
# 		Changes to read_only on a master server are not replicated to slave servers. 
# 		The value can be set on a slave server independent of the setting on the master.
#
# 		The following conditions apply to attempts to enable read_only (including implicit attempts resulting from enabling super_read_only):
# 
# 			The attempt fails and an error occurs if you have any explicit locks (acquired with LOCK_TABLES) or have a pending transaction.
#
# 			The attempt blocks while other clients hold explicit table locks or have pending transactions, until the locks are released and
# 			the trans ends. 
# 			
# 			While the attempt to enable read_only is pending, requests by other clients for table locks or to begin trans also block until read_only has been set.
#
# 			The attempt blocks if there are active transactions that hold metadata locks, until those transactions end.
#
# 			read_only can be enabled while you hold a global read lock (acquired with FLUSH_TABLES_WITH_READ_LOCK) because that does
# 			not involve table locks.
#
# read_rnd_buffer_size
#
# 			cmd line format: 		--read-rnd-buffer-size=#
# 			Sys var: 				read_rnd_buffer_size
# 			Scope: 					Global, Session
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			Yes
# 			Type: 					Integer
# 			Default: 				262144
# 			Min: 						1
# 			Max: 						<less>
#
# 			This var is used for reads from MyISAM tables and for any storage engine, for multi-range read optimization.
#
# 			When reading rows from a MyISAM table in sorted order following a key-sorting operation, the rows
# 			are read through this buffer to avoid disk seeks.
#
# 			Setting this variable to a large value can improve ORDER BY performance by a lot.
# 			However, this is a buffer allocated for each client - so you should not set the global variable to a large value.
#
# 			Instead, the session value can be large for where you need to run large queries.
#
# regexp_stack_limit
#
# 			cmd line format: 		--regexp-stack-limit=#
# 			introduced: 			8.0.4
# 			Sys var: 				regexp_stack_limit
# 			Scope: 					Global
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			No
# 			Type: 					Integer
# 			Default: 				8 000 000
# 			Min: 						0
# 			Max: 						<a lot>
#
# 			Max value available memory in bytes for the internal stack used for regex matching ops
# 			performed by REGEXP_LIKE() and similar functions.
#
# regexp_time_limit
#
# 			cmd line format: 		--regexp-time-limit=#
# 			Introduced: 			8.0.4
# 			Sys var: 				regexp_time_limit
# 			Scope: 					Global
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			No
# 			Type: 					Integer
# 			Default: 				32
# 			min: 						0
# 			Max: 						<a lot>
#
# 			The time limit for regexp matching ops performed by REGEXP_LIKE() and similar functions.
# 			This limit is expressed as the max permitted number of steps performed by the match engine,
# 			and thus affects execution time only indirectly.
#
# 			Typically on the order of milliseconds.
#
# require_secure_transport
#
# 			cmd line format: 		--require-secure-transport[={OFF|ON}]
# 			Sys var: 				require_secure_transport
# 			Scope: 					Global
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			No
# 			Type: 					Boolean
# 			Default: 				OFF
# 			
#
# 			Whether client connections to the server are required to use some form of secure transport.
# 			When this variable is enabled, the server permits only TCP/IP connections that use SSL,
# 			or connections that use a socket file (on Unix) or shared memory (on Windows).
#
# 			The server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.
#
# 			This capability supplements per-account SSL reqs, which takes precedence.
#
# 			For example,if an acc is defined with REQUIRE SSL - enabling require_secure_transport
# 			does not make it possible to use the account to connect using a Unix socket file.
#
# 			It is possible for a server to have no secure transports available. For example, a server on Windows
# 			supports no secure transports if started without specifying any SSL cert or key files and with
# 			the shared_memory SYS_VAR disabled.
#
# 			Under said conditions, attempts to enable require_secure_transport at startup cause the server to write
# 			a message to the error log and exit. Attempts to enable the variable at runtime fail with an ER_NO_SECURE_TRANSPORTS_CONFIGURED
# 			error.
#
# resultset_metadata
#
# 			Introduced: 		8.0.3
# 			Sys var: 			resultset_metadata
# 			Scope: 				Session
# 			Dynamic: 			Yes
# 			SET_VAR Hint: 		No
# 			Type: 				Enumeration
# 			Default: 			FULL
# 			Valid: 				FULL, NONE
#
# 			For connections for which metadata transfer is optional, the client sets the resultset_metadata
# 			SYS var to control whether the server returns result set metadata.
#
# 			Permitted values are FULL (return all metadata; this is the default) and NONE (return no metadata)
#
# 			For connections that are not metadata-optional, setting resultset_metadata to NONE produces an error.
#
# schema_definition_cache
#
# 			cmd line format: 		--schema-definition-cache=N
# 			Sys var: 				schema_definition_cache
# 			scope: 					Global
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			No
# 			Type: 					Integer
# 			Default: 				256
# 			Min: 						256
# 			Max: 						524288
#
# 			Defines a limit for the number of schema def objects, both used and unused, that can be kept
# 			in the dictionary object cache.
#
# 			Unused schema definition objects are only kept in the dictionary object cache when the number in use is
# 			less than the capacity defined by schema_definition_cache.
#
# 			A setting of 0 means that schema definition objects are only kept in the dictionary object cache
# 			while they are in use.
#
# secure_auth
#
# 			cmd line format: 		--secure-auth
# 			Deprecated: 			Yes (removed in 8.0.3)
# 			Sys var: 				secure_auth
# 			Scope: 					Global
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			No
# 			Type: 					Boolean
# 			Default: 				On
# 			Valid: 					On
#
# 			Removed in 8.0.3
#
# secure_file_priv
#
# 			cmd line format: 		--secure-file-priv=dir_name
# 			Sys var: 				secure_file_priv
# 			Scope: 					Global
# 			Dynamic: 				No
# 			SET_VAR Hint: 			No
# 			Type: 					String
# 			Default: 				platform specific
# 			Valid: 					empty string, dirname, NULL
#
# 			Used to limit the effect of data import and export operations, such as those performed
# 			by the LOAD_DATA and SELECT_..._INTO_OUTFILE statements and the LOAD_FILE() function.
#
# 			Permitted only to users with FILE priv.
#
# 			secure_file_priv can be set as follows:
#
# 				If empty - var has no effect. Not a secure setting.
#
# 				If name of a dir, the server limits import and export ops to work only with files in that dir.
# 				The dir must exist, the server will not create it.
#
# 				If set to NULL, the server disables import and export ops.
#
# 			The default value is platform specific and depends on the value of the INSTALL_LAYOUT CMake option,
# 			as shown as follows:
#
# 			(To specify the default secure_file_priv value explicitly if you are building from source, use the 
# 			INSTALL_SECURE_FILE_PRIVDIR CMake option.)
#
# 				INSTALL_LAYOUT Value 		Default secure_file_priv Value
# 				STANDALONE, WIN 				empty
# 				DEB, RPM, SLES, SVR4 		/var/lib/mysql-files
# 				Otherwise 						mysql-files under the CMAKE_INSTALL_PREFIX value
#
# 			The server checks the value of secure_file_priv at startup and writes a warning to the error log
# 			if the value is insecure.
#
# 			A non-NULL value is considered insecure if it is empty, or the value is the dara dir or a subdir of it,
# 			or a sub-dir that is accessible by all users.
#
# 			If secure_file_priv is set to a nonexistent path, the server writes an error message to the error log and exits.
#
# server_id
#
# 			cmd line format: 		--server-id=#
# 			Sys var: 				server_id
# 			Scope: 					Global
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			No
# 			Type: 					Integer
# 			Default (>= 8.0.3) 	1
# 			Default (<= 8.0.2) 	0
# 			Min: 						0
# 			Max: 						<a lot>
#
# 			Specifies the server ID. This variable is set by the --server-id option.
# 			The server_id sys var is set to 1 by default.
#
# 			The server can be started with this default ID, but when bin log is enabled,
# 			an informational message is issued if you did not specify a server ID explicitly using the --server-id option.
#
# 			For servers that are used in a replication topology, you must specify a unique server ID for each replication
# 			server, in the range from 1 to 2^32 - 1. "Unique" means that each ID must be different from other IDs in use by 
# 			any other replication master or slave.
#
# 			If the server ID is set to 0, binary logging takes place - but a master server with a server ID of 0
# 			refuses any connections from slaves and a slave with a server ID of 0 refuses to connect to a master.
#
# 			Note that although you can change the server ID dynamically to a nonzero value, doing so does not
# 			enable replication to start immediately.
#
# 			You must change the server ID and then restart the server to initialize the replication slave.
#
# session_track_gtids
#
# 			cmd line format: 			--session-track-gtids=[value]
# 			Sys var: 					session_track_gtids
# 			Scope: 						Global, Session
# 			Dynamic: 					Yes
# 			SET_VAR Hint: 				No
# 			Type: 						Enumeration
# 			Default: 					OFF
# 			Valid: 						OFF, OWN_GTID, ALL_GTIDS
#
# 			Controls whether the server tracks GTIDs within the current session and returns them to the client.
# 			Depending on the variable value, at the end of executing each transaction, the server GTIDs are captured
# 			by the tracker and returned to the client.
#
# 			These session_track_gtids values are permitted:
#
# 				OFF: Track collects no GTIDs. Default.
#
# 				OWN_GTID: The track collects GTIDs generated by successfully committed read/write transactions.
#
# 				ALL_GTIDS: The track collects all GTIDs in the gtid_executed SYS_VAR at the time the current transaction commits,
# 				regardless of whether the transaction is read/write or read only.
#
# 			session_track_gtids cannot be set within transactional context.
#
# session_track_schema
#
# 			cmd line format: 		--session-track-schema=#
# 			Sys var: 				session_track_schema
# 			Scope: 					Global, Session
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			No
# 			Type: 					Boolean
# 			Default: 				ON
#
# 			Controls whether the server tracks when the default schema (database) is set within the current session
# 			and notifies the client to make the schema name available.
#
# 			If the schema name tracked is enabled, name notification occurs each time the default schema is set,
# 			even if the new schema name is the same as the old.
#
# session_track_state_change
#
# 			Cmd line format: 		--session-track-state-change=#
# 			Sys var: 				session_track_state_change
# 			Scope: 					Global, Session
# 			Dynamic: 				Yes
# 			SER_VAR Hint: 			No
# 			Type: 					Boolean
# 			Default: 				OFF
#
# 			Controls whether the server tracks changes to the state of the current session and notifies
# 			the client when state changes occur.
#
# 			Changes can be reported for these attributes of client session state:
#
# 				Default schema (db)
#
# 				Session-specific values for sys vars.
#
# 				User-defined vars
#
# 				Temp tables
#
# 				Prepared statements
#
# 			If the session state tracker is enabled, notification occurs for each change that involves tracked session attributes,
# 			even if the new attribute values are the same as the old.
#
# 			For example, setting a user-defined variable to its current value results in a notification.
#
# 			The session_track_state_change variable controls only notification of when changes occur, not what the changes are.
#
# 			For example, state-change notifications occur when the default schema is set or tracked session SYS vars are assigned,
# 			but the notification does not include the schema name or variable values.
#
# 			To receive notification of the schema name or session sys var values - use the session_track_schema or session_track_system_variables
# 			SYS_Vars respectively.
#
# 			NOTE: Assigning a value to session_track_state_change itself is not considered a state change and is not reported as such.
# 					However, if its name is listed in the value of session_track_system_variables, any assignments to it do result in notification of the new value.
#
# session_track_system_variables
#
# 			cmd line format: 		--session-track-system-variables=#
# 			Sys var: 				session_track_system_variables
# 			Scope: 					Global, Session
# 			Dynamic: 				Yes
# 			SET_Var Hint: 			No
# 			Type: 					String
# 			Default: 				time_zone, autocommit, character_set_client, character_set_results,
# 										character_set_connection
#
# 			Controls whether the server tracks assignments to session system vars and notifies the client of the name
# 			and value of each assigned variable.
#
# 			The variable value is a comma-separated list of variables for which to track assignments.
#
# 			By default, notification is enabled for time_zone, autocommit, character_set_client,
# 			character_set_results and character_set_connection.
#
# 			(The latter three vars are those affacted by SET_NAMES)
#
# 			Wildcard * all denotation can be given.
#
# 			To disable notification session vars assignments, set session_track_system_variables to the
# 			empty string.
#
# 			If session system variable tracking is enabled, notification occurs for all assignments to tracked
# 			session variables, even if the new values are the same as the old.
#
# session_track_transaction_info
#
# 			cmd line format: 		--session-track-transaction-info=value
# 			Sys var: 				session_track_transaction_info
# 			Scope: 					Global, Session
# 			Dynamic: 				Yes
# 			SET_VAR Hint: 			No
# 			Type: 					Enumeration
# 			Default: 				OFF
# 			Valid: 					OFF, STATE, CHARACTERISTICS
#
# 			Controls whether the server tracks the state and characteristics of transactions within the current session
# 			and notifies the client to make this information available.
#
# 			These session_track_transaction_info values are permitted:
#
# 				OFF: Disable transaction state tracking. Default.
#
# 				STATE: Enable transaction state tracking without characteristics tracking.
# 						 State tracking enables the client to determine whether a transaction is in progress
# 						 and whether it could be moved to a different session without being rolled back.
#
# 				CHARACTERISTICS: Enable transaction state tracking, including chars tracking. Characteristics tracking enables
# 						 the client to determine how to restart a transaction in another session so that it has the same
# 						 characteristics as in the original session.
#
# 						The following chars are relevant:
#
# 						READ ONLY
# 						READ WRITE
# 						ISOLATION LEVEL
# 						WITH CONSISTENT SNAPSHOT
#
# 				For a client to safely relocate a transaction to another session, it must track not only transaction
# 				state but also transaction characteristics. 
#
# 				In addition, the client must track the transaction_read_only and transaction_isolation SYS_VAR to correctly determine the session defaults.
#
# 				(To track these, list them in the value of the session_track_system_variables SYS_VAR)
#
# sha256_password_auto_generate_rsa_keys
#
# 				Cmd line format: 		--sha256-password-auto-generate-rsa-keys[={OFF|ON}]
# 				Sys var: 				sha256_password_auto_generate_rsa_keys
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
# 				Type: 					Boolean
# 				Default: 				ON
#
# 				Available if the server was compiled using OpenSSL. The server uses it to determine whether to
# 				autogenerate RSA private/public key-pair files in the data dir if they do not already exist.
#
# 				At startup, the server automatically generates RSA private/public key-pair files in the data dir
# 				if all of these conditions are true:
#
# 					The sha256_password_auto_generate_rsa_keys or caching_sha2_password_auto_generate_rsa_keys SYS_VAR is on.
#
# 					No RSA options are specified
#
# 					The RSA files are missing from the data dir.
#
# 				These key-pair files enable secure PW exchange using RSA over unencrypted connections for accounts
# 				authenticated by the sha256_password or caching_sha2_password plugin.
#
# 				The auto_generate_certs SYS_VAR is related but controls autogeneration of SSL certs and keys needed for secure connections.
#
# sha256_password_private_key_path
#
# 				cmd line format: 		--sha256-password-private-key-path=file_name
# 				Sys var: 				sha256_password_private_key_path
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
# 				Type: 					File name
# 				Default: 				private_key.pem
#
# 				This var is available if MySQL was compiled using OpenSSL.
# 				Its value is the path name of the RSA priv key file for the sha256_password
# 				auth plugin.
#
# 				Relative to server data dir. Must be in PEM.
#
# 				Permissions should be constrained to MySQL reading it.
#
# sha256_password_proxy_users
#
# 				cmd line format: 		--sha256-password-proxy-users=[={OFF|ON}]
# 				Sys var: 				sha256_password_proxy_users
# 				Scope: 					Global
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			No
# 				Type: 					Boolean
# 				Default: 				OFF
#
# 				Controls whether the sha256_password built-in auth plugin supports proxy users.
# 				Has no effect unless the check_proxy_users SYS_VAR is on.
#
# sha256_password_public_key_path
#
# 				cmd line format: 		--sha256-password-public-key-path=file_name
# 				Sys var: 				sha256_password_public_key_path
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
# 				Type: 					File name
# 				Default: 				public_key.pem
#
# 				Available if MYSQL was compiled using OpenSSL. 
# 				Its value is the path name of the RSA public key file for the sha256_password auth plugin.
# 			 			
# 				If the file is named as a relative path, it is interpreted relative to the server Data dir.
# 				File must be in PEM format.
#
# 				The key is a public key, thus copies can be distirbued to client users.
# 				(Clients that explicitly specify a public key when connecting to the server using RSA
# 				PW encryption must use the same public key as that used by the server.)
#
# shared_memory
#
# 				cmd line format: 		--shared-memory[={0,1}]
# 				Sys var: 				shared_memory
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
# 				Platform: 				Windows
# 				Type: 					Boolean
# 				Default: 				FALSE
#
# 				Whether hte server permits shared-memory connections.
#
# shared_memory_base_name
#
# 				cmd line format: 		--shared-memory-base-name=name
# 				Sys var: 				shared_memory_base_name
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
# 				Platform: 				Windows
# 				Type: 					String
# 				Default: 				MYSQL
#
# 				Name of the shared memory to use for shared-memory connections.
# 				Useful when running multiple MySQL instances on a single physical machine.
# 				Defaults to MySQL. Case sensitive.
#
# show_compatibility_56
#
# 				cmd line format: 		--show-compatibility-56[={OFF|ON}]
# 				Deprecated: 			Yes (Removed in 8.0.1)
# 				Sys var: 				show_compatibility_56
# 				Scope: 					Global
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			No
# 				Type: 					Boolean
# 				Default: 				OFF
#
# 				Was used in the transition period during which system and status variable info in
# 				INFORMATION_SCHEMA tables was moved to Performance Schema tables.
#
# 				That transition period ended in MySQL 8.0.1, at which time this variable was removed.
#
# show_create_table_verbosity
#
# 				Cmd line format: 		--show-create-table-verbosity
# 				Introduced: 			8.0.11
# 				Sys var: 				show_create_table_verbosity
# 				Scope: 					Global, Session
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			No
# 				Type: 					Boolean
#
# 				SHOW_CREATE_TABLE normally does not show the ROW_FORMAT table option if the
# 				row format is the default format.
#
# 				Enabling this variable causes SHOW_CREATE_TABLE to display ROW_FORMAT
# 				regardless of whether it is the default format.
#
# show_old_temporals
#
# 				cmd line format: 			--show-old-temporals={OFF|ON}
# 				Deprecated: 				Yes
# 				Sys var: 					show_old_temporals
# 				Scope: 						Global, Session
# 				Dynamic: 					Yes
# 				SET_VAR Hint: 				No
# 				Type: 						Boolean
# 				Default: 					OFF
#
# 				Whether SHOW_CREATE_TABLE output includes comments to flag temporal columns found to be in
# 				pre-5.6.4 format (TIME, DATETIME, and TIMESTAMP columns without support for fractional seconds precision)
#
# 				Disabled by default. If enabled, SHOW_CREATE_TABLE output looks as follows:
#
# 				CREATE TABLE `mytbl` (
# 					`ts` timestamp /* 5.5 binary format */ NOT NULL DEFAULT CURRENT_TIMESTAMP,
# 					`dt` datetime /* 5.5 binary format */ DEFAULT NULL,
# 					`t` time /* 5.5 binary format */ DEFAULT NULL
# 				) DEFAULT CHARSET=utf8mb4
#
# 				Output for the COLUMN_TYPE column of the INFORMATION_SCHEMA.COLUMNS table is affected similarly.
#
# 				Deprecated.
#
# skip_external_locking
#
# 				cmd line format: 		--skip-external-locking
# 				Sys var: 				skip_external_locking
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
# 				Type: 					Boolean
# 				Default: 				ON
#
# 				This is OFF if mysqld uses external locking (system locking), ON if external locking is disabled.
#  			This affects only MyISAM table access.
#
# 				This variable is set by the --external-locking or --skip-external-locking option.
#
# 				External locking is disabled by default.
#
# 				External locking affects only MyISAM table access.
# 
# skip_name_resolve
#
# 				Cmd line format: 		--skip-name-resolve
# 				Sys var: 				skip_name_resolve
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
# 				Type: 					Boolean
# 				Default: 				OFF
#
# 				This variable is set from the value of the --skip-name-resolve option.
# 				If OFF, mysqld resolves host names when checking client connections.
#
# 				If it is ON, mysqld uses only IP numbers; in this case, all Host column values
# 				in the grant tables must be IP addresses or localhost.
#
# skip_networking
#
# 				cmd line format: 		--skip-networking
# 				Sys var: 				skip_networking
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
#
# 				This is ON if the server permits only local (non-TCP/IP) connections.
# 				On Unix, local connections use a Unix socket file.
#
# 				On Windows, local connections use a named pipe or shared memory.
# 				Can be set to ON with the --skip-networking option.
#
# skip_show_database
#
# 				cmd line format: 		--skip-show-database
# 				Sys var: 				skip_show_database
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
#
# 				Prevents people from using the SHOW_DATABASE statement if they do not have the SHOW_DATABASE priv.
#
# 				This can improve security if you have concerns about users being able to see databases belonging to other users.
# 				Its effect depends on the SHOW_DATABASE priv: 
#
# 				If ON - the SHOW_DATABASES statement is permitted only to users who have the SHOW_DATABASES priv, and the statement displays all DB names.
#
# 				If OFF - SHOW_DATABASES is permitted to all users, but displays the names of only those databases for which the user has the SHOW_DATABASE or other privs.
#
# 				(ANY global priv includes privs for all DBs)
#
# slow_launch_time
#
# 				cmd line format: 		--slow-launch-time=#
# 				Sys var: 				slow_launch_time
# 				Scope: 					Global
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			No
# 				Type: 					Integer
# 				Default: 				2
#
# 				If creating a thread takes longer than this many seconds, the server increments the Slow_launch_threads status var.
#
# slow_query_log
#
# 				Cmd line format: 		--slow-query-log
# 				Sys var: 				slow_query_log
# 				Scope: 					Global
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			No
# 				Type: 					Boolean
# 				Default: 				OFF
#
# 				Whether the slow query log is enabled. 
#
# 				0/OFF - disables the log
#
# 				1/ON  - enables the log
#
# 				The default value depends on whether the --slow_query_log option is given.
# 				The destination for log output is controlled by the log_output SYS VAR.
#
# 				If log_output is NONE, no log entries are written - even if the log is on.
#
# 				"Slow" is defined by the long_query_time var.
#
# slow_query_log_file
#
# 				Cmd line format: 		--slow-query-log-file=file_name
# 				Sys var: 				slow_query_log_file
# 				Scope: 					Global
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			No
# 				Type: 					File name
# 				Default: 				host_name-slow.log
#
# 				The name of the slow query log file. 
# 				Default is <host_name>-slow.log - but the intiial value can be changed with the
# 				--slow_query_log_file option.
#
# socket
#
# 				cmd line format: 		--socket={file_name|pipe_name}
# 				Sys var: 				socket
# 				Scope: 					Global
# 				Dynamic: 				No
# 				SET_VAR Hint: 			No
# 				Type: 					String
# 				Default (Other) 		/tmp/mysql.sock
# 				Default (Windows) 	MySQL
#
# 				On Unix platforms, this var is the name of the socket file that is used for local client connections.
# 				The default is /tmp/mysql.sock (might be /var/lib/mysql for RPMs)
#
# 				On Windows, this var is the name of the named pipe that is used for local client connections. Default is MySQL. (non-case sensitive)
#
# sort_buffer_size
#
# 				cmd line format: 		--sort-buffer-size=#
# 				Sys var: 				sort_buffer_size
# 				Scope: 					Global, Session
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			Yes
# 				Type: 					Integer
# 				Default: 				262144
# 				Min: 						32768
#
# 				Max (64-bit other) 	<a lot>
# 				Max (32-bit other) 	<less>
# 				Max (Windows) 			<same>
#
# 				Each session that must perform a sort allocates a buffer of this size.
# 				sort_buffer_size is not specific to any storage engine and applies in a general manner for
# 				optimization.
#
# 				At minimum the sort_buffer_size value must be large enough to accomodate fifteen tuples in the sort buffer.
# 				Also, increasing the value of max_sort_length may require increasing the value of sort_buffer_size.
#
# 				If you see many Sort_merge_passes per second in SHOW_GLOBAL_STATUS output, you can consider increasing the
# 				sort_buffer_size value to speed up ORDER BY or GROUP BY operations that cannot be improved with query
# 				optimization or improved indexing.
#
# 				The optimizer tries to work out how much space is needed but can allocate more, up to said limit.
# 				Setting it larger than required globally will slow down most queries that sort.
#
# 				Best ot increase as session setting, and only for sessions that need a larger size.
#
# 				On Linux, there are thresholds of 256kb and 2MB where larger values may significantly
# 				slow down memory allocation - so you should consider staying below one of said sizes.
#
# 				The max permissible setting for sort_buffer_size is 4GB-1. Larger values are allowed for 64-bit platforms.
# 				(Except 64-bit Windows, restraints to 4GB-1)
#
# sql_auto_is_null
#
# 				Sys var: 		sql_auto_is_null
# 				Scope: 			Global, Session
# 				Dynamic: 		Yes
# 				SET_VAR Hint: 	Yes
# 				Type: 			Boolean
# 				Default: 		OFF
#
# 				If this is enabled, then after a statement that successfully inserts an automatically generated AUTO_INCREMENT value,
# 				you can find said value with a query of:
#
# 				SELECT * FROM <tbl_name> WHERE <auto_col> IS NULL
#
# 				If the statement returns a row, the value returned is the same as if you invoked the LAST_INSERT_ID() function.
#
# 				If no AUTO_INCREMENT value was successfully inserted, the SELECT statement returns no row.
#
# 				The beavior of retrieving an AUTO_INCREMENT value by using an IS_NULL comparison is used by some
# 				ODBC programs, such as Access.
#
# 				This beavior can be disabled by setting sql_auto_is_null to OFF.
#
# sql_big_selects
#
# 				Sys var: 		sql_big_selects
# 				Scope: 			Global, Session
# 				Dynamic: 		Yes
# 				SET_VAR Hint: 	Yes
# 				Type: 			Boolean
# 				Default: 		ON
#
# 				If set to OFF, MySQL aborts SELECT statements that are likely to take a long time to execute (statements that estimate > rows cmp. to max_join_size)
#
# 				Useful when an inadivsable WHERE statement has been issued.
# 				The default value for a new connection is ON, which permits all SELECT statements.
#
# 				If you set the max_join_size SYS_VAR to a value other than DEFAULT, sql_big_selects is set to OFF.
#
# sql_buffer_result
#
# 				Sys var: 		sql_buffer_result
# 				Scope: 			Global, Session
# 				Dynamic: 		Yes
# 				SET_VAR Hint: 	Yes
# 				Type: 			Boolean
# 				Default: 		OFF
#
# 				If enabled, sql_buffer_result forces results from SELECT statements to be put into temporary tables.
#
# 				This helps MySQL free the table locks early and can be beneficial in cases where it takes a long time
# 				to send results to the client. The default value is OFF.
#
# sql_log_off
#
# 				Sys var: 		sql_log_off
# 				Scope: 			Global, Session
# 				Dynamic: 		Yes
# 				SET_VAR Hint: 	No
# 				Type: 			Boolean
# 				Default: 		OFF
# 				Valid: 			OFF (enable logging), ON (disable logging)
#
# 				Controls whether logging to the general query log is disabled for the current session
# 				(assuming that the general query log itself is enabled)
#
# 				The default value is OFF (that is, enable logging).
#
# 				To disable or enable general query logging for the current session, set the session sql_log_off variable
# 				to ON or OFF.
#
# 				Restricted ops. Reqs privs enough for restricted session vars.
#
# sql_mode
#
# 				cmd line format: 		--sql-mode=name
# 				Sys var: 				sql_mode
# 				Scope: 					Global, Session
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			Yes
# 				Type: 					Set
# 				Default (>= 8.0.11) 	ONLY_FULL_GROUP_BY
# 											STRICT_TRANS_TABLES
# 											NO_ZERO_IN_DATE
# 											NO_ZERO_DATE
# 											ERROR_FOR_DIVISION_BY_ZERO
# 											NO_ENGINE_SUBSTITUTION
#
# 				Default (<= 8.0.4) 	ONLY_FULL_GROUP_BY 
# 											STRICT_TRANS_TABLES
# 											NO_ZERO_IN_DATE
# 											NO_ZERO_DATE
# 											ERROR_FOR_DIVISION_BY_ZERO
# 											NO_AUTO_CREATE_USER
# 											NO_ENGINE_SUBSTITUTION
#
# 				Valid (>= 8.0.11) 	ALLOW_INVALID_DATES
# 											ANSI_QUOTES
# 											ERROR_FOR_DIVISION_BY_ZERO
# 											HIGH_NOT_PRECEDENCE
# 											IGNORE_SPACE
# 											NO_AUTO_VALUE_ON_ZERO
# 											NO_BACKSLASH_ESCAPES
# 											NO_DIR_IN_CREATE
# 											NO_ENGINE_SUBSTITUTION
# 											NO_UNSIGNED_SUBTRACTION
# 											NO_ZERO_DATE
# 											NO_ZERO_IN_DATE
# 											ONLY_FULL_GROUP_BY
# 											PAD_CHAR_TO_FULL_LENGTH
# 											PIPES_AS_CONCAT
# 											REAL_AS_FLOAT
# 											STRICT_ALL_TABLES
# 											STRICT_TRANS_TABLES
# 											TIME_TRUNCATE_FRACTIONAL
#
# 				Valid (>= 8.0.1, 		ALLOW_INVALID_DATES 
# 						 <= 8.0.4) 		ANSI_QUOTES
# 											ERROR_FOR_DIVISION_BY_ZERO
# 											HIGH_NOT_PRECEDENCE
# 											IGNORE_SPACE
# 											NO_AUTO_CREATE_USER
# 											NO_AUTO_VALUE_ON_ZERO
# 											NO_BACKSLASH_ESCAPES
# 											NO_DIR_IN_CREATE
# 											NO_ENGINE_SUBSTITUION
# 											NO_FIELD_OPTIONS
# 											NO_KEY_OPTIONS
# 											NO_TABLE_OPTIONS
# 											NO_UNSIGNED_SUBTRACTION
# 											NO_ZERO_DATE
# 											NO_ZERO_IN_DATE
# 											ONLY_FULL_GROUP_BY
# 											PAD_CHAR_TO_FULL_LENGTH
# 											PIPES_AS_CONCAT
# 											REAL_AS_FLOAT
# 											STRICT_ALL_TABLES
# 											STRICT_TRANS_TABLES
# 											TIME_TRUNCATE_FRACTIONAL
#
# 				Valid (8.0.0) 			ALLOW_INVALID_DATES
# 											ANSI_QUOTES
# 											ERROR_FOR_DIVISION_BY_ZERO
# 											HIGH_NOT_PRECEDENCE
# 											IGNORE_SPACE
# 											NO_AUTO_CREATE_USER
# 											NO_AUTO_VALUE_ON_ZERO
# 											NO_BACKSLASH_ESCAPES
# 											NO_DIR_IN_CREATE
# 											NO_ENGINE_SUBSTITUTION
# 											NO_FIELD_OPTIONS
# 											NO_KEY_OPTIONS
# 											NO_TABLE_OPTIONS
# 											NO_UNSIGNED_SUBTRACTION
# 											NO_ZERO_DATE
# 											NO_ZERO_IN_DATE
# 											ONLY_FULL_GROUP_BY
# 											PAD_CHAR_TO_FULL_LENGTH
# 											PIPES_AS_CONCAT
# 											REAL_AS_FLOAT
# 											STRICT_ALL_TABLES
# 											STRICT_TRANS_TABLES
#
# 				The current SQL mode, can be set dynamically.
#
# 				Can be configured during install/Options.
#
#  											
# sql_notes
#
# 				Sys var: 		sql_notes
# 				Scope: 			Global, Session
# 				Dynamic: 		yes
# 				SET_VAR Hint: 	No
# 				Type: 			Boolean
# 				Default: 		ON
#
# 				If enabled (by default), warnings of Note level increment warning_count and the server records them.
# 				If disabled, Note warnings do not increment warning_count and the server does not record them.
#
# 				mysqldump includes output to disable this variable so that reloading the dump file does not produce
# 				warnings for events that do not affect the integrity of the reload ops.
#
# sql_quote_show_create
#
# 				Sys var: 		sql_quote_show_create
# 				Scope: 			Global, Session
# 				Dynamic: 		Yes
# 				SET_VAR Hint: 	No
# 				Type: 			Boolean
# 				Default: 		ON
#
# 				If enabled (the default), the server quotes identifiers for SHOW_CREATE_TABLE and SHOW_CREATE_DATABASE statements.
#
# 				If disabled, quoting is disabled.
# 				Enabled by default so that replication works for identifiers that require quoting.
#
# sql_require_primary_key
#
# 				Cmd line format: 		--sql-require-primary-key[={OFF|ON}]
# 				Introduced: 			8.0.13
# 				Sys var: 				sql_require_primary_key
# 				Scope: 					Global, Session
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			Yes
# 				Type: 					Boolean
# 				Default: 				OFF
#
# 				Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key.
#
# 				Setting this is a restricted ops.
#
# 				Enabling this variable helps avoid performance probblems in row-based replication that can occur when tables
# 				have no primary key.
#
# 				Suppose that a table has no primary key and an update or delete modifies multiple rows.
#
# 				On the master server, this ops can be performed using a single table scan but, when replicate
# 				using row-based replication, results in a table scan for each row to be modified on the slave.
#
# 				With a primary key, these table scans do not occur.
#
# 				sql_require_primary_key applies to both base tables and TEMPORARY tables, and changes to its
# 				value are replicated to slave servers.
#
# 				When enabled, sql_require_primary_key has these effects:
#
# 					Attempts to create a new table with no primary key fail with an error.
#
# 					This includes CREATE TABLE ... LIKE. It also includes CREATE TABLE ... SELECT,
# 					unless the CREATE TABLE includes a primary key def.
#
# 					Attempts to drop the primary key from an existing table fail with an error, with the exception
# 					that dropping the primary key and adding a primary key in the same ALTER TABLE statement is permitted.
#
# 					Dropping the primary key fails even if the table also contains a UNIQUE NOT NULL index.
# 
# 					Attempts to import a table with no primary key fail with an error.
#
# sql_safe_updates
#
# 					Sys var: 		sql_safe_updates
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	Yes
# 					Type: 			Boolean
# 					Default: 		OFF
#
# 					If this variable is enabled, UPDATE and DELETE statements that do not use a key in the WHERE clause or a LIMIT clause
# 					produce an error.
#
# 					This makes it possible to catch UPDATE and DELETE statements where keys are not used properly and that would
# 					probably change or delete a large number of rows.
#
# 					For the mysql client, sql_safe_updates can be enabled by using the --safe-updates option.
#
# sql_select_limit
#
# 					Sys var: 		sql_select_limit
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	Yes
# 					Type: 			Integer
#
# 					Max number of rows to return from SELECT statements.
#
# 					Default value for a new connection is the max number of rows that the server
# 					permits per table.
#
# 					Typical default values are (2^32)-1 or (2^64)-1.
#
# 					If you have changed the limit, the default value can be restored by assigning a value of DEFAULT.
#
# 					If a SELECT has a LIMIT clause, the LIMIT takes precedence over the value of sql_select_limit.
#
# sql_warnings
#
# 					Sys var: 		sql_warnings
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	No
# 					Type: 			Boolean
# 					Default: 		OFF
#
# 					Controls whether single-row INSERT statements produce an information string if warnings occur.
# 					Default is OFF.
#
# 					Turn to ON for info strings.
#
# ssl_ca
#
# 					cmd line: 		--ssl-capath=dir_name
# 					Sys var: 		ssl_capath
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			Dir name
#
# 					Path to a dir that contains trusted SSL CA certs in PEM format.
#
# ssl_cert
#
# 					Cmd line: 		--ssl-cert=file_name
# 					Sys var: 		ssl_cert
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			File name
#
# 					Name of the SSL cert to use for establishing a secure connection.
#
# ssl_cipher
#
# 					Cmd line: 		--ssl-cipher=name
# 					Sys var: 		ssl_cipher
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			String
# 					
# 					List of permitted ciphers for SSL encryption.
#
# ssl_crl
#
# 					cmd line: 		--ssl-crl=file_name
# 					Sys var: 		ssl_crl
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			File name
#
# 					Path to a file containing cert revocation lists in PEM format.
# 					Revocation lists work for MySQL distributions compiled using OpenSSL. (but not wolfSSL)
#
# ssl_crlpath
#
# 					cmd line: 		--ssl-crlpath=dir_name
# 					Sys var: 		ssl_crlpath
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			Dir name
#
# 					The path to a dir that contains files containing cert revocation lists in PEM format.
# 					Revocation lists work for MySQL distributions compiled using OpenSSL (but not wolfSS)
#
# ssl_fips_mode
#
# 					cmd line format: 		--ssl-fips-mode={OFF|ON|STRICT}
# 					Introduced: 			8.0.11
# 					Sys var: 				ssl_fips_mode
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Enumeration
# 					Default: 				OFF
# 					Valid: 					OFF (or 0), ON (or 1), STRICT (or 2)
#
# 					Controls whether to enable FIPS mode on the server side. 
#
# 					The ssl_fips_mode system variable differs from other --ssl-xxx options
# 					in that it is not used to control whether the server permits encrypted connections,
# 					but rather to affect which cryptographic ops are permitted.
#
# 					These ssl_fips_mode values are permitted:
#
# 						OFF (or 0): Disable FIPS mode.
#
# 						ON (or 1): Enable FIPS mode.
# 
# 						STRICT (or 2): Enable "strict" FIPS mode.
#
# 					Note: If the OpenSSL FIPS Object Module is N/A, the only permitted value for ssl_fips_mode is OFF.
# 							In this case, setting ssl_fips_mode to ON or STRICT at startup causes the server to produce
# 							an error message and exit.
#
# ssl_key
#
# 					cmd line format: 		--ssl-key=file_name
# 					Sys var: 				ssl_key
# 					Scope: 					Global
# 					Dynamic: 				No
# 					SET_VAR Hint: 			No
# 					Type: 					File name
#
# 					The name of the SSL key file to use for establishing a secure connection.
#
# stored_program_cache
#
# 					cmd line format: 		--stored-program-cache=#
# 					Sys var: 				stored_program_cache
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				256
# 					Min: 						16
# 					Max: 						524288
#
# 					Sets a soft upper limit for the number of cached stored routines per connection.
#
# 					The value of this variable if specified in terms of the number of stored routines held
# 					in each of the two caches maintained by the MySQL Server for, respectively, stored procedures
# 					and stored functions. 				
#
# 					Whenever a stored routine is executed this cache size is checked before the first or top-level
# 					statement in the routine is parsed; if the number of routines of the same type (stored procedures or
#  				stored functions according to which is being executed) exceeds the limit specified by this var,
# 					the corresponding cache is flushed and memory previously allocated for cached objects is freed.
#
# 					This allows for the cache to be flushed safely, even when there are dependencies between stored
# 					routines.
#
# 					The stored procedure and stored function cache exists in parallel with the stored program definition
# 					cache partition of the dictionary object cache.
#
# 					The stored procedure and stored function caches are per connection, while the stored program
# 					definition cache is shared. The existence of objects in the stored procedure and stored function
# 					caches have no dependence on the existence of objects in the stored program definition cache and vice
# 					versa.
#
# 		
# stored_program_definition_cache
#
# 					Cmd line format: 		--stored-program-definition-cache=N
# 					Sys var: 				stored_program_definition_cache
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				256
# 					Min: 						256
# 					Max: 						524288
#
# 					Defines a limit for the number of stored program definition objects, both used
# 					and unused, that can be kept in the dictionary object cache.
#
# 					Unused stored program definition objects are only kept in the dictionary object cache
# 					when the number in use is less than the capacity defined by stored_program_definition_cache
#
# 					A setting of 0 means that stored program definition objects are only kept in the dictionary object
# 					cache while they are in use.
#
# 					The stored program definition cache partition exists in parallel with the stored procedure and
# 					stored function caches that are configured using the stored_program_cache option.
#
# 					The stored_program_cache option sets a soft upper limit for the number of cached stored procedures
# 					or functions per connection, and the limits is checked each time a connection executes a stored
# 					procedure or function.
#
# 					The stored program definition cache partition, on the other hand, is a shared cache that stores
# 					stored program definition objects for other purposes.
#
# 					The existence of objects in the stored program definition cache partition has no dependence
# 					on the existence of objects in the stored procedure cache or stored function cache, and vice versa.
#
# super_read_only
#
# 					cmd line format: 		--super-read-only[={OFF|ON}]
# 					Sys var: 				super_read_only
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Boolean
# 					Default: 				OFF
#
# 					If the read_only SYS_VAR is enabled, the server permits client updates only from users who have
# 					the SUPER priv.
#
# 					If the super_read_only SYS_VAR is also enabled, the server prohibits client updates even from
# 					users who have SUPER privs.
#
# 					Changes to super_read_only on a master server are not replicated to slave servers.
# 					The value can be set on a slave server independent of the setting on the master.
#
# syseventlog.facility
#
# 					Cmd line format: 		--syseventlog.facility=value
# 					Introduced: 			8.0.13
# 					Sys var: 				syseventlog.facility
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					String
# 					Default: 				daemon
#
# 					The facility for error log output written to syslog (what type of program is sending the message)
# 					This variable is unavailable unless the log_sink_syseventlog error log component is installed.
#
# 					Permitted values can vary per OS, consult your syslog documentation.
#
# 					Does not exist on Windows.
#
# syseventlog.include_pid
#
# 					Cmd line format: 		--syseventlog.include-pid[={0|1}]
# 					Introduced: 			8.0.13
# 					Sys var: 				syseventlog.include_pid
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Boolean
# 					Default: 				ON
#
# 					Whether to include the server process ID in each line of error log output written to syslog.
# 					This var is unavailable unless the log_sink_syseventlog error log component is installed.
#
# 					Does not exist on Windows.
#
# syseventlog.tag
#
# 					Cmd line format: 		--syseventlog.tag=tag
# 					Introduced: 			8.0.13
# 					Sys Var: 				syseventlog.tag
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					String
# 					Default: 				empty string
#
# 					The tag to be added to the server identifier in error log output written to syslog or 
# 					the Windows Event Log.
#
# 					This var is unavailable unless the log_sink_syseventlog error log component is installed.
#
# 					By default, no tag is set - so the server identifier is simply MySQL on Windows,
# 					and mysqld on other platforms.
#
# 					If a tag value of <tag> is specified, it is appended to the server identifier with
# 					a leading hyphen, resulting in a syslog identifier of mysqld-<tag> (or MySQL-<tag> on Windows)
# 					
# 					On Windows, to use a tag that does not already exist, the server must be run from an account
# 					with Administrator privs, to permit creation of a registry entry for the tag.
#
# 					Elevated privs are not required if the tag already exists.
#
# system_time_zone
#
# 					Sys var: 			system_time_zone
# 					Scope: 				Global
# 					Dynamic: 			No
# 					SET_VAR Hint: 		No
# 					Type: 				String
#
# 					The server system time zone. When the server begins executing, it inherits a time zone
# 					setting from the machine defaults, possibly modified by the environment of the account
# 					used for running the server or the startup script.
#
# 					The value is used to set system_time_zone. Typically the time zone is specified by the
# 					TZ environment variable.
#
# 					It also can be specified using the --timezone option of the mysqld_safe script.
#
# 					The system_time_zone variable differs from time_zone. Although they might have the same value,
# 					the latter variable is used to initialize the time zone for each client that connects.
#
# table_definition_cache
#
# 					Sys var: 			table_definition_cache
# 					Scope: 				Global
# 					Dynamic: 			Yes
# 					SET_VAR Hint: 		No
# 					Type: 				Integer
# 					Default: 			-1 (Autosizing;do not assign this literal value)
# 					Min: 					400
# 					Max: 					524288
#
# 					The number of table defs that can be stored in the def cache. 
#
# 					If you use a large number of tables, you can create a large table def cache to speed up opening of tables.
# 
#  				The table definition cache takes less space and does not use file descriptors, unlike the normal table cache.
# 					The minimum value is 400.
#
# 					The default value is based on the following formula, capped to a limit of 2000:
#
# 						MIN(400 + table_open_cache / 2, 2000)
#
# 					For InnoDB, table_definition_cache acts as a soft limit for the number of open table instances in the InnoDB
# 					data dir cache.
#
# 					If the number of open table instances exceed the table_definition_cache setting, the LRU mechanism begins to mark
# 					table instances for eviction and eventually removes them from the data dictionary cache.
#
#					The limit helps address situations in which significant amounts of memory would be used to cache
# 					rarely used table instances until the next server restart.
#
# 					The number of table instances with cached metadata could be higher than the limit defined by 
# 					table_definition_cache, because parent and child table instances with foreign key relationships
# 					are not placed on the LRU list and are not subject to eviction from memory.
#
# 					Additionally, table_definition_cache defines a soft limit for the number of InnoDB file-per-table tablespaces
# 					that can be open at one time, which is also controlled by innodb_open_files.
#
# 					If both table_definition_cache and innodb_open_files are set, the highest setting is used.
# 					If neither variable is set, table_definition_cache, which has a higher default value is used.
#
# 					If the number of open tablespace file handles exceeds the limit defined by table_definition_cache
# 					or innodb_open_files, the LRU mechanism searches the tablespace file LRU list for files that are
# 					fully flushed and are not currently being extended.
#
# 					The process is performed each time a new tablespace is opened. If there are no "inactive" tablespaces,
# 					no tablespace files are closed.
#
# 					The table definition cache exists in parallel with the table definition cache partition of the dictionary
# 					object cache.
#
# 					Both caches store table definitions but serve different parts of the MySQL server.
# 					Objects in one cache have no dependence on the existence of objects in the other.
#
# 	
# table_open_cache
#
# 					Sys var: 		table_open_cache
# 					Scope: 			Global
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	No
# 					Type: 			Integer
# 					Default (>= 8.0.4) 4000
# 					Default (<= 8.0.3) 2000
# 					Min: 				1
# 					Max: 				524288
#
# 					Number of open tables for all threads. Increasing this value increases the number of file descriptors
# 					that mysqld requires. You can check whether you need to increase the table cache by checking
# 					the Opened_tables STATUS_VAR.
#
# 					If the value of Opened_tables is large and you do not use FLUSH_TABLES often (which just forces all tables
# 					to be closed and reopened), then you should increase the value of the table_open_cache variable.
#
# table_open_cache_instances
#
# 					Sys var: 			table_open_cache_instances
# 					Scope: 				Global
# 					Dynamic: 			No
# 					SET_VAR Hint: 		No
# 					Type: 				Integer
# 					Default: 			16
# 					Min: 					1
# 					Max: 					64
#
# 					Number of open tables cache instances. 
#
# 					To improve scalability by reducing contention among sessions, the open tables cache 
# 					can be partitioned into several smaller cache instances of size table_open_cache/table_open_cache_instances.
#
# 					A session needs to lock only one instance to access it for DML statements.
#
# 					This segments cache access among instances, permitting higher performance for
# 					operations that use the cache when there are many sessions accessing tables.
#
# 					(DDL statements still require a lock on the entire cache, but such statements are much less
# 					frequent than DML statements.)
#
# 					A value of 8 or 16 is recommended on systems that routinely use 16 or more cores.
#
# temptable_max_ram
#
# 					cmd line format: 		--temptable-max-ram=#
# 					Introduced: 			8.0.2
# 					Sys Var: 				temptable_max_ram
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				1073741824
# 					Minimum: 				2097152
# 					Max: 						2^64-1
#
# 					Defines the max amount of memory that can be occupied by the TempTable
# 					storage engine before it starts storing data on disk.
#
# 					Default is 1 GiB.
#
# thread_cache_size
#
# 					cmd line format: 		--thread-cache-size=#
# 					Sys Var: 				thread_cache_size
# 					scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				-1 (autosizing)
# 					Min: 						0
# 					Max: 						16384
#
# 					How many threads the server should cache for reuse. When a client disconnects,
# 					the client's threads are put in the cache if there are fewer than thread_cache_size
# 					threads there.
#
# 					Requests for threads are satisfied by reusing threads taken from the cache if possible,
# 					and only when the cache is empty is a new thread created.
#
# 					This variable can be increased to improve performance if you have a lot of new connections.
# 					Normally, this does not provide a notable performance improvement if you have a good
# 					thread implementation.
#
# 					However, if your server sees hundreds of connections per second you should normally
# 					set thread_cache_size high enough so that most new connections use cached threads.
#
# 					By examining the difference between the Connections and Threads created status variables,
# 					you can see how efficient the thread cache is.
#
# 					The default value is based on the following formula, capped to a limit of 100:
#
# 						8 + (max_connections / 100)
#
# thread_handling
#
# 					cmd line format: 		--thread-handling=name
# 					Sys var: 				thread_handling
# 					Scope: 					Global
# 					Dynamic: 				No
# 					SET_VAR Hint: 			No
# 					Type: 					Enumeration
# 					Default: 				one-thread-per-connection
# 					Valid: 					no-threads, one-thread-per-connection, loaded-dynamically
#
# 					The thread-handling model used by the server for connection threads.
# 					The permissible values are:
#
# 					 no-threads (the server uses a single thread to handle one connection) (useful for debugging under Linux)
# 					
# 					 one-thread-per-connection (the server uses one thread to handle each client connection)
# 					 
# thread_pool_algorithm
#
# 					cmd line format: 		--thread-pool-algorithm=#
# 					introduced: 			8.0.11
# 					Sys var: 				thread_pool_algorithm
# 					Scope: 					Global
# 					Dynamic: 				No
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				0
# 					Min: 						0
# 					Max: 						1
#
# 					This var controls which algorithm the thread pool plugin uses:
#
# 						A value of 0 (the default) uses a conservative low-concurrency algorithm which is most well tested and stable.
#
# 						A value of 1 increases the concurrency and uses a more aggressive algo which at times can perform 5-10% better,
# 						on optimal thread counts, but has degrading performance as the number of connections increases. (Experimental, not supported)
#
# 					Available only if the thread pool plugin is enabled.
# 
# thread_pool_high_priority_connection
#
# 					cmd line format: 		--thread-pool-high-priority-connection=#
# 					Introduced: 			8.0.11
# 					Sys var: 				thread_pool_high_priority_connection
# 					Scope: 					Global, Session
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				0
# 					Min: 						0
# 					Max: 						1
#
# 					Affects queuing of new statements prior to execution.
#
# 					If the value is 0 (false, default) - statement queuing uses both the low-prio
# 					and high-prio queues.
#
# 					If the value is 1 (true), queued statements always go to the high prio queue.
#
# 					Only available if the thread pool plugin is enabled.
#
# thread_pool_max_unused_threads
#
# 					cmd line format: 		--thread-pool-max-unused-threads=#
# 					introduced: 			8.0.11
# 					Sys Var: 				thread_pool_max_unused_threads
# 					Scope: 					Global
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				0
# 					Min: 						0
# 					Max: 						4096
#
# 					Max permitted number of unused threads in the thread pool.
# 					This variable makes it possible to limit the amount of memory used by sleeping threads.
#
# 					A value of 0 (default) means no limit on the number of sleeping threads.
#
# 					A value of N where N is greater than 0, means 1 consumer thread and N-1 reserve threads.
#
# 					In this case, if a thread is ready to sleep but the number of sleeping threads is already at maximum,
# 					the thread exits rather than going to sleep.
#
# 					A sleeping thread is either sleeping as a consumer thread or a reserve thread.
# 					The thread pool permits one thread to be the consumer thread when sleeping.
#
# 					if a thread goes to sleep and there is no existing consumer thread, it will sleep as a consumer thread.
#
# 					When a thread must be woken up, a consumer thread is selected if there is one.
# 					A reserve thread is selected only when there is no consumer thread to wake up.
#
# 					Only available if the thread pool plugin is enabled.
#
# thread_pool_prio_kickup_timer
#
# 					cmd line format: 		--thread-pool-prio-kickup-timer=#
# 					Introduced: 			8.0.11
# 					Sys var: 				thread_pool_prio_kickup_timer
# 					Scope: 					Global, Session
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				1000
# 					Min: 						0
# 					Max: 						<a lot>
#
# 					Affects statements waiting for execution in the low-prio queue.
# 					The value is the number of MS before a waiting statement is moved to the high-prio queue.
#
# 					Default is 1000 ms (1 sec). Range is 0 to 2^32-2
#
# 					Only available if thread plugin is enabled.
#
# thread_pool_size
#
# 					cmd line format: 		--thread-pool-size=#
# 					Introduced: 			8.0.11
# 					Sys var: 				thread_pool_size
# 					Scope: 					Global
# 					Dynamic: 				No
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				16
# 					Min: 						1
# 					Max: 						64
#
# 					Number of thread groups in the thread pool. 
# 					This is the most important parameter controlling thread pool performance.
#
# 					It affects how many statements can execute simultaneously.
#
# 					Defaults to 16, with a range from 1 to 64. Must be within range, plugin won't load and a error is written to the log.
#
# 					Only available if the thread pool plugin is enabled.
#
# thread_pool_stall_limit
#
# 					cmd line format: 		--thread-pool-stall-limit=#
# 					Introduced: 			8.0.11
# 					Sys var: 				thread_pool_stall_limit
# 					Scope: 					Global
# 					Dynamic: 				Yes
## 				SET_VAR Hint: 			No
# 					Type: 					Integer
## 				Default: 				6
# 					Min: 						4
# 					Max: 						600
#
# 					Affects executing statements. 
#
# 					The value is the amount of time a statement has to finish after starting to execute before it becomes
# 					defined as stalled, at which point the thread pool permits the thread group to begin
# 					executing another statement.
#
# 					The value is measured in 10 milliseconds units, so a value of 6 (default),
# 					means 60ms.
#
# 					The range of values is 4 to 600 (40ms to 6s).
#
# 					Short wait values permits threads to start more quickly.
# 					Short values are also better for avoiding deadlock situations.
#
# 					Long wait values are useful for workloads that include long-running statements,
# 					to avoid starting too many new statements while the current ones execute.
#
# 					Only available if thread pool plugin is enabled.
#
# thread_stack
#
# 					cmd line: 			--thread-stack=#
# 					Sys var: 			thread_stack
# 					Scope: 				Global
# 					Dynamic: 			No
# 					SET_VAR Hint: 		No
# 					Type: 				Integer
# 					Default (64-bit)  262144
# 					Default (32-bit) 	196608
# 					Min: 					131072
# 					Max (64-bit) 		<a lot>
# 					Max (32-bit) 		<less>
#
# 					Block Size: 		1024
#
# 					The stack size for each thread. Default is 192KB (256KB for 64-bit Systems) is large enough for most ops.
#
# 					If the thread stack size is too small, it limits the complexity of the SQL statements that the server can handle,
# 					the recursion depth of stored procedures and other memory-consuming actions.
#
# time_format - Removed in 8.0.3
#
# time_zone 
#
# 					Sys var: 		time_zone
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	No
# 					Type: 			String
#
# 					The current time zone. 
#
# 					This variable is used to initialize the time zone for each client that connects.
# 					By default, the initial value of this is 'SYSTEM' (basically use the system_time_zone)
#
# 					Can be specified explicitly at server startup with the --default-time-zone option.
#
# 					NOTE: If set to SYSTEM, every MySQL function call that requires a timezone calc, makes a system lib call to find out the
# 							current system timezone. May be protected by a global mutex, resulting on contention.
#
# timestamp
#
# 					Sys var: 		timestamp
# 					Scope: 			Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	Yes
# 					Type: 			Numeric
#
# 					Set the time for this client. 
#
# 					This is used to get the original timestamp if you use the binary log to restore rows.
# 					<timestamp_value> should be a Unix epoch timestamp (a value like that returned by UNIX_TIMESTAMP() - not a 'YYYY-MM-DD hh:mm:ss'),
# 					or DEFAULT.
#
# 					Setting timestamp to a constant value causes it to retain that value until it is changed again.
# 					Setting timestamp to DEFAULT causes its value to be the current date and time as of the time it is accessed.
#
# 					In MySQL 8.0, timestamp is a DOUBLE rather than BIGINT because its value includes a microseconds part.
#
# 					SET timestamp affects the value returned by NOW() but not by SYSDATE().
#					This means that timestamp settings in the binary log have no effect on invocations of
# 					SYSDATE().
#
# 					The server can be started with the --sysdate-is-now option to cause SYSDATE() to be an alias for NOW(),
# 					in which case SET timestamp affects both functions.
#
# tls_version
#
# 					cmd line format: 		--tls-version=protocol_list
# 					Sys_var: 				tls_version
# 					Scope: 					Global
# 					Dynamic: 				No
# 					SET_VAR Hint: 			No
# 					Type: 					String
# 					Default (>= 8.0.11) 	TLSv1, TLSv1.1, TLSv1.2
# 					Default (<= 8.0.4) 	TLSv1, TLSv1.1, TLSv1.2 (OpenSSL), TLSv1, TLSv1.1 (yaSSL)
#
# 					The protocols permitted by the server for encrypted connections.
# 					The value is a comma-separated list containing one or more protocol names.
#
# 					The protocols that can be named for this variable depends on the SSL library used to compile
# 					MySQL.
#
# tmp_table_size
#
# 					cmd line format: 		--tmp-table-size=#
# 					Sys_Var: 				tmp_table_size
# 					Scope: 					Global, Session
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			Yes
# 					Type: 					Integer
# 					Default: 				16777216
# 					Min: 						1024
# 					Max: 						<a lot>
#
# 					Max size of internal in-memory temporary tables. Does not apply to user-created MEMORY tables.
#
# 					The actual limit is determined from whichever of the values of tmp_table_size and max_heap_table_size
# 					is smaller.
#
# 					If an in-memory temporary table exceeds the limit, MySQL automatically converts it to an on-disk
# 					temporary table.
#
# 					The internal_tmp_disk_storage_engine option defines the storage engine used for on-disk temporary tables.
#
# 					Increase the value of tmp_table_size (and max_heap_table_size if necessary) if you do many advanced
# 					GROUP BY queries and you have lots of memory.
#
# 					You can compare the number of internal on-disk temporary tables created to the total number of internal
# 					temp tables created by comparing the values of the Created_tmp_disk_tables and Created_tmp_tables Vars.
#
# tmpdir
#
# 					cmd line format: 		--tmpdir=dir_name
# 					Sys_var: 				tmpdir
# 					Scope: 					Global
# 					Dynamic: 				No
# 					SET_VAR Hint: 			No
# 					Type: 					Dir name
#
# 					The dir used for temp files and temp tables.
#
# 					This var can be set to a list of several paths that are used in round-robin regards.
#
# 					Paths should be separated by : on Unix and ; on Windows.
#
# 					The multiple-directory feature can be used to spread the load between several physical disks.
# 
#	 				If the MySQL server is acting as a replication slave, you should not set tmpdir to point to a dir
# 					on a memory-based file system or to a dir that is cleared when the server host restarts.
# 
# 					A replication slave needs some of its temp files to survive a machine restart so that it can replicate
# 					temporary tables or LOAD_DATA_INFILE operations.
#
# 					If files in the temporary file dir are lost when the server restarts, replication fails.
#
# 					You can set the slave's temp dir using the slave_load_tmpdir variable.
#
# 					In that case, the slave will not use the general tmpdir value and you can set tmpdir to a nonpermanent location.
#
# transaction_alloc_block_size
#
# 					cmd line: 		--transaction-alloc-block-size=#
# 					Sys_var: 		transaction_alloc_block_size
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	No
# 					Type: 			Integer
# 					Default: 		8192
# 					Min: 				1024
# 					Max: 				131072
# 					Block Size: 	1024
#
# 					Amount in bytes by which to increase a per-transaction memory pool which needs memory.
#
# transaction_isolation
#
# 					cmd line format: 	--transaction-isolation=name
# 					Sys_Var: 			transaction_isolation
# 					Scope: 				Global, Session
# 					Dynamic: 			Yes
# 					SET_VAR Hint: 		No
# 					Type: 				Enumeration
# 					Default: 			REPEATABLE-READ
# 					Valid: 				READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE
#
# 					Default transaction isolation level.
# 					Defaults to REPEATABLE-READ.
#
# 					Can be set directly, or indirectly using the SET_TRANSACTION statement.
#
# 					If you set transaction_isolation directly to an isolation level name that contains a space,
# 					the name should be enclosed with '' and spaces replaced with -
#
# 					SET transaction_isolation = 'READ-COMMITTED';
#
# 					Any unique prefix of a valid value may be used to set the value of this var.
#
# 					The default transaction isolation level can also be set at startup using the --transaction-isolation server option.
#
# 					This var has nonstandard semantics for runtime changes to the session value made using the SET statement.
# 					For most session sys_vars - these statements are the same:
#
# 					SET @@var_name = value;
# 					SET @@session.var_name = value;
#
# 					For transaction_isolation, these semantics apply instead:
#
# 						SET @@transaction_isolation = <value>
#
# 							Not permitted within transactions.
#
# 							Set the value only for the next single transaction within the session.
#
# 						SET @@session.transaction_isolation = <value>
#
# 							Permitted within transactions, but does not affect the current ongoing transaction.
#
# 							Sets the value for all subsequent transactions within the session.
#
# 							If executed between transactions, overrides any preceding SET @@transaction_isolation
# 							statement to set the value for the next transaction.
# 			
# transaction_prealloc_size
#
# 					Cmd line format: 		--transaction-prealloc-size=#
# 					Sys_var: 				transaction_prealloc_size
# 					Scope: 					Global, Session
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Integer
# 					Default: 				4096
# 					Min: 						1024
# 					Max: 						131072
# 					Block size: 			1024
#
# 					There is a per-transaction memory pool from which various transaction-related allocations take memory.
# 					The initial size of the pool in bytes is transaction_prealloc_size.
#
# 					For every allocation that cannot be satisfied from the pool because it has insufficient memory available,
# 					the pool is increased by transaction_alloc_block_size bytes.
#
# 					When the transaction ends, the pool is truncated to transaction_prealloc_size bytes.
#
# 					By making transaction_prealloc_size sufficiently large to contain all statements within a single transaction,
# 					you can avoid many malloc() calls.
#
# transaction_read_only
#
# 					cmd line: 				--transaction-read-only
# 					Sys var: 				transaction_read_only
# 					Scope: 					Global, Session
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			No
# 					Type: 					Boolean
# 					Default: 				OFF
#
# 					Default transaction access mode. The value can be OFF (read/write, default) or ON (read only).
#
# 					Can be set directly, or indirectly using the SET_TRANSACTION statement.
#
# 					To set the default transaction access mode at startup, use the --transaction-read-only server option.
#
# 					This var has nonstandard semantics for runtime changes to the session value made using the SET statement.
# 					For most session sys variables, these statements are equivalent:
#
# 						SET @@var_name = <value>;
# 						SET @@session.var_name = <value>;
#
# 					For transaction_read_only, these semantics apply instead:
#
# 						SET @@transaction_read_only = <value>
#
# 							Not permitted within transactions
#
# 							Sets the value only for the next single transaction within the session.
#
# 						SET @@session.transaction_read_only = <value>
#
# 							Permitted within transactions, but does not affect the current ongoing transaction.
#
# 							Sets the value for all subsequent transactions within the session.
#
# 							If executed between transactions, overrides any preceding SET @@transaction_read_only statement
# 							to set the value for the next transaction.
# tx_isolation
#
# 					DEPRECATED -> 8.0.3
# 					Sys_var: 		tx_isolation
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	No
# 					Type: 			Enumeration
# 					Default: 		REPEATABLE-READ
# 					Valid: 			READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE
#
# 					Removed in 8.0.3 -> use transaction_isolation instead.
# 
# tx_read_only
#
# 					Deprecated ->  8.0.3
# 					Sys_var: 	   tx_read_only
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	No
# 					Type: 			Boolean
# 					default: 		OFF
#
# 					Removed in 8.0.3 -> use transaction_read_only instead.
#
# unique_checks
#
# 					Sys var: 		unique_checks
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	Yes
# 					Type: 			Boolean
# 					Default: 		ON
#
# 					If set to 1 (default), uniqueness checks for secondary indexes in InnoDB tables are performed.
# 					If set to 0, storage engines are permitted to assume that duplicate keys are not present in input data.
#
# 					If you know for certain that your data does not contain uniqueness violations, you can set this 
# 					to 0 to speed up large table imports to InnoDB.
#
# 					Setting this variable to 0 does not <require> storage engines to ignore duplicate keys.
# 					An engine is still permitted to check for them and issue duplicate-key errors if it 
# 					detects them.
#
# updatable_views_with_limit
#
# 					Cmd line: 		--updatable-views-with-limit=#
# 					Sys var: 		updatable_views_with_limit
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	Yes
# 					Type: 			Boolean
# 					Default: 		1
#
# 					This var controls whether updates to a view can be made when the view does not contain
# 					all columns of the primary key defined in the underlying table, if the update statement
# 					contains a LIMIT clause.
#
# 					(Such updates often are generated by GUI tools). An update is an UPDATE or DELETE statement.
#
# 					Primary key here means a PRIMARY KEY, or a UNIQUE index in which no column can contain NULL.
#
# 					The variable can have two values:
#
# 						1 or YES: Issue a warning only (not an error message). Default.
#
# 						0 or NO:  Prohibit the update.
#
# use_secondary_engine
#
# 					Introduced: 	8.0.13
# 					Sys_var: 		use_secondary_engine
# 					Scope: 			Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	Yes
# 					Type: 			Enumeration
# 					Default: 		OFF
# 					Valid: 			OFF, ON, FORCE
#
# 					For future use.
#
# validate_password.<xxx>
#
# 					The validate_password components implements a set of system variables having names of the form
# 					validate_password.<xxx>
#
# 					Affect password testing by that component.
#
# validate_user_plugins
#
# 					Sys_var: 		validate_user_plugins
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			Boolean
# 					Default: 		ON
#
# 					If this var is enabled (default), the server checks each user account and produces a warning if conditions are
# 					found that would make the account unusable:
#
# 						The account requires an authentication plugin that is not loaded.
#
# 						The account requires the sha256_password or caching_sha2_password authentication plugin
# 						but the server was started with neither SSL nor RSA enabled as required by the plugin.
#
# 					Enabling validate_user_plugins slows down server initialization and FLUSH PRIVILEGES.
#
# 					If you do not require the additional checking, you can disable this variable at startup
#  				to avoid the performance decrement.
#
# version
#
# 					The version number for the server. The value might also include a suffix indicating server build or
# 					configuration information.
#
# 					-debug indicates that the server was built with debugging support enabled.
#
# version_comment
#
# 					Sys_var: 		version_comment
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			String
#
# 					The CMake configuration program has a COMPILATION_COMMENT option that permits a
# 					comment to be specified when building MySQL.
#
# 					This var contains the value of that comment.
#
# version_compile_machine
#
# 					Sys_var: 		version_compile_machine
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			String
#
# 					Type of the server binary.
#
# version_compile_os
#
# 					Sys_var: 		version_compile_os
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			String
#
# 					The type of OS on which MySQL was built.
#
# version_compile_zlib
#
# 					Introduced: 	8.0.11
# 					Sys_var: 		version_compile_zlib
# 					Scope: 			Global
# 					Dynamic: 		No
# 					SET_VAR Hint: 	No
# 					Type: 			String
#
# 					The version of the compiled-in zlib library.
#
# wait_timeout
#
# 					cmd line: 		--wait-timeout=#
# 					Sys_var: 		wait_timeout
# 					Scope: 			Global, Session
# 					Dynamic: 		Yes
# 					SET_VAR Hint: 	No
# 					Type: 			Integer
# 					Default: 		28800
# 					Min: 				1
# 					Max (Other): 	31536000
# 					Max (Windows): 2147483
#
# 					Number of seconds the server waits for activity on a noninteractive connection before closing it.
#
# 					On thread startup, the session wait_timeout value is initialized from the global wait_timeout value
# 					or from the global interactive_timeout value, depending on the type of client (as defined by the
#  				CLIENT_INTERACTIVE connection option to mysql_real_connect())
#
# 					See also interactive_timeout.
#
# warning_count
#
# 					Number of errors, warnings and notes that resulted from the last statement that generated messages.
# 					Read only.
#
# windowing_use_high_precision
#
# 					Cmd line format: 		--windowing-use-high-precision=#
# 					Introduced: 			8.0.2
# 					Sys_Var: 				windowing_use_high_precision
# 					Scope: 					Global, Session
# 					Dynamic: 				Yes
# 					SET_VAR Hint: 			Yes
# 					Type: 					Boolean
# 					Default: 				ON
#
# 					Whether to compute window ops without loss of precision.
#
# The following section pertains to Using System Variables:
#
# The MySQL server maintains many system variables that configure its operation.
#
# Each sys var has a default. Can be set at server startup using options on the cmd line or in a option file.
#
# Most of them can be changed dynamically while the server is running by means of the SET statement,
# which enables you to modify operation of the server without having to stop and restart it.
#
# Can also use them in expressions.
#
# Many of the sys vars are built in, but can be installed by server plugins or components:
#
# 		System vars implemented by a server plugin are exposed when the plugin is installed and have
# 		names taht begin with the plugin name.
#
# 		For example - audit_log implements a sys_var named audit_log_policy
#
# 		System vars implemented by a server component are exposed when the component is installed and have
# 		names that begin with a component-specific prefix.
#
# 		For instance - log_filter_dragment is a error log filter component that puts in a sys_var of log_error_filter_rules,
# 		full name is dragnet.log_error_filter_rules. Use full name for this.
#
# There are two scopes for sys vars -> global and session.
#
# Global is for overall, systemwide
#
# Session is for individual client conns. A sys var can have both.
#
# 		When the server starts, it initializes each global variable to its default value.
# 		These defaults can be changed by options specified on the cmd line or in an option file.
#
# 		The server also maintains a set of session variables for each client that connects.
#
# 		The client's session variables are initialized at connect time using the current values of 
# 		the corresponding global vars.
#
# 		For example, a client's SQL mode is controlled by the session sql_mode value - initialized when
# 		the client connects to the value of the global sql_mode value.
#
# 		For some system variables, the session value is not intialized from the corresponding global value;
# 		if so, that is indicated in the variable desc.
#
# System var values can be set globally at server startup by using options on the cmd line or in an option file.
# When you use a startup option to set a variable that takes numerical, it can have suffix of one of the following:
#
# 		K - 1024  (kb)
# 		M - 1024^2 (mb)
# 		G - 1024^3 (gb)
# 		T - 1024^4 (tb)
# 		P - 1024^5
# 		E - 1024^6
#
# The following commands starts the server with an InnoDB log file size of 16 MB and a max pack size of 1 GB:
#
# 		mysqld --innodb_log_file_size=16M --max_allowed_packet=1G
#
# Within an option file, they are set as:
#
# 		[mysqld]
# 		innodb_log_file_size=16M
# 		max_allowed_packet=1G
#
# Case insensitive.
#
# To restrict the maximum value to which a system variable can be set at runtime with the SET
# statement, specify this maximum by using an option of the form --maximum-<var_name>=<value> at server startup.
#
# For example, to prevent the value of innodb_log_file_size from being increased to more than 32MB
# at runtime, use the option --maximum-innodb_log_file_size=32M.
#
# Many sys vars are dynamic and can be changed at runtime by using the SET statement.
# To change a sys var with SET, refer to it by name, optionally preceded by a modifier.
#
# A global sys_var:
#
# 		SET GLOBAL max_connections = 1000;
# 		SET @@global.max_connections = 1000;
#
# Persist a global sys var to the mysqld-auto.cnf file (and set the runtime value):
#
# 		SET PERSIST max_connections = 1000;
# 		SET @@persist.max_connections = 1000;
#
# Persist a global system variable to the mysqld-auto.cnf file (without setting the runtime value):
#
# 		SET PERSIST_ONLY back_log = 1000;
# 		SET @@persist_only.back_log = 1000;
#
# Set a session system variable:
#
# 		SET SESSION sql_mode = 'TRADITIONAL';
# 		SET @@session.sql_mode = 'TRADITIONAL';
# 		SET @@sql_mode = 'TRADITIONAL';
#
# Later on, a full showcasing of SET syntax is showcased.
#
# Suffixes for specifying a value multiplier can be used when setting a variable at server startup,
# but not to set the value with SET at runtime.
#
# On the other hand, with SET you can assign a variable's value using an expression, which is not true
# when you set a variable at server startup.
#
# For example, the first of the following line is legal at server startup - but the second is not:
#
# mysql --max_allowed_packet=16M #Legal at server startup
# mysql --max_allowed_packet=16*1024*1024 #Illegal at server startup
#
# Conversely, for SET, second is legal at runtime - first is not:
#
# SET GLOBAL max_allowed_packet=16M;#
# SET GLOBAL max_allowed_packet=16*1024*1024;
#
# NOTE: Some system vars can be enabled with SET by setting them to ON/1 or OFF/0.
# 		  To set it on the cmd line or in an option file - Must be set to 1 or 0.
#
# To display system variable names and values; use the SHOW_VARIABLES statement:
#
# mysql> SHOW VARIABLES;
#
# +-----------------------------------------------------------------------------+
# | Variable_name 					| 			Value 										  |
# +-----------------------------------------------------------------------------+
# | 										| 															  |
# | auto_increment_increment 		| 			1 												  |
# | auto_increment_offset 		   | 		   1 												  |
# | automatic_sp_privileges 		| 			ON 											  |
# | back_log 							| 			151 											  |
# | basedir 							| 			/home/mysql/ 								  |
# | binlog_cache_size 				| 			32768 										  |
# | bulk_insert_buffer_size 		| 			8388608 										  |
# | character_set_client 			| 			utf8 											  |
# | character_set_connection 		| 			utf8 											  |
# | character_set_database 		| 			utf8mb4 										  |
# | character_set_filesystem 		| 			binary 										  |
# | character_set_results 			| 			utf8 											  |
# | character_set_server 			| 			utf8mb4 										  |
# | character_set_system 			| 			utf8 											  |
# | character_sets_dir 				| 			/home/mysql/share/mysql/charsets/ 	  |
# | collation_connection 			| 			utf8_general_ci 							  |
# | collation_database 				| 			utf8mb4_0900_ai_ci 						  |
# | collation_server 				| 			utf8mb4_0900_ai_ci 						  |
# ...
# | innodb_autoextend_increment 	| 			8 												  |
# | innodb_buffer_pool_size 		| 			8388608 										  |
# | innodb_commit_concurrency 	| 			0 												  |
# | innodb_concurrency_tickets 	| 			500  											  |
# | innodb_data_file_path 		   | 			ibdata1:10M:autoextend 					  |
# | innodb_data_home_dir 			| 															  |
# ...
# | version 							| 			8.0.1-dmr-log 								  |
# | version_comment 					| 			Source distribution 						  |
# | version_compile_machine 		| 			i686 											  |
# | version_compile_os 				| 			suse-linux 									  |
# | wait_timeout 						| 			28800 										  |
# +-----------------------------------------------------------------------------+
#
# With a LIKE clause, the statement displays only those variables that match the pattern.
# To obtain a specific variable name, use a LIKE clause as follows:
#
# 		SHOW VARIABLES LIKE 'max_join_size';
# 		SHOW SESSION VARIABLES LIKE 'max_join_size';
#
# To get a list of variables whose name match a pattern, use % Wildchar regex matching in a LIKE clause:
#
# 		SHOW VARIABLES LIKE '%size%';
# 		SHOW GLOBAL VARIABLES LIKE '%size%';
#
# Wildcard chars can be used in any pos within the pattern to be matched.
# Stricly speaking, because _ is a wildcard char - you ought to escape it as \_
#
# For SHOW_VARIABLES, if you specify neither GLOBAL nor SESSION, MYSQL returns SESSION values.
#
# The reason for requiring the GLOBAL keyword when setting GLOBAL only vars but not when retrieving them
# is to prevent problems in the future:
#
# 		Were a SESSION var to be removed that has the same name as a GLOBAL var, a client with privs sufficient
# 		to modify global vars might accidentally change the GLOBAL variable rather than just the SESSION var for its own session.
#
# 		Were a SESSION variable to be added with the same name as a GLOBAL variable, a client that intends to change
# 		the GLOBAL variable might find only its own SESSION var changed.
#
# The following covers System Variable Privs:
#
# A system variable can have a global value that affects server operations as a whole, a session value that affects the
# the current session or both.
#
# Many SYS_VAR are dynamic and can be changed at runtime using the SET statement to affect operation of the current
# server instance.
#
# SET can also be used to persist certain global SYS_VAR to the mysqld-auto.cnf file in the data dir,
# to affect server operation for subsequent startups.
#
# RESET_PERSIST removes persisted settings from mysqld-auto.cnf
#
# This section pertains to setting privs required to assign values to SYS_VARs at runtime.
#
# This includes persistence-related privs because some statements that modify sys_var values
# persist those settings to the mysqld-auto.cnf file.
#
# These privs apply to setting global SYS_VAR values:
#
# 		To set a global SYS_VAR at runtime, use the SET_GLOBAL statement, which requires the SYSTEM_VARIABLES_ADMIN or SUPER priv.
#
# 		To persist a global system var to the mysqld-auto.cnf (and set the runtime value), use the SET_PERSIST statement,
# 		which requires the SYSTEM_VARIABLES_ADMIN or SUPER privilege.
#
# 		To persist a global system var to the mysqld-auto.cnf (WITHOUT setting runtime), use the SET_PERSIST_ONLY statement,
# 		which requires the SYSTEM_VARIABLES_ADMIN and PERSIST_RO_VARIABLES_ADMIN privs.
#
# 		To remove a persisted global sys_var from the mysqld-auto.cnf file, use the RESET_PERSIST statement:
# 
# 			For dynamic sys_vars, this statement requires the SYSTEM_VARIABLES_ADMIN or SUPER privilege.
#
# 			For read-only sys_vars, this statement requires the SYSTEM_VARIABLES_ADMIN and PERSIST_RO_VARIABLES_ADMIN privs.
#
# The descriptions for individual SYS_VARs indicate any exceptions to the preceding priv requirements. An example is mandatory_roles.
#
# To set a session sys_var at runtime, use the SET_SESSION statement. In contrast to global sys_vars, setting session sys_vars at runtime
# normally requires no special privs and can be done by any user to affect the current session.
#
# However, for some sys_vars, setting the session values can have effects outside the current session and thus is a restricted
# ops, requiring privs:
#
# (MySQL 8.0.14 >=) - the priv required is SESSION_VARIABLES_ADMIN. However, any user who has SYSTEM_VARIABLES_ADMIN or SUPER effectively
# 							 has SESSION_VARIABLES_ADMIN by implication and need not be granted SESSION_VARIABLES_ADMIN explicitly.
#
# (< 8.0.14 MysQL)  - The priv is SYSTEM_VARIABLES_ADMIN or SUPER.
#
# If a session sys_var is restricted, the var desc. indicates that restriction. Examples include binlog_format, sql_log_bin and sql_log_off
#
# The reason for restricting certain session sys_vars is that changing them can have effects beyond the current session.
#
# For example, setting the session binlog_format or sql_log_bin values affects binary logging for the current session,
# but that may have implications for the integrity of server replication and backups.
#
# SESSION_VARIABLES_ADMIN enables admins to minimize the priv footprint of users who may previously have been granted
# SYSTEM_VARIABLES_ADMIN or SUPER for the purpose of enabling them to modify restricted session sys_vars.
#
# Assume that a admin has created the following role to confer the ability to set restricted session Sys_var:
#
# 		CREATE ROLE set_session_sysvars;
# 		GRANT SYSTEM_VARIABLES_ADMIN ON *.* TO set_session_sysvars;
#
# Any user granted the set_session_sysvars role (and who has that role active) is able to set restricted session sys_vars.
# However, that user is also able to set global sys_vars - which may be undesirable.
#
# By modifying the role to have SESSION_VARIABLES_ADMIN instead of SYSTEM_VARIABLES_ADMIN, the role privs can be
# reduced to the ability to set restricted session sys_vars and nothing else.
#
# i.e:
#
# GRANT SESSION_VARIABLES_ADMIN ON *.* TO set_session_sysvars;
# REVOKE SYSTEM_VARIABLES_ADMIN ON *.* FROM set_session_sysvars;
#
# Modifying the role has an immediate effect. 
#
# Any account granted the set_session_sysvars role no longer has SYSTEM_VARIABLES_ADMIN and is not able to set
# global sys_vars without explicit grants.
#
# A similar GRANT/REVOKE sequence can be applied to any account that was granted SYSTEM_VARIABLES_ADMIN
# directly rather than by means of a role.
#
# The following pertains to Dynamic Sys_Vars:
#
# Many server vars are dynamic and can be set at runtime.
#
# The following pertains to Mysqld in relation to dynamic sys_vars.
#
# Var name 																Var type 						Var scope
# activate_all_roles_on_login 								Boolean 								Global
# audit_log_connection_policy 								Enumeration 						Global
# audit_log_exclude_accounts 									String 								Global
# audit_log_flush 												Boolean 								Global
# audit_log_include_accounts 									String 								Global
# audit_log_read_buffer_size 									Integer 								Varies
#
# audit_log_rotate_on_size 									Integer 								Global
# audit_log_statement_policy 									Enumeration 						Global
# authentication_ldap_sasl_auth_method_name 				String 								Global
# authentication_ldap_sasl_bind_base_dn 					String 								Global
# authentication_ldap_sasl_bind_root_dn 					String 								Global
# authentication_ldap_sasl_bind_root_pwd 					String 								Global
#
# authentication_ldap_sasl_ca_path 							String 								Global
# authentication_ldap_sasl_group_search_attr 			String 								Global
# authentication_ldap_sasl_group_search_filter 			String 								Global
# authentication_ldap_sasl_init_pool_size 				Integer 								Global
# authentication_ldap_sasl_log_status 						Integer 								Global
#
# authentication_ldap_sasl_max_pool_size 					Integer 								Global
# authentication_ldap_sasl_server_host 					String 								Global
# authentication_ldap_sasl_server_port 					Integer 								Global
# authentication_ldap_sasl_tls 								Boolean 								Global
# authentication_ldap_sasl_user_search_attr 				String 								Global
# authentication_ldap_simple_auth_method_name 			String 								Global
# authentication_ldap_simple_bind_base_dn 				String 								Global
# authentication_ldap_simple_bind_root_dn 				String 								Global
#
# authentication_ldap_simple_bind_root_pwd 				String 								Global
# authentication_ldap_simple_ca_path 						String 								Global
# authentication_ldap_simple_group_search_attr 			String 								Global
# authentication_ldap_simple_group_search_filter 		String 								Global
# authentication_ldap_simple_init_pool_size 				Integer 								Global
# authentication_ldap_simple_log_status 					Integer 								Global
#
# authentication_ldap_simple_max_pool_size 				Integer 								Global
# authentication_ldap_simple_server_host 					String 								Global
# authentication_ldap_simple_server_port 					Integer 								Global
# authentication_ldap_simple_tls 							Boolean 								Global
# authentication_ldap_simple_user_search_attr 			String 								Global
# auto_increment_increment 									Integer 								Both
# auto_increment_offset 										Integer 								Both
# autocommit 														Boolean 								Both
# automatic_sp_privileges 										Boolean 								Global
# avoid_temporal_upgrade 										Boolean 								Global
# big_tables 														Boolean 								Both
# binlog_cache_size 												Integer 								Global
# binlog_checksum 												String 								Global
#
# binlog_direct_non_transactional_updates 				Boolean 								Both
# binlog_error_action 											Enumeration 						Global
# binlog_expire_logs_seconds 									Integer 								Global
# binlog_format 													Enumeration 						Both
# binlog_group_commit_sync_delay 							Integer 								Global
# binlog_group_commit_sync_no_delay_count 				Integer 								Global
# binlog_max_flush_queue_time 								Integer 								Global
# binlog_order_commits 											Boolean 								Global
# binlog_row_image=image_type 								Enumeration 						Both
# binlog_row_metadata=metadata_type 						Enumeration 						Global
# binlog_row_value_options 									Set 									Both
# binlog_rows_query_log_events 								Boolean 								Both
# binlog_stmt_cache_size 										Integer 								Global
#
# binlog_transaction_dependency_history_size 			Integer 								Global
# binlog_transaction_dependency_tracking 					Enumeration 						Global
# block_encryption_mode 										String 								Both
# bulk_insert_buffer_size 										Integer 								Both
# character_set_client 											String 								Both
# character_set_connection 									String 								Both
# character_set_database 										String 								Both
# character_set_filesystem 									String 								Both
# character_set_results 										String 								Both
#
# character_set_server 											String 								Both
# check_proxy_users 												Boolean 								Global
# collation_connection 											String 								Both
# collation_database 											String 								Both
# collation_server 												String 								Both
# completion_type 												Enumeration 						Both
# concurrent_insert 												Enumeration 						Global
# connect_timeout 												Integer 								Global
# connection_control_failed_connections_threshold 		Integer 								Global
# connection_control_max_connection_delay 				Integer 								Global
#
# connection_control_min_connection_delay 				Integer 								Global
# cte_max_recursion_depth 										Integer 								Both
# debug 																String 								Both
# debug_sync 														String 								Session
# default_collation_for_utf8mb4 								Enumeration 						Both
# default_password_lifetime 									Integer 								Global
# default_storage_engine 										Enumeration 						Both
# default_tmp_storage_engine 									Enumeration 						Both
# default_week_format 											Integer 								Both
# delay_key_write 												Enumeration 						Global
# delayed_insert_limit 											Integer 								Global
# delayed_insert_timeout 										Integer 								Global
# delayed_queue_size 											Integer 								Global
#
# div_precision_increment 										Integer 								Both
# dragnet.log_error_filter_rules 							String 								Global
# end_markers_in_json 											Boolean 								Both
# enforce_gtid_consistency 									Enumeration 						Global
# eq_range_index_dive_limit 									Integer 								Both
# event_scheduler 												Enumeration 						Global
# executed_gtids_compression_period 						Integer 								Global
# expire_logs_days 												Integer 								Global
# explicit_defaults_for_timestamp 							Boolean 								Both
# flush 																Boolean 								Global
#
# flush_time 														Integer 								Global
# foreign_key_checks 											Boolean 								Both
# ft_boolean_syntax 												String 								Global
# general_log 														Boolean 								Global
# general_log_file 												File name 							Global
# group_concat_max_len 											Integer 								Both
# group_replication_allow_local_disjoint_gtids_join 	Boolean 								Global
# group_replication_allow_local_lower_version_join 	Boolean 								Global
# group_replication_auto_increment_increment 			Integer 								Global
# group_replication_bootstrap_group 						Boolean 								Global
# group_replication_communication_debug_options 		String 								Global
# group_replication_components_stop_timeout 				Integer 								Global
# group_replication_compression_threshold 				Integer 								Global
# group_replication_enforce_update_everywhere_checks 	Boolean 								Global
# group_replication_exit_state_action 						Enumeration 						Global
#
# group_replication_flow_control_applier_threshold 	Integer 								Global
# group_replication_flow_control_certifier_threshold 	Integer 								Global
# group_replication_flow_control_hold_percent 			Integer 								Global
# group_replication_flow_control_max_commit_quota 		Integer 								Global
# group_replication_flow_control_member_quota_percent Integer 								Global
# group_replication_flow_control_min_quota 				Integer 								Global
# group_replication_flow_control_min_recovery_quota 	Integer 								Global
# group_replication_flow_control_mode 						Enumeration 						Global
# group_replication_flow_control_period 					Integer 								Global
# group_replication_flow_control_release_percent 		Integer 								Global
# group_replication_force_members 							String 								Global
# group_replication_group_name 								String 								Global
# group_replication_group_seeds 								String 								Global
#
# group_replication_gtid_assignment_block_size 			Integer 								Global
# group_replication_ip_whitelist 							String 								Global
# group_replication_local_address 							String 								Global
# group_replication_member_expel_timeout 					Integer 								Global
# group_replication_member_weight 							Integer 								Global
# group_replication_poll_spin_loops 						Integer 								Global
# group_replication_recovery_complete_at 					Enumeration 						Global
# group_replication_recovery_get_public_key 				Boolean 								Global
# group_replication_recovery_public_key_path 			File name 							Global
# group_replication_recovery_reconnect_interval 		Integer 								Global
# group_replication_recovery_retry_count 					Integer 								Global
# group_replication_recovery_ssl_ca 						String 								global
# group_replication_recovery_ssl_capath 					String 								Global
#
# group_replication_recovery_ssl_cert 						String 								Global
# group_replication_recovery_ssl_cipher 					String 								Global
# group_replication_recovery_ssl_crl 						String 								Global
# group_replication_recovery_ssl_crlpath 					String 								Global
# group_replication_recovery_ssl_key 						String 								Global
# group_replication_recovery_ssl_verify_server_cert 	Boolean 								Global
# group_replication_recovery_use_ssl 						Boolean 								Global
# group_replication_single_primary_mode 					Boolean 								Global
# group_replication_ssl_mode 									Enumeration 						Global
# group_replication_start_on_boot 							Boolean 								Global
# group_replication_transaction_size_limit 				Integer 								Global
# group_replication_unreachable_majority_timeout 		Integer 								Global
# gtid_executed_compression_period 							Integer 								Global
# gtid_mode 														Enumeration 						Global
# gtid_mode 														Enumeration 						Global
# gtid_next 														Enumeration 						Session
#
# gtid_purged 														String 								Global
# histogram_generation_max_mem_size 						Integer 								Both
# host_cache_size 												Integer 								Global
# identity 															Integer 								Session
# information_schema_stats_expiry 							Integer 								Both
# init_connect 													String 								Global
# init_slave 														String 								Global
# innodb_adaptive_flushing 									Boolean 								Global
# innodb_adaptive_flushing_lwm 								Integer 								Global
# innodb_adaptive_hash_index 									Boolean 								Global
# innodb_adaptive_max_sleep_delay 							Integer 								Global
# innodb_api_bk_commit_interval 								Integer 								Global
# innodb_api_trx_level 											Integer 								Global
# innodb_autoextend_increment 								Integer 								Global
# innodb_background_drop_list_empty 						Boolean 								Global
# innodb_buffer_pool_dump_at_shutdown 						Boolean 								Global
# innodb_buffer_pool_dump_now 								Boolean 								Global
# innodb_buffer_pool_dump_pct 								Integer 								Global
#
# innodb_buffer_pool_filename 								File name 							Global
# innodb_buffer_pool_in_core_file 							Boolean 								Global
# innodb_buffer_pool_load_abort 								Boolean 								Global
# innodb_buffer_pool_load_now 								Boolean 								Global
# innodb_buffer_pool_size 										Integer 								Global
# innodb_change_buffer_max_size 								Integer 								Global
# innodb_change_buffering 										Enumeration 						Global
# innodb_change_buffering_debug 								Integer 								Global
# innodb_checkpoint_disabled 									Boolean 								Global
# innodb_checksum_algorithm 									Enumeration 						Global
# innodb_cmp_per_index_enabled 								Boolean 								Global
# innodb_commit_concurrency 									Integer 								Global
# innodb_compress_debug 										Enumeration 						Global
# innodb_compression_failure_threshold_pct 				Integer 								Global
# innodb_compression_level 									Integer 								Global
# innodb_compression_pad_pct_max 							Integer 								Global
# innodb_concurrency_tickets 									Integer 								Global
# innodb_ddl_log_crash_reset_debug 							Boolean 								Global
#
# innodb_deadlock_detect 										Boolean 								Global
# innodb_default_row_format 									Enumeration 						Global
# innodb_disable_sort_file_cache 							Boolean 								Global
# innodb_fast_shutdown 											Integer 								Global
# innodb_fil_make_page_dirty_debug 							Integer 								Global
# innodb_file_per_table 										Boolean 								Global
# innodb_fill_factor 											Integer 								Global
# innodb_flush_log_at_timeout 								Integer 								Global
# innodb_flush_log_at_trx_commit 							Enumeration 						Global
# innodb_flush_neighbors 										Enumeration 						Global
# innodb_flush_sync 												Boolean 								Global
# innodb_flushing_avg_loops 									Integer 								Global
# innodb_fsync_threshold 										Integer 								Global
# innodb_ft_aux_table 											String 								Global
# innodb_ft_enable_diag_print 								Boolean 								Global
# innodb_ft_enable_stopword 									Boolean 								Both
#
# innodb_ft_num_word_optimize 								Integer 								Global
# innodb_ft_result_cache_limit 								Integer 								Global
# innodb_ft_server_stopword_table 							String 								Global
# innodb_ft_user_stopword_table 								String 								Both
# innodb_io_capacity 											Integer 								Global
# innodb_io_capacity_max 										Integer 								Global
# innodb_limit_optimistic_insert_debug 					Integer 								Global
# innodb_lock_wait_timeout 									Integer 								Both
# innodb_log_buffer_size 										Integer 								Global
# innodb_log_checkpoint_fuzzy_now 							Boolean 								Global
# innodb_log_checkpoint_now 									Boolean 								Global
# innodb_log_checksums 											Boolean 								Global
# innodb_log_compressed_pages 								Boolean 								Global
# innodb_log_spin_cpu_abs_lwm 								Boolean 								Global
#
# innodb_log_spin_cpu_pct_hwm 								Integer 								Global
# innodb_log_wait_for_flush_spin_hwm 						Integer 								Global
# innodb_log_write_ahead_size 								Integer 								Global
# innodb_lru_scan_depth 										Integer 								Global
# innodb_max_dirty_pages_pct 									Numeric 								Global
# innodb_max_dirty_pages_pct_lwm 							Numeric 								Global
# innodb_max_purge_lag 											Integer 								Global
# innodb_max_purge_lag_delay 									Integer 								Global
# innodb_max_undo_log_size 									Integer 								Global
# innodb_merge_threshold_set_all_debug 					Integer 								Global
# innodb_monitor_disable 										String 								Global
#
# innodb_monitor_enable 										String 								Global
# innodb_monitor_reset 											String 								Global
# innodb_monitor_reset_all 									String 								Global
# innodb_old_blocks_pct 										Integer 								Global
# innodb_old_blocks_time 										Integer 								Global
# innodb_online_alter_log_max_size 							Integer 								Global
# innodb_optimize_fulltext_only 								Boolean 								Global
# innodb_parallel_read_threads 								Integer 								Session
# innodb_print_all_deadlocks 									Boolean 								Global
# innodb_print_ddl_logs 										Boolean 								Global
# innodb_purge_batch_size 										Integer 								Global
# innodb_purge_rseg_truncate_frequency 					Integer 								Global
# innodb_random_read_ahead 									Boolean 								Global
# innodb_read_ahead_threshold 								Integer 								Global
# innodb_redo_log_encrypt 										Boolean 								Global
# innodb_replication_delay 									Integer 								Global
# innodb_rollback_segments 									Integer 								Global
#
# innodb_saved_page_number_debug 							Integer 								Global
# innodb_spin_wait_delay 										Integer 								Global
# innodb_stats_auto_recalc 									Boolean 								Global
# innodb_stats_include_delete_marked 						Boolean 								Global
# innodb_stats_method 											Enumeration 						Global
# innodb_stats_on_metadata 									Boolean 								Global
# innodb_stats_persistent 										Boolean 								Global
# innodb_stats_persistent_sample_pages 					Integer 								Global
# innodb_stats_transient_sample_pages 						Integer 								Global
# innodb_status_output 											Boolean 								Global
# innodb_status_output_locks 									Boolean 								Global
# innodb_strict_mode 											Boolean 								Both
# innodb_sync_spin_loops 										Integer 								Global
# innodb_table_locks 											Boolean 								Both
# innodb_thread_concurrency 									Integer 								Global
# innodb_thread_sleep_delay 									Integer 								Global
# innodb_tmpdir 													Dir name 							Both
#
# innodb_trx_purge_view_update_only_debug 				Boolean 								Global
# innodb_trx_rseg_n_slots_debug 								Integer 								Global
# innodb_undo_log_encrypt 										Boolean 								Global
# innodb_undo_log_truncate 									Boolean 								Global
# innodb_undo_logs 												Integer 								Global
# innodb_undo_tablespaces 										Integer 								Global
# insert_id 														Integer 								Session
# interactive_timeout 											Integer 								Both
# internal_tmp_disk_storage_engine 							Enumeration 						Global
# internal_tmp_mem_storage_engine 							Enumeration 						Both
# join_buffer_size 												Integer 								Both
# keep_files_on_create 											Boolean 								Both
# key_buffer_size 												Integer 								Global
# key_cache_age_threshold 										Integer 								Global
# key_cache_block_size 											Integer 								Global
# key_cache_division_limit 									Integer 								Global
# keyring_aws_cmk_id 											String 								Global
# keyring_aws_region 											Enumeration 						Global
# keyring_encrypted_file_data 								File name 							Global
# keyring_encrypted_file_password 							String 								Global
# keyring_file_data 												File name 							Global
# keyring_okv_conf_dir 											Dir name 							Global
# keyring_operations 											Boolean 								Global
# last_insert_id 													Integer 								Session
# lc_messages 														String 								Both
# lc_time_names 													String 								Both
# local_infile 													Boolean 								Global
#
# lock_wait_timeout 												Integer 								Both
# log_bin_trust_function_creators 							Boolean 								Global
# log_builtin_as_identified_by_password 					Boolean 								Global
# log_error_filter_rules 										String 								Global
# log_error_services 											String 								Global
# log_error_suppression_list 									String 								Global
# log_error_verbosity 											Integer 								Global
# log_output 														Set 									Global
# log_queries_not_using_indexes 								Boolean 								Global
# log_slow_admin_statements 									Boolean 								Global
# log_slow_extra 													Boolean 								Global
# log_slow_slave_statements 									Boolean 								Global
# log_statements_unsafe_for_binlog 							Boolean 								Global
# log_syslog 														Boolean 								Global
# log_syslog_facility 											String 								Global
# log_syslog_include_pid 										Boolean 								Global
# log_syslog_tag 													String 								Global
# log_throttle_queries_not_using_indexes 					Integer 								Global
# log_timestamps 													Enumeration 						Global
# log_warnings 													Integer 								Global
# long_query_time 												Numeric 								Both
#
# low_priority_updates 											Boolean 								Both
# mandatory_roles 												String 								Global
# master_info_repository 										String 								Global
# master_verify_checksum 										Boolean 								Global
# max_allowed_packet 											Integer 								Both
# max_binlog_cache_size 										Integer 								Global
# max_binlog_size 												Integer 								Global
# max_binlog_stmt_cache_size 									Integer 								Global
# max_connect_errors 											Integer 								Global
# max_connections 												Integer 								Global
# max_delayed_threads 											Integer 								Both
# max_error_count 												Integer 								Both
# max_execution_time 											Integer 								Both
# max_heap_table_size 											Integer 								Both
# max_insert_delayed_threads 									Integer 								Both
# max_join_size 													Integer 								Both
# max_length_for_sort_data 									Integer 								Both
# max_points_in_geometry 										Integer 								Both
# max_prepared_stmt_count 										Integer 								Global
# max_relay_log_size 											Integer 								Global
# max_seeks_for_key 												Integer 								Both
# max_sort_length 												Integer 								Both
# max_sp_recursion_depth 										Integer 								Both
# max_tmp_tables 													Integer 								Both
#
# max_user_connections 											Integer 								Both
# max_write_lock_count 											Integer 								Global
# min_examined_row_limit 										Integer 								Both
# multi_range_count 												Integer 								Both
# myisam_data_pointer_size 									Integer 								Global
# myisam_max_sort_file_size 									Integer 								Global
# myisam_repair_threads 										Integer 								Both
# myisam_sort_buffer_size 										Integer 								Both
# myisam_stats_method 											Enumeration 						Both
# myisam_use_mmap 												Boolean 								Global
# mysql_firewall_mode 											Boolean 								Global
# mysql_firewall_trace 											Boolean 								Global
# mysql_native_password_proxy_users 						Boolean 								Global
# mysqlx-connect-timeout 										Integer 								Global
#
# mysqlx_connect_timeout 										Integer 								Global
# mysqlx_document_id_unique_prefix 							Integer 								Global
# mysqlx-idle-worker-thread-timeout 						Integer 								Global
# mysqlx_idle_worker_thread_timeout 						Integer 								Global
# mysqlx-interactive-timeout 									Integer 								Global
# mysqlx_interactive_timeout 									Integer 								Global
# mysqlx-max-allowed-packet 									Integer 								Global
# mysqlx_max_allowed_packet 									Integer 								Global
# mysqlx-max-connections 										Integer 								Global
# mysqlx_max_connections 										Integer 								Global
#
# mysqlx-min-worker-threads 									Integer 								Global
# mysqlx_min_worker_threads 									Integer 								Global
# mysqlx-read-timeout 											Integer 								Session
# mysqlx_read_timeout 											Integer 								Session
# mysqlx_wait_timeout 											integer 								Session
# mysqlx_wait_timeout 											integer 								Session
# mysqlx_write_timeout 											Integer 								Session
# mysqlx_write_timeout 											Integer 								Session
#
# ndb_blob_write_batch_bytes 									integer 								Both
# ndb_deferred_constraints 									Integer 								Both
# ndb_deferred_constraints 									Integer 								Both
# ndb_distribution 												Enumeration 						Global
# ndb_distribution={KEYHASH|LINHASH} 						Enumeration 						Global
# ndb_eventbuffer_free_percent 								Integer 								Global
# ndb_eventbuffer_max_alloc 									Integer 								Global
# ndb_force_send 													Boolean 								Both
# ndb_index_stat_enable 										Boolean 								Both
# ndb_index_stat_option 										String 								Both
# ndb_join_pushdown 												Boolean 								Both
# ndb_log_binlog_index 											Boolean 								Global
# ndb_log_empty_epochs 											Boolean 								Global
# ndb_log_empty_update 											Boolean 								Global
# ndb_log_updated_only 											Boolean 								Global
# ndb_optimization_delay 										Integer 								Global
# ndb_recv_thread_activation_threshold 					Integer 								Global
# ndb_recv_thread_cpu_mask 									Bitmap 								Global
# ndb_report_thresh_binlog_epoch_slip 						Integer 								Global
# ndb_report_thresh_binlog_mem_usage 						Integer 								Global
# ndb_show_foreign_key_mock_tables 							Boolean 								Global
# ndb_table_no_logging 											Boolean 								Session
#
# ndb_use_transactions 											Boolean 								Both
# ndbinfo_max_rows 												Integer 								Both
# ndbinfo_show_hidden 											Boolean 								Both
# net_buffer_length 												Integer 								Both
# net_read_timeout 												Integer 								Both
# net_retry_count 												Integer 								Both
# net_write_timeout 												Integer 								Both
# new 																Boolean 								Both
# offline_mode 													Boolean 								Global
# old_alter_table 												Boolean 								Both
# old_passwords 													Enumeration 						Both
# optimizer_prune_level 										Boolean 								Both
# optimizer_search_depth 										Integer 								Both
#
# optimizer_switch 												Set 									Both
# optimizer_trace 												String 								Both
# optimizer_trace_features 									String 								Both
# optimizer_trace_limit 										Integer 								Both
# optimizer_trace_max_mem_size 								Integer 								Both
# optimizer_trace_offset 										Integer 								Both
# original_commit_timestamp 									Numeric 								Session
#
# parser_max_mem_size 											Integer 								Both
# password_history 												Integer 								Global
# password_require_current 									Boolean 								Global
# password_reuse_interal 										Integer 								Global
# performance_schema_max_digest_sample_age 				Integer 								Global
# preload_buffer_size 											Integer 								Both
# profiling 														Boolean 								Both
# profiling_history_size 										Integer 								Both
# pseudo_slave_mode 												Integer 								Session
# pseudo_thread_id 												Integer 								Session
# query_alloc_block_size 										Integer 								Both
# query_cache_limit 												Integer 								Global
# query_cache_min_res_unit 									Integer 								Global
# query_cache_size 												Integer 								Global
# query_cache_type 												Enumeration 						Both
# query_cache_wlock_invalidate 								Boolean 								Both
# query_prealloc_size 											Integer 								Both
# rand_seed1 														Integer 								Session
# rand_seed2 														Integer 								Session
#
# range_alloc_block_size 										Integer 								Both
# range_optimizer_max_mem_size 								Integer 								Both
# rbr_exec_mode 													Enumeration 						Both
# read_buffer_size 												Integer 								Both
# read_only 														Boolean 								Global
# read_rnd_buffer_size 											Integer 								Both
# regexp_stack_limit 											Integer 								Global
# regexp_time_limit 												Integer 								Global
# relay_log_info_repository 									String 								Global
# relay_log_purge 												Boolean 								Global
# require_secure_transport 									Boolean 								Global
# resultset_metadata 											Enumeration 						Session
# rewriter_enabled 												Boolean 								Global
# rewriter_verbose 												Integer 								Global
# rpl_read_size 													Integer 								Global
# rpl_semi_sync_master_enabled 								Boolean 								Global
# rpl_semi_sync_master_timeout 								Integer 								Global
# rpl_semi_sync_master_trace_level 							Integer 								Global
# rpl_semi_sync_master_wait_for_slave_count 				Integer 								Global
# rpl_semi_sync_master_wait_no_slave 						Boolean 								Global
# rpl_semi_sync_master_wait_point 							Enumeration 						Global
# rpl_semi_sync_slave_enabled 								Boolean 								Global
# rpl_semi_sync_slave_trace_level 							Integer 								Global
#
# rpl_stop_slave_timeout 										Integer 								Global
# schema_definition_cache 										Integer 								Global
# secure_auth 														Boolean 								Global
# server_id 														Integer 								Global
# session_track_gtids 											Enumeration 						Both
# session_track_schema 											Boolean 								Both
# session_track_state_change 									Boolean 								Both
# session_track_system_variables 							String 								Both
# session_track_transaction_info 							Enumeration 						Both
# sha256_password_proxy_users 								Boolean 								Global
# show_compatibility_56 										Boolean 								Global
# show_create_table_verbosity 								Boolean 								Both
# show_old_temporals 											Boolean 								Both
# slave_allow_batching 											Boolean 								Global
# slave_checkpoint_group=# 									Integer 								Global
# slave_checkpoint_period=# 									Integer 								Global
# slave_compressed_protocol 									boolean 								Global
# slave_exec_mode 												Enumeration 						Global
#
# slave_max_allowed_packet 									Integer 								Global
# slave_net_timeout 												Integer 								Global
# slave_parallel_type 											Enumeration 						Global
# slave_parallel_workers 										Integer 								Global
# slave_pending_jobs_size_max 								Integer 								Global
# slave_preserve_commit_order 								Boolean 								Global
# slave_rows_search_algorithms=list 						Set 									Global
# slave_sql_verify_checksum 									Boolean 								Global
# slave_transaction_retries 									Integer 								Global
# slow_launch_time 												Integer 								Global
# slow_query_log 													Boolean 								Glboal
# slow_query_log_file 											File name 							Global
# sort_buffer_size 												Integer 								Both
# sql_auto_is_null 												Boolean 								Both
# sql_big_selects 												Boolean 								Both
# sql_buffer_result 												Boolean 								Both
# sql_log_bin 														Boolean 								Session
# sql_log_off 														Boolean 								Both
# sql_mode 															Set 									Both
# sql_notes 														Boolean 								Both
# sql_quote_show_create 										Boolean 								Both
# sql_require_primary_key 										Boolean 								Both
# sql_safe_updates 												Boolean 								Both
# sql_select_limit 												Integer 								Both
# sql_slave_skip_counter 										Integer 								Global
#
# sql_warnings 													Boolean 								Both
# ssl_fips_mode 													Enumeration 						global
# stored_program_cache 											Integer 								Global
# stored_program_definition_cache 							Integer 								Global
# super_read_only 												Boolean 								Global
# sync_binlog 														Integer 								Global
# sync_master_info 												Integer 								Global
# sync_relay_log 													Integer 								Global
# sync_relay_log_info 											Integer 								Global
# syseventlog.facility 											String 								Global
# syseventlog.include_pid 										Boolean 								Global
# syseventlog.tag 												String 								Global
# table_definition_cache 										Integer 								Global
# table_open_cache 												Integer 								Global
# tablespace_definition_cache 								Integer 								Global
# temptable_max_ram 												Integer 								Global
# thread_cache_size 												Integer 								Global
#
# thread_pool_high_priority_connection 					Integer 								Both
# thread_pool_max_unused_threads 							Integer 								Global
# thread_pool_prio_kickup_timer 								Integer 								Both
# thread_pool_stall_limit 										Integer 								Global
# time_zone 														String 								Both
# timestamp 														Numeric 								Session
# tmp_table_size 													Integer 								Both
# transaction_alloc_block_size 								Integer 								Bothh
# transaction_isolation 										Enumeration 						Both
# transaction_prealloc_size 									Integer 								Both
# transaction_read_only 										Boolean 								Both
# transaction_write_set_extraction 							Enumeration 						Both
# tx_isolation 													Enumeration 						Both
# tx_read_only 													Boolean 								Both
# unique_checks 													Boolean 								Both
# updatable_views_with_limit 									Boolean 								Both
# use_secondary_engine 											Enumeration 						Session
# validate_password_check_user_name 						Boolean 								Global
# validate_password_dictionary_file 						File name 							Global
# validate_password_length 									Integer 								Global
# validate_password_mixed_case_count 						INteger 								Global
# validate_password_number_count 							Integer 								Global
# validate_password_policy 									Enumeration 						Global
# validate_password_special_char_count 					Integer 								Global
# validate_password.check_user_name 						Boolean 								Global
# validate_password.dictionary_file 						File name 							Global
# validate_password.length 									integer 								Global
# validate_password.mixed_case_count 						Integer 								Global
# validate_password.number_count 							Integer 								Global
# validate_password.policy 									Enumeration 						Global
# validate_password.special_char_count 					Integer 								Global
# version_tokens_session 										String 								Both
# wait_timeout 													Integer 								Both
# windowing_use_high_precision 								Boolean 								Both
#
# The following pertains to Persisted System Variables:
#
# The MySQL server maintains sys vars that configure its operations. A sys var can have a global value that
# effects server ops as a whole, current session or both.
#
# Many sys vars are dynamic, can be changed during runtime using SET to affect current session.
# SET can also be used to persist certain global sys vars to the mysqld-auto.cnf in the data dir - which affects subsequent startups.
#
# RESET_PERSIST removes persisted settings from mysqld-auto.cnf
#
# The following pertains to a OVERVIEW of the persisted Sys vars:
#
# Many sys_vars can be set at startup from a my.cnf option file or at runtime using the SET
# statement, those methods of configing the server either requires a login access to the server host,
# or do not provide the capability of persistently configuring the server at runtime or remotely:
#
# 		Modifying an option file requires direct access to that file, which requires login access to the MySQL server host.
#
# 		MOdifying sys_vars with SET_GLOBAL is a runtime capability that can be done from clients run locally 
# 		or from remote hosts, but the changes affect only the current running server instance. i.e, nont persistent.
#
# To persist sys_vars to a file named mysqld-auto.cnf - in the data dir - we can do as follows:
#
# 		SET PERSIST max_connections = 1000;
# 		SET @@persist.max_connections = 1000;
#
# 		SET PERSIST ONLY back_log = 100;
# 		SET @@persist_only.back_log = 100;
#
# MySQL also provides a RESET PERSIST statement for removing persisted sys vars from mysqld-auto.cnf
#
# Server configs performed by persisted sys_vars, has these chareteristics:
#
# 		Made at runtime
#
# 		Permanent, apply across server restarts
#
# 		Can be made from local or clients who connect from a remote host.
# 		(can configure multiple remote MySQL servers from a central client host)
#
# 		To persist sys_vars only reqs the privs for it, not login access or akin.
#
# 		Admin rights allows you to reconfig servers by persisting sys_vars, then cause the 
# 		server to use the changed settings by executing a RESTART statement.
#
# 		Persisted settings provide immediate feedback about errors, because if you try to SET 
# 		a malformed setting or syntax error - it does not change the server config, due to failing.
#
# The following pertains to the SYNTAX for persisting Sys_Vars:
#
# 		To persist a global sys_var to mysqld-auto.cnf option file in the data dir, we can use PERSIST Or the @@persist qualifier:
#
# 			SET PERSIST max_connections = 1000;
# 			SET @@persist.max_connections = 1000;
#
# 			Like SET_GLOBAL, SET_PERSIST sets the global var runtime - but also writes the var setting to mysqld-auto.cnf 
# 			(replaces existing var settings if they are there)
#
# 		To persist a global sys var to the mysqld-auto.cnf without setting the global var runtime value - we can use PERSIST_ONLY or @@persist_only.back_log
#
# 			SET PERSIST_ONLY back_log = 1000;
# 			SET @@persist_only.back_log = 1000;
#
# 			(Writes to the mysqld-auto.cnf file - but does not modify the global var runtime value)
# 			(Suitable for configing read_only sys_vars that can only be done at server startup)
#
# These RESET_PERSIST syntax ops can be used for removing persisted sys_vars:
#
# 		To remove all persisted vars from mysqld-auto.cnf, use RESET_PERSIST without naming any sys var:
# 			
# 			RESET PERSIST;
#
# 		To remove a specified persisted var from mysqld-auto.cnf, name it in the statement:
#
# 			RESET PERSIST system_var_name;
#
# 		To remove a specific persisted var from mysqld-auto.cnf, but produce a warning rather than an error
# 		if the var is not present in the file, we can do IF EXISTS:
#
# 			RESET PERSIST IF EXISTS system_var_name;
#
#
# A sys_var implemented by a plugin can be persisted if the plugin is installed when the SET statement is executed.
# Assignment of the persisted plugin variable takes effect for subsequent server restarts if the plugin is still installed.
#
# If the plugin is no longer installed, the plugin variable will not exist when the server reads the mysqld-auto.cnf file
# The server writes a warning to the error log and continues:
#
# 		currently unknown variable '<var_name>'
# 		was read from the persisted config file
#
# The following pertains to obtaining information About Persisted Sys Vars:
#
# 		The Performance Schema <persisted_variables> table provides an SQL interface to the mysqld-auto.cnf file, enabling its
# 		contents to be inspected at runtime using SELECT statements.
#
# 		The Performance Schema <variables_info> table contains info showing when and by which user each sys_var was most recently set.
#
# 		RESET_PERSIST affects the contents of the persisted_variables table because the table contents correspond to the contents
# 		of the mysqld-auto.cnf file.
#
# 		On the other hand, because RESET_PERSIST does not change variable values, it has no effect on the contents of the variables_info
# 		table until the server is restarted.
#
# The following pertains to FORMAT AND SERVER HANDLING OF THE MYSQLD-AUTO.CNF FILE:
#
# It's akin to JSON:
#
# {
# 		"Version": 1,
# 		"mysql_server": {
# 			"max_connections": {
# 				"Value": 	"152",
# 				"Metadata": {
# 					"Timestamp": 1.51.. (etc.)
# 					"User": 	"root",
# 					"Host": 	"localhost"
# 				}
# 		},
# 		"transaction_isolation": {
# 			"Value": "READ-COMMITTED",
# 			"Metadata": {
# 				"Timestamp": 1.51.. (etc)
# 				"User": "root",
# 				"Host": "localhost"
# 			}
# 		},
# 		"mysql_server_static_options": {
# 			"innodb_api_enable_mdi": {
# 				"Value": "0",
# 				"Metadata": {
# 					"Timestamp": 1.51.. (etc)
# 					"User": "root",
# 					"Host": "localhost"
# 				}
# 			},
# 			"log_slave_updates": {
# 				"Values": "1",
# 				"Metadata": {
# 					"Timestamp": 1.51... (etc)
# 					"User": "root",
# 					"Host": "localhost"
# 				}
# 			}
# 		}
# 	}	
#}
#
# At startup the server processes the mysqld-auto.cnf file after all other option files.
# The server handles the file contents as follows:
#
# 		If the persisted_globals_load sys_var is disabled, the server ignores the mysqld-auto.cnf file.
#
# 		Only read-only variables persisted using SET_PERSIST_ONLY appear in the "mysql_server_static_options" section.
# 		All variables present inside this section are appended to the cmd line and processed with other cmd line options.
#
# 		All remaining persisted variables are set by executing the equivalent of a SET_GLOBAL statement later, just before
# 		the server starts listening for client connections.
#
# 		These settings therefore do not take effect until late in the startup process, which might be unsuitable for certain
# 		sys_vars.
#
# 		For example, a variable such as log_error_verbosity that affects logging to the error log takes effect later in the 
# 		startup process if persisted to mysqld-auto.cnf than if set in my.cnf. It may be preferable to set such variables
# 		in my.cnf rather than in mysqld-auto.cnf
#
# Management of the mysqld-auto.cnf file should be left to the server. Manipulation of it should only occur through SET and RESET_PERSIST statements.
#
# Removing the file, causes loss of all persisted settings at hte next server startup.
#
# Manual changes to the file may result in a parse error at server startup.
# In this case, the server reports an error and exits.
#
# If said issue occurs, start the server with the persisted_globals_load sys_var disabled,
# or with the --no-defaults option.
#
# Or remove mysqld-auto.cnf.
#
# The following pertains to nonpersistent Sys_vars:
#
# SET_PERSIST and SET_PERSIST_ONLY enable Global sys_vars to be persisted to the mysqld-auto.cnf option file in the data dir.
# However, not all sys_vars can be persisted.
#
# Might be prevented from being persisted by virtue of:
#
# 		A sys var might be read only. Cannot be set at all, whether at server startup or at runtime.
#
# 		A sys var might be intended only for internal use.
#
# 		A sys var might involve sensitive data. A variable such as secure_file_priv should be settable
# 		only by a user who has direct access to the server host file system - not a remote user. (Due to possible priv escalation)
#
# 		Session sys_vars cannot be persisted. Cannot be set at server startup, so cannot be persisted (no reason)
#
# The following are sys_vars of which cannot be persisted:
#
# 	audit_log_current_session
# 	audit_log_file
# 	audit_log_filter_id
# 	audit_log_format
# 	auto_generate_certs
#
# 	basedir
# 	bind_address
# 	caching_sha2_password_auto_generate_rsa_keys
# 	caching_sha2_password_private_key_path
# 	caching_sha2_password_public_key_path
# 	character_set_system
# 	character_sets_dir
# 	core_file
# 	daemon_memcached_engine_lib_name
#
# 	daemon_memcached_engine_lib_path
# 	daemon_memcached_option
# 	datadir
# 	default_authentication_plugin
# 	ft_stopword_file
# 	have_statement_timeout
# 	have_symlink
# 	hostname
# 	init_file
#
# 	innodb_buffer_pool_load_at_startup
# 	innodb_data_file_path
# 	innodb_data_home_dir
# 	innodb_dedicated_server
# 	innodb_directories
# 	innodb_force_load_corrupted
# 	innodb_log_group_home_dir
# 	innodb_page_size
# 	innodb_read_only
#
# 	innodb_temp_data_file_path
# 	innodb_temp_tablespaces_dir
# 	innodb_undo_directory
# 	innodb_undo_tablespaces
# 	innodb_version
# 	keyring_encrypted_file_data
# 	keyring_encrypted_file_password
# 	large_files_support
# 	large_page_size
# 	lc_messages_dir
#
# 	license
# 	locked_in_memory
# 	log_bin
# 	log_bin_basename
# 	log_bin_index
# 	log_error
# 	lower_case_file_system
# 	mecab_rc_file
# 	named_pipe
# 	persisted_globals_load
# 	pid_file
# 	plugin_dir
# 	port
#
# 	protocol_version
#  relay_log
# 	relay_log_basename
# 	relay_log_index
# 	relay_log_info_file
# 	secure_file_priv
# 	server_uuid
#
# 	sha256_password_auto_generate_rsa_keys
# 	sha256_password_private_key_path
# 	sha256_password_public_key_path
# 	shared_memory
# 	shared_memory_base_name
# 	skip_external_locking
# 	skip_networking
# 	slave_load_tmpdir
# 	socket
# 	ssl_ca
# 	ssl_capath
# 	ssl_cert
# 	ssl_crl
# 	ssl_crlpath
# 	ssl_key
# 	system_time_zone
# 	tmpdir
# 	version_comment
# 	version_compile_machine
# 	version_compile_os
# 	version_compile_zlib
# 	version_tokens_session_number
#
# The following pertains to structured system variables:
#
# A structured Sys_var differs from a regular sys_var in two respects:
#
# 		Its value is a structure with components that specify server parameters considered to be closely related.
#
# 		There might be several instances of a given type of structured variable. Each one has a different name and refers to
# 		a different resource maintained by the server.
#
# MySQL supports one structured variable type, which specifies parameters governing the operation of key caches.
# A key cached structured variable has these components:
#
# 		key_buffer_size
#
# 		key_cache_block_size
#
# 		key_cache_division_limit
#
# 		key_cache_age_threshold
#
# This section describes the syntax for referring to the structured vars. Key cache variables are for examples, their interactions are covered later.
#
# To refer to a component of a structured variable instance, you can use a compound name in instance_name.component_name format, example:
#
# 		hot_cache.key_buffer_size
# 		hot_cache.key_cache_block_size
# 		cold_cache.key_cache_block_size
#
# For each structured sys_var, an instance with the name of <default> is always predefined.
# If you refer to a component of a structured var without any instance name, the <default> instance is used.
#
# Thus, default.key_buffer_size and key_buffer_size refer to the same sys_var.
#
# Structured var instances and components follows these naming rules:
#
# 		For a given type of structured variable, each instance must have a name that is unique within variables of that type.
# 		However, instance names need not be unique across structured variable types.
#
# 		For example, each structured variable has an instance named default, so default is not unique across variable types.
#
# 		The names of the components of each structured variable type must be unique across all sys_var names.
#
# 		If this were not true (that is, two different types of structured vars could share component member names),
# 		it would not be clear which default structured variable to use for references to member names that are not qualified
# 		by an instance name.
#
# 		If a structured variable instance name is not legal as an unquoted identifier, refer to it as a quoted identifier
# 		using backticks. For example, hot-cache is not legal - but `hot-cache` is.
#
# 		global, session and local are not legal instance names. This vaoids a conflict with notations such as @@global.<var_name>
# 		for referring to nonstructured sys_vars.
#
# Currently, the first two rules have no possibility of being violated because the only structured variable type is the one
# for key caches. These rules will assume greater significance if some other type of structured variable is created in the future.
#
# With one exception, you can refer to structured variable components using compound names in any context where simple var names 
# can occur.
#
# For example, you can assign a value to a structured var using a cmd line option:
#
# 		mysqld --hot_cache.key_buffer_size=64K
#
# In a option file:
#
# 		[mysqld]
# 		hot_cache.key_buffer_size=64K
#
# The above entails a key cache named hot_cache with a size of 64KB in addition to the default of 8MB.
#
# We could also do as follows:
#
# 		mysqld --key_buffer_size=256K \
# 			--extra_cache.key_buffer_size=128K \
# 			--extra_cache.key_cache_block_size=2048
#
# In this case, the server sets the size of the default key cache to 256KB. 
# (we could also have written --default.key_buffer_size=256K). 
#
# In addition, we create a second cache named extra_cache that has a size of 128K, with size of
# block buffers for caching table index blocks set to 2048 bytes.
#
# THe following example starts the server with three different key caches having sizes in a 3:1:1 ratio:
#
# 	mysqld --key_buffer_size=6M \
# 		--hot_cache.key_buffer_size=2M \
# 		--cold_cache.key_buffer_size=2M
#
# Structured var vlaues may be set and retrieved at runtime as well. For example, to set a key cache named hot_cache
# to a size of 10MB, use either of:
#
# SET GLOBAL hot_cache.key_buffer_size = 10*1024*1024;
# SET @@global.hot_cache.key_buffer_size = 10*1024*1024;
#
# To retrieve the cache size, do this:
#
# SELECT @@global.hot_cache.key_buffer_size;
#
# However, using:
#
# SHOW GLOBAL VARIABLES LIKE 'hot_cache.key_buffer_size'; 
#
# Would not work, as it would be considered a string match for LIKE regex ops of a simple variable naming.
#
# 
# The following section pertains to Server Status Variables:
#
# The MySQL server maintains many status variables that provide information about its operation.
# You can view these vars and their values by using the SHOW [GLOBAL | SESSION] STATUS statement.
#
# The optional GLOBAL keyword aggregates the values over all connections, and SESSION shows for the current connection.
#
# SHOW GLOBAL STATUS;
#
# +-------------------------------------------------+
# | Variable_name 						| 	Value 		 |
# +---------------------------------+---------------+
# | 											| 					 |
# | Aborted_clients 						| 0 				 |
# | Aborted_connects 					| 0 				 |
# | Bytes_received 						| 155372598 	 |
# | Bytes_sent 							| 1176560426 	 |
# ...
# | Connections 							| 30023 			 |
# | Created_tmp_disk_tables 			| 0 				 |
# | Created_tmp_files 					| 3				 |
# | Created_tmp_tables 					| 2 				 |
# ...
# | Threads_created 						| 217 			 |
# | Threads_running 						| 88 				 |
# | Uptime 									| 1389872 		 |
# +---------------------------------+---------------+
#
# Several status vars provide statement counts. To determine the amount of statements executed, use:
#
# SUM(Com_xxx)
# = Questions + statements executed within stored programs
# = Queries
#
# Many status variables are reset to 0 by the FLUSH_STATUS statement.
#
# The status variables have the following meanings:
#
# 		Aborted_clients
#
# 			Number of connections that were aborted because the client died without closing the connection properly.
#
# 		Aborted_connects
#
# 			The number of failed attempts to connect to the MySQL server.
#
# 			For additional connection-related info, check the Connection_errors_xxx status vars and the host_cache table.
#
# 		Binlog_cache_disk_use
#
# 			Number of transactions that used the temporary binary log cache but that exceeded the value of binlog_cache_size
# 			and used a temporary file to store statements from the transaction.
#
# 			The number of nontransactional statements that caused the binary log transaction cache to be written to disk
# 			is tracked separately in the Binlog_stmt_cache_disk_use status variable.
#
# 		Acl_cache_items_count
#
# 			Number of cached privlege objects. Each object is the privlege combination of a user and its active roles.
#
# 		Binlog_cache_use
#
# 			Number of transactions that used the binary log cache.
#
# 		Binlog_stmt_cache_disk_use
#
# 			Number of nontransaction statements that used the binary log statement cache but that exceeded
# 			the value of of binlog_stmt_cache_size and used a temporary file to store those statements.
#
# 		Binlog_stmt_cache_use
#
# 			Number of nontransactional statements, that used the binary log statement cache.
#
# 		Bytes_received
#
# 			Number of bytes received from all clients.
#
# 		Bytes_sent
#
# 			Number of bytes sent to all clients.
#
# 		Caching_sha2_password_rsa_public_key
#
# 			Public key used by the caching_sha2_password authentication plugin for RSA key-pair based PW exchange.
#
# 			The value is nonempty only if the server successfully intiializes the private and public keys in the
# 			files named by the caching_sha2_password_private_key_path and caching_sha2_password_public_key_path SYS_VARS.
#
# 			The value of Caching_sha2_password_rsa_public_key comes from the latter file.
#
# 		Com_xxx
#
# 			The Com_xxx statement counter variables indicate the number of times each xxx statement has been executed.
#
# 			There is one status variable for each type of statement.
# 			For example, Com_delete and Com_update count DELETE and UPDATE statements, respectively.
#
# 			Com_delete_multi and Com_update_multi are similar but apply to DELETE and UPDATE statements that use multiple-table syntax.
#
# 			All of the Com_stmt_xxx variables are increased even if a prepared statement argument is unknown or an error occured
# 			during execution. In other words, their values correspond to the number of requests issued - not the number of requests successfully completed.
#
# 			The Com_stmt_xxx status variables are as follows:
#
# 				Com_stmt_prepare
#
# 				Com_stmt_execute
#
# 				Com_stmt_fetch
#
# 				Com_stmt_send_long_data
#
# 				Com_stmt_reset
#
# 				Com_stmt_close
#
# 			Those variables stand for prepared statement commands. Their names refer to the COM_xxx command set used
# 			in the network layer.
#
# 			In other words, their values increase whenever prepared statement API calls such as mysql_stmt_prepare(),
# 			mysql_stmt_execute() and so forth are executed.
#
# 			However, Com_stmt_prepare, Com_stmt_execute and Com_stmt_close also increase for PREPARE, EXECUTE or DEALLOCATE_PREPARE,
# 			respectively.
#
# 			Additionally, the values of the older statement counter variables Com_prepare_sql, Com_execute_sql and Com_dealloc_sql
# 			increase for the PREPARE, EXECUTE and DEALLOCATE_PREPARE statements.
#
# 			Com_stmt_fetch stands for the total number of network round-trips issued when fetching from cursors.
#
# 			Com_stmt_reprepare indicates the number of times statements were automatically reprepared by the server after
# 			metadata changes to tables or views referred to by the statement.
#
# 			A reprepare operation increments Com_stmt_reprepare and also Com_stmt_prepare.
#
# 			Com_explain_other indicates the number of EXPLAIN_FOR_CONNECTION statements executed.
#
# 			Com_change_repl_filter indicates the number of CHANGE_REPLICATION_FILTER statements executed.
#
# 		Compression
#
# 			Whether the client connection uses compression in the client/server protocol.
#
# 		Connection_errors_xxx
#
# 			These variables provide info about errors that occur during the client connection process.
#
# 			They are global only and represent error counts aggregated across connections from all hosts.
#
# 			These variable track errors not accounted for by the host cache - such as errors that are not
# 			associated with TCP connections, occur very early in the connection process (even before an IP address is known),
# 			or are not specific to any particular IP address (such as out of memory conditions).
#
# 				Connection_errors_accept
#
# 					The number of errors that occurred during calls to accept() on the listening port.
#
# 				Connection_errors_internal
#
# 					The number of connections refused due to internal errors in the server, such as failure to start
# 					a new thread or an out-of-memory condition.
#
# 				Connection_errors_max_connections
#
# 					Number of connections refused because the server max_connections limit was reached.
#
# 				Connection_errors_peer_address
#
# 					The number of errors that occurred while searching for connecting clientIP addresses.
#
# 				Connection_errors_select
#
# 					Number of errors that occured during calls to select() or poll() on the listening port.
# 					(Failure of this operation does not necessarily mean a client connection was rejected)
#
# 				Connection_errors_tcpwrap
#
# 					The number of connections refused by the libwrap library.
#
# 		Connections - Number of connection attempts (successful or not) to the MySQL server.
#
# 		Created_tmp_disk_tables
#
# 			Number of internal on-disk temporary tables created by the server while executing statements.
#
# 			If an internal temp table is created initially as an in-memory table but becomes too large, MySQL automatically
# 			converts it to an on-disk table.
#
# 			The max size for in-memory temp tables is the minimum of the tmp_table_size and max_heap_table_size values.
#
# 			If Created_tmp_disk_tables is large, you may want to increase the tmp_table_size or max_heap_table_size value
# 			to lessen the likelihood that internal temp tables in memory will be converted to on-disk tables.
#
# 			You can compare the number of internal on-disk temp tables created to the total number of internal temp tables
# 			created by comparing the values of the Created_tmp_disk_tables and Created_tmp_tables variables.
#
# 		Created_tmp_files
#
# 			How many temporary files mysqld has created.
#
# 		Created_tmp_tables
#
# 			Number of internal temporary tables created by the server while executing statements.
#
# 			You can compare the number of internal-on-disk temp tables created to the total number of internal
# 			temp tables created by comparing the values of the Created_tmp_disk_tables and Created_tmp_tables vars.
#
# 			Each invocation of the SHOW_STATUS statement uses an internal temp table and increment the global Created_tmp_tables value.
#
# 		Delayed_errors
#
# 			This status variable is DEPRECATED (delayed is not supported)
#
# 		Delayed_insert_threads, Delayed_writes - Deprecated.
#
# 		dragnet.Status 
#
# 			The result of the most recent assignment to the dragnet.log_error_filter_rules SYS_VAR, empty if no such assignment has occurred.
#
# 		Flush_commands
#
# 			Number of times the server flushes tables, whether because a user executed a FLUSH_TABLES statement or due to internal 
# 			server operation.
#
# 			It is also incremented by receipt of a COM_REFRESH packet. This is in contrast to Com_flush, which indicates how many
# 			FLUSH statements have been executed, whether FLUSH_TABLES, FLUSH_LOGS etc.
#
# 		group_replication_primary_member
#
# 			Shows the primary member's UUID when the group is operating in single-primary mode.
# 			If the group is operating multi-primary mode, shows an empty string.
#
# 			The group_replication_primary_member status variable is deprecated.
#
# 		Handler_commit
#
# 			Number of internal COMMIT statements.
#
# 		Handler_delete
#
# 			Number of times that rows have been deleted from tables.
#
# 		Handler_external_lock
#
# 			The server increments this variable for each call to its external_lock() function, which generally occurs at the
# 			beginning and end of access to a table instance.
#
# 			There might be differences amongst storage engines. This variable can be used, for example, to discover for a statement
# 			that accesses a partitioned table how many partitions were pruned before locking occurred:
#
# 			Check how much the counter increased for the statement, subtract 2 (2 calls for the table itself), then /2 to get number of
# 			partitions locked.
#
# 		Handler_mrr_init
#
# 			Number of times the server uses a storage engine's own Multi-Range Read implementation for table access.
#
# 		Handler_prepare
#
# 			A counter for the prepare phase of two-phase commit operations.
#
# 		Handler_read_first
#
# 			Number of times the first entry in an index was read. If this value is high, it suggests that the server
# 			is doing a lot of full index scans; for example, SELECT col1 FROM foo - assuming that col1 is indexed.
#
# 		Handler_read_key
#
# 			Number of requests to read a row based on a key. If this value is high, it is a good indication that your tables 
# 			are properly indexed for your queries.
#
# 		Handler_read_last
#
# 			The number of requests to read the last key in an index. 
#
# 			With ORDER BY, the server will issue a first-key request followed by several next-key requests,
# 			whereas with ORDER BY DESC, the server will issue a last-key request followed by several previous-key requests.
#
# 		Handler_read_next
#
# 			The number of requests to read the next row in key order. This value is incremented if you are querying an index column with
# 			a range constraint or if you are doing an index scan.
#
# 		Handler_read_prev
#
# 			The number of requests to read the previous row in key order. This read method is mainly used to optimize ORDER BY ... DESC
#
# 		Handler_read_rnd
#
# 			Number of requests to read a row based on a fixed position. 
#
# 			This value is high if you are doing a lot of queries that require sorting of the result.
# 		   You probably have a lot of queries that require MySQL to scan entire tables or you have joins that do not use keys properly.
#
# 		Handler_read_rnd_next
#
# 			The number of requests to read the next row in the data file.
#
# 			This value is high if you are doing a lot of table scans. 
#
# 			Generally this suggests that your tables are not properly indexed or that your queries
# 			are not written to take advantage of the indexes you have.
#
# 		Handler_rollback
#
# 			Number of requests for a storage engine to perform a rollback operation.
#
# 		Handler_savepoint
#
# 			Number of requests for a storage engine to place a savepoint.
#
# 		Handler_savepoint_rollback
#
# 			The number of requests for a storage engine to roll back to a savepoint.
#
# 		Handler_update
#
# 			Number of requests to update a row in a table.
#
# 		Handler_write
#
# 			Number of requests to insert a row in a table.
#
# 		Innodb_available_undo_logs
#
# 			Innodb_available_undo_logs was removed in MySQL 8.0.2.
#
# 			Number of available rollback segments per tablespace may be retrieved using SHOW VARIABLES LIKE 'innodb_rollback_segments';
#
# 		Innodb_buffer_pool_dump_status
#
# 			The progress of an operation to record the pages held in the InnoDB buffer pool, triggered by the setting of
# 			innodb_buffer_pool_dump_at_shutdown or innodb_buffer_pool_dump_now
#
# 		Innodb_buffer_pool_load_status
#
# 			The progress of an operation to warm up the InnoDB buffer pool by reading in a set of pages corresponding to an earlier
# 			point in time, triggered by the setting of innodb_buffer_pool_load_at_startup or innodb_buffer_pool_load_now.
#
# 			If the operation introduces too much overhead, you can cancel it by setting innodb_buffer_pool_load_abort
#
# 		Innodb_buffer_pool_bytes_data
#
# 			The total number of bytes in the InnoDB buffer pool containing data.
#
# 			The number includes borth dirty and clean pages.
#
# 			For more accurate memory usage calculations than with Innodb_buffer_pool_pages_data,
# 			when compressed tables cause the buffer pool to hold pages of different sizes.
#
# 		Innodb_buffer_pool_pages_data
#
# 			The number of pages in the InnoDB buffer pool containing data. The number includes both dirty and clean pages.
#
# 			When using compressed tables, the reported Innodb_buffer_pool_pages_data value may be larger than
# 			Innodb_buffer_pool_pages_total (Bug #595550)
#
# 		Innodb_buffer_pool_bytes_dirty
#
# 			The total current number of bytes held in dirty pages in the InnoDB buffer pool.
#
# 			For more accurate memory usage calculations than with Innodb_buffer_pool_pages_dirty,
# 			when compressed tables cause the buffer pool to hold pages of different sizes.
#
# 		Innodb_buffer_pool_pages_dirty
#
# 			The current number of dirty pages in the InnoDB buffer pool.
#
# 		Innodb_buffer_pool_pages_flushed
#
# 			The number of requests to flush pages from the InnoDB buffer pool.
#
# 		Innodb_buffer_pool_pages_free
#
# 			The number of free pages in the InnoDB buffer pool.
#
# 		Innodb_buffer_pool_pages_latched
#
# 			The number of latched pages in the InnoDB buffer pool.
#
# 			These are pages currently being read or written, or that cannot be flushed or removed for
# 			some other reason.
#
# 			Calculation of this variable is expensive, so it is available only when the UNIV_DEBUG system is defined at server build time.
#
# 		Innodb_buffer_pool_pages_misc
#
# 			The number of pages in the InnoDB buffer pool that are busy because they have been allocated for admin overhead,
# 			such as row locks or the adaptive hash index.
#
# 			This value can also be calculated as Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data.
#
# 			When using compressed tables, Innodb_buffer_pool_pages_misc may report an out-of-bounds value (Bug #59550)
#
# 		Innodb_buffer_pool_pages_total
#
# 			The total size of the InnoDB buffer pool, in pages. 
#
# 			When using compressed tables, the reported Innodb_buffer_pool_pages_data value may be larger than
# 			Innodb_buffer_pool_pages_total (Bug #59550)
#
# 		Innodb_buffer_pool_read_ahead
#
# 			The number of pages read into the InnoDB buffer pool by the read-ahead background thread.
#
# 		Innodb_buffer_pool_read_ahead_evicted
#
# 			The number of pages read into the InnoDB buffer pool by the read-ahead background thread that were
# 			subsequently evicted without having been accessed by queries.
#
# 		Innodb_buffer_pool_read_ahead_rnd
#
# 			The number of "random" read-aheads initated by InnoDB. 
#
# 			This happens when a query scans a large portion of a table but in a random order.
# 
# 		Innodb_buffer_pool_read_requests
#
# 			The number of logical read requests.
#
# 		Innodb_buffer_pool_reads
#
# 			The number of logical reads that InnoDB could not satisfy from the buffer pool, and had to read directly
# 			from disk.
#
# 		Innodb_buffer_pool_resize_status
#
# 			The status of an operation to resize the InnoDB buffer pool dynamically triggered by setting the innodb_buffer_pool_size param dynamically.
#
# 			The innodb_buffer_pool_size parameter is dynamic, which allows you to resize the buffer pool without restarting the server.
#
# 		Innodb_buffer_pool_wait_free
#
# 			Normally, writes to the InnoDB buffer pool happen in the background.
#
# 			When InnoDB needs to read or create a page and no clean pages are available, InnoDB flushes
# 			some dirty pages first and waits for that ops. to finish.
#
# 			This counter counts instances of these waits. If innodb_buffer_pool_size has been set properly,
# 			this value should be small.
#
# 		Innodb_buffer_pool_write_requests
#
# 			Number of writes done to the InnoDB buffer pool.
#
# 		Innodb_data_fsyncs
#
# 			The number of fsync() operations so far.
#
# 			The frequency of fsync() calls influenced by the setting of the innodb_flush_method configuration option.
#
# 		Innodb_data_pending_fsyncs
#
# 			The current number of pending fsyncs() operations.
#
# 			The frequency of fsync() calls is influenced by the setting of the innodb_flush_method configuration ops.
#
# 		Innodb_data_pending_reads
#
# 			The current number of pending reads.
#
# 		Innodb_data_pending_writes
#
# 			The current number of pending writes.
#
# 		Innodb_data_read
#
# 			The amount of data read since the server was started (in bytes)
#
# 		Innodb_data_reads
#
# 			The total number of data reads (OS file reads)
#
# 		Innodb_data_writes
#
# 			Total number of data writes
#
# 		Innodb_data_written
#
# 			The amount of data written so far, in bytes.
#
# 		Innodb_dblwr_pages_written
#
# 			The number of pages that have been written to the doublewrite buffer.
#
# 		Innodb_dblwr_writes
#
# 			Number of doublewrite operations that have been performed.
#
# 		Innodb_have_atomic_builtins
#
# 			Indicates whether the server was built with atomic instructions.
#
# 		Innodb_log_waits
#
# 			The number of times that the log buffer was too small and a wait was required for it to be flushed before continuing.
#
# 		Innodb_log_write_requests
#
# 			The number of write requests for the InnoDB redo log.
#
# 		Innodb_log_writes
#
# 			The number of physical writes to the InnoDB redo log file.
#
# 		Innodb_num_open_files
#
# 			The number of files InnoDB currently holds open.
#
# 		Innodb_os_log_fsyncs
#
# 			The number of fsync() writes done to the InnoDB redo log files.
#
# 		Innodb_os_log_pending_fsyncs
#
# 			The number of pending fsync() operations for the InnoDB redo log files.
#
# 		Innodb_os_log_pending_writes
#
# 			The number of pending writes to the InnoDB redo log files.
#
# 		Innodb_os_log_written
#
# 			The number of bytes written to the InnoDB redo log files.
#
# 		Innodb_page_size
#
# 			InnoDB page size (default 16KB).
#
# 			Many values are counted in pages; the page size enables them to be easily converted to bytes.
#
# 		Innodb_pages_created
#
# 			Number of pages created by operations on InnoDB tables.
#
# 		Innodb_pages_read
#
# 			Number of pages read from the InnoDB buffer pool by operations on InnoDB tables.
#
# 		Innodb_pages_written
#
# 			The number of pages written by operations on InnoDB tables.
#
# 		Innodb_row_lock_current_waits
#
# 			The number of row locks currently being waited for by operations on InnoDB tables.
#
# 		Innodb_row_lock_time
#
# 			The total time spent in acquiring row locks for InnoDB tables, in MS.
#
# 		Innodb_row_lock_time_avg
#
# 			The average time to acquire a row lock for InnoDB tables, in MS.
#
# 		Innodb_row_lock_time_max
#
# 			The max time to acquire a row lock for InnoDB tables, in MS.
#
# 		Innodb_row_lock_waits
#
# 			Number of times operations on InnoDB tables had to wait for a row lock.
#
# 		Innodb_rows_deleted
#
# 			The number of rows deleted from InnoDB tables.
#
# 		Innodb_rows_inserted
#
# 			The number of rows inserted into InnoDB tables.
#
# 		Innodb_rows_read
#
# 			The number of rows read from InnoDB tables.
#
# 		Innodb_rows_updated
#
# 			The number of rows updated in InnoDB tables.
#
# 		Innodb_truncated_status_writes
#
# 			The number of times output from the SHOW ENGINE INNODB STATUS statement has been truncated.
#
# 		Key_blocks_not_flushed
#
# 			The number of key blocks in the MyISAM key cache that have changed but have not yet been flushed to disk.
#
# 		Key_blocks_unused
#
# 			The number of unused blocks in the MyISAM key cache.
#
# 			You can use this value to determine how much of the key cache is in use. (Relates to key_buffer_size)
#
# 		Key_blocks_used
#
# 			The number of used blocks in the MyISAM key cache.
#
# 			This value is a high-water mark that indicates the max number of blocks that have ever been
# 			in use at one time.
#
# 		Key_read_requests
#
# 			Number of requests to read a key block from the MyISAM key cache.
#
# 		Key_reads
#
# 			The number of physical reads of a key block from the disk into the MyISAM key cache.
#
# 			If Key_reads is large, then your key_buffer_size value is probably too small.
#
# 			The cache miss rate can be calculated as Key_reads/Key_read_requests
#
# 		Key_write_requests
#
# 			Number of requests to write a key block to the MyISAM key cache.
#
# 		Key_writes
#
# 			Number of physical writes of a key block from the MyISAM key cache to disk.
#
# 		Last_query_cost
#
# 			The total cost of the last compiled query as computed by the query optimizer.
#
# 			Useful for comparing the cost of different query plans for the same query.
#
# 			The default value of 0 means that no query has been compiled yet.
#
# 			The default value is 0. 
#
# 			This var has session scope.
#
# 			The Last_query_cost value can be computed accurately only for simple "flat" queries,
# 			not complex queries such as those with subqueries or UNION.
#
# 			For UNION, it is set to 0.
#
# 		Last_query_partial_plans
#
# 			Number of iterations the query optimizer made in execution plan construction for the previous query.
# 			Has session scope.
#
# 		Locked_connects
#
# 			Number of attempts to connect to locked user accounts.
#
# 			Covered later.
#
# 		Max_execution_time_exceeded
#
# 			The number of SELECT statements for which the execution timeout was exceeded.
#
# 		Max_execution_time_set
#
# 			The number of SELECT statements for which a nonzero execution timeout was set.
#
# 			This includes statements that include a nonzero MAX_EXECUTION_TIME optimizer hint,
# 			and statements that include no such hint but execute while the timeout indicated by the max_execution_time SYS_VAR is nonzero.
#
# 		Max_execution_time_set_failed
#
# 			The number of SELECT statements for which the attempt to set an execution timeout failed.
#
# 		Max_used_connections
#
# 			The max number of connections that have been in use simultaneously since the server started.
#
# 		Max_used_connections_time
#
# 			The time at which Max_used_connections reached its current value.
#
# 		Not_flushed_delayed_rows
#
# 			This Status var is DEPRECATED (DELAYED not supported)
#
# 		mecab_charset
#
# 			The char set currently used by the MeCab full-text parser plugin.
#
# 		Ongoing_anonymous_transaction_count
#
# 			Shows the number of ongoing transactions which have been marked as anon.
# 			This can be Used to ensure that no further transactions are waiting to be processed.
#
# 		Ongoing_anonymous_gtid_violating_transaction_count
#
# 			This status var is only available in debug builds. 
# 			Shows the number of ongoing transactions which use gtid_next=ANONYMOUS and that violate GTID consistency.
#
# 		Ongoing_automatic_gtid_violating_transaction_count
#
# 			This status var is only available in debug builds.
# 			Shows the number of ongoing transactions which use gtid_next=AUTOCOMMIT and that violate GTID consistency.
#
# 		Open_files
#
# 			Number of files that are open. This count includes regular files opened by the server.
#
# 			It does not include other types of files such as sockets or pipes.
#
# 			Also, the count does not include files that storage engines open using their own internal functions
# 			rather than asking the server level to do so.
#
# 		Open_streams
#
# 			Number of streams that are open (used mainly for logging)
#
# 		Open_table_definitions
#
# 			Number of cached table defs.
#
# 		Open_tables
#
# 			The number of tables that are open.
#
# 		Opened_files
#
# 			The number of files that have been opened with my_open() 
# 			(a mysys lib function).
#
# 			Parts of the server that open files without using this function do not increment
# 			the count.
#
# 		Opened_table_definitions
#
# 			Number of table definitions that have been cached.
#
# 		Opened_tables
#
# 			Number of tables that have been opened. 
# 			If Opened_tables is big, your table_open_cache value is probably too small.
#
# 		Performance_schema_xxx
#
# 			Performance Schema status variables are listed later.
#
# 			They provide info about instrumentation that could not be loaded or created due to memory constraints.
#
# 		Prepared_stmt_count
#
# 			The current number of prepared statements. (max number of statements is given by the max_prepared_stmt_count SYS_VAR)
#
# 		Qcache_free_blocks/Qcache_free_memory/Qcache_hits/Qcache_inserts/Qcache_lowmem_prunes/Qcache_not_cached/Qcache_queries_in_cache/Qcache_total_blocks
#
# 			Removed in 8.0.3
#
# 		Queries
#
# 			Number of statements executed by the server.
#
# 			This var includes statements executed within stored programs, unlike the Questions variable.
#
# 			Does not count COM_PING or COM_STATISTICS commands.
#
# 		Questions
#
# 			THe number of statements executed by the server.
#
# 			This includes only statements sent ot hte server by clients and not statements executed
# 			within stored programs, unlike the Queries variable.
#
# 			This variable does not count COM_PING, COM_STATISTICS, COM_STMT_PREPARE, COM_STMT_CLOSE or COM_STMT_RESET commands.
#
# 		Rpl_semi_sync_master_clients
#
# 			Number of semisynch slaves
#
# 			Only available if the master-side semisynch replication plugin is installed.
#
# 		Rpl_semi_sync_master_net_avg_wait_time
#
# 			Average time in MS the master waited for a slave reply.
#
# 			Always 0, deprecated. Only available if master-side semisynch replication plugin is installed.
#
# 		Rpl_semi_sync_master_net_wait_time
#
# 			Total time, same as above. Deprecated.
#
# 		Rpl_semi_sync_master_net_waits
#
# 			Total number of times the master waited for slave replies.
#
# 			Only available if the master-side semisynch replication plugin is installed.
#
# 		Rpl_semi_sync_master_no_times
#
# 			Number of times the master turned off semisynch replication.
#
# 			Onl available if the master-side semisynch replication plugin is installed.
#
# 		Rpl_semi_sync_master_no_tx
#
# 			Number of commits that were not acknowledged successfully by a slave.
#
# 			Same as above, reqs semisynch repl. plugin
#
# 		Rpl_semi_sync_master_status
#
# 			Whether semisynch replication currently is operational on the master.
#
# 			The value is ON if the plugin has been enabled and a commit acknowledgement has occurred.
#
# 			OFF if plugin is off or the Master has fallen back to asynch replication due to commit aknowledge timeout.
#
# 			Reqs the semisynch repl. plugin installed on master-side
#
# 		Rpl_semi_sync_master_timefunc_failures
#
# 			Number of times the master failed when calling time functions such as gettimeofday()
#
# 			Only available if master-side semi-synch replication plugin is installed.
#
# 		Rpl_semi_sync_master_tx_avg_wait_time
#
# 			The average time in ms the master waited for each transaction.
#
# 			Only available if the master-side semi-synch replication plugin is installed.
#
# 		Rpl_semi_sync_master_tx_wait_time
#
# 			Total time in MS instead of avg.
# 			Same req as before.
#
# 		Rpl_semi_sync_master_tx_waits
#
# 			Total number of times the master waited for transactions.
#
# 			Same req as before.
#
# 		Rpl_semi_sync_master_wait_pos_backtraverse
#
# 			total number of times the master waited for an event with binary co-ords lower than events waited for previously.
#
# 			This can occur when the order in which transactions start waiting for a reply is different from the
# 			order in which their binary log events are written.
#
# 			Same req as before
#
# 		Rpl_semi_sync_master_wait_sessions
#
# 			Number of sessions currently waiting for slave replies.
#
# 			Same req as before.
#
# 		Rpl_semi_sync_master_yes_tx
#
# 			Number of commits that were acknowledged successfully by a slave.
#
# 			Same req as before.
#
# 		Rpl_semi_sync_slave_status
#
# 			Whether semisynch replication currently is operational on the slave.
#
# 			This is ON if the plugin has been enabled and the slave I/O thread is running, OFF otherwise.
#
# 			same req as before.
#
# 		Rsa_public_key
#
# 			If MySQL was compiled with OpenSSL.
#
# 			Is the public key vlaue used by the sha256_password authentication plugin for RSA key pair PW exchange.
#
# 			Nonempty only if hte server successfully intiializes the private and public keys in the files named by the
# 			sha256_password_private_key_path and sha256_password_public_key_path SYS_VARs.
#
# 			The Rsa_public_key comes from the latter one.
#
# 		Secondary_engine_execution_count
#
# 			Future use.
#
# 		Select_full_join
#
# 			Number of joins that perform table scans because they do not use indexes.
#
# 			If this value is not 0, check indexes of tables.
#
# 		Select_full_range_join
#
# 			Number of joins that used a range search on a reference table.
#
# 		Select_range
#
# 			Number of joins that used ranges on the first table.
#
# 			Normally not a critical issue even if large.
#
# 		Select_range_check
#
# 			Number of joins without keys that check for key usage after each row.
#
# 			If not 0, check indexes of tables.
#
# 		Select_scan
#
# 			Number of joins that did a full scan of the first table.
#
# 		Slave_heartbeat_period
#
# 			Obsolete. Use HEARTBEAT_INTERVAL column of the replication_connection_configuration table.
#
# 		Slave_last_heartbeat
#
# 			Obsolete. use LAST_HEARTBEAT_TIMESTAMP column of the replication_connection_status table.
#
# 		Slave_open_temp_tables
#
# 			Number of temp tables that the slave SQL thread currently has open.
#
# 			If the value is greater than 0, it is not safe to shut down the slave.
#
# 			This variable reports the total count of open temp tables for ALL replication channels.
#
# 		Slave_received_heartbeats
#
# 			 Obsolete. Use COUNT_RECEIVED_HEARTBEATS column of the replication_connection_status table.
#
# 		Slave_retired_transactions
#
# 			Obsolete. Use COUNT_TRANSACTIONS_RETRIES column of the replication_applier_status table.
#
# 		Slave_rows_last_search_algorithm_used
#
# 			The search algorithm that was most recently used by this slave to locate rows for row-based replication.
#
# 			The result shows whether the slave used indexes, a table scan or hashing as the search algorithm for the
# 			last transaction executed on any channel.
#
# 			The method used depends on the setting for the slave_rows_search_algorithms SYS_VAR, and the keys
# 			that are available on the relevant table.
#
# 			Only available for debug builds of MySQL.
#
# 		Slave_running
#
# 			Obsolete, removed in 8.0.1. Use SERVICE_STATE column of the replication_connection_status and replication_applier_status tables.
#
# 		Slow_launch_threads
#
# 			The number of threads that have taken more than slow_launch_time seconds to create.
#
# 		Slow_queries
#
# 			The number of queries that have taken more than long_query_time seconds.
# 			Increments regardless of whether the slow query log is enabled.
#
# 		Sort_merge_passes
#
# 			The number of merge passes that the sort algorithm has had to do.
# 			If this value is large, you should consider increasing the value of the sort_buffer_size SYS_VAR.
#
# 		Sort_range
#
# 			Number of sorts that were done using ranges
#
# 		Sort_rows
#
# 			Number of sorted rows
#
# 		Sort_scan
#
# 			Number of sorts that were done by scanning the table.
#
# 		Ssl_accept_renegotiates.
#
# 			Number of negotiates needed to establish the connection.
#
# 		Ssl_accepts
#
# 			Number of accepted SSL connections
#
# 		Ssl_callback_cache_hits
#
# 			Number of callback cache hits
#
# 		Ssl_cipher
#
# 			Current encryption cipher (empty for unencrypted connections)
#
# 		Ssl_cipher_list
#
# 			The list of possible SSL ciphers (empty for non-SSL connections)
#
# 		Ssl_client_connects
#
# 			Number of SSL connection attempts to an SSL-enabled master.
#
# 		Ssl_connect_renegotiates
#
# 			Number of negotiates needed to establish the connection to an SSL-enabled master.
#
# 		Ssl_ctx_verify_depth
#
# 			The SSL context verification depth (how many certs in the chain are tested)
#
# 		Ssl_ctx_verify_mode
#
# 			The SSL context verification mode
#
# 		Ssl_default_timeout
#
# 			The default SSL timeout
#
# 		Ssl_finished_accepts
#
# 			Number of successful SSL connections to the server
#
# 		Ssl_finished_connects
#
# 			The number of successful slave connections to an SSL-enabled master.
#
# 		Ssl_server_not_after
#
# 			The last date for which the SSL certificate is valid.
#
# 			To check SSL certificate expiration information, use this statement:
#
# 				SHOW STATUS LIKE 'Ssl_server_not%';
# 				+--------------------------------------------------+
# 				| Variable_name 		   | 	  Value                 |
# 				+-----------------------+--------------------------+
# 				| Ssl_server_not_after  | Apr 28 14:16:39 2025 GMT |
# 				| Ssl_server_not_before | May  1 14:16:39 2015 GMT |
# 				+-----------------------+--------------------------+
#
# 		Ssl_server_not_before
#
# 			The first date for which the SSL certificate is valid.
#
# 		Ssl_session_cache_hits
#
# 			The number of SSL session cache hits.
#
# 		Ssl_session_cache_misses
#
# 			The number of SSL session cache misses.
#
# 		Ssl_session_cache_mode
#
# 			The SSL session cache mode.
#
# 		Ssl_session_cache_overflows
#
# 			The number of SSL session cache overflows.
#
# 		Ssl_session_cache_size
#
# 			The SSL session cache size.
#
# 		Ssl_session_cache_timeouts
#
# 			The number of SSL session cache timeouts
#
# 		Ssl_sessions_reused
#
# 			How many SSL connections were reused from the cache.
#
# 		Ssl_used_session_cache_entries
#
# 			How many SSL session cache entries were used.
#
# 		Ssl_verify_depth
#
# 			The verification depth for replication SSL connections.
#
# 		Ssl_verify_mode
#
# 			The verification mode used by the server for a connection that uses SSL.
#
# 			The value is a bitmask; bits are defined in the openssl/ssl.h header file:
#
# 				# define SSL_VERIFY_NONE 					  0x00
# 				# define SSL_VERIFY_PEER 					  0x01
# 				# define SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02
# 				# define SSL_VERIFY_CLIENT_ONCE 			  0x04
#
# 			SSL_VERIFY_PEER indicates that the server asks for a client cert.
#
# 			If the client supplies one, the server performs verification and proceeds only
# 			if verification is successful.
#
# 			SSL_VERIFY_CLIENT_ONCE indicates that a request for the client certificate will be done
# 			only in the initial handshake.
#
# 		Ssl_version
#
# 			The SSL protocol version of the connection; for example, TLSV1. 
# 			If the connection is not encrypted, the value is empty. 
#
#
# 		Table_locks_immediate
#
# 			The number of times that a request for a table lock could be granted immediately.
#
# 		Table_locks_waited
#
# 			The number of times that a request for a table could not be granted immediately and a wait was needed.
#
# 			If this is high and you have performance problems, you should first optimize your queries, and then either
# 			split your table or tables or use replication.
#
# 		Table_open_cache_hits
#
# 			The number of hits for open tables cache lookups
#
# 		Table_open_cache_misses
#
# 			The number of misses for open table cache lookups.
#
# 		Table_open_cache_overflows
#
# 			The number of overflows for the open tables cache.
#
# 			This is the number of times, after a table is opened or closed, a cache instance has an unused
# 			entry and the size of the instance is larger than table_open_cache/table_open_cache_instances
#
# 		tablespace_definition_cache
#
# 			Cmd-line: 		--tablespace-definition-cache=N
# 			Sys_Var: 		tablespace_definition_cache
# 			Scope: 			Global
# 			Dynamic: 		Yes
# 			SET_VAR Hint: 	No
# 			Type: 			Integer
# 			Default: 		256
# 			Min: 				256
# 			Max: 				524288
#
# 			Defines a limit for the number of tablespace definition objects, both used and unused, that can be kept in the dictionary
# 			object cache.
#
# 			Unused tablespace definition objects are only kept in the dictionary object cache when the number in use is less
# 			than the capacity defined by tablespace_definition_cache
#
# 			A setting of 0 means that tablespace definition objects are only kept in the dictionary object cache while they are in use.
#
# 		Tc_log_max_pages_used
#
# 			For the memory-mapped implementation of the log that is used by mysqld when it acts as the transaction coordinator for recovery
# 			of internal XA transactions, this variable indicates the largest number of pages used for the log since the server started.
#
# 			If the product of Tc_log_max_pages_used and Tc_log_page_size is always significantly less than the log size, the size is larger
# 			than necessary and can be reduced.
#
# 			(The size is set by the --log-tc-size option)
#
# 			This variable is unused, it is unneeded for binary log-based recovery, and the memory-mapped recovery log
# 			method is not used unless the number of storage engines that are capable of two-phase commit and that 
# 			supports XA transactions is greater than one.
#
# 			(InnoDB is the only one)
#
# 		Tc_log_page_size
#
# 			The page size used for the memory-mapped implementation of the XA recovery log.
# 			The default value is determined using getpagesize()
#
# 			Unused for the same reason as Tc_log_max_pages_used
#
# 		Tc_log_page_waits
#
# 			For the memory-mapped implementation of the recovery log, this variable increments each time the server
# 			was not able to commit a transaction and had to wait for a free page in the log.
#
# 			If this value is large, might want to increase the log size (with the --log-tc-size option).
#
# 			For binary log-based recovery, this variable increments each time the binary log cannot be closed because
# 			there are two-phase commits in progress.
#
# 			(The close operation waits until all such transactions are finished)
#
# 		Threads_cached
#
# 			The number of threads in the thread cache
#
# 		Threads_connected
#
# 			The number of currently open connections
#
# 		Threads_created
#
# 			The number of threads created to handle connections.
#
# 			If Threads_created is big, you may want to increase the thread_cache_size value.
#
# 			The cache miss rate can be calculated as Threads_created/Connections
#
# 		Threads_running
#
# 			The number of threads that are not sleeping
#
# 		Uptime
#
# 			The number of seconds that the server has been up
#
# 		Uptime_since_flush_status
#
# 			The number of seconds since the most recent FLUSH STATUS statement.
#
# The following section covers the interactions of Server SQL Modes:
#
# The MySQL server can operate in different SQL modes, and can apply these modes differently for different clients,
# depending on the value of the sql_mode SYS_VAR.
#
# DBAs can set the global SQL mode to match site server OS reqs, and each application can set its session SQL mode to its own
# requirements.
#
# Modes affect the SQL syntax MySQL supports and the data validation checks it performs.
# This makes it easier to use MySQL in different envs and to use MySQL together with other DB servers.
#
# When working with InnoDB - we have to keep innodb_strict_mode SYS_VAR. It enables additional error checks for InnoDB tables.
#
#
#
#
#
# The following section pertains to Setting the SQL Mode:
#
# The default SQL mode in MySQL 8.0 includes these modes:
#
# 		ONLY_FULL_GROUP_BY
# 		STRICT_TRANS_TABLES
# 		NO_ZERO_IN_DATE
# 		NO_ZERO_DATE
# 		ERROR_FOR_DIVISION_BY_ZERO
# 		NO_ENGINE_SUBSTITUTION
#
# To set the SQL mode at server startup, use the --sql-mode="modes" option on the cmd line,
# or sql-mode="modes" in an option file such as my.cnf (Unix OS's) or my.ini (Windows).
#
# modes is a list of different modes separated by commas. 
#
# To clear the SQL mode explicitly, set it to an empty string using --sql-mode="" on
# the cmd line, or sql-mode="" in an option file.
#
# Note: MySQL installation programs may configure the SQL mode during the install process.
# 			
# 		  If the SQL mode differs from the default or from what you expect, check for a setting.
#
# To set at runtime:
#
# 		SET GLOBAL sql_mode = 'modes';
# 		SET SESSION sql_mode = 'modes';
#
# Setting the GLOBAL variable requires the SYSTEM_VARIABLES_ADMIN or SUPER privs and affects the operation
# of all clients that connect from that time on.
#
# Setting the SESSION variable affects only the current client.
#
# Each client can change its session sql_mode value at any time.
#
# To determine the current value:
#
# SELECT @@GLOBAL.sql_mode;
# SELECT @@SESSION.sql_mode;
#
# NOTE: 	SQL mode and user-defined partitioning 
#
# 			Changing the server SQL mode after creating and inserting data into partitioned tables can cause major
# 			changes in the behavior of such tables, and could lead to loss or corruption of data.
#
# 			It is strongly recommended that you never change the SQL mode once you have created tables
# 			employing user-defined partitioning.
#
# 			When replicating partitioned tables, differing SQL modes on the master and slave can also lead to
# 			problems.
#
# 			For best results, you should always use the same server SQL mode on the master and slave.
#
# The most important sql_mode values are probably these:
#
# 		ANSI - This mode changes syntax and behavior to conform more closely to standard SQL.
#
# 		STRICT_TRANS_TABLES - If a value could not be inserted as given into a transactional table, abort the statement.
#
# 									 For a nontransactional table, abort the statement if the value occurs in a single-row statement
# 									 or the first row of a multiple-row statement.
#
# 		TRADITIONAL - Make MySQL behave like a "traditional" SQL DB system. Give an error instead of a warning when inserting a incorrect
# 						  value into a column.
#
# 						  NOTE - With TRADITIONAL mode enabled, an INSERT or UPDATE aborts as soon as an error occurs.
#
# 									If you are using a nontransactional storage engine, this may not be what you want because
# 									data changes made prior to the error may not be rolled back, resulting in a "partiall done" update.
#
# "strict mode" here - will refer to STRICT_TRANS_TABLES/STRICT_ALL_TABLES enabled.
#
# The following covers all supported SQL modes:
#
# ALLOW_INVALID_DATES - Do not perform full checking of dates. Check only that the month is in the range from 1 to 12 and that the
# 								day is in the range from 1 to 31.
#
# 								This may be useful for Web applications that obtain year, month and day in three different fields and 
# 								store exactly what the user inserted, without date validation.
#
# 								This mode applies to DATE and DATETIME columns.
# 								It does not apply TIMESTAMP columns, which always require a valid date.
#
# 								With ALLOW_INVALID_DATES enabled, the server requires that month and day values be legal,
# 								and not merely in the range 1 to 12 and 1 to 31.
#
# 								With strict disabled, invalid dates such as '2004-04-31' are converted to '0000-00-00'
# 								and a warning is generated.
#
# 								With strict mode enabled, invalid dates generate an error. To permit it, enable ALLOW_INVALID_DATES.
#
# ANSI_QUOTES - 			Treat " as an identifier quote char (like `) and not as a string quote char.
#
# 								You can still use `to quote identifiers with this mode enabled.
#
# 								With ANSI_QUOTES enabled, you cannot use double quotation marks to quote literal strings
# 								because they are interpreted as identifiers.
#
# ERROR_FOR_DIVISION 	The ERROR_FOR_DIVISION_BY_ZERO mode affects handling of division by zero, which includes MOD(N, 0).
# _BY_ZERO  				
# 								For data-change operations (INSERT,UPDATE) - its effect also depends on whether strict SQL mode is enabled.
#
# 									If this mode is not enabled, division by 0 inserts NULL and produces no warning.
#
# 									If this mode is enabled, division by 0 inserts NULL and produces a warning.
#
# 									If this mode and strict mode are enabled, division by zero produces an error, unless IGNORE is given as well.
# 									For INSERT IGNORE and UPDATE IGNORE, division by zero inserts NULL and produces a warning.
#
# 								For SELECT, division by zero returns NULL. 
#
# 								Enabling ERROR_FOR_DIVISION_BY_ZERO causes a warning to be produced as well, regardless of whether strict mode is enabled.
# 							
# 								ERROR_FOR_DIVISION_BY_ZERO is deprecated. Not part of strict mode, should be used with Strict, on by default.
# 								Causes error if used without strict, and vice versa.
#
# HIGH_NOT_PRECEDENCE 	The precedence of the NOT operator is such that expressions such as NOT a BETWEEN b AND c are parsed as NOT (a BETWEEN b AND c).
#
# 								In some older versions of MySQL, the expression was parsed as (NOT a) BETWEEN b AND c.
#
# 								The old higher-precedence behavior can be obtained by enabling the HIGH_NOT_PRECEDENCE SQL mode.
#
# 								SET sql_mode = '';
# 								SELECT NOT 1 BETWEEN -5 AND 5; #Gives 0 (False), because 1 is between -5 and 5 (1, True), to which inverse of NOT is (0, False)
#
# 								SET sql_mode = 'HIGH_NOT_PRECEDENCE';
# 								SELECT NOT 1 BETWEEN -5 AND 5; #Gives 1 (True), because inversing the result, due to higher not precedence of operator
#
# IGNORE_SPACE 			Permit spaces between a function name and the ( char.
# 								This causes built-in function names to be treated as reserved words.
#
# 								As a result, identifiers that are the same as function names must be quoted.
#
# 								An example, because there is COUNT(), the use of count as a table name, causes an error:
#
# 									CREATE TABLE count (i INT);
# 									ERROR 1064 (42000): You have an error in your SQL syntax
#
# 								The table name should be quoted:
#
# 									CREATE TABLE `count` (i INT);
# 									Query OK, 0 rows affected (0.00 sec)
#
# 								The IGNORE_SPACE SQL mode applies to built-in functions, not to user-defined functions or stored functions.
#
# 								It is always permissible to have spaces after a UDF or stored function name, regardless of whether IGNORE_SPACE is enabled.
#
# NO_AUTO_VALUE_ON_ZERO Affects handling of AUTO_INCREMENT columns.
#
# 								Normally, you generate the next sequence number for the column by inserting either NULL or 0
# 								into it. NO_AUTO_VALUE_ON_ZERO suppresses this behavior for 0 so that only NULL generates the
# 								next sequence number.
#
# 								This mode can be useful if 0 has been stored in a tables AUTO_INCREMENT column.
# 								(Storing 0 is not a recommended practice, by the way)
#
# 								For example, if you dump the table with mysqldump and then reload it, MySQL
# 								normally generates new sequence numbers when it encounters the 0 value, resulting
# 								in a table with contents different from the one that was dumped.
#
# 								Enabling NO_AUTO_VALUE_ON_ZERO before reloading the dump file solves this problem.
#
# 								For this reason, mysqldump automatically includes in its output a statement that enables
# 								NO_AUTO_VALUE_ON_ZERO
#
# NO_BACKSLASH_ESCAPES 	Disables the use of the \ char as an escape char within strings. With this mode enabled, \ becomes an ordinary char like any other.
#
# NO_DIR_IN_CREATE 		When creating a table, ignore all INDEX DIRECTORY and DATA DIRECTORY directives. Useful on slave replication servers.
#
# NO_ENGINE 				Control automatic substitution of the default storage engine when a statement such as CREATE_TABLE or ALTER_TABLE specifies a 
# _SUBSTITUTION 			storage engine that is disabled or not compiled in.
#
# 								By default, NO_ENGINE_SUBSTITUTION is enabled.
#
# 								Because storage engines can be pluggable at runtime, unavailable engines are treated the same way.
#
# 								With NO_ENGINE_SUBSTITUTION disabled, for CREATE TABLE the default engine is used and a warning occurs if the desired
# 								engine is unavailable.
#
# 								For ALTER_TABLE, a warning occurs and the table is not altered.
#
# 								With NO_ENGINE_SUBSTITUTION enabled, an error occurs and the table is not created or altered if the desired engine is unavailable.
#
# NO_UNSIGNED 				Subtraction between integer values, where one is of type UNSIGNED, produces an unsigned result by default.
# _SUBTRACTION 			If the result would otherwise have been negative, an error results:
#
# 									SET sql_mode = '';
# 									Query OK, 0 rows affected (0.00 sec)
#
# 									SELECT CAST(0 AS UNSIGNED) -1;
# 									ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(cast(0 as unsigned) - 1)'
#
# 								If the NO_UNSIGNED_SUBTRACTION SQL mode is enabled, the result is negative:
#
# 									SET sql_mode = 'NO_UNSIGNED_SUBTRACTION';
# 									SELECT CAST(0 AS UNSIGNED) - 1;
# 
# 									+---------------------------------------+
# 									| CAST(0 AS UNSIGNED) 	-  	1 			 |
# 									+---------------------------------------+
# 									| 									  -1 			 |
# 									+---------------------------------------+
#
# 								If the result of such an operation is used to update an UNSIGNED integer column, the result is 
# 								clipped to the maximum value for the column type - or clipped to 0 if NO_UNSIGNED_SUBTRACTION is enabled.
#
# 								With strict SQL mode enabled, an error occurs and the column remains unchanged.
#
# 								When NO_UNSIGNED_SUBTRACTION is enabled, the subtraction result is signed, even if any operand is unsigned.
# 		
# 								For example - compare the type of column c2 in table t1 with that of column c2 in table t2:
#
# 									SET sql_mode='';
# 									CREATE TABLE test (c1 BIGINT UNSIGNED NOT NULL);
# 									CREATE TABLE t1 SELECT c1 - 1 AS c2 FROM test;
# 									DESCRIBE t1;
#
# 									+-----------------------------------------------------------------+
# 									| Field 	| 	Type 							| Null | Key | Default| Extra |
# 									+--------+--------------------------+------+-----+--------+-------+
# 									| c2 		| bigint(21) unsigned 		| NO 	 | 	 | 0 		 | 		|
# 									+--------+--------------------------+------+-----+--------+-------+
#
# 									SET sql_mode='NO_UNSIGNED_SUBTRACTION';
# 									CREATE TABLE t2 SELECT c1 - 1 AS c2 FROM test;
# 									DESCRIBE t2;
#
# 									+------------------------------------------------------------------+
# 									| Field | Type 							| Null | Key | Default | Extra |
# 									+-------+---------------------------+------+-----+---------+-------+
# 									| c2 	  | bigint(21) 					| NO 	 | 	 | 0 		  | 		 |
# 									+-------+---------------------------+------+-----+---------+-------+
#
# 								This simply means that BIGINT UNSIGNED is not 100% usable in all contexts.
#
# NO_ZERO_DATE
#
# 								The NO_ZERO_DATE mode affects whether the server permits '0000-00-00' as a valid date.
# 								Its effect also depends on whether strict SQL mode is enabled.
#
# 									If this mode is not enabled, '0000-00-00' is permitted and inserts produce no warning.
#
# 									If this mode is enabled, '0000-00-00' is permitted and inserts produce a warning.
#
# 									If this mode and strict is enabled, '0000-00-00' is not permitted and inserts produce an error,
# 									unless IGNORE is given as well. (For INSERT IGNORE and UPDATE IGNORE, '0000-00-00' is permitted and inserts produce a warning)
#
# 								This mode is deprecated. Should be used with Strict, is not part of it. Produces warning if one is used without other, etc.
#
# NO_ZERO_IN_DATE 		The NO_ZERO_IN_DATE mode affects whether the server permits dates in which the year part is nonzero but the month or day part is 0.
# 								(This mode affects dates such as '2010-00-01' or '2010-01-00' - but not '0000-00-00')
#
# 								To control whether the server permits '0000-00-00', use the NO_ZERO_DATE mode.
#
# 								The effect of NO_ZERO_IN_DATE also depends on whether strict SQL mode is enabled.
#
# 									If this mode is not enabled, dates with zero parts are permitted and inserts produce no warning.
#
# 									If this mode is enabled, dates with zero parts are inserted as '0000-00-00' and produce a warning.
#
# 									If this mode and strict mode is enabled,  dates with zero parts are not permitted and inserts produce an error,
# 									unless IGNORE is given as well. (For INSERT IGNORE and UPDATE IGNORE, dates with zero parts are inserted as '0000-00-00' and produce a warning).
#
#
# 								Deprecated. not part of Strict. Warning if not used with Strict, etc.
#
# ONLY_FULL_GROUP_BY 	Reject queries for which the select list, HAVING condition or ORDER BY list refer to nonaggregated columns that are 
# 								neither named in the GROUP BY clause nor are functionally dependant on (uniquely determined by) GROUP BY columns.
#
# 								A MySQL extension to standard SQL permits references in the HAVING clause to aliased expressions in the select list.
# 								The HAVING clause can refer to aliases regardless of whether ONLY_FULL_GROUP_BY is enabled.
#
# PAD_CHAR_TO_FULL_LENGTH
#
# 								By default, trailing spaces are trimmed from CHAR column values on retrieval.
#
# 								If PAD_CHAR_TO_FULL_LENGTH is enabled, trimming does not occur and retrieved CHAR values are padded
# 								to their full length.
#
# 								This mode does not apply to VARCHAR columns, for which trialing spaces are retained on retrieval.
#
# 								NOTE: Deprecated as of 8.0.13
#
# 								CREATE TABLE t1 (c1 CHAR(10));
# 								Query OK, 0 rows affected (0.37 secs)
#
# 								INSERT INTO t1 (c1) VALUES('xy'));
#  							Query OK, 1 row affected (0.01 sec)
#
# 								SET sql_mode = '';
# 								Query OK, 0 rows affected (0.00 sec)
#
# 								SELECT c1 CHAR_LENGTH(c1) FROM t1;
#
# 								+----------------------------------+
# 								| c1 		| 	CHAR_LENGTH(c1) 		  |
# 								+--------+-------------------------+
# 								| xy 		| 								2 |
# 								+--------+-------------------------+
# 								1 row in set (0.00 sec)
#
# 								SET sql_mode = 'PAD_CHAR_TO_FULL_LENGTH';
# 								Query OK, 0 rows affected (0.00 sec)
#
# 								SELECT c1, CHAR_LENGTH(c1) FROM t1;
# 								+----------------------------------+
# 								| c1 			| 	CHAR_LENGTH(c1) 	  |
# 								+-----------+----------------------+
# 								| xy 			| 						 	10|
# 								+-----------+----------------------+
# 								1 row in set (0.00 sec)
#
# PIPES_AS_CONCAT
#
# Treat |_| as a string concatenation operator (same as CONCAT()) rather than as a synonym for OR.
#
# REAL_AS_FLOAT
#
# Treat REAL as a synonym for FLOAT. By default, MySQL treats REAL as a synonym for DOUBLE.
#
# STRICT_ALL_TABLES
#
# Enable strict SQL mode for all storage engines. INvalid data values are rejected.
#
# STRICT_TRANS_TABLES
#
# Enable strict SQL mode for transactional storage engines, and when possible for nontransactional storage engines.
#
# TIME_TRUNCATE_FRACTIONAL
#
# Control whether rounding or truncation occurs when inserting a TIME, DATE, or TIMESTAMP value with a fractional
# seconds part into a column having the same type but fewer fractional digits.
#
# The behavior is to use rounding. If this mode is enabled, truncation occurs instead.
# The followin sequence of statements illustrates the difference:
#
# 		CREATE TABLE t (id INT tval TIME(1));
# 		SET sql_mode='';
# 		INSERT INTO t (id, tval) VALUES(1, 1.55);
# 		SET sql_mode='TIME_TRUNCATE_FRACTIONAL';
# 		INSERT INTO t (id, tval) VALUES(2, 1.55);
#
# The resulting table looks like this, where the first value has been subject to rounding and the second to truncation:
#
# 		SELECT id, tval FROM t ORDER BY id;
# 		+--------------------------+
# 		| id 		| 		tval 			|
# 		+--------+-----------------+
# 		| 		1 	| 00:00:01.6 		|
# 		| 		2  | 00:00:01.5 		|
# 		+--------+-----------------+
#
# ANSI is equivalent to:
#
# 		REAL_AS_FLOAT, PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE and ONLY_FULL_GROUP_BY
#
# 		ANSI mode also causes the server to return an error for queries where a set function S with an outer reference S(outer_ref) cannot be
# 		aggregated in the outer query against which the outer reference has been resolved. This is such a query:
#
# 			SELECT * FROM t1 WHERE t1.a IN (SELECT MAX(t1.b) FROM t2 WHERE ...);
#
# 		Here - MAX(t1.b) cannot aggregate in the outer query because it appears in the WHERE clause of that query.
#
# 		Standard SQL requires an error in this situation. If ANSI mode is not enabled, the server treats S(outer_ref) in such
# 		queries the same way that it would interpret S(const)
#
# TRADITIONAL
#
# 		TRADITIONAL is equivalent to STRICT_TRANS_TABLES, STRICT_ALL_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE, ERROR_FOR_DIVISION_BY_ZERO
# 		and NO_ENGINE_SUBSTITUION
#
# The following pertains to STRICT SQL MODE:
#
# Controls how MySQL handles invalid or missing values in data-change statements such as INSERT or UPDATE.
# A value can be invalid for several reasons.
#
# For example, it might have the wrong data type for the column, or it might be out of range.
#
# A value is missing when a new row to be inserted does not contain a value for a non-NULL column that has
# no explicit DEFAULT clause in its definition. (For a NULL column, NULL is inserted if the value is missing).
#
# Strict mode also affects DDL statements such as CREATE_TABLE.
#
# If strict mode is not in effect, MySQL inserts adjusted values for invalid or missing values and produces warnings.
#
# In strict mode, you can produce this behavior by using INSERT_IGNORE or UPDATE_IGNORE.
#
# For statements such as SELECT that do not change data, invalid values generate a warning in stirct mode, not an error.
#
# Strict mode produces an error for attempts to create a key that exceeds the max key length. When strict mode is not enabled,
# this results in a warning and truncation of the key to the max key length.
#
# Strict mode does not affect whether foreign key constraints are checked. Foreign_key_checks can be used for that.
#
# Strict SQL mode is in effect if either STRICT_ALL_TABLES or STRICT_TRANS_TABLES is enabled, although the effects of these
# modes differ somewhat:
#
# 		For transactional tables, an error occurs for invalid or missing values in a data-change statement when either STRICT_ALL_TABLES or 
# 		STRICT_TRANS_TABLES is enabled. The statement is aborted and rolled back.
#
# 		For nontransactional tables, the behavior is the same for either mode if the bad value occurs in the first row to be inserted or updated:
# 			The statement is aborted and the table remains unchanged.
#
# 			If the statement inserts or modifies multiple rows and the bad value occurs in the second or later row, the result depends
# 			on which strict mode is enabled:
#
# 				For STRICT_ALL_TABLES, MySQL returns an error and ignores the rest of the rows.
# 											  However, because the earlier rows have been inserted or updated, the result is a partial update.
# 											  To avoid this, use single-row statements which can be aborted without changing the table.
#
# 				For STRICT_TRANS_TABLES, MySQL converts an invalid value to the closest valid value for the column and inserts the adjusted value.
# 											  If a value is missing, MySQL inserts the implicit default value for the column data type.
#
# 											  In either case, MySQL generates a warning rather than an error and continues processing the statement.
# 											  Implicit defaults are described later.
#
# 		Strict mode affects handling of division by zero, zero dates  and zero in dates as follows:
#
# 			Strict mode affects handling of division by zero, which includes MOD(N,0):
#
# 				For data-change operations (INSERT,UPDATE):
#
# 					If strict mode is not enabled, division by zero inserts NULL and produces no warning.
#	
# 					If strict mode is enabled, division by zero produces an error, unless IGNORE is given as well.
# 					For INSERT IGNORE and UPDATE IGNORE, division by zero inserts NULL and produces a warning.
#
# 				For SELECT, division by zero returns NULL. Enabling strict mode causes a warning to be produced as well.
#
# 			Strict mode affects whether the server permits '0000-00-00' as a valid date:
#
# 				If strict mode is not enabled, '0000-00-00' is permitted and inserts produce no warning.
#
# 				If strict mode is enabled, '0000-00-00' is not permitted and inserts produce an error, unless IGNORE is given as well.
# 				For INSERT IGNORE and UPDATE IGNORE '0000-00-00' is permitted and inserts produce a warning.
#
# 			Strict mode affects whether the server permits dates in which the year part is nonzero but the month or day part is 0 (dates such as '2010-00-01' or '2010-01-00'):
#
# 				If stict mode is not enabled, dates with zero parts are permitted and inserts produce no warning.
#
# 				If strict mode is enabled, dates with zero parts are not permitted and inserts produce an error, unless IGNORE is given as well.
# 				For INSERT IGNORE and UPDATE IGNORE, dates with zero parts are inserted as '0000-00-00' (which is considered valid with IGNORE) and produces a warning.
#
# 			Strict mode affects handling of division by zero, zero dates, and zeros in dates in conjunction with the ERROR_FOR_DIVISION_BY_ZERO, NO_ZERO_DATE and
# 			NO_ZERO_IN_DATE modes.
#
# COMPARISON OF THE IGNORE KEYWORD AND STRICT SQL MODE
#
# 		Compres the effect on statement execution of the IGNORE keyword (which downgrades errors to warnings) and strict SQL mode (which upgrades warnings to
# 		errors). It describes which statements they affect, and which errors they apply to.
#
# 		THe following table presents a summary comparison of statement behavior when the default is to produce an error versus a warning.
#
# 		An example of when the default is to produce an error is inserting a NULL into a NOT NULL column.
#
# 		An example of when the default is to produce a warning is inserting a value of the wrong data type into a 
# 		column (such as inserting the string 'abc' into a integer column)
#
# 						OPS MODE 										WHEN STATEMENT DEFAULT IS ERROR 							WHEN STATEMENT DEFAULT IS WARNING
# 				Without IGNORE or strict SQL mode 				Error 															Warning
# 				With IGNORE 											Warning 															Warning (same as without IGNORE or strict SQL mode)
# 				With strict SQL mode 								Error (same as without IGNORE or strict SQL mode) 	Error
# 				With IGNORE and strict SQL mode 					Warning 															Warning
#
# 		One conclusion to draw from the table is that when the IGNORE keyword and strict SQL mode are both in effect,
# 		IGNORE takes precedence.
#
# 		This means that, although IGNORE and strict SQL mode can be considered to have opposite effects on error handling, they do not cancel each other.
#
# THE EFFECT OF IGNORE ON STATEMENT EXECUTION
#
# Several statements in MySQL support an optional IGNORE keyword. This keyword causes the server to downgrade certain types of errors
# and generate warnings instead. 
#
# For a multiple-row statement, IGNORE causes the statements to skip to the next row instead of aborting.
#
# For example, if the table t has a primary key column i, attempting to insert the same value of i into multiple
# rows normally produces a duplicate-key error:
#
# INSERT INTO t (i) VALUES(1),(1);
# ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'
#
# If we run with IGNORE, A warning is produced instead of an error - though, duplication is still not inserted:
#
# INSERT IGNORE INTO t (i) VALUES(1),(1);
# Query OK, 1 row affected, 1 warning (0.01 sec)
# Records: 2 Duplicates: 1 Warnings: 1
#
# SHOW WARNINGS;
# +----------------------------------------------------------+
# | Level 	| 	Code 	| Message 					  					 |
# +---------+--------+---------------------------------------+
# | Warning | 1062 	| Duplicate entry '1' for key 'PRIMARY' |
# +----------------------------------------------------------+
#
# 1 row in set (0.00 sec)
#
# These statements supports the IGNORE keyword:
#
# 		CREATE TABLE ... SELECT. IGNORE does not apply to the CREATE TABLE or SELECT parts of the statement but to inserts into
# 		the table of rows produced by the SELECT.
#
# 		Rows that duplicate an existing row on a unique key value are discarded.
#
# 		DELETE: IGNORE causes MySQL to ignore errors during the process of deleting rows.
#
# 		INSERT: With IGNORE, rows that duplicate an existing row on a unique key value are discarded.
# 
# 				  Rows set to values that would cause data conversion errors are set to the closest valid values instead.
#
# 				  For partitioned tables where no partition matching a given value is found, IGNORE causes the insert operation 
# 				  to fail silently for rows containing the unmatched value.
#
# 		LOAD_DATA, LOAD_XML: With IGNORE, rows that duplicate an existing row on a unique key value are discarded.
#
# 		UPDATE: With IGNORE, rows for which duplicate-key conflicts occur on a unique key value are not updated.
#
# 				  Rows updated to values that would cause data conversion errors are updated to the closest valid values instead.
#
# The IGNORE keyword applies to the following errors:
#
# 		ER_BAD_NULL_ERROR
# 		ER_DUP_ENTRY
# 		ER_DUP_ENTRY_WITH_KEY_NAME
# 		ER_DUP_KEY
# 		ER_NO_PARTITION_FOR_GIVEN_VALUE
# 		ER_NO_PARTITION_FOR_GIVEN_VALUE_SILENT
# 		ER_NO_REFERENCED_ROW_2
#
# 		ER_ROW_DOES_NOT_MATCH_GIVEN_PARTITION_SET
# 		ER_ROW_IS_REFERENCED_2
# 		ER_SUBQUERY_NO_1_ROW
# 		ER_VIEW_CHECK_FAILED
#
# THE EFFECT OF STRICT SQL MODE ON STATEMENT EXECUTION
#
# The MySQL server can operate in different SQL modes, and can apply these modes differently for different clients, depending
# on the value of the sql_mode SYS_VAR.
#
# In "strict" SQL mode, the server upgrades certain warnings to errors.
#
# For example, in non-strict SQL mode, inserting the string 'abc' into an integer column results in conversion of
# the value to 0 and a warning:
#
# SET sql_mode = '';
# Query OK, 0 rows affected (0.00 sec)
#
# INSERT INTO t (i) VALUES('abc');
# Query OK, 1 row affected, 1 warning (0.01 sec)
#
# SHOW WARNINGS;
# +------------------------------------------------------------------------------+
# | Level 		| Code 	| 		Message 															|
# +------------+--------+--------------------------------------------------------+
# | Warning 	| 1366 	| Incorrect integer value: 'abc' for column 'i' at row 1 |
# +------------+--------+--------------------------------------------------------+
#
# 1 row in set (0.00 sec)
#
# In strict SQL mode, the invalid value is rejected with an error:
#
# SET sql_mode = 'STRICT_ALL_TABLES';
# Query OK, 0 rows affected (0.00 sec)
#
# INSERT INTO t (i) VALUES ('abc');
# ERROR 1366 (HY000): Incorrect integer value: 'abc' for column 'i' at row 1
#
# Strict SQL mode applies the following statements under conditions for which some value might be out of
# range or an invalid row is inserted into or deleted from a table:
#
# ALTER_TABLE
#
# CREATE_TABLE
#
# CREATE_TABLE_..._SELECT
#
# DELETE (both single table and multiple table)
#
# INSERT
#
# LOAD_DATA
# 
# LOAD_XML
#
# SELECT_SLEEP()
#
# UPDATE (both single and multiple tables)
#
# Within stored programs, individual statements of the types just listed execute in strict SQL mode if the program was defined 
# while strict mode was in effect.
#
# Strict SQL mode applies to the following errors, represent a class of errors in which an input value is either invalid or missing.
# A value is invalid if it has the wrong data type for the column or might be out of range.
#
# A value is missing if a new row to be inserted does not contain a value for a NOT NULL column that has no explicit DEFAULT clause
# in its definition.
#
# ER_BAD_NULL_ERROR
# ER_CUT_VALUE_GROUP_CONCAT
# ER_DATA_TOO_LONG
# ER_DATETIME_FUNCTION_OVERFLOW
# ER_DIVISION_BY_ZERO
# ER_INVALID_ARGUMENT_FOR_LOGARITHM
# ER_NO_DEFAULT_FOR_FIELD
# ER_NO_DEFAULT_FOR_VIEW_FIELD
#
# ER_TOO_LONG_KEY
# ER_TRUNCATED_WRONG_VALUE
# ER_TRUNCATED_WRONG_VALUE_FOR_FIELD
# ER_WARN_DATA_OUT_OF_RANGE
# ER_WARN_NULL_TO_NOTNULL
# ER_WARN_TOO_FEW_RECORDS
# ER_WRONG_ARGUMENTS
# ER_WRONG_VALUE_FOR_TYPE
# WARN_DATA_TRUNCATED
#
# The following section pertains to IPv6 Support
#
# Support for IPv6 in MySQL includes these capabilities:
#
# 		MySQL Server can accept TCP/IP connections from clients connecting over IPv6.
#
# 		For example, this command connects over IPv6 to the MySQL server on the local host:
#
# 			mysql -h ::1
#
# 		To use this capability - two conditions must hold true:
#
# 			The system must be configured to support IPv6.
#
# 			The default MySQL server configuration permits IPv6 connections in addition to IPv4 connections.
# 			To change the default configuration, start the server with an appropiate --bind-address option.
#
# 		MySQL account names permit IPv6 addresses to enable DBAs to specify privs for clients that connect 
# 		to the server over IPv6.
#
# 		IPv6 addresses can be specified in account names in statements such as CREATE_USER, GRANT, and REVOKE.
#
# 		For example:
#
# 			CREATE USER 'bill'@'::1' IDENTIFIED BY 'secret';
# 			GRANT SELECT ON mydb.* TO 'bill'@'::1';
#
# 		IPv6 functions enable conversion between string and internal format IPv6 address formats, and checking whether
# 		values represent valid IPv6 addresses.
#
# 		For example, INET6_ATON() and INET6_NTOA() are similar to INET_ATON() and INET_NTOA(), but handle IPv6 in addition
# 		to IPv4 addresses.
#
# The following pertains to verifying system support for IPv6.
#
# Before MySQL server can accept IPv6 connections, the operating system on your server host must support IPv6.
# As a simple test to determine whether that is true - try:
#
# 		ping6 ::1
# 		16 bytes from ::1, icmp_seq=0 hlim=64 time=0.171 ms
# 		16 bytes from ::1, icmp_seq=1 hlim=64 time=0.077 ms
#
# To produce a description of your system's network interfaces, invoke ifconfig -a and look for IPv6 addresses in the output.
#
# If your host does not support IPv6, the reasoning can differ. It can require configuring an existing network config to add an IPv6 address.
# Or you might need to rebuild the kernel with IPv6 options enabled.
#
# There are links to cover for the Linux integrations. But this project focuses on MySQL - one part at a time.
#
# The MySQL server listens on a single network socket for TCP/IP connections.
#
# This socket is bound to a single address, but it is possible for an address to map unto multiple network interfaces.
# To specify an address, use the --bind-address=<addr> option at server startup, where <addr> is an IPv4 or IPv6 address or a host name.
#
# The following pertains to connecting to Local Host address connections using IPv6.
#
# The following procedure shows how to configure MySQL to permit IPv6 connections by clients that connect to the local server using
# the ::1 local host address.
#
# The instructions are based on support of IPv6.
#
# 		1. Start the MySQL server with an appropriate --bind-address option to permit it to accept IPv6 connections.
# 			For example, put the following lines in the server option file and restart the server:
#
# 				[mysqld]
# 				bind-address = *
#
# 			Alternatively, you can bind the server to ::1, but that makes the server more restrictive for TCP/IP connections.
# 			It accepts only IPv6 connections for that single address and rejects IPv4 connections. 
#
# 		2. As an administrator, connect to the server and create an account for a local user who will connect from the ::1 local IPv6 host address:
#
# 				CREATE USER 'ipv6user'@'::1' IDENTIFIED BY 'ipv6pass';
#
# 			For the permitted syntax of Ipv6 addresses in account names - it's covered later.
#
# 			In addition to the CREATE_USER statement, you can issue GRANT statements that give specific
# 			privs to the account, although that is not necessary for this part.
#
# 		3. Invoke the mysql client to connect to the server using the new account:
#
# 				mysql -h ::1 -u ipv6user -pipv6pass
#
# 		4. Try some simple statements that show connection information:
#
# 				STATUS
# 				...
# 				Connection: 	::1 via TCP/IP
# 				...
# 
# 				SELECT CURRENT_USER(), @@bind_address;
# 				+------------------------------------+
# 				| CURRENT_USER() | @@bind_address 	 |
# 				+----------------+-------------------+
# 				| ipv6user@::1   | :: 					 |
# 				+----------------+-------------------+
#
# The following section pertains to Connecting Using IPv6 Nonlocal Host Addresses
#
# The following procedure shows how to configure MySQL to permit IPv6 connections by remote clients.
#
# It is similar to the preceding procedure for local clients, but the server and client hosts are
# distinct and each has its own nonlocal ipv6 address.
#
# The example uses the addresses of:
#
# Server host: 2001:db8:0:f101::1
# Client host: 2001:db8:0:f101::2
#
# These addresses are chosen from the nonroutable address range recommended by IANA for documentation purposes/testing.
# To accept IPv6 connections from clients outside the local network, the server host must have a public address.
#
# If your network provider assigns you an IPv6 address, you can use that.
#
# Otherwise, another way to obtain an address is to use an IPv6 broker.
#
# 		1. Start the MySQL server with an appropriate --bind-address option to permit it to accept IPv6 connections.
# 			For example, put the following lines in the server option file and restart the server:
#
# 				[mysqld]
# 				bind-address = *
#
# 			Alternatively, you can bind the server to 2001:db8:0:f101::1, but that makes the server more restrictive for TCP/IP
# 			connections.
#
# 			It accepts only IPv6 connections for that single address and rejects IPv4 connections.
#
# 		2. On the server host (2001:db8:0:f101::1), create an account for a user who will connect from the client host (2001:db8:f101::2)
#
# 			CREATE USER 'remoteipv6user'@'2001:db8:0:f101::2' IDENTIFIED BY 'remoteipv6pass';
#
# 		3. On the client host (2001:db8:0:f101::2), invoke the mysql client to connect to the server using the new account:
#
# 			mysql -h 2001:db8:0:f101::1 -u remoteipv6user -premoteipv6pass
#
# 		4. Trying some simple commands to see that it works:
#
# 				STATUS
# 				...-
# 				Connection: 	2001:db8:0:f101::1 via TCP/IP
# 				...- 
# 
# 				SELECT CURRENT_USER(), @@bind_address;
# 				+-----------------------------------+----------------+
# 				| CURRENT_USER() 						   | @@bind_address |
# 				+-----------------------------------+----------------+
# 				| remoteipv6user@2001:db8:0:f101::2 | :: 				  |
# 				+-----------------------------------+----------------+
#
# The following part pertains on how to obtain an IPv6 Address from a Broker
#
# If you do not have a public IPv6 address that enables your system to communicate over IPv6 outside of your local network,
# you can obtain one from an Ipv6 broker.
#
# After configuring your server host to use a broker-supplied IPv6 address, start the MySQL server with an appropiate --bind-address
# option to permit the server to accept IPv6 connections.
#
# For example, put the following lines in the server option file and restart the server:
#
# 		[mysqld]
# 		bind-address = *
#
# Alternatively, you can bind the server to the specific IPv6 address provided by the broker, but that makes the server more
# restrictive for TCP/IP connections.
#
# In addition, if the broker allocates dynamic addresses, the address provided for your system might change the next time
# you connect to the broker.
#
# If so, any accounts you create that name the original address, become invalid.
#
# To bind to a specific address but avoid this change-of-address problem, you may be able to arrange with the broker
# for a static IPv6 address.
#
# The following example is for how ot use the Freenet6 as the broker and the gogoc IPv6 client package on Gentoo Linux.
#
# 1. Create an acc on their website -> http://gogonet.gogo6.com
#
# 2. Create the user ID and PW for the IPv6 broker: -> http://gogonet.gogo6.com/page/freenet6-registration
#
# 3. As root, install gogoc:
#
# 		emerge gogoc
#
# 4. Edit /etc/gogoc/gogoc.conf to set the userid and password values. For example:
#
# 		userid=gogouser
# 		passwd=gogopass
#
# 5. Start gogoc:
#
# 		/etc/init.d/gogoc start
#
# 		To start gogoc on system boot:
#
# 		rc-update add gogoc default
#
# 6. ping6 to ping a host:
#
# 		ping6 ipv6.google.com
#
# 7. to see your Ipv6 address:
#
# 		ifconfig tun
#
# The following section pertains to MySQL Server Time Zone Support
#
# MySQL Server maintains several time zone settings:
#
# 		1. The system time zone. When the server starts, it attempts to determine the time zone of the host machine and uses it to set the 
# 		system_time_zone SYS_VAR. Does not change thereafter.
#
# 		Can set the SYS_VAR time zone for MySQL Server at startup with the --timezone=<timezone_name> option to mysqld_safe.
#
# 		You can also set it by setting the TZ environment variable before you start mysqld.
#
# 		The permissible values for --timezone or TZ are system dependent. 
#
# 		2. The server's current time zone. The global time_zone system variable indicates the time zone the server currently is operating in.
# 			The initial value for time_zone is 'SYSTEM', which indicates that the server time zone is the same as the system time zone.
#
# 				NOTE: If set to SYSTEM, every MySQL function call that requires a timezone calculation makes a system library call to determine
# 						the current system timezone. This call may be protected by a global mutex, resulting in contention.
#
# 			The initial global server time zone value can be specified explicitly at startup with the --default-time-zone=<timezone> option on the
# 			cmd line, or you can use the following line in an option file:
#
# 				default-time-zone='timezone'
#
# 			If you have the SYSTEM_VARIABLES_ADMIN or SUPER priv, you can set the global server time zone value at runtime with this statement:
#
# 				SET GLOBAL time_zone = timezone;
#
# 			Per-connection time zones. Each client that connects has its own time zone setting, given by the session time_zone variable.
# 			Initially, the session variable takes its value from the global time_zone variable, but the client can change its own time zone
# 			with this statement:
#
# 				SET time_zone = timezone;
#
# 		The current session time zone setting affects display and storage of time values that are zone-sensitive.
#
# 		This includes the values displayed by functions such as NOW() or CURTIME(), and values stored in and retrieved
# 		from TIMESTAMP columns.
#
# 		Values for TIMESTAMP columns are converted from the current time zone to UTC for storage, and from UTC to the current
# 		time zone for retrieval.
#
# 		The current time zone setting does not affect values displayed by functions such as UTC_TIMESTAMP() or values in DATE, TIME, or DATETIME
# 		columns.
#
# 		Nor are values in those data types stored in UTC; the time zone applies for them only when converting from TIMESTAMP values.
# 		If you want locale-specific arithmetic for DATE, TIME or DATETIME - convert them to UTC, perform the arithemtic, and convert back.
#
# 		The current values of the global and client-specific time zones can be retrieved like this:
#
# 			SELECT @@global.time_zone, @@session.time_zone;
#
# 		<timezone> values can be given in several formats, none of which are case-sensitive:
#
# 			The value 'SYSTEM' indicates that hte time zone should be the same as hte SYS time zone.
#
# 			The vlaue can be given as a string indicating an offset from UTC, such as '+10:00' or '-6:00'
#
# 			The value can be given as a named time zone, such as 'Europe/Helsinki', 'US/Eastern', or 'MET'.
# 			Named time zones can be used only if the time zone information tables in the mysql DB have been created and populated.
#
# POPULATING THE TIME ZONE TABLES
#
# Several tables in the MySQL system DB exists to maintain time zone info.
# The MySQL installation procedure creates the time zone tables, but does not load them.
#
# You must do so manually using the following instructions.
#
# NOTE: Loading the time zone information is not necessarily a one-time operation because the information 
# 		  changes ocassionally. When such changes occur, applications that use the old rules becomes out of date
# 	     and you may find it necessary to reload the time zone tables to keep the information used by your MySQL
# 		  sever current.
#
# If your system has its own zoneinfo DB (the set of files describing time zones), you should use the mysql_tzinfo_to_sql
# program for filling the time zone tables.
#
# Examples of such systems are Linux, FreeBSD, Solaris and macOS. One likely location for these files is the /usr/share/zoneinfo dir.
# If your system does not have a zoneinfo db, you can use the downloadable package described later.
#
# The mysql_tzinfo_to_sql program is used to load the time zone tables.
#
# On the cmd line, pass the zoneinfo dir path name to mysql_tzinfo_to_sql and send the output into the mysql program.
# For example:
#
# 		mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql
#
# mysql_tzinfo_to_sql reads your Systems time zone files and generates SQL statements from them.
# mysql processes those statements to load the time zone tables.
#
# mysql_tzinfo_to_sql also can be used to load a single time zone file or to generate leap second information.
#
# 		> To load a single time zone file <tz_file> that correponds to a time zone name <tz_name>, invoke mysql_tzinfo_to_sql as such:
#
# 			mysql_tzinfo_to_sql <tz_file> <tz_name> | mysql -u root mysql
#
# 		With this approach, you must execute a separate command to load the time zone files for each named zone that hte server needs to know about.
#
# 		> If your time zone needs to account for leap seconds, intiialize the leap second information like this, where <tz_file> is the name of your time zone file:
#
# 			mysql_tzinfo_to_sql --leap <tz_file> | mysql -u root mysql
#
# 		> After running mysql_tzinfo_to_sql, it is best to restart the server so that it does not continue to use any previously cached time zone data.
#
# 		If your system is one that has no zoneinfo DB (for example, Windows), you can use a package that is available for download at the MySQL Developer Zone:
#
# 			https://dev.mysql.com/downloads/timezones.html
#
# 		Download a time zone package that contains SQL statements and unpack it, then load the package file contents into the time zone tables:
#
# 			mysql -u root mysql < <file_name>
#
# 		THen restart the server.
#
# 		Warning: Do NOT use a downloadable package that contains any MyISAM tables. MySQL uses INnoDB for the Time zone Tables. Trying to replace them with MyISAM tables causes issues.
#
# 		Warning: Do NOT use a downloadable package that if your system has a zoneinfo database. Use the mysql_tzinfo_to_sql utility instead.
# 					Othehrwise, you may cause a difference in datetime handling between MySQL and other apps on your system.
#
# The following section pertains to Staying Current with Time Zone Changes
#
# 		When time zone rules change, applications that use the old rules become out of date.
#
# 		TO stay current, it is necessary to make sure that oyur system uses current time zone info.
# 		There are two factors to consider in this.
#
# 			1) The OS time affects the value that the MySQL server uses for times if its time zone is set to SYSTEM.
# 				Make sure that your OS is using the latest time zone info.
#
# 				For most OS's, the latest update or service pack prepares your system for the time changes.
# 				
# 			2) If you replace the system's /etc/localtime timezone file with a version that uses rules differing from those in
# 				effect at mysqld startup, you should restart mysqld so that it uses the updated rules.
#
# 				Otherwise, mysqld might not notice when the system changes its time.
#
# 			3) If you use named time zones with MySQL, make sure that the time zone tables in the mysql DB are up to date.
# 				
# 				IF your system has its own zoneinfo DB, you should reload the MySQL time zone tables whenever hte zoneinfo
# 				DB is updated.
#
# 				FOr systems that do not have their own zoneinfo DB, check the MySQL Develop Zone for updates.
#
# 				When a new update is available, download it and use it to replace the current time zone tables.
#
# 				Mysqld caches time zone information that it looks up, so after updating the time zone tables, you should
# 				restart mysqld to make sure that it does not continue to serve outdated time zone data.
#
# 		If you are uncertain whether named time zones are available, for use either as the server's time zone setting or by clients that
# 		set their own time zone, check whether your time zone tables are empty.
#
# 		The following query determines whether the table that contains time zone names has any rows.
#
# 				SELECT COUNT(*) FROM mysql.time_zone_name;
# 				+-----------------------------+
# 				| COUNT(*) 							|
# 				+-----------------------------+
# 				| 		0 								|
# 				+-----------------------------+
#
# 		A count of zero indicates that its empty.
#
# 		In this case, no one can be using named time zones, and you do not need to update the tables.
#
# 		A count greater than zero indicates that the table is not empty and that its contents are available
# 		to be used for named time support.
#
# 		In this case, you should be sure to reload your time zone tables so that anyone who uses named time zones will get correct query results.
#
# 		To check whether your MySQL installation is updated properly for a change in Daylight Saving Time rules, use a test like the one following.
# 		The example uses values that are appropiate for the 2007 DST 1-hour change that occurs in the US on march 11 at 2 a.m.
#
# 		SELECT CONVERT_TZ('2007-03-11 2:00:00', 'US/Eastern', 'US/Central');
# 		SELECT CONVERT_TZ('2007-03-11 3:00:00', 'US/Eastern', 'US/Central');
#
# 		The two time values indicate the times at which the DST change occurs, and the use of named time zones requires that the time zone tables be used.
# 		THe desired result is that both queries return the same result (the input time, converted to the equivalent value in the 'US/Central' time zone).
#
# 		Before updating the time zone tables, you would see an incorrect result like this:
#
# 			SELECT CONVERT_TZ('2007-03-11 2:00:00', 'US/Eastern', 'US/Central');
# 			+-------------------------------------------------------------------+
# 			| CONVERT_TZ('2007-03-11 2:00:00', 'US/Eastern', 'US/Central') 	  |
# 			+-------------------------------------------------------------------+
# 			| 2007-03-11 01:00:00 															  |
# 			+-------------------------------------------------------------------+
#
# 			SELECT CONVERT_TZ('2007-03-11 3:00:00', 'US/Eastern', 'US/Central');
# 			+-------------------------------------------------------------------+
# 			| CONVERT_TZ('2007-03-11 3:00:00', 'US/Eastern', 'US/Central') 	  |
# 			+-------------------------------------------------------------------+
# 			| 2007-03-11 02:00:00 															  |
# 			+-------------------------------------------------------------------+
#
# 		After updating the tables, you should get hte correct results:
#
# 			SELECT CONVERT_TZ('2007-03-11 3:00:00', 'US/Eastern', 'US/Central');
# 			+-------------------------------------------------------------------+
## 		| CONVERT_TZ('2007-03-11 3:00:00', 'US/Eastern', 'US/Central') 	  |
# 			+-------------------------------------------------------------------+
# 			| 2007-03-11 01:00:00 															  |
# 			+-------------------------------------------------------------------+
#
# The following section covers Time Zone Leap Seond Support
#
# Leap second values are returned with a time part that ends with :59:59.
#
# THis means that a function such as NOW() can return the same value for two or three consecutive
# seconds during the leap second.
#
# It remains true that literal temporal values having a time part that ends with :59:60 or :59:61 are considered invalid.
#
# If it is necessary to search for TIMESTAMP values one second before the leap second, anomalous results may be obtained if you
# use a comparison with 'YYYY-MM-DD hh:mm:ss' values.
#
# The following example demonstrates this. It changes the local time zone to UTC so there is no difference between internal values
# (which are in UTC) and displayed values (which have time zone correction applied)
#
# 		CREATE TABLE t1 (
# 				a INT, ts TIMESTAMP DEFAULT NOW(), PRIMARY KEY (ts));
# 		Query OK, 0 rows affected (0.01 sec)
# 
# 		-- Change to UTC
# 		SET time_zone = '+00:00';
# 		Query OK, 0 rows affected (0.00 sec)
#
# 		-- Simulate NOW() = '2008-12-31 23:59:59' -
# 		SET timestamp = 1230767999
# 		Query OK, 0 rows affected (0.00 sec)
#
# 		INSERT INTO t1 (a) VALUES (1);
# 		Query OK, 1 row affected (0.00 sec)
#
# 		-- Simulate NOW() = '2008-12-31 23:59:60'
# 		SET timestamp = 1230768000;
# 		Query OK, rows affected (0.00 sec)
#
# 		INSERT INTO t1 (a) VALUES (2);
# 		Query OK, 1 row affected (0.00 sec)
#
# 		-- values differ internally but display the same
# 		SELECT a, ts, UNIX_TIMESTAMP(ts) FROM t1;
# 		+--------+-----------------+------------------------+
# 		| a 		| ts 					    | UNIX_TIMESTAMP(ts) |
# 		+--------+-----------------+------------------------+
# 		| 		1 	| 2008-12-31 23:59:59 | 1230767999 			 |
# 		| 		2  | 2008-12-31 23:59:59 | 1230768000 			 |
# 		+--------+---------------------+--------------------+
# 		2 rows in set (0.00 sec)
#
# 		-- only the non-leap value matches
# 		SELECT * FROM t1 WHERE ts = '2008-12-31 23:59:59';
# 		+---------+-----------------------------------------+
# 		| a 		 | ts 												 |
# 		+---------+-----------------------------------------+
# 		| 		1 	 | 2008-12-31 		23:59:59 					 |
# 		+---------+-----------------------------------------+
#
# 		-- the leap values with seconds=60 is invalid
# 		SELECT * FROM t1 WHERE ts = '2008-12-31 23:59:60';
# 		Empty set, 2 warnings (0.00 sec)
#
# To work around this, you can use a comparison based on the UTC value actually stored in column,
# which has the leap second correction applied:
#
# -- selecting using UNIX_TIMESTAMP value return leap value
# SELECT * FROM t1 WHERE UNIX_TIMESTAMP(ts) = 1230768000;
# +---------------+----------------------------------------+
# | a 				| 	ts 											  |
# +---------------+----------------------------------------+
# | 		2 			| 	2008-12-31 23:59:59 						  |
# +---------------+----------------------------------------+
# 1 row in set (0.00 sec)
#
# The following section pertains to Server Tracking of Client Session State Changes
#
# The MySQL server implements several session state trackers. A client can enable these trackers to receive notification 
# of changes to its session state.
#
# One use for the tracker mechanism is to provide a means for MySQL connectors and client applications to determine whether
# any session context is available to permit session migration from one server to another.
#
# (To change sessions in a load-balanced environment, it is necessary to detect whether there is session states to take into
#  consideraiton when deciding whether a switch can be made)
#
# Another use for the tracker mechanism is to permit applications to know when transactions can be moved from one session to another.
# Transaction state tracking enables this, which is useful for applications that may wish to move transactions from a busy server
# to one that is less loaded.
#
# For example, a load-balancing connector managing a client connection pool could move transactions between available sessions in the pool.
#
# However, session switching cannot be done at arbitrary times. If a session is in the middle of a transaction for which reads or writes
# have been done, switching to a different session implies a transaction rollback on the original session.
#
# A session switch must be done only when a transaction does not yet have any reads or writes performed within it.
#
# Examples of when transactions might reasonably be switched:
#
# 		Immediately after START_TRANSACTION
#
# 		After COMMIT_AND_CHAIN
#
# In addition to knowing transaction state, it is useful to know transaction characteristics, so as to use the same characteristics if
# the transaction is moved to a different session.
#
# The following characteristics are relevant for this purpose:
#
# 		READ ONLY 
# 		READ WRITE
# 		ISOLATION LEVEL
# 		WITH CONSISTENT SNAPSHOT
#
# To support the preceding session-switching activities, notification is available for these types of client session state information.
#
# 		1) Changes to these attributes of client session state:
#
# 				The default schema (database)
#
# 				Session-specific values for system variables
#
# 				User-defined variables
#
# 				Temporary tables
#
# 				Prepared statements
#
# 			The session_track_state_change system variable controls this tracker.
#
# 		2) Changes to the default schema name. The session_track_schema SYS_VAR controls this tracker.
#
# 		3) Changes to the session values of SYS_VARs. The session_track_system_variables SYS_VAR controls this tracker.
#
# 		4) Available GTIDs. The session_track_gtids SYS_VAR controls this tracker.
#
# 		5) Information about transaction state and characteristics. The session_track_transaction_info SYS_VAR controls this tracker.
#
# The SYS_VARs that permit control over which change notifications occur, but do not provide a way to access notification information.
#
# Notification occurs in the MySQL client/server protocol, which includes tracker information in OK packets so that session
# state changes can be detected.
#
# To enable client applications to extract state-change information from OK packets returned by the server, the MySQL C API
# provides a pair of functions:
#
# 		mysql_session_track_get_first() fetches the first part of the state-change information received from the server.
#
# 		mysql_session_track_get_next() fethces any remaining state-change information received from the server.
# 		Following a successful call to mysql_session_track_get_first(), call this function repeatedly as long as it returns success.
#
# The mysqltest program has disable_session_track_info and enable_session_track_info commands that control whether session tracker
# notifications occur.
#
# You can use theese commands to see from the cmd line what notifications SQL statements produce.
# Suppose that a file testscript contains the following mysqltest script:
#
# 		DROP TABLE IF EXISTS test.t1;
# 		CREATE TABLE test.t1 (i INT, f FLOAT);
# 		--enable_session_track_info
# 		SET @@session.session_track_schema=ON;
# 		SET @@session.session_track_system_variables='*';
# 		SET @@session.session_track_state_change=ON;
# 		USE information_schema;
# 		SET NAMES 'utf8mb4';
# 		SET @@session.session_track_transaction_info='CHARACTERISTICS';
# 		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
# 		SET TRANSACTION READ WRITE;
# 		START TRANSACTION;
# 		SELECT 1;
# 		INSERT INTO test.t1() VALUES();
# 		INSERT INTO test.t1() VALUES(1, RAND());
# 		COMMIT;
#
# Run the script as follows to see the information provided by the enabled trackers.
#
# For a description of the Tracker: information displayed by mysqltest for the various trackers, its' covered later.
#
# mysqltest < testscript
# DROP TABLE IF EXISTS test.t1;
# CREATE TABLE test.t1 (i INT, f FLOAT);
# SET @@session.session_track_schema=ON;
# SET @@session.session_track_system_variables='*';
# -- Tracker : SESSION_TRACK_SYSTEM_VARIABLES
# -- session_track_system_variables
# -- *
#
# SET @@session.session_track_state_change=ON;
# -- Tracker : SESSION_TRACK_SYSTEM_VARIABLES
# -- session_track_state_change
# -- ON
#
# USE information_schema;
# -- Tracker : SESSION_TRACK_SCHEMA
# -- information_schema
#
# -- Tracker : SESSION_TRACK_STATE_CHANGE
# -- 1
#
# SET NAMES 'utf8mb4';
# -- Tracker : SESSION_TRACK_SYSTEM_VARIABLES
# -- character_set_client
# -- utf8mb4
# -- character_set_connection
# -- utf8mb4
# -- character_set_results
# -- utf8mb4
#
# -- Tracker : SESSION_TRACK_STATE_CHANGE
# -- 1
#
# SET @@session.session_track_transaction_info='CHARACTERISTICS';
# -- Tracker : SESSION_TRACK_SYSTEM_VARIABLES
# -- session_track_transaction_info
# -- CHARACTERISTICS
#
# -- Tracker : SESSION_TRACK_STATE_CHANGE
# -- 1
#
# -- Tracker : SESSION_TRACK_TRANSACTION_CHARACTERISTICS
# --
#
# -- Tracker : SESSION_TRACK_TRANSACTION_STATE
# -- ________
#
# SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
# -- Tracker : SESSION_TRACK_TRANSACTION_CHARACTERISTICS
# -- SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
#
# SET TRANSACTION READ WRITE;
# -- Tracker : SESSION_TRACK_TRANSACTION_CHARACTERISTICS
# -- SET TRANSACTION ISOLATION LEVEL SERIALIZABLE; SET TRANSACTION READ WRITE;
#
# START TRANSACTION;
# -- Tracker : SESSION_TRACK_TRANSACTION_CHARACTERISTICS
# -- SET TRANSACTION ISOLATION LEVEL SERIALIZABLE; START TRANSACTION READ WRITE;
#
# -- Tracker : SESSION_TRACK_TRANSACTION_STATE
# -- T______
#
# SELECT 1;
# 1
# 1
# -- Tracker : SESSION_TRACK_TRANSACTION_STATE
# -- T_____S_
#
# INSERT INTO test.t1 () VALUES();
# -- Tracker : SESSION_TRACK_TRANSACTION_STATE
# -- T___W_S_
#
# INSERT INTO test.t1 () VALUES(1, RAND());
# -- Tracker : SESSION_TRACK_TRANSACTION_STATE
# -- T___WsS_
#
# COMMIT;
# -- Tracker : SESSION_TRACK_TRANSACTION_CHARACTERISTICS
# --
#
# -- Tracker : SESSION_TRACK_TRANSACTION_STATE
# -- ________
#
# ok
#
# The following section covers Server-Side Help
#
# MySQL Server supports a HELP statement that returns information from the MySQL HELP Syntax.
# Several tables in the mysql system DB contain the information needed to support this statement.
#
# The proper operation of this statement requires that these help tables be initialized, which is done 
# by processing the contents of the fill_help_tables.sql script.
#
# If you install MySQL using a binary or source distrib on Unix, help table content intialization occurs when
# you initialize the data dir.
#
# For an RPM distrib on Linux or binary distrib on Windows, content initialization occurs as part of the MySQL
# install process.
#
# If you upgrade MySQL using a binary distrib, help table content is not upgraded automatically, but you can upgrade it manually.
# Locate the fill_help_tables.sql file in the share or share/mysql dir.
#
# Change location into that dir and process the file with the mysql client as follows:
#
# 		mysql -u root mysql < fill_help_tables.sql
#
# You can also obtain the latest fill_help_tables.sql at any time to upgrade your help tables.
#
# Download the proper file for your version of MySQL from https://dev.mysql.com/doc/index-other.html
#
# Process it as above.
#
# If you are working with Git and a MySQL dev source tree, you must use a download copy of the fill_help_tables.sql, because the source
# tree is a stub.
#
# NOTE: For a server that participates in replication, the help table content upgrade process involves multiple servers.
#
# The following part pertains to Server Response to Signals
#
# On Unix, signals can be sent to processes. mysqld responds to signals sent to it as follows:
#
# 		1) SIGTERM causes the server to shut down
#
# 		2) SIGHUP causes the server to reload the grant tables and to flush tables, logs, the thread cache and the host cache.
# 			These actions are like various forms of the FLUSH statement.
#
# 			The server also writes a status report to the error log that has this format:
#
# 				Status information:
#
# 				Current dir: /var/mysql/data/
# 				Running threads: 0 Stack size: 196608
# 				Current locks:
#
# 				Key caches:
# 				default
# 				Buffer_size: 			8388600
# 				Block_size: 				1024
# 				Division_limit: 			 100
# 				Age_limit: 					 300
# 				blocks used: 				   0
# 				not flushed: 					0
# 				w_requests: 					0
# 				writes: 							0
# 				r_requests: 					0
# 				reads: 							0
#
# 				handler status:
# 				read_key: 			0
# 				read_next: 			0
# 				read_rnd: 			0
# 				read_first: 		1
# 				write: 				0
# 				delete: 				0
# 				update: 				0
#
# 				Table status:
# 				Opened tables: 				5
# 				Open tables: 					0
# 				Open files: 					7
# 				Open streams: 					0
#
# 				Alaram status: 
# 				Active alarms: 		1
# 				Max used alarms: 		2
# 				Next alarm time: 		67
#
# The following section pertains to The Server Shutdown Process
#
# The server shutdown process takes place as follows:
#
# 		1. The shutdown process is initiated.
#
# 			This can occur initiated several ways. For example, a user with the SHUTDOWN priv can execute a mysqladmin shutdown command.
#
# 			mysqladmin can be used on any platform supported by MySQL. Other OS specific shutdown intiaition methods are possible, as well:
#
# 				The server shuts down on Unix when it receives a SIGTERM signal.
# 				A server running as a service on Windows shuts down when the services manager tells it to.
#
# 		2. The server creates a shutdown thread if necessary.
#
# 			Depending on how shutdown was initiated, the server might create a thread to handle the shutdown process.
# 			If shutdown was requested by a client, a shutdown thread is created. 
#
# 			If shutdown is the result of receiving a SIGTERM signal, the signal thread might handle shutdown itself, or it
# 			might create a separate thread to do so.
#
# 			If the server tries to create a shutdown thread and cannot (for example, if memory is exhausted) - it issues a diagnostic message
# 			that appears in the error log:
#
# 				Error: Can't create thread to kill server
#
# 		3. The server stops accepting new connections
#
# 			To prevent new activity from being initiated during shutdown, the server stops accepting new client connections 
# 			by closing the handlers for the network interfaces to which it normally listens for connections:
#
# 				The TCP/IP port, the Unix socket file, the Windows named pipe, and shared memory on Windows.
#
# 		4. The server terminates current activity
#
# 			For each thread associated with a client connection, the server breaks the connection to the client and marks the thread as killed.
# 			Threads die when they notice that they are marked for it.
#
# 			Threads for idle connections die quickly. 
# 			Threads that currently are processing statements check their state periodically and take longer to die.
# 			
# 			There is more info on the KILL syntax, later on.
#
# 			For threads that have an open transaction, the transaction is rolled back.
#
# 			If a thread is updating a nontransactional table, an operation such as multiple-row
# 			UPDATE or INSERT may leave the table partially updated because the operation can terminate before completion. 
#
# 			If the server is a master replication server, it treats threads associated with currently connected slaves like other
# 			client threads.
#
# 			That is - each one is marked as killed and exits when it next checks its state.
#
# 			If the server is a slave replication server, it stops the I/O and SQL threads, if they are active, before
# 			marking client threads as killed.
#
# 			The SQL thread is permitted to finish its current statement (to avoid causing replication problems), and then stops.
#
# 			If the SQL thread is in the middle of a transaction at this point, the server waits until the current replication 
# 			event group (if any) has finished executing, or until the user issues a KILL_QUERY or KILL_CONNECTION statement.
#
# 			Since nontransactional statements cannot be rolled back, in order to guarantee crash-safe replication, only transactional
# 			tables should be used.
#
# 			NOTE: To guarantee crash safety on the slave, you must run the slave with --relay-log-recovery enabled.
#
# 		5. The server shuts down or closes storage engines.
#
# 			At this stage, the server flushes the table cache and closes all open tables.
#
# 			Each storage engine performs any actions necessary for tables that it manages.
#
# 			InnoDB flushes its buffer pool to disk (unless innodb_fast_shutdown is 2), writes the
# 			current LSN to the tablespace, and terminates its own internal threads. 
#
#			MyISAM flushes any pending index writes for a table. 
#
# 		6. The server exits.
#
# To provide information to management processes, the server returns one of the exit codes described in the following list.
#
# The phrase in paranthesis indicates the action taken by systemd in response to the code, for platforms on which systemd
# is used to manage the server.
#
# 0 = successful termination (no restart done)
# 1 = unsuccessful termination (no restart done)
# 2 = unsuccessful termination (restart done)
#
# The following section pertains to The MySQL Data Directory
#
# Information managed by the MySQL server is stored under a dir known as the data dir.
#
# The following list briefly decribes the items typically found in the data dir, with cross
# references for additional info: 			
#
# 		1) Data dir subdirs. Each subdir of the data dir is a DB directory and corresponds to a DB managed by the server.
# 			All mySQL installations have certain standard DBs:
#
# 				a) The mysql dir corresponds to the mysql system DB, which contains information required by the MySQL server as it runs.
# 					The DB contains data dictionary tables and system tables.
#
# 				b) The performance_schema dir corresponds to the Performance schema, which provides information used to inspect the
# 					internal execution of the server at runtime.
#
# 				c) The sys directory corresponds to the sys schema, which provides a set of objects to help interpret Performance Schema
# 					information more easily.
#
# 				d) The ndbinfo directory corresponds to the ndbinfo database that stores information specific to NDB Cluster 
# 					(present only for installations built to include NDB Cluster)
#
# 				-> Other Subdirs correspond to DBs created by users and applications.
#
# 				NOTE: INFORMATION_SCHEMA is a standard DB, but its implementation uses no corresponding database dir.
#
# 		2) Log files written by the server.
#
# 		3) InnoDB tablespace and log files.
#
# 		4) Default/autogenerated SSL and RSA certificate and key files.
#
# 		5) The server process ID (while the server is running)
#
# 		6) The mysqld-auto.cnf file that stores persisted global SYS_VARs.
#
# Some items in the list can be relocated elsewhere by reconfiguring the server.
#
# In addition, the --datadir option enables the location of the data directory itself to be changed.
# For a given MySQL installation, check the server configuration to determine whether items have been moved.
#
# The following section pertains to The mysql System Database
#
# The mysql database is the system database. It contains tables that store information required by the MySQL server as it runs.
#
# A broad categorization is that the mysql database contains data dictionary tables that store DB objects metadata, and system
# tables used for other operational purposes.
#
# The following discussion furhet subdivies the set of system tables into smaller categories:
#
# Data Dictionary Tables
#
# Grant System Tables
#
# Object Information System Tables
#
# Log System Tables
#
# Server-Side Help System Tables
#
# Time Zone System Tables
# 
# Replication System Tables
#
# Optimizer System Tables
#
# Miscellaneous System Tables
#
# The remainder of this section enumerates the tables in each category, with cross references for additional information.
#
# Data dictionary tables and system tables use the InnoDB storage engine unless otherwise indicated.
#
# mysql system tables and data dictionary tables reside in a single InnoDB tablespace file named mysql.ibd in the MySQL data dir.
# Previously, these tables were created in individual tablespace files in the mysql database dir.
#
# DATA DICTIONARY TABLES
#
# These tables comprise the data dictionary, which contains metadata about DB objects.
#
# IMPORTANT: The data dictionary is new in MysQL 8.0 - A data dictionary-enabled server entails some general operational differences compared to
# 				 previous MySQL releases.
#
# 				More details covered later.
#
# catalogs: Catalog information.
#
# character_sets: Information about available character sets.
#
# collations: Information about collations for each character set.
#
# column_statistics: Histogram statistics for column values.
#
# column_type_elements: Information about types used by columns.
#
# columns: Information about columns in tables.
#
# dd_properties: A table that identifies data dictionary properties, such as its version.
# 					  The server uses this to determine whether the data dictionary must be upgraded to a newer version.
#
# events: Information about Event Scheduler events. The server loads events listed in this table during its startup sequence,
# 			 unless started with the --skip-grant-tables option.
#
# foreign_keys, foreign_key_column_usage: Information about foreign keys.
#
# index_column_usage: Information about columns used by indexes.
#
# index_partitions: information about partitions used by indexes.
#
# index_stats: Used to store dynamic index statitics generated when ANALYZE_TABLE is executed.
#
# indexes: Information about table indexes.
#
# innodb_ddl_log: Stores DDL logs for crash-safe DDL operations.
#
# parameter_type_elements: Information about stored procedure and function parameters, and about return values for stored functions.
#
# parameters: Information about stored procedures and functions.
# 
# resource_groups: information about resource groups.
#
# routines: Information about stored procedures and functions.
#
# schemata: information about schemata. In MySQL, a schema is a database, so this table provides info about DBs.
#
# st_spatial_reference_systems: Information about available spatial reference systems for spatial data.
#
# table_partition_values: Information about values used by table partitions.
#
# table_partitions: Information about partitions used by tables.
#
# table_stats: Information about dynamic table statitics generated when ANALYZE_TABLE is executed.
#
# tables: Information about tables in DBs.
#
# tablespace_files: Information about files used by tablespaces.
#
# tablespaces: Information about active tablespaces.
#
# triggers: Information about triggers
#
# view_routine_usage: Information about dependencies between views and stored functions used by them.
#
# view_table_usage: Used to track dependencies between views and their underlying tables.
#
# Data dictionary tables are invisible. They cannot be read with SELECT, do not appear in the output of
# SHOW_TABLES, are not listed in the INFORMATION_SCHEMA.TABLES table, and so forth.
#
# However, in most cases there are corresponding INFORMATION_SCHEMA tables that can be queried.
# Conceptually, the INFORMATION_SCHEMA provides a view through which MySQL exposes data dictionary metadata.
#
# For example, you cannot select from the mysql.schemata table directly:
#
# 		SELECT * FROM mysql.schemata;
# 		ERROR 3554 (HY000): 	Access to data dictionary table 'mysql.schemata' is rejected.
#
# Instead, select that information from the corresponding INFORMATION_SCHEMA table:
#
# 		SELECT * FROM INFORMATION_SCHEMA.SCHEMATA\G
# 		*************************** 1. row *******************************
# 							CATALOG_NAME: def
# 							SCHEMA_NAME : mysql
# 		DEFAULT_CHARACTER_SET_NAME : utf8mb4
# 			DEFAULT_COLLATION_NAME  : utf8mb4_0900_ai_ci
# 							SQL_PATH    : NULL
# 		*************************** 2. row *******************************
# 							CATALOG_NAME: def
# 							SCHEMA_NAME : information_schema
# 		DEFAULT_CHARACTER_SET_NAME : utf8
# 			DEFAULT_COLLATION_NAME 	: utf8_general_ci
# 							SQL_PATH 	: NULL
#
# There is no INFORMATION_SCHEMA table that corresponds exactly to mysql.indexes, but INFORMATION_SCHEMA.STATISTICS contains
# much of the same information.
#
# As of yet, there are no INFORMATION_SCHEMA tables that correspond exactly to mysql.foreign_keys,
# mysql.foreign_key_column_usage.
#
# The standard SQL way to obtain foreign key information is by using the :
#
# INFORMATION_SCHEMA, REFERENTIAL_CONSTRAINTS and KEY_COLUMN_USAGE tables; 
#
# These tables are now implemented as views on the foreign_keys, foreign_key_column_usage,
# and other data dictionary tables.
#
# Some system tables from before MySQL 8.0 have been replaced by data dictionary tables and are 
# no longer present in the mysql system database:
#
# 		The events data dictionary table supersedes the event table from before MySQL 8.0
#
# 		The parameters and routines data dictionary tables together supersede the proc table from before MySQL 8.0
#
# GRANT SYSTEM TABLES
#
# These system tables contain grant information about user accounts and the privileges held by them.
# For additional information about the structure, contents and purpose - it is covered later.
#
# As of MySQL 8.0, the grant tables are InnoDB (transactional) tables.
# Previously, these were MyISAM (nontransactional) tables.
#
# The change of grant-table storage engine underlies an accompanying change in MySQL 8.0 to the
# behavior of account-management statements such as CREATE_USER and GRANT.
#
# Previously, an account-management statement that named multiple users could succeed for some 
# users and fail for others.
#
# The statements are now transactional and either succeed for all named users or roll back and 
# have no effect if any error occurs.
#
# NOTE: If MySQL is upgraded from an older version but the grant tables have not been upgraded from
# 		  MyISAM to InnoDB, the server considers them read only and account-management statements
# 	     produce an error.
#
# user: User accounts, global privs, and other non-privilege columns.
#
# global_grants: Assignments of dynamic global privileges to users
#
# db: Database-level privileges
#
# tables_priv: Table-level privileges
#
# columns_priv: Column-level privileges
#
# procs_priv: Stored procedure and function privileges
#
# proxies_priv: Proxy-user privileges
#
# default_roles: This table lists default roles to be activated after a user connects and authenticates, or executes SET_ROLE_DEFAULT
#
# role_edges: This table lists edges for role subgraphs
#
# 				  A given user table row might refer to a user account or a role.
#
# 				  The server can distinguish whether a row represents a user account, a role or both by
# 				  consulting the role_edges table for information about relations between authentication IDs.
#
# password_history: Information about password changes
#
# OBJECT INFORMATION SYSTEM TABLES
#
# These system tables contain information about stored programs, components, user-defined functions, and server-side plugins:
#
# 		component: The registry for server components. Any components listed in this table are installed by a loader service
# 					  during the server startup sequence.
#
# 		func: 	  Information about user-defined functions (UDFs).
# 					  The server loads UDFs listed in this table during its startup sequence, unless
# 					  started with the --skip-grant-tables option.
#
# 		plugin: 	  Information about server-side plugins.
# 					  The server loads plugins listed in this table during its startup sequence,
# 					  unless started with the --skip-grant-tables option.
#
# LOG SYSTEM TABLES
#
# The server uses these system tables for logging:
#
# 		general_log: The general query log table.
#
# 		slow_log: The slow query log table.
#
# Log tables use the CSV storage engine.
#
# SERVER-SIDE HELP SYSTEM TABLES
#
# These system tables contain server-side help information:
#
# 		help_category: Information about help categories.
#
# 		help_keyword: Keywords associated with help topics.
#
# 		help_relation: Mappings between help keywords and topics.
#
# 		help_topic: Help topic contents.
#
# TIME ZONE SYSTEM TABLES
#
# These system tables contain time zone information:
#
# 		time_zone: Time zone IDs and whether they use leap seconds.
#
# 		time_zone_leap_second: When leap seconds occur.
#
# 		time_zone_name: Mappings between time zone IDs and names.
#
# 		time_zone_transition,
# 		time_zone_transition_type: Time zone descriptions.
#
# REPLICATION SYSTEM TABLES
#
# The server uses these system tables to support replication:
#
# 		gtid_executed: Table for storing GTID values.
#
# 		ndb_binlog_index: Binary log information for NDB Cluster replication.
#
# 								The ndb_binlog_index table uses the MyISAM storage engine.
# 								It is created only if the server is built with NDB.
#
# 		slave_master_info, : Used to store replication information on slave servers.
# 		slave_relay_log_info,
# 		slave_worker_info 
#  
# OPTIMIZER SYSTEM TABLES
#
# These system tables are for use by the optimizer:
#
# 		innodb_index_stats, innodb_table_stats: Used for InnoDB persistent optimizer statistics.
#
# 		server_cost, engine_cost: The optimizer cost model uses tables that contain cost estimate 
# 										  information about operations that occur during query execution.
#
# 										  server_cost contains optimizer cost estimates for general server operations.
#
# 										  engine_cost contains estimates for operations specific to particular storage engines.
#
# MISC SYSTEM TABLES
#
# 		Other system tables do not fit the preceding categories:
#
# 			audit_log_filter, audit_log_user: If MySQL Enterprise Audit is installed, these tables provide persistent storage
# 														 of audit log filter defs and user accounts.
#
# 			firewall_users, firewall_whitelist: If MySQL Enterprise Firewall is installed, these tables provide persistent storage for info
# 															used by the firewall.
#
# 			servers: Used by the FEDERATED storage engine.
#
# 			innodb_dynamic_metadata: Used by the InnoDB storage engine to store fast-changing table metadata such as auto-increment counter
# 											 value and index tree corruption flags.
#
# 											 Replaces the data dictionary buffer table that resided in the InnoDB system tablespace.
#
# The following section pertains to MySQL Server Logs
#
# MySQL Server has several logs that can help you find out what activity is taking place.
#
# Log Type 					Info Written to Log
#
# Error Log 					Problems encountered starting, running or stopping mysqld
#
# General query log 			Established client connections and statements received from clients
#
# Binary log 					Statements that change data (also used for replication)
#
# Relay log 					Data changes received from a replication master server
#
# Slow query log 				Queries that took more than long_query_time seconds to execute
#
# DDL log (metadata log) 	Metadata operations performed by DDL statements
#
# By default, no logs are enabled, except the error log on Windows.
# (The DDL log is always created when required, and has no user-configurable options)
#
# The following log-specific sections provide information about the server options that enable logging.
#
# By default, the server writes files for all enabled logs in the data directory.
#
# You can force the server to close and reopen the log files (or in some cases switch to a new log file)
# by flushing the logs.
#
# Log flushing occurs when you issue a FLUSH_LOGS statement; execute mysqladmin with a flush-logs or
# or refresh argument; or execute mysqldump with a --flush-logs or --master-data option.
#
# In addition, the binary log is flushed when its size reaches the value of the max_binlog_size SYS_VAR.
#
# You can control the general query and slow query logs during runtime.
# You can enable or disable logging, or change the log file name.
#
# You can tell the server to write general query and slow query entries to log tables, log files or both.
#
# The relay log is used only on slave replication servers, to hold data changes from the master server that must
# also be made on the slave.
#
# Covered later.
#
# THE FOLLOWING PERTAINS TO SELECTING GENERAL QUERY LOG AND SLOW QUERY LOG OUTPUT DESTINATIONS
#
# MySQL Server provides flexible control over the destination of output written to the general query log and the slow query log, if those logs are enabled.
#
# Possible destinations for log entries are log files or the general_log and slow_log tables in the mysql system DB.
# File output, table output, or both can be selected.
#
# LOG CONTROL AT SERVER STARTUP
#
# The log_output system variable specifies the destination for log output. Setting this variable does not in itself enable the logs;
# they must be enabled separately.
#
# 		If log_output is not specified at startup, the default logging destination is FILE.
#
# 		If log_output is specified at startup, its value is a list one or more comma-separated words chosen from TABLE (log to tables),
# 		FILE (log to files), or NONE (do not log tables or files).
#
# 		NONE, if part of the list, has the highest precidence.
#
# The general_log SYS_VAR controls logging to the general query log for the selected log destinations.
# If specified at server startup, general_log takes an optional argument of 1 or 0 to enable or disable the log.
#
# To specify a file name other than the default for file logging, set the general_log_file variable.
#
# Similarly, the slow_query_log variable controls logging to the slow query log for the selected destinations
# and setting slow_query_log_file specifies a file name for file logging.
#
# If either log is enabled, the server opens the corresponding log file and writes startup messages to it.
#
# However, further logging of queries to the file does not occur unless the FILE log destination is selected. 
#
# Examples:
#
# 		To write general query log entries to the log table and the log file, use --log_output=TABLE,FILE to select both
# 		log destinations and --general_log to enable the general query log.
#
# 		To write general and slow query log entries only to the log tables, use --log_output=TABLE to select tables as the log
# 		destinations and --general_log and --slow_query_log to enable both logs.
#
# 		To write slow query log entries only to the log file, use --log_output=FILE to select files as the log destination and
# 		--slow_query_log to enable the slow query log. In this case, because the default log destination is FILE, you could omit the log_output setting.
#
# LOG CONTROL AT RUNTIME
#
# The system variables associated with log tables and files enable runtime control over logging:
#
# 		The log_output variable indicates the current logging destination. It can be modified at runtime to change
# 		the destination.
#
# 		The general_log and slow_query_log variables indicate whether the general query log and slow query log are enabled
# 		(ON) or disabled (OFF). You can set these variables at runtime to control whether the logs are enabled.
#
# 		The general_log_file and slow_query_log_file variables indicate the names of the general query log and slow query log files.
# 		You can set these variables at server startup or at runtime to change the names of the log files.
#
# 		To disable or enable general query logging for the current session, set the session sql_log_off variable to ON or OFF.
# 		(Assuming the general query log itself is enabled)
#
# LOG TABLE BENEFITS AND CHARACTERISTICS
#
# The use of tables for log output offers the following benefits:
#
# 		1) Log entries have a standard format. To display the current structure of the log tables, use these statements:
#
# 				SHOW CREATE TABLE mysql.general_log;
# 				SHOW CREATE TABLE mysql.slow_log;
#
# 		2) Log contents are accessible through SQL statements. This enables the use of queries that selects only those log entries
# 			that satisfy specific criteria.
#
# 			For example, to select log contents associated with a particular client (which can be useful for identifying problematic
# 			queries from that client), it is easier to do this using a log table than a log file.
#
# 		3) Logs are accessible remotely through any client that can connect to the server and issue queries (if the client has the appropiate
# 			log table privileges). It is not necessary to log in to the server host and directly access the file system.
#
# The log table implementation has the following characteristics:
#
# 		1) In general, the primary purpose of log tables is to provide an interface for users to observe the runtime execution of the server,
# 			not to interfere with its runtime execution.
#
# 		2) CREATE_TABLE, ALTER_TABLE and DROP_TABLE are valid operations on a log table. 
# 			For ALTER_TABLE and DROP_TABLE, the log table cannot be in use and must be disabled.
#
# 		3) By default, the log tables use the CSV storage engine that writes data in comma-separated values format.
#
# 			For users who have access to the .CSV files that contain log table data, the files are easy to import into
# 			other programs such as spreadsheets that can process CSV input.
#
# 			The log tables can be altered to use the MyISAM storage engine. You cannot use ALTER_TABLE to alter a log table
# 			that is in use.
#
# 			The log must be disabled first. No engines other than CSV or MyISAM are legal for the log tables.
#
# 				Log Tables and "Too many open files" Errors: If you select TABLE a log destination and the log tables use the CSV storage engine,
# 																			you may find that disabling and enabling the general query log or slow query log repeatedly at runtime
# 																			can open a number of open file descriptors for the .CSV file, possibly resulting in a "Too many open files" error.
#
# 																			To work around this issue, execute FLUSH_TABLES or ensure that the value of open_files_limit is greater than
# 																			the value of table_open_cache_instances.
#
# 		4) To disable logging so that you can alter (or drop) a log table, you can use the following strategy.
# 			The example uses the general query log; the procedure for the slow query log is similar but uses the slow_log table
# 			and slow_query_log SYS_VAR.
#
# 				SET @old_log_state = @@GLOBAL.general_log;
# 				SET GLOBAL general_log = 'OFF';
# 				ALTER TABLE mysql.general_log ENGINE = MyISAM;
# 				SET GLOBAL general_log = @old_log_state;
#
# 		5) TRUNCATE_TABLE is a valid operation on a log table. It can be used to expire log entries.
#
# 		6) RENAME_TABLE is a valid operation on a log table. You can automatically rename a log table (to perform log rotation, for example)
# 			using the following strategy:
#
# 			USE mysql;
# 			DROP TABLE IF EXISTS general_log2;
# 			CREATE TABLE general_log2 LIKE general_log;
# 			RENAME TABLE general_log TO general_log_backup, general_log2 TO general_log;
#
# 		7) CHECK_TABLE is a valid operation on a log table.
#
# 		8) LOCK_TABLES cannot be used on a log table.
#
# 		9) INSERT, DELETE and UPDATE cannot be used on a log table. These operations are permitted only internally to the server itself.
#
# 		10) FLUSH_TABLES_WITH_READ/LOCK and the state of the read_only SYS_VAR have no effect on log tables.
# 			 The server can always write to the log tables.
#
# 		11) Entries written to the log tables are not written to the binary log and thus are not replicated to slave servers.
#
# 		12) To flush the log tables or log files, use FLUSH_TABLES or FLUSH_LOGS, respectively.
#
# 		13) Partitioning of log tables is not permitted.
#
# 		14) A mysqldump dump includes statements to recreate those tables so that they are not missing after reloading the dump file. Log table contents are not dumped.
#
# The following section pertains to The Error Log:
#
# This section discusses how to configure the MySQL server for logging of diagnostic messages to the error log.
# For information about selecting the error message character set or language - it is covered later.
#
# The error log contains a record of mysqld startup and shutdown times.
#
# It also contains diagnostic messages such as errors, warnings and notes that occur during
# server startup and shutdown, and while the server is running. 
#
# For example, if mysqld notices that a table needs to be automatically checked or repaired, it writes
# a message to the error log.
#
# On some OS's the error log contains a stack trace if mysqld exits abnormally.
#
# The trace can be used to determine where mysqld exited.
#
# If used to start mysqld, mysqld_safe may write messages to the error log.
#
# For example, when mysqld_safe notices abnormal mysqld exits, it restarts mysqld
# and writes a mysqld restarted message to the error log.
#
# The following sections are configurations of error logging.
#
# The following section covers Error Log Component Configuration:
#
# In MySQL 8.0, error logging uses the MySQL component architechture since before.
#
# The error log subsystem consists of components that perform log event filter and writing,
# as well as a system variable that configures which components to enable to achieve the desired logging result.
#
# This section is for selecting components for error logging.
# For instructions specific to the system log and JSON log writers - it is covered later.
#
# Component-based error logging offers these features:
#
# 		Log events can be filtered by filter components to affect the information available for writing.
#
# 		Log events are output by sink (writer) components. Multiple sink components can be enabled, to write error log output to multiple destinations.
#
# 		Built-in filter and writer components combine to implement the default error logging format.
#
# 		A loadable writer enables logging to the system log.
#
# 		A loadable writer enables logging in JSON format.
#
# 		System variables control which log components to enable and the rules for filtering log events.
#
# The log_error_services SYS_VAR controls which log components to enable for error logging.
# The variable may contain a list with 0,1 or many elements.
#
# In the latter case, elements may be delimieted by ; or , (>= MySQL 8.0.12), optionally followed by a space.
#
# A given setting cannot use both semicolon and comma separators.
#
# Component order is significant because the server executes components in the order listed.
#
# By default, log_error_services has this  value:
#
# 		SELECT @@GLOBAL.log_error_services;
# 		+---------------------------------------+
# 		| @@GLOBAL.log_error_services 	  		 |
# 		+---------------------------------------+
# 		| log_filter_internal; log_sink_internal|
# 		+---------------------------------------+
#
# That value indicates that log events first pass through the built-in filter component, log_filter_internal,
# then through the built-in log writer component, log_sink_internal.
#
# A filter modifies log events seen by components named later in the log_error_services value.
# A sink is a destination for log events. 
#
# Typically, a sink processes log events into log messages that have a particular format and writes these
# messages to its associated output, such as file or the system log.
#
# NOTE:
#
# 		If log_error_services is assigned a value that contains no writer components, no log output is written from that point.
#
# 		The final component in the log_error_services value should be a writer. If the final component is a filter, it has no effect
# 		because the filtered events are not sent to any writer.
#
# The combination of log_filter_internal and log_sink_internal implements the default error log filtering and output behavior.
# The action of these components is affected by other server options and system variables:
#
# 		1) The output destination is determined by the --log-error option (and, on Windows --pid-file and --console).
# 			These determine whether to write error messages to the console or a file and - if to a file - the error log file name.
#
# 		2) The log_error_verbosity SYS_VAR affects which types of log events log_filter_internal permits or suppresses.
#
# To change the set of log components used for error logging, load components as necessary and modify the log_error_services value.
#
# Adding or removing log components is subject to these constraints:
#
# 		3) To enable a log component, first load it using INSTALL_COMPONENT (unless it is built in or already loaded), then list the component in the
# 			log_error_service value.
#
# 			For a component to be permitted in the log_error_services value - it must be known.
#
# 		 	A component is known by default if it is built in or if it is loadable and has been loaded
# 			using INSTALL_COMPONENT.
#
# 			Attempts to name an unknown component at server startup cause log_error_services to be set to its default value.
# 			Attempts to name an unknown component at runtime produces an error and the log_error_services value remains unchanged.
#
# 		4) To disable a log component, remove it from the log_error_services value. Then, if the component is loadable and you also
# 			want to unload it, use UNINSTALL COMPONENT.
#
# 			Attempts to use UNINSTALL_COMPONENT to unload a loadable component that is still named in the log_error_services value produces an error.
#
# For example, to use the system log writer (log_sink_syseventlog) instead of the default writer (log_sink_internal) - first load the writer component,,
# then modify the log_error_services values:
#
# 		INSTALL COMPONENT 'file://component_log_sink_syseventlog';
# 		SET GLOBAL log_error_services = 'log_filter_internal; log_sink_syseventlog';
#
# NOTE: 
#
# 		The URN to use for loading a log component with INSTALL_COMPONENT is the component name prefixed with file://component_
#
# 		For example, for the log_sink_syseventlog component, the corresponding URN is file://component_log_sink_syseventlog
#
# It is possible to configure multiple log writers to send output to multiple destinations.
#
# To enable the sys log writer in addition to (rather than instead of) the default writer - set the log_error_services as:
#
# 		SET GLOBAL log_error_services = 'log_filter_internal; log_sink_internal; log_sink_syseventlog';
#
# To revert to using only the default writer and unload the system log writer, execute these statements:
#
# 		SET GLOBAL log_error_services = 'log_filter_internal; log_sink_internal;
# 		UNINSTALL COMPONENT 'file://component_log_sink_syseventlog';
#
# To configure a log component to be enabled at each server startup, use this procedure:
#
# 		1) If the component is loadable, load it using INSTALL_COMPONENT. Loading the component registers it in the mysql.component
# 			system table that the server loads it automatically for subsequent startups.
#
# 		2) Set the log_error_services value at startup to include the component name.
#
# 			Set the value either in the server my.cnf file, or use SET_PERSIST - which sets the value for for the running MySQL instance
# 			and also saves the value to be used for subsequent server restarts.
#
# 			A value set in my.cnf takes effect at the next restart. A value set using SET_PERSIST takes effect immediately and for subsequent restarts.
#
# Suppose that you want to configure, for every server startup, use of the JSON log writer (log_sink_json) in addition to the built-in log filter and
# writer (log_filter_internal, log_sink_internal).
#
# First load the JSON Writer if it is not loaded:
#
# INSTALL COMPONENT 'file://component_log_sink_json';
#
# Then set log_error_services to take effect at server startup. You can set it in my.cnf:
#
# [mysqld]
# log_error_services='log_filter_internal; log_sink_internal; log_sink_json'
#
# Or you can set it using SET_PERSIST:
#
# SET PERSIST log_error_services = 'log_filter_internal; log_sink_internal; log_sink_json';
#
# The order of components named in log_error_services is significant, particularly with respect to the 
# relative order of filters and writers. Consider this log_error_services value:
#
# log_filter_internal; log_sink_1; log_sink_2
#
# In this case, log events pass to the built-in filter, then to the first writer, then to the second writer.
# Both writers receive filtered log events.
#
# Compare that to this log_error_services value:
#
# 		log_sink_1; log_filter_internal; log_sink_2
#
# In this case, the only is only applied to the output before being piped to the second writer.
# i.e, sink_1 is unfiltered, sink_2 is filtered.
#
# The following section pertains to DEFAULT ERROR LOG DESTINATION CONFIGURATION
#
# This section discusses which server options configure the default error log destination, which can be the console 
# or a named file.
#
# It also indicates which log writer components base their own output destination on the default destination.
#
# In this discussion, "console" means stderr, the standard error output.
#
# This is your terminal or console window unless the standard error output has been redirected.
#
# The server interprets options that determine the default error log destination somewhat differently for Windows and Unix systems.
# Be sure to configure the destination using the information appropiate to your OS.
#
# After the server interprets the default error log destination options, it sets the log_error SYS_VAR to indicate the default destination,
# which affects where several log writer components writer error messages.
#
# The following section pertains to Default Error Log Destination on Windows
#
# On Windows, mysqld uses the --log-error, --pid-file and --console options to determine whether the default error log destination
# is the console or a file and if a file , the file name:
#
# 		If --console is given, the default destination is the console (--console takes precedence over --log-error if both are given, and the following
# 																							items regarding --log-error do not apply)
#
# 		If --log-error is not given, or is given without naming a file, the default destination is a file named <host_name.err> in the data directory,
# 		unless the --pid-file option is specified. In that case, the file name is the PID file base name with a suffix of .err in the data dir.
#
# 		If --log-error is given to name a file, the default destination is that file (with an .err suffix added if the name has no suffix), located
# 		under the data directory unless an absolute path name is given to specify a different location.
#
# If the default error log destination is the console, the server sets the log_error SYS_VAR to stderr.
# Otherwise, the default destination is a file and the server sets log_error to the file name.
#
# The following pertains to Default Error Log Destination on Unix and Unix-Like Systems
#
# On Unix and Unix-like systems, mysqld uses the --log-error option to determine whether the default error log destination
# is the console or a file - and, if a file - the file name
#
# 		If --log-error is not given, the default destination is the console.
#
# 		If --log-error is given without naming a file, the default destination is a file named <host_name.err> in the data dir.
#
# 		If --log-error is given to name a file, the default destination is that file (with an .err suffix added if the name has no suffix),
# 		located under the data dir unless an absolute path name is given to specify a different location.
#
# 		If --log-error is given an option file in a [mysqld], [server], or [mysqld_safe] section, mysqld_safe finds and uses the option, and passes it to mysqld.
#
# 			NOTE:
#
# 				It is common for Yum or APT package installations to configure an error log file location under /var/log with an option like log-error=/var/log/mysqld.log
# 				in a server configuration file.
#
# 				Removing the file name from the option causes the <host_name.err> file in the data directory to be used.
#
# If the default error log destination is the console, the server sets the log_error SYS_VAR to stderr. Otherwise, the default destination is a file and
# the server sets log_error to the file name.
#
# HOW THE DEFAULT ERROR LOG DESTINATION AFFECTS LOG WRITERS
#
# After the server interprets the error log destination configuration options, it sets the log_error SYS_VAR to indicate the
# default error log destination.
#
# Log writer components may base their own output destination on the log_error value, or determine their destination independently of log_error.
#
# If log_error is stderr, the default error log destination is the console, and log writers that base their output destination also write to the
# console:
#
# 		log_sink_internal, log_sink_json, log_sink_test: These writers write to the console.
#
# 																		 This is true even for writers such as log_sink_json that can be enabled multiple times; all instances write to the console.
#
# 		log_sink_syseventlog: This writer writes to the system log, regardless of the log_error value.
#
# If log_error is not stderr, the default error log destination is a file and log_error indicates the file name.
#
# Log writers that base their output destination on the default destination base output file naming on that file name.
#
# (A writer might use exactly that name, or it might use some variant thereof). Suppose that the log_error value <file_name>.
# Then log writers use the name like this:
#
# 		log_sink_internal, log_sink_test: These writers write to <file_name>
#
# 		log_sink_json: Successive instances of this writer named in the log_error_services value 	write to files named <file_name> plus a numbered .<NN>.json suffix:
#			
# 			<file_name>.00.json, <file_name>.01.json and so forth
#
# 		log_sink_syseventlog: This writer writes to the system log, regardless of the log_error value.
#
# The following section pertains to the Error Logging to the System Log
#
# It is possible to have mysqld write the error log to the system log (the Event Log on Windows, and syslog on Unix and Unix-like systems)
#
# This section describes how to configure error logging using the built-in filter, log_filter_internal, and the system log writer,
# log_sink_syseventlog - to take effect immediately and for subsequent server startups.
#
# To enable the system log writer, first load the writer component, then modify the log_error_services value:
#
# 		INSTALL COMPONENT 'file://component_log_sink_syseventlog';
# 		SET GLOBAL log_error_services = 'log_filter_internal; log_sink_syseventlog';
#
# To set log_error_services to take effect at server startup - use earlier sectioning desc.
#
# Those instructions apply to other error-logging SYS_VARs as well.
#
# NOTE:
#
# 		For MySQL 8.0 configuration, you must enable error logging to the system log explicitly.
#
# 		This differs from 5.7 MySQL and earlier, for which error logging to the sys log is enabled by default on Windows,
# 		and on all platforms requires no component loading.
#
# 		Error logging to the system log may require additional SYS_CONFIG.
#
# On Windows, error messages written to the Event Log within the Application log have these characteristics:
#
# 		Entries marked as Error, Warning, and Note are written to the Event Log, but not messages such as information statements from
# 		individual storage engines.
#
# 		Event Log entries have a source of MySQL (or MySQL-<tag> if syseventlog.tag is defined as <tag>)
#
# On Unix and Unix-like systems, logging to the system log uses syslog.
# The following SYS_VARs affect syslog messages:
#
# 		syseventlog.facility - The default facility for syslog messages is daemon. Set this variable to specify a different facility.
#
# 		syseventlog.include_pid - Whether to include the server process ID in each line of syslog output.
#
# 		syseventlog.tag - This variable defines a tag to add to the server identifier (mysqld) in syslog messages.
# 								If defined, the tag is appended to the identifier with a leading hyphen.
#
# 			NOTE: Prior to MySQL 8.0.13, use the log_syslog_facility, log_syslog_include_pid and log_syslog_tag SYS_VAR rather than
# 					the syseventlog.<xxx> variables.
#
# MySQL uses the custom label "System" for important system messages about non-error situations, such as startup, shutdown and some significant
# changes to settings.
#
# In logs that do not support custom labels, including the Event Log on Windows, and syslog on Unix and Unix-like systems, system messages
# are assigned the label used for the information level of severity.
#
# However, these messages are printed to the log even if the MySQL log_error_verbosity setting would normally exclude
# messages at the information level.
#
# When a log writer must fall back to a label of "Information" instead of "System" in this way, and the log event is further
# processed outside of the MySQL server (for example, filtered or forwarded by a syslog configuration), these events may
# by default be processed by the secondary application as being of "Information" severity rather than "System" severity.
#
# The following section pertains to Error Logging in JSON Format:
#
# This section describes how to configure error logging using the built-in filter, log_filter_internal, and the JSON writer, log_sink_json to take
# effect immediately and  for subsequent server startups.
#
# To enable the JSON writer, first load the writer component, then modify the log_error_services value:
#
# 		INSTALL COMPONENT 'file://component_log_sink_json';
# 		SET GLOBAL log_error_services = 'log_filter_internal; log_sink_json';
#
# It is permitted to name log_sink_json multiple times in the log_error_services value.
#
# For example, to write unfiltered events with one instance and filtered events with another instance,
# you could set log_error_services like this:  		
#
# 		SET GLOBAL log_error_services = 'log_sink_json; log_filter_internal; log_sink_json';
#
# The JSON log writer determines its output destination based on the default error log destination, which is given by
# the log_error SYS_VAR.
#
# If log_error names a file, the JSON writer bases output file naming on that file name, plus a numbered .<NN>.json suffix,
# with <NN> starting at 00.
#
# For example, if log_error is <file_name> - successive instances of log_sink_json named in the log_error_services value 
# write to <file_name>.00.json, <file_name>.01.json and so forth.
#
# If log_error is stderr, the JSON writer writes to the console.
#
# If log_json_writer is named multiple times in the log_error_services value, they all write
# to the console which is likely not useful.
#
# The following section pertains to Error Log Filtering:
#
# Error log configuration normally includes one log filter component and one or more log writer component.
# For error log filtering, MySQL offers a choice of components:
#
# 		log_filter_internal: This filter component provides error log filtering based on log event prio, in combination with
# 									the log_error_verbosity SYS_VAR.
#
# 									log_filter_internal is built in and enabled by default.
#
# 		log_filter_dragnet: 	This filter component provides error log filtering based on user-supplied rules, in combination
# 									with the dragnet.log_error_filter_rules SYS_VAR.
#
# log_filter_internal: Priority-Based Error Log Filtering
#
# 		Error log verbosity control is a simple form of log filtering based on error event prio.
# 		It is implemented by the log_filter_internal log filter component.
#
# 		To affect how log_filter_internal is built in and enabled by default, but if disabled, changes to log_error_verbosity has no effect.
#
# 		Permitted log_error_verbosity values are 1 (errors only), 2 (errors and warnings), 3 (errors, warnings and notes)
#
# 		If log_error_verbosity is set to >= 2, the server logs messages about statements that are unsafe for statement-based logging.
# 		If the value is 3, the server logs aborted connections and access-denied errors for new connection attempts.
#
# 		If you use replication, setting log_error_verbosity to >= 2 is recommended, to get more info about what is happening, such as messages
# 		about network failures and reconnections.
#
# 		If a slave server has log_error_verbosity >= 2, the slave prints messages to the error log to provide information about its status, such as
# 		the binary log and relay log coordinates where it starts its job, when it is switching to another relay log, when it reconnects after a DC, etc.
#
# 		Selected important system messages about non-error situations are printed to the error log regardless of the log_error_verbosity value.
# 		These messages include startup and shutdown messages, and some significant changes to settings.
#
# 		In the MySQL error log, system messages are labeled as "System". Other log writers might or might not follow the same convention,
# 		and in the resulting logs, system messages might be assigned the label used for the information level of severity, such as "Note"
# 		or "Information".
#
#		If you apply any additional filtering or redirection for logging based on the labeling of messages, system messages do not override
# 		your filter, but are handeled by it in the same way as other messages.
#
# log_filter_dragnet: Rule-Based Error Log Filtering
#
#		The log_filter_dragnet log filter component enables log filtering based on user-defined rules.
# 		To define the applicable rules, set the dragnet.log_error_filter_rules SYS_VAR.
#
# 		To enable the log_filter_dragnet filter, first load the filter component, then modify the log_error_services value.
# 		The following example enables log_filter_dragnet in combination with the built-in log writer:
#
# 			INSTALL COMPONENT 'file://component_log_filter_dragnet';
# 			SET GLOBAL log_error_services = 'log_filter_dragnet; log_sink_internal';
#
# 		To set log_error_services to take effect at server startup, see earlier notes.
#
# 		With log_filter_dragnet enabled, define its filter rules by setting the dragnet.log_error_filter_rules SYS_VAR.
# 		A rule set consists of zero or more rules, where each rule is an IF statement terminated by a period (.) char.
#
# 		If the var value is empty (zero rules), no filtering occurs.
#
# 		Example 1.
#
# 			This rule set drops information events, and, for other events, removes the source_line field:
#
# 				SET GLOBAL dragnet.log_error_filter_rules = 
# 					'IF prio>=INFORMATION THEN drop. IF EXISTS source_line THEN unset source_line.';
#
# 			This effect is similar to the filtering performed by the log_sink_internal filter with a setting of
# 			log_error_verbosity=2
#
# 		Example 2.
#
# 			This rule limits information events to no more than one per 60 seconds:
#
# 				SET GLOBAL dragnet.log_error_filter_rules = 
# 					'IF prio>=INFORMATION THEN throttle 1/60.';
#
# Once you have the filtering configuration set up, consider assignment dragnet.log_error_filter_rules using SET_PERSIST rather than
# the SET_GLOBAL to make the setting persist across server restarts.
#
# Alternatively, add the setting to the server option file.
#
# To stop using the filtering language, first remove it from the set of error logging components. Usually this means using a
# different filter component rather than no filter component.
#
# For example:
#
# 		SET GLOBAL log_error_services = 'log_filter_internal; log_sink_internal';
#
# Again, consider using SET_PERSIST rather than SET_GLOBAL to make the settings persist across server restarts.
#
# Then uninstall the filter log_filter_dragnet component:
#
# 		UNINSTALL COMPONENT 'file://component_log_filter_dragnet';
#
# THe following section describes aspects of log_filter_dragnet operation in more detail:
#
# 		log_filter_dragnet Rule language
#
# 		log_filter_dragnet Rule Actions
#
# 		log_filter_dragnet Rule Fields
#
# log_filter_dragnet Rule Language
#
# The following grammar defines the language for log_filter_dragnet filter rules.
# Each rule is an IF statement terminated by a (.) char.
#
# The language is not case sensitive:
#
# rule:
# 		IF condition THEN action
# 		[ELSEIF condition THEN action] ...
# 		[ELSE action]
#
# condition: 	{
# 		drop
# 	| throttle {count | count / window_size}
# 	| set field [:= | =] value
# 	| unset [field]
# }
#
# field: {
# 		core_field
# 	| optional_field
# 	| user_defined_field
# }
#
# 
# core_field: {
# 		time
# 	| msg
# 	| prio
# 	| label
# 	| err_code
# 	| err_symbol
# 	| SQL_state
# 	| subsystem
# }
#
# optional_field: {
# 		OS_errno
# 	 | OS_errmsg
# 	 | user
# 	 | host
# 	 | thread
# 	 | query_id
# 	 | source_file
# 	 | source_line
# 	 | function
# }
#
# user_defined_field:
# 		sequence of characters in [a-zA-Z0-9_] class
#
# comparator: {== | != | <> | >= | => | <= | =< | < | >}
#
# value: {
# 		string_literal
# 	 | integer_literal
# 	 | float_literal
# 	 | error_symbol
# 	 | severity
# }
#
# count: integer_literal
# window_size: integer_literal
#
# string_literal:
# 		sequence of characters quoted as '...' or "..."
#
# integer_literal:
# 		sequence of characters in [0-9] class
#
# float_literal:
# 		integer_literal[.integer_literal]
#
# error_symbol:
# 		valid MySQL error symbol such as ER_ACCESS_DENIED_ERROR or ER_STARTUP
#
# severity: {
# 		ERROR
# 	 | WARNING
# 	 | INFORMATION
# }
#
# Simple conditions compare a field to a value or test field existence.
# To construct more complex conditions, use the AND and OR operators.
#
# Both operators have the same precedence and evaluate left to right.
#
# To escape a character within a string, precede it with \.
# A backslash is required to include \ or the string-quoting char, optional for othe chars.
#
# For convenience, log_filter_dragnet supports symbolic names for comparisons to certain fields.
# Where applicable, symbols are preferable to numeric - for readability and portability.
#
# 		) Event severity values 1,2 and 3 can be specified as ERROR, WARNING , and INFORMATION.
# 		  Severity symbols are recognized only in comparisons with the prio field.
#
# 		  These comparisons are equivalent:
#
# 				IF prio == INFORMATION THEN ...
# 				IF prio == 3 THEN ...

# 		) Error codes can be specified in numeric form or as the corresponding error symbol.
#
# 		  For example, ER_STARTUP is the symbolic name for error 1408, so these comparisons are eqv.:
#
# 				IF err_code == ER_STARTUP THEN ...
# 				IF err_code == 1408 THEN ...
#
# Error symbols are recognized only in comparisons with the err_code field and user-defined fields.
#
# To find hte error symbol corresponding to a given error code number:
#
# 		Use the perror command, which when given an error number argument, displays info about the error, including its symbol.
#
# Suppose that a rule set with error numbers looks like this:
#
# 		IF err_code == 10927 OR err_code == 10914 THEN drop.
# 		If err_code == 1131 THEN drop.
#
# Using perror, determine the error symbols:
#
# 		perror 10927 10914 1131
# 		MySQL error code MY-010927 (ER_ACCESS_DENIED_FOR_USER_ACCOUNT_LOCKED)::
# 		Access denied for user '%-.48s'@'%-.64s'. Account is locked.
# 		MySQL error code MY-010914 (ER_ABORTING_USER_CONNECTION):
# 		Aborted connection %u to db: '%-.192s' user: '%-.48s' host:
# 		'%-.64s' (%-.64s).
# 		MySQL error code MY-001131 (ER_PASSWORD_ANONYMOUS_USER):
# 		You are using MySQL as an anonymous user and anonymous users are not allowed to change PWs.
#
# Substituting error symbols for numbers, the rule set becomes:
#
# 		IF err_code == ER_ACCESS_DENIED_FOR_USER_ACCOUNT_LOCKED
# 			OR err_code == ER_ABORTING_USER_CONNECTION THEN drop.
# 		IF err_code == ER_PASSWORD_ANONYMOUS_USER THEN drop.
#
# Symbolic names can be specified as quoted strings for comparison with string fields, but in such cases
# the names are strings that have no special meaning and log_filter_dragnet does not resolve them to
# the corresponding numeric value.
#
# Also, typos may go undetected, whereas an error is thrown immediately on SET for attempts to use an unquoted
# symbol unknown to the server.
#
# LOG_FILTER_DRAGNET RULE ACTIONS
#
# log_filter_dragnet supports these actions in filter rules:
#
# 		drop: Drop the current log event (do not log it)
#
# 		throttle: apply rate limiting to reduce log verbosity for events matching particular conditions.
# 					 The argument indicates a rate, in the form <count> or <count>/<window_size>.
#
# 					The <count> value indicates the permitted number of events to log per time window.
# 					The <window_size> value is the time window in seconds; if omitted, the default window is 60 seconds.
#
# 					Both values must be integer literals.
#
# 					This rule throttles plugin-shutdown messages to 5/60 sec:
#
# 						IF err_code == ER_PLUGIN_SHUTTING_DOWN_PLUGIN THEN throttle 5.
#
# 					This rule throttles errors and warnings to 1000/hour and information messages to 100/hour:
#
# 						IF prio <= INFORMATION THEN throttle 1000/3600 ELSE throttle 100/3600.
#
# 		set: Assign a value to a field (and cause the field to exist if it did not already).
# 			  In subsequent rules, EXISTS tests against the field name are true, and the new value can
# 			  be tested by comparison conditions.
#
# 		unset: Discard a field. In subsequent rules, EXISTS tests against hte field name are false and comparisons of the field against
# 				 any value are false.
#
# 				 In the case that the condition refers to exactly one field name, the field name following unset is optional and
# 				 unset discards the named field..
#
# 				 These rules are equivalent:
#
# 						IF myfield == 2 THEN unset myfield.
# 						IF myfield == 2 THEN unset.
#
# LOG_FILTER_DRAGNET RULE FIELDS
#
# 		log_filter_dragnet supports core, optional and user-defined fields in rules:
#
# 			1) A core field is set up automatically for error events. However, its presence in the event is not guaranteed because
# 			a core field, like any type of field, may be unset by filter rules.
#
# 			If so, the field will be found missing by later rules within the rule set and by components that execute after the filter (such as log writers)
#
# 			2) An optional field is normally absent but may be present for certain event types. When present, an optional field provides additional event 
# 				information as appropriate and available.
#
# 			3) A user-defiend field is any field with a name that is not already defined as a core or optional field.
# 				A user-defined label does not exist until created with the <set> action.
#
# 		As implied by the preceding desc., any given field may be absent, either because it was not present or discarded by a filtering rule.
#
# 		For log writers, the effect of field absence is writer specific. For example, a writer might omit the field from the log message,
# 		indicate that the field is missing or substitute a default.
#
# 		When in doubt, use a filter rule to unset the field, then check what the log writer does with it.
#
# 		These fields are core fields:
#
# 			time
#
# 				The event timestamp
#
# 			msg
#
# 				THe event message string
#
# 			prio
#
# 				The event priority, to indicate error, warning or note/information event. This field corresponds to severity in syslog.
#
# 				In comparisons, each prio can be specified as a symbolic severity name or an integer literal.
# 				Severity symbols are recognized only in comparisons with the prio field.
#
# 				These comparisons are equivalent:
#
# 					IF prio == INFORMATION THEN ...
# 					IF prio == 3 THEN ...
#
# 				The prio levels are:
#
# 					Error events: 1, Warning events: 2, Note/information events: 3
#
# 				Prio values follow hte principle that higher prios have lower values, and vice versa.
# 				Prio values begin at 1 for the most severe events (errors) and increase for events with decreasing severity.
#
# 				For example, to discard events with lower prio than warnings, test for prio values higher than WARNING:
#
# 					IF prio > WARNING THEN drop.
#
# 				The following shows the log_filter_dragnet rules to achieve an effect similar to each log_error_verbosity
# 				value permitted by the log_filter_internal filter:
#
# 					Errors only (log_error_verbosity=1):
#
# 						IF prio > ERROR THEN drop.
#
# 					Errors and Warnings (log_error_verbosity=2):
# 
# 						IF prio > WARNING THEN drop.
#
# 					Errors, warnings and notes (log_error_verbosity=3):
#
# 						IF prio > INFORMATION THEN drop.
#
# 					This rule can actually be omitted because it drops nothing.
#
# err_code
#
# 		The numeric event error code. In comparisons, the value to test can be specified as a symbolic error name or an 
# 		integer literal.
#
# 		Error symbols are recognized only in comparisons with the err_code field and user-defined roles.
#
# 		These comparisons are equal:
#
# 			IF err_code == ER_ACCESS_DENIED_ERROR THEN ...
# 			IF err_code == 1045 THEN ...
#
# err_symbol
#
# 		The event error symbol, as a string; for example, 'ER_DUP_KEY'
#
# 		err_symbol values are intended more for identifying particular lines in log output than for use in filter
# 		rule comparisons because log_filter_dragnet does not resolve comparison values specified as strings to the equivalent numeric error codes.
#
# SQL_state
#
# 		The event SQLSTATE value, as a string, for example '23000'
#
# subsystem
#
# 		The subsystem in which the event occurred. Possible values are InnoDB (the InnoDB storage engine), 
# 		Repl (the replication subsystem), Server (otherwise)
#
# OPtional fields fall into the following categories:
#
# 		Additional information about the error, such as the error signaled by the OS or the error lable:
#
# 			OS_errno
#
# 				The OS error number
#
# 			OS_errmsg
#
# 				The OS error message
#
# 			label
#
# 				The label corresponding to the prio value, as a string.
# 				Filter rules can change the label for log writers that support custom labels.
#
# 				label values are intended more for identifying parituclar lines in log output than
# 				for use in filter rule comparisons because log_filter_dragnet does not resolve
# 				comparison values specified as strings to the equivalent Numeric Prio.
#
# Identification of the client for which the event occurred:
#
# 		user
# 			The client User
#
# 		host
# 			The client host
#
# 		thread
# 			The thread ID
#
# 		query_id
# 			The query ID
#
# Debugging information:
#
# 		source_file
#
# 			The source file in which the event occurred. The file name should omit any leading path.
# 			For example, to test for the sql/gis/distance.cc file, write the comparison like this:
#
# 				IF source_file == "distance.cc" THEN ...
#
# 		source_line
#
# 			The line within the source file at which the event occurred
#
# 		function
#
# 			The function in which the event occurred.
#
# 		component
#
# 			The component or plugin in which the event occurred.
#
# The following pertains to ERROR LOG MESSAGE FORMAT
#
# Each error log sink (writer) component has a characteristic output format it uses to write messages to its destination,
# but other factors may influence the content of the messages:
#
# 			) The information available to the log writer.
#
# 			  If a log filter component executed prior to execution of the writer component removes a log event attribute,
# 			  that attribute is not available for writing.
#
# 			) System variables that may affect log writers.
#
# For all log writers, the ID included in error log messages is that of the thread within mysqld responsible for writing the message.
#
# This indicates which part of the server produced the message, and consistent with general query log and slow query log messages, which include
# the connection thread ID. 
#
# OUTPUT FORMAT FOR LOG_SINK_INTERNAL
#
# This log writer produces the traditional error log output. It writes messages using this format:
#
# 		timestamp thread_id [severity] [err_code] [subsystem] message
#
# The [] are literal chars in the message format, it does not indicate optional.
#
# The [err_code] and [subsystem] fields were added in MySQL 8.0.
# THey will be missing from logs generated by older servers.
#
# Log parsers can treat these fields as parts of the message text that will present only for logs written by servers
# recent enough to include them.
#
# Parsers must treat the err_code part of [err_code] indicators as a string value.
#
# Examples:
#
# 		2018-03-22T12:35:47.... 0 [Note] [MY-012487] [InnoDB] InnoDB: DDL log recovery : begin
# 		2018-03-22T12:35:47.... 0 [Warning] [MY-010068] [Server] CA certificate /var/mysql/sslinfo/cacert.pem is self signed.
# 		2018-03-22T12:35:47.... 4 [Note] [MY-010051] [Server] Event Scheduler: scheduler thread started with id 4
# 		2018-03-22T12:35:47.... 0 [Note] [MY-010253] [Server] IPv6 is available.
#
# OUTPUT FORMAT FOR LOG_SINK_JSON
#
# The JSON-format log writer produces messages as JSON objects that contain key/value pairs. For example:
#
#  { 	"prio": 3, "err_code": 10051, "subsystem": "Server",
# 		"source_file": "event_scheduler.cc", "function": "run",
# 		"msg": "Event Scheduler: scheduler thread started with id 4",
# 		"time": "2018-03-22T12:35:47....", "thread": 4,
# 		"err_symbol": "ER_SCHEDULER_STARTED", "SQL_state": "HY000",
# 		"label": "Note" }
#
# OUTPUT FORMAT FOR LOG_SINK_SYSEVENTLOG
#
# The system log writer produces output that conforms to the system log format used on the local platform.
#
# OUTPUT FORMAT FOR EARLY-STARTUP LOGGING
#
# The server generates some error log messages before startup options have been processed,
# and thus before it knows error log settings such as the log_error_verbosity and log_timestamps values,
# and which log components are to be used.
#
# The server handles error log messages that are generated early in the startup process as follows:
#
# 		) Prior to MySQL 8.0.14, the server generates messages with the default timestamp, format and verbosity level, and buffers them.
# 	     After the startup options are processed and the error log configuration is known, the server flushes the buffered messages.
#
# 		  Because these early messages use the default log configuration, they may differ from what is specified by the startup options.
# 		  Also, the early messages are not flushed to log writers other than the default.
#
# 		  For example, logging to the JSON writer does not include these messages because they are not in JSON format.
#
# 		) As of MySQL 8.0.14, the server buffer log events rather than formatted log messages.
# 		  This enables it to retroactively apply configuration settings to those events after hte settings are known,
# 		  with the result that flushed messages use the configured settings, not the defaults.
#
# 		  Also messages are flushed to all configured writers, not just the default writer.
#
# 		  If a fatal error occurs before log configuration is known and the server must exit, the server so they are not lost.
#
# 		  If no fatal error occurs but startup is excessively slow prior to processing startup options, the server
# 		  periodically formats and flushes buffered messages using the logging defaults so as not to appear unresponsive.
#
# 		  Although these behaviors are similar to pre-8.0.14 in that the defaults are used, they are preferable to losing messages
# 		  when exceptional conditions occur.
#
# Sytem variables That affect error log format
#
# The log_timestamps SYS_VAR controls the time zone of timestamps in messages written to the error log
# (as well as to general query log and slow query log files).
#
# Permitted values are UTC (The default), and SYSTEM(local system time zone)
#
# The following section pertains to ERROR LOG FILE FLUSHING AND RENAMING
#
# If you flush the error log using FLUSH_ERROR_LOGS, FLUSH_LOGS or mysqladmin flush-logs, the server closes
# and reopens any error log file to which it is writing.
#
# To rename an error log file, do so manually before flushing.
# Flushing the logs then opens a new file with the original file name.
#
# For example, assuming a log file name of <host_name>.err - to rename the file and create a new one,
# use the following commands:
#
# 		mv host_name.err host_name.err-old
# 		mysqladmin flush-logs
# 		mv host_name.err-old backup-directory
#
# On windows, use rename rather than MV.
#
# If the location of an error log file is not writable by the server, the log-flushing ops fail to 
# create a new log file.
#
# For example, on Linux, the server might write hte error log to the /var/log/mysqld.log file, where the
# /var/log directory is owned by root and is not writable by mysqld.
#
# If the server is not writing to a named error log file, no error log file renaming occurs when the error log is flushed.
#
# The following Chapter pertains to THE GENERAL QUERY LOG
#
# The general query log is a general record of what mysqld is doing.
# The server writes information to this log when clients connect or disconnect, and it logs each SQL
# statement received from clients.
#
# The general query log can be very useful when you suspect an error in a client and want to know exactly what
# the client sent to mysqld.
#
# Each line that shows when a client connects also includes using <connection_type> to indicate the protocol used
# to establish the connection.
#
# <connection_type> is one of:
#
#		 TCP/IP (TCP/IP connection established without SSL)
# 		 SSL/TLS (TCP/IP established with SSL),
# 		 Socket (Unix socket file connection)
# 		 Named pipe (Windows named pipe)
# 		 Shared memory (Windows shared memory connection)
#
# mysqld writes statements to the query log in the order that it receives them, which might differ from the order
# in which they are executed.
#
# This logging order is in contrast with that of the binary log, for which statements are written after they are
# executed but before any locks are released.
#
# In addition, the query log may contain statements that only select data while such statements are never written to the binary log..
#
# When using statement-based binary logging on a replication master server, statements received by its slaves are written to the query
# log of each slave.
#
# Statements are written to the query log of the master service if a client reads events with the mysqlbinlog utility and passes them to
# the server.
#
# However, when using row-based binary logging, updates are sent as row changes rather than SQL statements, and thus these statements
# are never written to the query log when binlog_format is ROW.
#
# A given update also might not be written to teh query log when this variable is set to MIXED, depending on the statement used.
#
# By default, the general query log is disabled. To specify the initial general query log state state explicitly, use --general_log[={0|1}].
# With no argument or an argument of 1, --general_log enables the log.
#
# With an argument of 0, this option disables the log.
#
# To specify a log file name, use --general_log_file=<file name>.
# To specify the log destination, use the log_output SYS_VAR.
#
# If you specify no name for the general query log file, the default name is <host_name>.log
# The server creates the file in the data dir unless an absolute path name is given to specify a different dir.
#
# To disable or enable the general query log or change the log file name at runtime, use the global general_log and
# general_log_file SYS_VAR.
#
# Set general_log to 0/OFF to disable the log or to 1/ON to enable.
#
# Set general_log_filter to specify name of the log file.
#
# If a log file is already opened, it's closed and a new one is opened.
#
# When the general query log is enabled, the server writes output to any destinations specified by the log_output SYS_VAR.
# If you enable the log, the server opens the log file and writes startup messages to it.
#
# However, further logging of queries to the file does not occur unless the FILE log designation is selected.
# If that destination is NONE, the server writes no queries even if it is enabled.
#
# Setting the log file name has no effect on logging if the log destination value does not contain FILE.
#
# Server restarts and log flushing do not cause a new general query log file to be generated (although flushing closes and reopens it).
# To rename the file and create a new one, use the following commands:
#
# 		mv <host_name>.log <host_name>-old.log
# 		mysqladmin flush-logs
# 		mv <host_name>-old.log <backup-dir>
#
# On Windows, use rename instead of mv.
#
# You can also rename the general query log file at runtime by disabling the log:
#
# 		SET GLOBAL general_log = 'OFF';
#
# With the log disabled, rename the log file externally -- for example, by cmd. THen enable it again:
#
# 		SET GLOBAL general_log = 'ON';
#
# This method works on any platform and does not require a server restart.
#
# To disable or enable general query logging for the current session, set the session sql_log_off variable to ON or OFF.
# (This assumes that the general query log itself is enabled)
#
# PWs in statements written to the general query log are rewritten by the server not to occur literally in plain text.
# Password rewriting can be suppressed for the general query log by starting the server with --log-raw option.
#
# THis option may be useful for diagnostics purposes, to see the exact text of statements as received by the
# server, but for security reasons - do not use this kind of mode in production mode.
#
# An implication of PW rewriting is that statements that cannot be parsed (due, for example, to syntax errors)
# are not written to the general query log because they cannot be known to be PW free.
#
# If you wish to log all, use --log-raw 
#
# PW rewriting occurs only when plain text PWs are expected.
# For statements with syntax that expect a PW hash value, no rewriting occurs.
#
# If plain text PW is supplied errorneously for such syntax, teh PW is logged as given - without rewriting.
#
# The log_timestamps SYS_VAR controls the time zone of timestamps in messages written to the general query log file
# (as well as to the slow query log file and the error log)
#
# It does not affect the time zone of general query log and slow query log messages written to log tables, but rows retrieved
# from those tables can be converted from the local system time zone ot any desired time zone with CONVERT_TZ() or by setting the
# session time_zone SYS_VAR.
#
# 
# The following pertains to THE BINARY LOG
#
# The binary log contains "events" that describe DB changes such as table creation operations or changes to table data.
# 
# It also contains events for statements that potentionally could have made changes (for example, a DELETE which matched no rows),
# unless row-based logging is used.
#
# The binary log also contains information about how long each statement took that updated data.
# The binary log has two important purposes:
#
# 		) For replication, the binary log on a master replication server provides a record of the data changes to be sent to slave servers.
#
# 		  The master server sends the events contained in its binary log to its slaves, which execute those events to make the same
# 		  data changes that were made on the master.
#
# 		) Certain data recovery operations require use of the binary log.
#
# 			After a backup has been restored, the events in the binary log that were recorded after the backup was
# 			made are re-executed.
#
# 			These events bring databases up to date from the point of the backup.
#
# The binary log is not used for statements such as SELECT or SHOW that do not modify data.
#
# To log all statements (for example, to identify a problem query), use the general query log
#
# Running a server with binary logging enabled makes performance slightly slower. 
#
# However, the benefits of the binary log in enabling you to set up replication and 
# for restore operations generally outweigh this minor performance decrement.
#
# The binary log is resillient to unexpected halts. Only complete events or transactions are logged or read back.
#
# PWs in statements written to the binary log are rewritten by the server not to occur literally in plain text.
#
# The following section pertains to server options and variables that affect the operation of binary logging.
#
# Binary logging is enabled by default (the log_bin SYS_VAR is set to ON). 
#
# The exception is if you use mysqld to initialize the data dir manually by invoking it with 
# the --initialize or --initialize-insecure option, when binary logging is disabled by default, but can be enabled by specifying the --log-bin option.
#
# To disable binary logging, you can specify the --skip-log-bin or --disable-log-bin option at startup.
# If either of these options is specified and --log-bin is also specified, the option specified later takes precedence.
#
# The --log-slave-updates and --slave-preserve-commit-order options require binary logging.
#
# If you disable binary logging, either omit these options, or specify --skip-log-slave-updates and
# --skip-slave-preserve-commit-order.
#
# MySQL disables these options by default when --skip-log-bin or --disable-log-bin is specified.
#
# If you specify --log-slave-updates or --slave-preserve-commit-order together with --skip-log-bin or
# --disable-log-bin, a warning error message is issued.
#
# The --log-bin[=<base name>] option is used to specify the base name for binary log files.
# If you do not supply the --log-bin option, MySQL uses binlog as the default base name for the binary log files.
#
# For compability with earlier releases, if you supply the --log-bin option with no string or with an empty string,
# the base name defaults to <host_name>-bin, using the name of the host machine.
#
# It is recommended that you specify a base name, so that if the host name changes, you can easily continue to use
# the same binary log file names. 
#
# If you supply an extension in the log name (for example, --log-bin=<base_name.extension>), the extension is silently removed and ignored.
# 
# mysqld appends a numeric extension to the binary log base name to generate binary log file names. The number increases each time the server
# creates a new log file, thus creating an ordered series of files.
#
# The server creates a new file in the series each time it starts or flushes the logs.
# The server also creates a new binary log file automatically after the current log's size reaches max_binlog_size.
#
# A binary log file may become larger than max_binlog_size if you are using large transaction because a transaction
# is written ot hte file in one piece, never split between files.
#
# To keep track of which binary log files have been used, mysqld also creates a binary log index file that contains the names
# of all used binary log files. 
#
# By default, this has the same base name as the binary log file, with the extension '.index'.
#
# You can change the name of the binary log index file with the --log-bin-index[=<file name>] option.
# You should not manually edit this file while mysqld is running: doing so would confuse mysqld.
#
# The term "binary log file" denotes a individual numbered file containing DB events. The term "binary log" collectively
# denotes the set of numbered binary log files plus the index file.
#
# The default location for binary log files and the binary log index file is the data directory.
#
# You can use the --log-bin option to specify an alternative location, by adding a leading absolute path name to the base name
# to specify a different dir.
#
# When the server reads an entry from the binary log index file, which tracks the binary log files that have been used,
# it checks whether the entry contains a relative path.
#
# If it does, the relative part of the path is replaced with the absolute path set using the --log-bin option.
#
# An absolute path recorded in the binary log index file remains unchanged; in such a case, the index file must be edited
# manually to enable a new path or paths to be used. 
#
# The binary log file base name and any specified path are available as the log_bin_basename SYS_VAR.
#
# In MySQL 5.7, a server ID had to be specified when binary logging was enabled, or the server would not start.
#
# In MySQL 8.0, the server_id SYS_VAR is set to 1 by default.
#
# The server can be started with this default ID when binary logging is enabled, but an informational message is issued
# if you do not specify a server ID explicitly using the --server-id option.
#
# For servers that are used in a replication topology, you must specify a unique nonzero server ID for each server.
#
# A client that has privs sufficient to set restricted session SYS_VARs can disable binary logging of its own statements
# by using a SET_sql_log_bin=OFF statement.
#
# By default, the server logs the length of the event as well as the event itself and uses this to verify that the event
# was written correctly.
#
# You can also cause the server to write checksums for the events by setting the binlog_checksum SYS_VAR.
#
# When reading back from the binary log, the master uses the event length by default, but can be made to use checksums
# if available by enabling the master_verify_checksum SYS_VAR.
#
# The slave I/O thread also verifies events received from the master. 
# You can cause the slave SQL thread to use checksums if available when reading from the relay log by enabling the slave_sql_verify_checksum SYS_VAR.
#
# The format of the events recorded in the binary log is dependent on the binary logging format. 
# Three format types are supported: row-based logging, statement-based logging and mixed-based logging.
#
# The binary logging format used depends on the MySQL version.
#
# The server evaluates the --binlog-do-db and --binlog-ignore-db options in the same way as it does the
# --replicate-do-db and --replicate-ignore-db options.
#
# A replication slave server is started with the --log-slave-updates setting enabled by default, meaning that the
# slave writes to its own binary log any data modifications that are received from the replication master.
#
# The binary log must be enabled for this setting to work.
# This setting enables the slave to act as a master to other slaves in chained replication.
#
# You can delete all binary log files with the RESET_MASTER statement or a subset of them with PURGE_BINARY_LOGS.
#
# If you are using replication, you should not delete old binary log files on the master until you are sure that no slave
# still needs to use them.
#
# For example, if your slaves never run more than three days behind, once a day you can execute mysqladmin flush-logs on the master
# and then remove any logs that are more than three days old.
#
# You can remove the files manually, but it is preferable to use PURGE_BINARY_LOGS, which also safely updates the binary log index
# file for you (and which can take a date argument)
#
# You can display the contents of binary log files with the mysqlbinlog utility.
# This can be useful when you want to reprocess statements in the log for a recovery operation.
#
# For example, you can update MySQL server from the binary log as follows:
#
# 	mysqlbinlog <log_file> | mysql -h <server_name>
#
# mysqlbinlog also can be used to display replication slave relay log file contents because they are written using the same
# format as binary log files.
#
# Binary logging is done immediately after a statement or transaction completes but before any locks are released or any commit is done.
# This ensures that the log is logged in commit order.
#
# Updates to nontransactional tables are stored in the binary log immediately after execution.
#
# Within an uncommitted transaction, all updates (UPDATE, DELETE or INSERT) that change transactional tables such as InnoDB tables
# are cached until a COMMIT statement is received by the server. 
#
# At that point, mysqld writes the entire transaction to the binary log before the COMMIT is executed.
#
# Modifications to nontransactional tables cannot be rolled back. If a transaction that is rolled back
# includes modifications to nontransactional tables, the entire transaction is logged with a ROLLBACK
# statement at the end to ensure that the modifications to those tables are replicated.
#
# When a thread that handles the transaction starts, it allocates a buffer of binlog_cache_size to buffer
# statements.
#
# If a statement is bigger than this, the thread opens a temporary file to store the transaction.
# The temporary file is deleted when the thread ends.
#
# The Binlog_cache_use status variable shows the number of transactions that used this buffer (and possibly a temporary file) for storing statements.
# The Binlog_cache_disk_use status variable shows how many of those transactions actually had to use a temporary file.
#
# These two variables can be used for tuning binlog_cache_size to a large enough value that avoids the use of temporary files.
#
# The max_binlog_cache_size SYS_VAR (default 4GB, which is also the maximum), can be used to restrict the total size used
# to cache a multiple-statement transaction.
#
# If a transaction is larger than this many bytes, it fails and rolls back. The min value is 4096.
#
# If you are using the binary log and row based logging, concurrent inserts are converted to normal inserts for CREATE ... SELECT or
# INSERT ... SELECT statements.
#
# This is done to ensure that you can re-create an exact copy of your tables by applying the log during a backup operation.
#
# If you are using statement-based logging, the original statement is written to the log.
#
# The binary log format has some known limitations that can affect recovery from backups. Later covered.
#
# Binary logging for stored programs is done and described later.
#
# Note htat hte binary log format differs in MySQL 8.0 from previous versions of MySQL, due to enhancements in replication.
#
# Writes to the binary log file and binary log index file are handled in the same way as writes to MyISAM tables.
#
# By default, the binary log is synched to disk at each write (sync_binlog=1). 
#
# If sync_binlog was not enabled, and the OS or machine (not only the MySQL server) crashed, there is a chance that the last
# statements of the binary log could be lost.
#
# To prevent this, enable the sync_binlog SYS_VAR to synch the binary log to disk after every N commit groups.
#
# The safest value for sync_binlog is 1 (the default), but this is also the slowest.
#
# In earlier MySQL releases, there was a chance of inconsistency between the table content and binary log content if a crash occured,
# even with sync_binlog set to 1.
#
# For example, if you are using InnoDB tables and the MySQL server processes a COMMIT statement, it writes many prepared transactions
# to the binary log in sequence, synchs the binary log, and then commits the transaction into InnoDB.
#
# If the server crashed between those two operations, the transaction would be rolled back by InnoDB at restart but still exist in the binary log.
#
# Such an issue was resolved in previous releases by enabling InnnoDB support for two-phase commit in XA transactions.
#
# In >= 5.8, the InnoDB support for two-phase commit in XA transactions is always enabled.
#
# InnoDB support for two-phase commit in XA transactions ensures that the binary log and InnoDB data files are synched.
# However, the MySQL server should also be configured to synch the binary log and the InnoDB logs to disk before committing the transactions.
#
# THe InnoDB logs are synched by default, and sync_binlog=1 ensures that the binary log is synchronized.
#
# The effect of implicit InnoDB support for two-phase commit in XA transactions and sync_binlog=1 is that at restart
# after a crash, after doing a rollback of transactions, the MySQL server scans the latest binary log file to collect
# transactions <xid> values and calculate the last valid position in the binary log file.
#
# The MySQL server then tells InnoDB to complete any prepared transactions that were successfully written to the binary log,
# and truncates the binary log to the last valid position.
#
# This ensures that the binary log reflects the exact data of InnoDB tables, and therefore the slave remains in synch
# with the master because it does not receive a statement which has been rolled back.
#
# If the MySQL Server discovers at crash recovery that the binary log is shorter than it should have been, it lacks at least
# one successfully committed InnoDB transaction.
#
# This should not happen if sync_binlog=1 and the disk/file system do an actual sync when they requested to (some do not), so the
# server prints an error message:
#
# 		The binary log <file_name> is shorter than its expected size.
#
# In this case, this binary log is not correct and replication should be restarted from a fresh snapshot of the master's data.
#
# The session values of the following SYS_VAR's are written to the binary log and honored by the replication slave when parsing the binary log:
#
# 		sql_mode (except that the NO_DIR_IN_CREATE mode is not replicated)
#
# 		foreign_key_checks
#
# 		unique_checks
#
# 		character_set_client
#
# 		collation_connection
#
# 		collation_database
#
# 		collation_server
#
# 		sql_auto_is_null
#
# The following pertains to Binary Logging Formats
#
# The server uses several logging formats to record information in the binary log:
#
# 		) Replication capabilities in MySQL originally were based on propagation of SQL statements from master to slave.
# 		  This is called statement-based logging.
#
# 		  You can cause this format to be used by starting the server with --binlog-format=STATEMENT
#
# 		) In <row-based loggin> (the default), the master writes events to the binary log that indicate how individual table rows
# 		  are affected.
#
# 		  You can cause the server to use row-based logging by starting it with --binlog-format=ROW
#
# 		) A third option is also available: mixed logging.
#
# 		  With mixed logging, the statement-based logging is used by default, but the logging mode switches automatically to
# 		  row-based in certain cases as described below.
#
# 		  You can cause MySQL to use mixed logging explicitly by starting mysqld with the option --binlog-format=MIXED
#
# The logging format can also be set or limited by the storage engine being used.
#
# This helps to eliminate issues when replicating certain statements between a master and slave which are using different storage engines.
#
# With statement-based replication, there may be issues with replicating nondeterministic statements.
#
# In deciding whether or not a given statement is safe for statement-based replication, MySQL determines whether it can guarantee
# that the statement can be replicated using statement-based logging.
#
# If MySQL cannot make this guarantee, it marks the statement as potentionally unreliable and issues the warning, Statement may not be safe to log in statement format.
#
# You can avoid these issues by using MySQL's row-based replication instead.
#
# The following pertains to Setting The Binary Log Format
#
# You can select the binary logging format explicitly by starting the MySQL server with --binlog-format=<type>.
# The supported values for <type> are:
#
# 		STATEMENT causes logging to be statement based.
#
# 		ROW causes logging to be row based. This is the default.
#
# 		MIXED causes logging to use mixed format.
#
# The logging format also can be switched at runtime, although note that there are a number of situations in which
# you cannot do this, as discussed later in this section.
#
# Set the global value of the binlog_format SYS_VAR to specify the format for clients that connect subsequent to the change:
#
# 		SET GLOBAL binlog_format = 'STATEMENT';
# 		SET GLOBAL binlog_format = 'ROW';
# 		SET GLOBAL binlog_format = 'MIXED';
#
# An individual client can control the logging format for its own statements by setting the session value of binlog_format:
#
# 		SET SESSION binlog_format = 'STATEMENT';
# 		SET SESSION binlog_format = 'ROW';
# 		SET SESSION binlog_format = 'MIXED';
#
# Changing the global binlog_format value requires privs sufficient to set Global SYS_VARs.
#
# Changing the session binlog_format value requires privs sufficient to set restricted SYS_VARs. 
#
# There are several reasons why a client might want to set binary logging on a per-session basis:
#
# 		) A session that makes many small changes to the DB might want to use row-based logging.
#
# 		) A session that performs updates that match many rows in the WHERE clause might want to use statement-based logging
# 		  because it will be more efficient to log a few statements than many rows.
#
# 		) Some statements require a lot of execution time on the master, but result in just a few rows being modified.
#
# 		  It might therefore be beneficial to replicate them using row-based logging.
#
# There are exceptions when you cannot switch the replication format at runtime:
#
# 		) The replication format cannot be changed from within a stored function or a trigger.
#
# 		) If the NDB storage engine is enabled.
#
# 		) If a session has open temporary tables, the replication format cannot be changed for the session (SET @@SESSION.binlog_format)
#
# 		) If any replication channel has open temporary tables, the replication format cannot be changed globally (SET @@GLOBAL.binlog_format or 
# 		  SET @@PERSIST.binlog_format)
#
# 		) If any replication channel applier thread is currently running, the replication format cannot be changed globally
# 		  (SET @@GLOBAL.binlog_format or SET @@PERSIST.binlog_format)
#
# Trying to switch the replication format in any of these cases (or attempting to set the current replication format) results in an error.
#
# You can, however - use PERSIST_ONLY (SET @@PERSIST_ONLY.binlog_format) to change the replication format at any time, because this action
# does not modify the runtime global SYS_VAR and takes effect only after a server restart.
#
# Switching the replication format at runtime is not recommended when any temporary table exist, because temporary tables are logged only
# when using statement-based replication, whereas with row-based replication and mixed replication, they are not logged.
#
# Switching the replication format while replication is ongoing can also cause issues.
#
# Each MySQL Server can set its own and only its own binary logging format (true whether binlog_format is set with global or session scope).
#
# This means that changing the logging format on a replication master does not cause a slave to change its logging format to match.
#
# When using STATEMENT mode, the binlog_format SYS_VAR is not replicated.
#
# When using MIXED or ROW logging mode, it is replicated but is ignored by the slave.
#
# A replication slave is not able to convert binary log entries received in ROW Logging format to STATEMENT format for use in its own binary log.
# 
# The slave must therefore use ROW or MIXED format if the master does. 
#
# Changing the binary logging format on the master from STATEMENT to ROW or MIXED while replication is ongoing to a slave with
# STATEMENT format can cause replication to fail with errors such as Error executing row event:
#
# 	 'Cannot execute statement: impossible to write to binary log since statement is in row format and BINLOG_FORMAT = STATEMENT.'
#
# Changing the binary logging format on the slave to STATEMENT format when the master is still using MIXED or ROW format also
# causes the same type of replication failure.
#
# To change the format safely, you must stop replication and ensure that the same change is made on both the master and the slave.
#
# If you are using InnoDB tables and the transaction isolation level is READ_COMMITTED or READ_UNCOMMITTED, only row-based logging
# can be used.
#
# It is possible to change the logging format to STATEMENT, but doing so at runtime leads very rapidly to errors because InnoDB can no longer perform inserts.
#
# With the binary log format set to ROW, many changes are written to the binary log using the row-based format.
# Some changes, however, still use the statement-based format.
#
# Examples include all DDL (data definition language) statements such as CREATE_TABLE, ALTER_TABLE or DROP_TABLE.
#
# The --binlog-row-event-max-size option is available for servers that are capable of row-based replication.
# Rows are stored into the binary log in chunks having a size in bytes not exceeding the value of this option.
#
# The value must be a x of 256. Default is 8192.
#
# WARNING:
#
# 		When using <statement-based logging> for replication, it is possible for the data on the master and slave to become different if a statement
# 		is designed in such a way that the data modification is nondeterministic.
#
# 		That is, it is left to the will of the query optimizer.
#
# 		In general, this should not be done - even outside of replication.
#
# The following pertains to Mixed Binary Logging Format.
#
# When running in MIXED logging format, the server automatically switches from statement-based to row-based logging under the following conditions:
#
# 		) When a function contains UUID()
#
# 		) When one or more tables with AUTO_INCREMENT columns are updated and a trigger or stored function is invoked.
# 		  Like all other unsafe statements, this generates a warning if binlog_format = <STATEMENT>
#
# 		) When the body of a view requires row-based replication, the statement creating the view also uses it.
#
# 		  For example, this occurs when the statement creating a view uses the UUID() function.
#
# 		) When a call to a UDF is involved.
#
# 		) When FOUND_ROWS() or ROW_COUNT() is used (Bug #12092, Bug #30244)
#
# 		) When USER(), CURRENT_USER(), or CURRENT_USER is used. (Bug #28086)
#
# 		) When one of the tables involved is a log table in the mysql database.
#
# 		) When the LOAD_FILE() function is used. (Bug #39701)
#
# 		) When a statement refers to one or more SYS_VARs (Bug #31168)
#
# 			Exception: The following SYS_VAR, when used with session scope (only), do not cause the logging format to switch:
#
# 				) auto_increment_increment
#
# 				) auto_increment_offset
#
# 				) character_set_client
#
# 				) character_set_connection
#
# 				) character_set_database
#
# 				) character_set_server
#
# 				) collation_connection
#
# 				) collation_database
#
# 				) collation_server
#
# 				) foreign_key_checks
#
# 				) identity
#
# 				) last_insert_id
#
# 				) lc_time_names
#
# 				) pseudo_thread_id
#
# 				) sql_auto_is_null
#
# 				) time_zone
#
# 				) timestamp
#
# 				) unique_checks
#
# 
# In earlier releases, when mixed binary logging format was in use, if a statement was logged by row and the session that executed the
# statement had any temporary tables, all subsequent statements were treated as unsafe and logged in row-based format until all 
# temporary tables in use by that session were dropped.
#
# As of MySQL 8.0, operations on temporary tables are not logged in mixed binary logging format, and the presence of temporary tables
# in the session has no impact on the logging mode used for each statement.
#
# 		NOTE:
#
# 			A warning is generated if you try to execute a statement using statement-based logging that should be written using row-based logging.
# 			The warning is shown both in the client (in the output of SHOW_WARNINGS) and through the mysqld error log.
#
# 			A warning is added to the SHOW_WARNINGS table each time such a statement is executed.
# 			However, only the first statement that generated the warning for each client session is written to the error log to prevent flooding the log.
#
# In addition to the decisions above, individual engines can also determine the logging format used when information in a table is updated.
# The logging capabilities of an individual engine can be defined as follows:
#
# 		) If an engine supports row-based logging, the engine is said to be row-logging capable.
#
# 		) If an engine supports statement-based logging, the engine is said to be statement-logging capable.
#
# A given storage engine can support either or both logging formats.
#
# The following table lists the formats supported by each engine.
#
# 	Storage Engine 	Row Logging Supported 				Statement Logging Supported
# 	ARCHIVE  			Yes 										Yes
# 	BLACKHOLE 			Yes 										Yes
#  CSV 					Yes 										Yes
# 	EXAMPLE 				Yes 										No
# 	FEDERATED 			Yes 										Yes
# 	HEAP 					Yes 										Yes
# 	
# 	InnoDB 				Yes 										Yes when the transaction isolation level is REPEATABLE_READ or SERIALIZABLE. No otherwise.
# 	MyISAM 				Yes 										Yes
# 	MERGE 				Yes 										Yes
# 	NDB 					Yes 										No
#
# Whether a statement is to be logged and the logging mode to be used is determined according to:
#
# 		) the type of statement (safe, unsafe, or binary injected)
#
# 		) the binary logging format (STATEMENT, ROW or MIXED)
# 
# 		) the logging capabilities of the storage engine (statement capable, row capable, both or neither)
#
# 		(Binary injection refers to logging a change that must be logged using ROW format)
#
# Statements may be logged with or without a warning; failed statements are not logged, but generate errors in the log.
# This is shown in the following decision table:
#
# 		Type, binlog_format, SLC and RLC columns outline the conditions
#
# 		Error/Warning and Logged as columns represent the corresponding actions.
#
# 		SLC/RLC is for "statement-logging capable"/"row-logging capable"
#
# 	Type 		binlog_format 			SLC 		RLC 		Error/Warning 								 			Logged as
#
# 	* 			* 							No 		No 		Error: Cannot execute statement. 	 			-
# 																	Binary logging is impossible since
# 																	at least one engine is involved that is
# 																	both row-incapable and statement-incapable.
#
#  Safe 		STATEMENT 				Yes 		No 		- 															STATEMENT
#
# 	Safe 		MIXED 					Yes 		No 		- 															STATEMENT
#
# 	Safe 		ROW 						Yes 		No 		Error: Cannot execute statement. 				- 				-
# 																	Binary logging is impossible since
# 																	BINLOG_FORMAT = ROW and at least one
# 																	table uses a storage engine that is not
# 																	capable of row-based logging.
#
# 	Unsafe 	STATEMENT 				Yes 		No 		Warning: Unsafe statement binlogged in 		STATEMENT
# 																	statement format, since BINLOG_FORMAT = 
# 																	STATEMENT.
#
# 	Unsafe 	MIXED 					Yes 		No 		Error: Cannot execute statement. 				-
# 																	Binary logging of an unsafe statement
# 																	is impossible when the storage engine
# 																	is limited to statement-based logging,
# 																	even if BINLOG_FORMAT = MIXED.
#
# 	Unsafe 	ROW 						Yes 		No 		Error: Cannot execute statement. 				-
# 																	Binary logging is impossible since 
# 																	BINLOG_FORMAT = ROW and at least one
# 																	table uses a storage engine that is not
# 																	capable of row-based logging.
#
# 	Row inj. STATEMENT 				Yes 		No 		Error: Cannot execute row injection. 			-
# 																	Binary logging is not possible since
# 																	at least one table uses a storage engine
# 																	that is not capable of row-based logging.
#
# 	Row inj. MIXED 					Yes 		No 		Error: Cannot execute row injection. 			-
# 																	Binary logging is not possible since at
# 																	least one table uses a storage engine
# 																	that is not capable of row-based logging.
#
# 	Row inj. ROW 						Yes 		No 		Error: Cannot execute row injection. 			-
# 																	Binary logging is not possible since at least
# 																	one table uses a storage engine that is not
# 																	capable of row-based logging.
#
# 	Safe 		STATEMENT 				No 		Yes 		Error: Cannot execute statement. 		 		-		-
#	 																Binary logging is impossible since
#  																BINLOG_FORMAT = STATEMENT and at least one
# 																	table uses a storage engine that is 
# 																	not capable of statement-based logging.
#
# 	Safe 		MIXED 					No 		Yes 		- 															ROW
#
# 	Safe 		ROW 						No 		Yes 		- 															ROW
#
# 	Unsafe 	STATEMENT 				No 		Yes 		Error: Cannot execute statement.  				-				-
# 																	Binary logging is impossible since BINLOG
# 																	_FORMAT = STATEMENT and at least one
# 																	table uses a storage engine that is not
# 																	capable of statement-based logging.
#
# 	Unsafe 	MIXED 					No 		Yes 		- 															ROW
#
# 	Unsafe 	ROW 						No 		Yes 		- 															ROW
#
# 	Row Inj. STATEMENT 				No 		Yes 		Error: Cannot execute row injection. 			-
# 																	Binary logging is not possible since
# 																	BINLOG_FORMAT = STATEMENT.
#
# 	Row Inj. MIXED 					No 		Yes 		- 															ROW
#
# 	Row Inj. ROW 						No 		Yes 		- 															ROW
#
# 	Safe 		STATEMENT 				Yes 		Yes 		- 															STATEMENT
#
# 	Safe 		MIXED 					Yes 		Yes 		- 															STATEMENT
#
# 	Safe 		ROW 						Yes 		Yes 		- 															ROW
#
# 	Unsafe 	STATEMENT 				Yes 		Yes 		Warning: Unsafe statement binlogged in  		STATEMENT
# 																	statement format since BINLOG_FORMAT =
# 																	STATEMENT.
#
# 	Unsafe 	MIXED 					Yes 		Yes 		- 															ROW
#
# 	Unsafe 	ROW 						Yes 		Yes 		- 															ROW
#
# 	Row Inj. STATEMENT 				Yes 		Yes 		Error: Cannot execute row injection. 			-
# 																	Binary logging is not possible because
# 																	BINLOG_FORMAT = STATEMENT.
#
# 	Row Inj. MIXED 					Yes 		Yes 		- 															ROW
#
# 	Row Inj. ROW 						Yes 		Yes 		- 															ROW
#
# When a warning is produced by determination, a standard MySQL warning is produced (and is available using SHOW_WARNINGS).
# The information is also written to the mysqld error log.
#
# Only one error for each error instance per client connection is logged to prevent flooding the log.
# The log message includes the SQL statement that was attempted.
#
# If a slave server has log_error_verbosity set to display warnings, the slave prints messages to the error log to provide
# information about its status, such as the binary log and relay log co-ords where it starts its job, when it is switching
# to another relay log - when it reconnects after a disconnect, statements that are unsafe for statement-based logging, etc.
#
# The following pertains to Logging Format for Changes to mysql Database Tables
#
# The contents of the grant tables in the mysql database can be modified directly (for example, with INSERT or DELETE) or 
# indirectly (for example, with GRANT or CREATE USER).
#
# Statements that affect mysql database tables are written to the binary log using the following rules:
#
# 		) Data manipulation statements that change data in mysql database tables directly are logged according ot the setting of
# 		  the binlog_format SYS_VAR.
#
# 	     This pertains to statements such as INSERT, UPDATE, DELETE, REPLACE, DO, LOAD_DATA_INFILE, SELECT, and TRUNCATE_TABLE.
#
# 		) Statements that change the mysql db indirectly are logged as statements regardless of the value of binlog_format.
#
# 		  This pertains to statements such as GRANT, REVOKE, SET_PASSWORD, RENAME_USER, CREATE (all forms except CREATE_TABLE_..._SELECT),
# 		  ALTER(all forms) and DROP(all forms)
#
# CREATE_TABLE_..._SELECT is a combination of data definition and data manipulation.
#
# The CREATE_TABLE part is logged using statement format and the SELECT part is logged according to the value of binlog_format.
#
# The following pertains to The Slow Query Log:
#
# The slow query log consists of SQL statements that take more than long_query_time seconds to execute and require at least
# min_examined_row_limit rows to be examined.
#
# The slow query log can be used to find queries that take a long time to execute and are therefore candidates for optimizations.
#
# However, examining a long slow query log can be a time-consuming task. You can use mysqldumpslow to process a slow query log file
# and summarize its contents.
#
# The time to acquire the initial locks is not counted as execution time. 
#
# mysqld writes a statement to the slow query log after it has been executed and after all locks have been released, so log order might differ from execution order.
#
# The following pertains to Slow Query Log Parameters
#
# The minimum and default values of long_query_time are 0 and 10, respectively.
# The value can be specified to a resolution of microseconds.
#
# By default, administrative statements are not logged, nor are queries that do not use indexes for lookups.
#
# This behavior can be changed using log_slow_admin_statements and log_queries_not_using_indexes, described later.
#
# By default, the slow query log is disabled.
# To specify the initial slow query log state explicitly, use --slow_query_log[={0|1}].
#
# WIth no argument or an arg of 1, --slow_query_log enables the log.
# With an arg of 0, this option disables the log.
#
# To specify a log file name, use --slow_query_log_file=<file_name>.
# To specify log destination, use the log_output SYS_VAR.
#
# 		NOTE: If you specify the TABLE log destination - a possible error is too many tables opening.
#
# If you specify no name for the slow query log file, the default name is <host_name>-slow.log
# The server creates the file in the data directory unless an absolute path name is given to specify a different one.
#
# To disable or enable the slow query log or change the log file name at runtime, use the global slow_query_log and slow_query_log_file SYS_VARs.
# Set slow_query_log to 0 to disable the log or to 1 to enable it.
#
# Set slow_query_log_file to specify the name of the log file.
# If a log file already is open, it is closed and the new file is opened.
#
# The server writes less info to the slow query log if you use the --log-short-format option.
#
# To include slow admin statements in the slow query log, enable the log_slow_admin_statements SYS_VAR.
# Admin statements include ALTER_TABLE, ANALYZE_TABLE, CHECK_TABLE, CREATE_INDEX, DROP_INDEX, OPTIMIZE_TABLE
# and REPAIR_TABLE.
#
# To include queries that do not use indexes for row lookups in the statements written to the slow query log,
# enable the log_queries_not_using_indexes SYS_VAR.
#
# Even with that var enabled, the server does not log queries that would not benefit from the presence of an index
# due to the table having fewer than two rows.
#
# When queries that do not use an index are logged, the slow query log may grow quickly.
#
# It is possible to put a rate limit on these queries by setting the log_throttle_queries_not_using_indexes SYS_VAR.
#
# By default, this var is 0 - which means there is no limit. Positive values imposes a per-minute limit on logging
# of queries that do not use indexes.
#
# The first such query opens a 60-second widnow within which the server logs queries up to the given limit, then suppresses
# additional queries.
#
# If there are suppressed queries when the window ends, the server logs a summary that indicates how many there were and the
# aggregate time spent in them.
#
# The next 60-second window begins when the server logs the next query that does not use indexes.
#
# The server uses the controlling parameter in the following order to determine whether to write a query to the slow query log:
#
# 		1) The query must either not be an administrative statement, or log_slow_admin_statements must be enabled.
#
# 		2) The query must have taken at least long_query_time seconds, or log_queries_not_using_indexes must be enabled and the query
# 			used no indexes for row lookups.
#
# 		3) THe query must have examined at least min_examined_row_limit rows.
#
# 		4) The query must not be suppressed according to the log_throttle_queries_not_using_indexes setting.
#
# The log_timestamps SYS_VAR controls the time zone of timestamps in messages written to the slow query log file 
# (as well as to the general query log file and the error log).
#
# It does not affect the time zone of general query log and slow query log messages written to log tables, but rows
# retrieved from those tables can be converted from the local system time zone to any desired time zone with CONVERT_TZ()
# or by setting the session time_zone SYS_VAR.
#
# By default, a replication slave does not write replicated queries to the slow query log.
# To change this, enable the log_slow_slave_statements SYS_VAR.
#
# The following pertains to Slow Query Log Contents
#
# When the slow query log is enabled, the server writes output to any destinations specified by the log_output SYS_VAR.
# If you enable the log, the server opens the log file and writes startup messages to it.
#
# However, further logging of queries to the file does not occur unless the FILE log destination is selected.
# If the destination is NONE, the server writes no queries even if the slow query log is enabled.
#
# Setting the log file name has no effect on logging if FILE is not selected as an output destination.
#
# If the slow query log is enabled and FILE is selected as an output destination, each statement written to the log
# is preceded by a line that begins with a # char and has these fields (with all fields or a single line):
#
# 		Query_time: <duration>
#
# 			The statement execution time in seconds
#
# 		Lock_time: <duration>
#
# 			The time to acquire locks in seconds.
#
# 		Rows_sent: <N>
#
# 			The number of rows sent to the client
#
# 		Rows_examined:
#
# 			The number of rows examined by the optimizer.
#
# Enabling the log_slow_extra SYS_VAR (available as of MySQL 8.0.14) causes the server to write the following extra fields
# to FILE output in addition to those just listed (TABLE output is unaffected).
#
# Some field descriptions refer to Status variables names.
# In the slow query log, the counters are per-statement values, not cumulative per-session values.
#
# 		Thread_id: ID
#
# 			The statement thread identifier.
#
# 		Errno: <error_number>
#
# 			The statement error number, or 0 if no error occurred.
#
# 		Killed: <N>
#
# 			If the statement was terminated, the error number indicating why or 0 if the statement terminated normally.
#
# 		Bytes_received: <N>
#
# 			The Bytes_received value for the statement.
#
# 		Bytes_sent: <N>
#
# 			The Bytes_sent value for the statement.
#
# 		Read_first: <N>
#
# 			The Handler_read_first value for the statement
#
# 		Read_last: <N>
#
# 			The Handler_read_last value for the statement.
#
# 		Read_key: <N>
#
# 			The Handler_read_key value for the statement
#
# 		Read_next: <N>
#
# 			The Handler_read_next value for the statement
#
# 		Read_prev: <N>
#
# 			The Handler_read_prev value for the statement.
#
# 		Read_rnd: <N>
#
# 			The Handler_read_rnd value for the statement.
#
# 		Read_rnd_next: <N>
#
# 			The Handler_read_rnd_next value for the statement.
#
# 		Sort_merge_passes: <N>
#
# 			The Sort_merge_passes value for the statement.
#
# 		Sort_range_count: <N>
#
# 			The Sort_range value for the statement.
#
# 		Sort_rows: <N>
#
# 			The Sort_rows value for the statement.
#
# 		Sort_scan_count: <N>
#
# 			The Sort_scan value for the statement.
#
# 		Created_tmp_disk_tables: <N>
#
# 			The Created_tmp_disk_tables value for the statement.
#
# 		Created_tmp_tables: <N>
#
# 			The Created_tmp_tables value for the statement.
#
# 		Start: <timestamp>
#
# 			The statement execution start time
#
# 		End: <timestamp>
#
# 			The statement execution end time.
#
# A given slow query log file may contain a mix of lines with and without the extra fields added by enabling log_slow_extra.
# Log file analyzers can determine whether a line contains the additional fields by the field count.
#
# Each statement written to the slow query log file is preceded by a SET statement that includes a timestamp.
# As of MySQL 8.0.14 - the timestamp indicates when the slow statement began executing.
#
# < 8.0.14 MySQL the timestamp indicates when the slow statement was logged (which occurs after statement finishes executing)
#
# PWs in statements written to the slow query log are rewritten by the server not to occur literally in plain text.
#
# The following pertains to The DDL Log:
#
# The DDL log, or metadata log, records metadata operations generated by data definition statements such as DROP_TABLE and ALTER_TABLE.
#
# MySQL uses this log to recover from crashes occurring in the middle of a metadata operation.
#
# When executing the statement DROP TABLE t1, t2 - we need to ensure that both t1 and t2 are dropped, and that each table
# drop is complete.
#
# ANother example of this type of SQL statement is ALTER_TABLE_t3_DROP_PARTITION_p2, where we must make certain that the partition
# is completely dropped and that its definition is removed from the list of partitions for table t3.
#
# A record of metadata operations such as those just described are written to the file ddl_log.log in the MySQL Data dir.
# This is a binary file, it is not intended to be human-readable, and do not modify it.
#
# ddl_log.log is not created until it is actually needed for recording metadata statements, and is removed following a successful start of
# mysqld.
#
# Thus, it is possible for this file not ot be present on a MySQL server that is functioning in a completely normal manner.
#
# Currently, ddl_log.log can hold up to 1048573 entries, or 4 GB. once this limit is exceeded, you must rename or remove the file before
# it is possible to execute any additional DDL statements. This is a known issue being worked on.
#
# There are no user-config server options or variables related to this file.
#
# The following pertains to Server Log Maintenance:
#
# MySQL Servers can create several different log files to help you see what activity is taking place.
# However, one must regularly clean up the logs.
#
# When using MySQL with logging enabled, you may want to back up and remove old log files from time to time and tell MySQL to start
# logging to new files.
#
# On a Linux (Red Hat) installation, you can use the mysql-log-rotate scripts for this.
#
# If you installed MySQL from an RPM distrib, this script should have been installed automatically.
#
# Be careful with said script if you are using binary log for replication. You should not remove binary logs until you are certain that
# their contents have been processed by all slaves.
#
# On other systems, you must install a short script yourself that you start from cron (or its equivalent) for hanling log files.
#
# Binary logs are automatically removed after the server's binary log expiration period.
# Removal of the files can take place at startup and when the binary log is flushed.
#
# The default binary log expiration period is 30 days. You can specify an alternative expiration period using the binlog_expire_logs_seconds
# SYS_VAR.
#
# If you are using replication, you should specify an expiration period that is no lower than the maximum amount of time your slaves might lag
# behind the master.
#
# To remove binary logs on demand, use the PURGE_BINARY_LOGS statement.
#
# You can force MySQL to start using new log files by flushing the logs.
#
# Log flushing occurs when you issue a FLUSH_LOGS statement or execute a mysqladmin flush-logs,
# mysqladmin refresh, mysqldump --flush-logs or mysqldump --master-data cmd.
#
# In addition, the binary log is flushed when its size reaches the value of the max_binlog_size SYS_VAR.
#
# FLUSH_LOGS supports optional modifiers to enable selective flushing of individual logs (for example, FLUSH_BINARY_LOGS)
#
# A log-flushing operation does the following:
#
# 		) If general query logging or slow query logging to a log file is enabled, the server closes and reopens the general query log file or slow query log file.
#
# 		) If binary logging is enabled, the server closes the current binary log file and opens a new log file with the next sequence number.
#
# 		) If the server was started with the --log-error option to cause the error log to be written to a file, the server closes and reopens the log file.
#
# The server creates a new binary log file when you flush the logs.
# However, it just closes and reopens the general and slow query log files.
#
# To cause new files to be created on Unix, rename the current log files before flushing them.
# At flush time, the server opens new log files with the original names.
#
# For example, if the general and slow query log files are named mysql.log and mysql-slow.log, you can use
# a series of commands akin to:
#
# 	cd <mysql-data-directory>
# 	mv mysql.log mysql.old
# 	mv mysql-slow.log mysql-slow.old
# 	mysqladmin flush-logs
#
# On Windows, it's rename rather than mv.
#
# At this point, you can make a backup of mysql.old and mysql-slow.old and remove them from the disk.
#
# A similar strategy can be used to back up the error log file, if there is one.
#
# You can rename the general query log or slow query log at runtime by disabling the log:
#
# 		SET GLOBAL general_log = 'OFF';
# 		SET GLOBAL slow_query_log = 'OFF';
#
# With the logs disabled, rename the log files externally; for example, from the cmd line.
# Then enable the logs again:
#
# 		SET GLOBAL general_log = 'ON';
# 		SET GLOBAL slow_query_log = 'ON';
#
# This method works on any platform and does not require a server restart.
#
# NOTE:
#
# 		For the server to recreate a given log file after you have renamed the file externally, the file location
# 		must be writable by the server.
#
# 		This may not always be the case. For example, on Linux, the server might write the error log as /var/log/mysqld.log,
# 		where /var/log is owned by root and not writable by mysqld.
#
# 		In this case, the log-flushing operation will fail to create a new log file.
#
# 		To handle this situation, you must manually create the new log file with the proper ownership after renaming
# 		the original log file.
#
# 		For example, execute these commands as root:
#
# 			mv /var/log/mysqld log /var/log/mysqld.log.old
# 			install -omysql -gmysql -m0644 /dev/null /var/log/mysqld.log
#
# The following pertains to MySQL Server Components
#
# MySQL Server includes a component-based infrastructure for extending server capabilities.
# A component provides services that are available to the server and other components.
#
# (With respect to service use, the server is a component, equal to other components)
# Components interact with each other only through the services they provide.
#
# MySQL distributions include several components that implement server extensions:
#
# 		) Components for configuring error logging.
#
# 		) A component for checking PWs.
#
# SYS_VARs and STATUS_VARs implemented by a server component are exposed when the component is installed and have names that
# begin with a component-specific prefix.
#
# For example, the log_filter_dragnet error log filter component implements a SYS_VAR named log_error_filter_rules,
# the full name of which is dragnet.log_error_filter_rules.
#
# To refer to this var, use the full name.
#
# The following section describes how to install and uninstall components, and how to determine at runtime which components
# are installed and obtain information about them.
#
# For information about the internal implementation of components, it's covered later.
# For example, if you intend to write your own components, this information is important for understanding how components work.
#
# The following pertains to Installing and Uninstalling Components
#
# Server components must be loaded into the server before they can be used.
# MySQL supports component loading at runtime.
#
# The INSTALL_COMPONENT and UNINSTALL_COMPONENT SQL statements enable component loading and unloading.
# For example:
#
# 		INSTALL COMPONENT 'file://component_validate_password';
# 		UNINSTALL COMPONENT 'file://component_validate_password';
#
# A loader service handles component loading and unloading, and also lists loaded components in the <component> table of the
# <mysql> SYS_DB that serves as a registry.
#
# The SQL statements for component manipulation affect server operation and the mysql.component SYS_TABLE as follows:
#
# 		) INSTALL_COMPONENT loads components into the server.
# 		The components become active immediately.
#
# 		The loader service also registers loaded components in the mysql.component SYS_TABLE.
#
# 		For subsequent server restarts, the loader service loads any components listed in mysql.component during
# 		the startup sequence.
#
# 		This occurs even if the server is started with the --skip-grant-tables option.
#
# 		) UNINSTALL_COMPONENT deactivates components and unloads them from the server.
#
# 		The loader service also unregisters the components from the mysql.component SYS_TABLE
# 		so that they are no longer loaded during the startup sequence for subsequent server restarts.
#
# Compared to the corresponding INSTALL_PLUGIN statement for server plugins, the INSTALL_COMPONENT statement for components
# offers the significant advantage that it is not nessecary to know any platform-specific file name suffix for naming the component.
#
# This means that a given INSTALL_COMPONENT statement can be executed uniformly across platforms.
#
# The following pertains to Obtaining Server Component Information:
#
# The component table in the mysql system database contains information about currently loaded components and shows which
# components have been registered with INSTALL_COMPONENT.
#
# To see which components are installed, use:
#
# 		SELECT * FROM mysql.component;
#
# The following pertains to Error Log Components:
#
# This section describes the characteristics of individual error log components.
# 
# A log component can be a filter or a sink:
#
# 		) A filter processing log events, to add, remove or modify event fields, or to delete events entirely.
# 		  The resulting events pass to the next log component named in the log_error_services SYS_VAR.
#
# 		) A sink is a destination (writer) for log events. Typically, a sink processes log events into log messages
# 		  that have a particular format and writes these messages to its associated output, such as a file or the system log.
#
# The server executes filters and sinks in the log_error_services value in the order they are named.
# The rightmost component should therefore be a sink.
#
# If the rightmost component is a filter, any changes it has on events have no effect on output.
#
# The following sections describe individual log components, grouped by component type:
#
# 		Error Log Filter Components
#
# 		Error Log Sink Components
#
# Component descriptions include these types of information:
#
# 		) The component name and intended purpose.
#
# 		) Whether the component is built in or must be loaded.
#
# 		  For a loadable component, the description specifies the URN to use to load and unload the component with
# 		  the INSTALL_COMPONENT and UNINSTALL_COMPONENT statements.
#
# 		) Whether the component can be listed multiple times in the log_error_services value.
#
# 		) For a sink component, the destination to which the component writes output.
#
# Error Log Filter Components
#
# 		Error log filter components implement filtering of error log events:
#
# 			) If no filter component is enabled, no filtering occurs.
#
# 			) Any enabled filter component affects log events only for components listed later in the log_error_services value.
# 			  In particular, for any log sink component listed in log_error_services earlier than any filter component, no log event filtering occurs.
#
# The log_filter_internal Component
#
# 		) Purpose: Implements filtering based on the log_error_verbosity SYS_VAR.
#
# 		) URN: This component is built in and need not be loaded with INSTALL_COMPONENT before use.
#
# 		) Multiple uses permitted: No.
#
# 		Because log_error_verbosity affects the log_filter_internal component, log_error_verbosity has no effect on logging if
# 		log_filter_internal is not enabled.
#
# The log_filter_dragnet Component
#
# 		) Purposes: Implements filtering based on the rules defined by the dragnet.log_error_filter_rules SYS_VAR.
# 		
# 		) URN: file://component_log_filter_dragnet
#
# 		) Multiple uses permitted: No.
#
# Error Log Sink Components
#
# Error log sink components are writers that implement error log output. If no sink component is enabled, no log output occurs.
#
# Some sink component descriptions refer to the default error log destination.
# This is the console or a file and is indicated by the fault of the log_error SYS_VAR.
#
# The log_sink_internal Component
#
# 		) Purpose: Implements traditional error log message output format.
#
# 		) URN: This component is built in and need not be loaded with INSTALL_COMPONENT before use.
#
# 		) Multiple uses permitted: No.
#
# 		) Output destination: Writes to the default error log destination.
#
# The log_sink_json Component
#
# 		) Purpose: Implements JSON-format error logging.
#
# 		) URN: file://component_log_sink_json
#
# 		) Multiple uses permitted: Yes.
#
# 		) Output destination: The JSON log writer determines its output destination based on the default error log destination,
# 									 which is given by the log_error SYS_VAR:
#
# 									 		) If log_error names a file, the JSON writer bases output file naming on that file name, plus a numbered .<NN> json suffix,
# 											  with NN starting at 00.
#
# 											  For example, if log_error is <file_name>, successive instances of log_sink_json named in the log_error_services
# 											  value write to <file_name>.00.json, <file_name>.01.json and so forth.
#
# 											) If log_error is stderr, the JSON writer writes to the console.
#
# 											  If log_json_writer is named multiple times in the log_error_services value, they all write
# 											  to the console, which is likely not useful.
#
# The log_sink_syseventlog Component:
#
# 		) Purpose: Implements error logging to the system log. This is the Event Log on Windows, and syslog on Unix and Unix-like systems.
#
# 		) URN: file://component_log_sink_syseventlog
#
# 		) Multiple uses permitted: No.
#
# 		) Output destination: Writes to the system log. Does not use the default error log destination.
#
# The log_sink_test Component:
#
# 		) Purposes: intended for internal use in writing test cases. Not intended for production use.
#
# 		) URN: file://component_log_sink_test
#
# 		) Multiple uses permitted: Yes.
#
# 		) Output destination: Writes to the default error log destination.
#
# The following pertains to MySQL Server Plugins:
#
# MySQL supports a plugin API that enables creation of server components.
#
# PLugins can be loaded at server startup, or loaded and unloaded at runtime without restarting the server.
#
# The components supported by this interface include, but are not limited to, storage engines, INFORMATION_SCHEMA tables,
# full-text parser plugins and server extensions.
#
# MySQL distributions include several plugins that implement server extensions:
#
# 		) Plugins for authenticating attempts by clients to connect to MySQL Server.
# 		  Plugins are available for several authentication protocols.
#
# 		) A connection-control plugin that enables administrators to introduce an increasing delay after a certain number of consecutive
# 		  failed client connection attempts.
#
# 		) A password-validation plugin implements password strength policies and assesses the strength of potentional PWs.
#
# 		) Semisynch replication plugins implement an interface to replication capabilities that permit the master to proceed
# 		  as long as at least one slave has responded to each transaction.
#
# 		) Group Replication enables you to create a highly available distributed MySQL service across a group of MySQL server instances,
# 		  with data consistency, conflict detection and resolution, and group membership services - are all built-in.
#
# 		) MySQL Enterprise Edition includes a thread pool plugin that manages connection threads to increase server performance by
# 		  effectively managing statement execution threads for large numbers of client connections.
#
# 		) MySQL Enterprise Edition includes an audit plugin for monitoring and logging of connection and query activity.
#
# 		) MySQL Enterprise Edition includes a firewall plugin that implements an application-level firewall to enable DB admin to permit
# 		  or deny SQL statement execution based on matching against whitelists of accepted statement patterns.
#
# 		) A query rewrite plugin examines statements received by MySQL Server and possibly rewrites them before the server executes them.
#
# 		) Version Tokens enable creation of and Synching around server tokens that applications can use to prevent accessing incorrect or
# 		  out-of-date data.
#
# 		  Version Tokens is based on a plugin lib that implements a version_tokens plugin and a set of user-defined functions.
#
# 		) Keyring plugins provide secure storage for sensitive info.
#
# 		) X Plugin extends MySQL server to be able to function as a document store.
#
# 		  Running X Plugin enables MySQL Server to communicate with clients using the X protocol, which is designed 
# 		  to expose the ACID compliant storage abilities of MySQL as a document store.
#
# 		) Test framework plugins test server services. 
#
# The following section pertains to installation and uninstallation of plugins, and how to determine at runtime which plugins
# are installed and obtain information about them.
#
# More info about writing them later.
#
# The following section pertains to Installing and Uninstalling Plugins:
#
# Server plugins must be loaded into the server before they can be used.
# MySQL supports plugin loading at server startup and runtime.
#
# It is also possible to control the activation state of loaded plugins at startup, and to unload them at runtime.
#
# While a plugin is loaded, information about it is available from the INFORMATION_SCHEMA.PLUGINS table and the SHOW_PLUGINS statement.
#
# INSTALLING PLUGINS:
#
# Before a server plugin can be used, it must be installed using one of the following methods.
#
# In the desc., <plugin_name> stands for a plugin name such as innodb, csv or validate_password.
#
# Built-in plugins:
#
# 		A built-in plugin is known by the server automatically. Normally, the server enables the plugin at startup.
# 		Some built-in plugins permits this to be changed with the --plugin_name[=<activation_state>] option.
#
# Plugins registered in the mysql.plugin system table:
#
# 		The plugin table in the mysql system database serves as a registry of plugins (other than built-in plugins, which need not be registered).
#
# 		At startup, the server loads each plugin listed in the table. Normally, for a plugin loaded from the mysql.plugin table,
# 		the server also enables the plugin.
#
# 		This can be changed with the --plugin_name[=<activation_state>] option.
#
# 		If the server is started with the --skip-grant-tables option, it does not consult the mysql.plugin table and does not
# 		load the plugins listed there.
#
# Plugins named with command-line options:
#
# 		A plugin located in a plugin library file can be loaded at server startup with the --plugin-load, --plugin-load-add,
# 		or --early-plugin-load option.
#
# 		Normally, for a plugin loaded at startup, teh server also enables the plugin. This can be changed with the --<plugin_name>[=<activation_state>] option.
#
# 		The --plugin-load and --plugin-load-add options load plugins after built-in plugins and storage engines have initialized during the
# 		server startup sequence.
#
# 		The --early-plugin-load option is used to load plugins that must be available prior to initialization of built-in plugins and storage engines.
#
# 		The value of each plugin-loading option is a semicolon-separated list of <name>=<plugin_library> and <plugin_library> values.
#
# 		Each <name> is the name of a plugin to load, and <plugin_library> is the name of the library file that contains the plugin code.
# 		If a plugin library is named without any preceding plugin name, the server loads all plugins in the library.
#
# 		The server looks for plugin library files in the directory named by the plugin_dir SYS_VAR.
#
# 		Plugin-loading options do not register any plugin in the mysql.plugin table.
#
# 		For subsequent restarts, the server loads the plugin again only if --plugin-load, --plugin-load-add, or --early-plugin-load is given again.
# 		 		 		
# 		I.e, it produces a one-time plugin-installation operation that persists for a single server invocation.
#
# 		--plugin-load, --plugin-load-add, and --early-plugin-load enable plugins to be loaded even when --skip-grant-tables is given
# 		(which causes the server to ignore the mysql.plugin table)
#
# 		--plugin-load, --plugin-load-add and --early-plugin-load also enables plugins to be loaded at startup that cannot be loaded at runtime.
# 		
# 		The --plugin-load-add option complements the --plugin-load option:
#
# 			) Each instance of --plugin-load resets the set of plugins to load at startup, whereas --plugin-load-add adds a plugin or plugins to the set
# 			of plugins to be loaded without resetting the current set.
#
# 			Consequently, if multiple instances of --plugin-load are specified, onl the last one takes effect.
# 			With multiple instances of --plugin-load-add, all of them take effect.
#
# 			) The argument format is the same as for --plugin-load, but multiple instances of --plugin-load-add can be used to avoid specifying
# 			a large set of plugins as a single long unwieldy --plugin-load argument.
#
# 			) --plugin-load-add can be given in the absence of --plugin-load, but any instance of --plugin-load-add that appears before --plugin-load
# 			has no effect because --plugin-load resets the set of plugins to load.
#
# For example, these options:
#
# 		--plugin-load=x --plugin-load-add=y is equivalent to --plugin-load="x;y"
#
# But:
#
# 		--plugin-load-add=y --plugin-load=x is equal to --plugin-load=x (due to ordering)
#
# The following pertains to Plugins installed with the INSTALL_PLUGIN statement:
#
#		A plugin located in a plugin library file can be loaded at runtime with the INSTALL_PLUGIN statement.
#
# 		The statement also registers the plugin in the mysql.plugin table to cause the server to load it on 
# 		on subsequent restarts. For this reason, INSTALL_PLUGIN requires the INSERT privs for the mysql.plugin table.
#
# 		The plugin library file base name depends on your platform. Common suffixes are .so (Unix/Unix-based systems), .dll for Windows
#
# 		Example: The --plugin-load option installs a plugin at server startup. To install a plugin named myplugin from a plugin library file
# 					named somepluglib.so, use these lines in a my.cnf file:
#
# 					[mysqld]
# 					plugin-load=myplugin=somepluglib.so
#
# 		In this case, the plugin is not registered in mysql.plugin. Restarting the server without the --plugin-load option causes the plugin not to be loaded at startup.
#
# 		Alternatively, the INSTALL_PLUGIN statement causes the server to lodd the plugin code from the library file at runtime:
#
# 			INSTALL PLUGIN myplugin SONAME 'somepluglib.so';
#
# 		INSTALL_PLUGIN also causes "permanent" plugin registration: The plugin is listed in the mysql.plugin table to ensure that the
# 		server loads it on subsequent restarts.
#
# 		Many plugins can be loaded either at server startup or at runtime. However, if a plugin is designed such that it must be loaded
# 		and initialized during server startup, attempts to load it at runtime using INSTALL_PLUGIN produces an error:
#
# 			INSTALL PLUGIN myplugin SONAME 'somepluglib.so';
# 			ERROR 1721 (HY000): Plugin 'myplugin' is marked as not dynamically
# 			installable. You have to stop the server to install it.
#
# 		In this case, you must use --plugin-load, --plugin-load-add or --early-plugin-load.
#
# 		If a plugin is named both using a --plugin-load, --plugin-load-add or --early-plugin-load option
# 		(as a result of an earlier INSTALL_PLUGIN statement) in the mysql.plugin table, the server starts but
# 		writes these mesages to the error log:
#
# 			[ERROR] Function 'plugin_name' already exists
# 			[Warning] Couldn't load plugin named 'plugin_name' with soname 'plugin_object_file'
#
# Controlling Plugin Activation State:
#
# 		If the server knows about a plugin when it starts (for example, because the plugin is named using a --plugin-load option or is registered
# 		in the mysql.plugin table), the server loads and enables the plugin by default.
#
# 		It is possible to control activation state for such a plugin using a --<plugin_name>[=<activation_state>] startup option,
# 		where <plugin_name> is the name of the plugin to affect, such as innodb, csv or validate_password.
#
# 		As with other options, dashes and underscores are interchangable in option names.
# 		Also, activation state values are not case-sensitive.
#
# 		For example, --my_plugin=ON and --my-plugin=on are equivalent.
#
# 			--<plug_name>=OFF - Tells the server to disable the plugin. This may not be possible for certain built-in plugins, such as mysql_native_password.
#
# 			--<plugin_name>[=ON] - tells the server to enable the plugin. (Specifying the option as --<plugin_name> without a value has the same effect.)
# 										  If the plugin fails to initialize, the server runs with the plugin disabled.
#
# 			--<plugin_name>=FORCE - Tells the server to enable the plugin, but if plugin initialization fails, the server does not start.
# 											In other words, this option forces the server to run with the plugin enabled or not at all.
#
# 			--<plugin_name>=FORCE_PLUS_PERMANENT - Like FORCE, but in addition prevents the plugin from being unloaded at runtime.
# 																If a user attempts to do so with UNINSTALL_PLUGIN, an error occurs.
#
# 		PLugin activation states are visible in the LOAD_OPTION column of the INFORMATION_SCHEMA.PLUGINS table.
#
# 		Suppose that CSV, BLACKHOLE and ARCHIVE are built-in pluggable storage engines and that you want the server to load them at startup,
# 		subject to these conditions:
#
# 			) The server is permitted to run if CSV initialization fails 
# 			) must require that BLACKHOLE initialization succeeds 
# 			) should disable ARCHIVE.
# 			
# 			To accomplish that, use these lines in an option file:
#
# 				[mysqld]
# 				csv=ON
# 				blackhole=FORCE
# 				archive=OFF
#
# 			The --enable-<plugin_name> option format is a synonym for --<plugin_name>=ON.
# 			The --disable-<plugin_name> and --skip-<plugin_name> option formats are synonyms for --<plugin_name>=OFF
#
# 			If a plugin is disabled, either explicitly with OFF or implicitly because it was enabled with ON but failed to initialize,
# 			aspects of server operation that require the plugin will change.
#
# 			For example, if the plugin implements a storage engine, existing tables for the storage engine becomes inaccessible,
# 			and attempts to create new tables for the storage engine result in tables that use the default storage engine unless
# 			the NO_ENGINE_SUBSTITUTION SQL mode is enabled to cause an error to occur instead.
#
# 			Disabling a plugin may require adjustment to other options.
#
# 			For example, if you start the server using --skip-innodb to disable InnoDB, other innodb_<xxx> options likely
# 			will need to be omitted at startup.
#
# 			In addition, because InnoDB is the default storage engine - it will not start unless you specify another available storage
# 			engine with --default_storage_engine.
#
# 			You must also set --default_tmp_storage_engine.
#
# UNINSTALLING PLUGINS
#
# 		At runtime, the UNINSTALL PLUGIN statement disables and uninstalls a plugin known to the server.
#
# 		The statement unloads the plugin and removes it from the mysql.plugin system table, if it is registered there.
# 		
# 		For this reason, UNINSTALL_PLUGIN statements require the DELETE privs for the mysql.plugin table.
# 		With the plugin no longer registered in the table, the server does not load the plugin automatically for subsequent restarts.
#
# 		UNINSTALL_PLUGIN can load a plugin regardless of whether it was loaded at runtime with INSTALL_PLUGIN or at startup with a 
# 		plugin-loading option, subject to these conditions:
#
# 			) It cannot unload plugins that are built in to the server. These can be identified as those that have a library name of NULL in the output
# 			  from INFORMATION_SCHEMA.PLUGINS or SHOW_PLUGINS.
#
# 			) It cannot unload plugins for which the server was started with --<plugin_name>=FORCE_PLUS_PERMANENT, which prevents plugin unloading at runtime.
# 			  These can be identified from the LOAD_OPTION column of the INFORMATION_SCHEMA.PLUGINS table.
#
# 		To uninstall a plugin that currently is loaded at server startup with a plugin-loading option, use this procedure:
#
# 			1. Remove any options related to the plugin from the my.cnf file.
#
# 			2. Restart the server.
#
# 			3. Plugins normally are installed using either a plugin-loading option at startup or with INSTALL_PLUGIN at runtime,
# 				but not both.
#
# 				However, removing options fora plugin from the my.cnf file may not be sufficient to uninstall it if at some point,
# 				INSTALL_PLUGIN has also been used.
#
# 				If the plugin still appears in the output from INFORMATION_SCHEMA.PLUGINS or SHOW_PLUGINS,
# 				use UNINSTALL_PLUGIN to remove it from the mysql.plugin table.
#
# 				Then restart the server again.
#
# The following pertains to Obtaining Server PLugin Information:
#
# There are several ways to determine which plugins are installed in the server:
#
# 		) The INFORMATION_SCHEMA.PLUGINS table contains a row for each loaded plugin. 
#
# 		  Any that have a PLUGIN_LIBRARY value of NULL are built in and cannot be unloaded.
#
# 		  		SELECT * FROM INFORMATION_SCHEMA PLUGINS\G
# 				**************************** 1. row ****************************
# 									PLUGIN_NAME: binlog
# 								PLUGIN_VERSION: 1.0
# 								PLUGIN_STATUS:  ACTIVE
# 									PLUGIN_TYPE: STORAGE ENGINE
# 						 PLUGIN_TYPE_VERSION: 50158.0
# 								PLUGIN_LIBRARY: NULL
# 					 PLUGIN_LIBRARY_VERSION: NULL
# 					 			 PLUGIN_AUTHOR: MySQL AB
# 						  PLUGIN_DESCRIPTION: This is a pseudo storage engine to represent the binlog in a transaction
# 						  	   PLUGIN_LICENSE: GPL
# 									LOAD_OPTION: FORCE
# 				...
# 				*************************** 10. row ******************************
# 									PLUGIN_NAME: InnoDB
# 								PLUGIN_VERSION: 1.0
# 								 PLUGIN_STATUS: ACTIVE
# 								 	PLUGIN_TYPE: STORAGE ENGINE
# 						 PLUGIN_TYPE_VERSION: 50158.0
# 						      PLUGIN_LIBRARY: ha_innodb_plugin.so
# 					 PLUGIN_LIBRARY_VERSION: 1.0
# 								 PLUGIN_AUTHOR: Innobase Oy
# 						  PLUGIN_DESCRIPTION: Supports transactions, row-level locking, and foreign keys
# 								PLUGIN_LICENSE: GPL
# 									LOAD_OPTION: ON
# ...
#
# 		) The SHOW_PLUGINS statement displays a row for each loaded plugin. Any that have a Library value of NULL are built in and cannot be unloaded.
#
# 				SHOW PLUGINS\G
# 				***************************** 1. row ********************************
# 
# 					Name: binlog
# 				 Status: ACTIVE
# 				   Type: STORAGE ENGINE
#  			Library: NULL
# 				License: GPL
# 				...
# 				****************************** 10. row *******************************
#
# 					Name: InnoDB
# 				 Status: ACTIVE
# 				 	Type: STORAGE ENGINE
# 				Library: ha_innodb_plugin.so
# 				License: GPL
# 				...
#
# 		) The mysql.plugin table shows which plugins have been registered with INSTALL_PLUGIN.
#
# 		  The table contains only plugin names and library file names, so it does not provide as much information as the
# 		  PLUGIN table or the SHOW_PLUGINS statement.
#
# The following section pertains to MySQL Enterprise Thread Pool
#
# NOTE: MySQL Enterprise Thread Pool is an extension included in MySQL Enterprise Edition, a commercial product.
#
# MySQL Enterprise Edition includes MySQL Enterprise Thread Pool, implemented using a server plugin.
# The default thread-handling model in MySQL Server executes statements using one thread per client connection.
#
# As more clients connect to the server and execute statements, overall performance decreases.
#
# The thread pool plugin provides an alternative thread-handling model designed to reduce overhead and improve performance.
#
# The plugin implements a thread pool that increases server performance by efficiently managing statement execution
# threads for large numbers of client connections.
#
# The thread pool addresses several problems of the model that uses one thread per connection:
#
# 		) Too many thread stacks make CPU caches almost useless in highly parallel execution workloads.
#
# 		  The thread pool promotes thread stack reuse to minimize the CPU cache footprint.
#
# 		) With too many threads executing in parallel, context switching overhead is high.
#
# 		  This also presents a challenging task to the OS system scheduler. 
#
# 		  The thread pool controls the number of active threads to keep the parallelism within the MySQL server at a level that it can handle
# 		  and that is appropiate for the server host on which MySQL is executing.
#
# 		) Too many transactions executing in parallel increases resource contention. In InnoDB, this increases the time
# 		  spent holding central mutexes.
#
# 		  The thread pool controls when transactions start to ensure that not too many execute in parallel.
#
# The following pertains to the Thread Pool Components:
#
# The thread pool features comprises these components:
#
# 		) A plugin library file implements a plugin for the thread pool code as well as several associated monitoring tables that provide info about thread pool ops:
#
# 			) As of MySQL 8.0.14, the monitoring tables are Performance Schema Tables
#
# 			)	< 8.0.14, the monitoring tables are INFORMATION_SCHEMA tables.
#
# 			 	The INFORMATION_SCHEMA tables now are deprecated.
#
# 				To transition old tables to new tables, this is pertinent:
#
# 					 SELECT * FROM INFORMATION_SCHEMA.TP_THREAD_STATE;
#
# 				The application should use this query instead:
#
# 					SELECT * FROM performance_schema.tp_thread_state;
#
# 		NOTE: If you do not load all the monitoring tables, some or all MySQL Enterprise Monitor thread pool graphs will be empty.
#
# 		) Several SYS_VARs are related to the thread pool. The thread_handling SYS_VAR has a value of loaded-dynamically when the server
# 		  successfully loads the thread pool plugin.
#
# 		  The other related VARs are implemented by the thread pool plugin; they are not available unless it is enabled:
#
# 				) thread_pool_algorithm: The concurrency algorithm to use for scheduling
#
# 				) thread_pool_high_priority_connection: How to shcedule statement execution for a session
#
# 				) thread_pool_prio_kickup_timer: How long before the thread pool moves a statement awaiting execution from the low-prio queue to high-prio queue.
#
# 				) thread_pool_max_unused_threads: How many sleeping threads to permit.
#
# 				) thread_pool_size: The number of thread groups in the thread pool. This is the most improtant param controlling thread pool performance.
#
# 				) thread_pool_stall_limit: The time before an executing statement is considered to be stalled.
#
# 			If any variable implemented by the plugin is set to an illegal value at startup, plugin initialization fails and the plugin does not load.
#
# 		) The Performance Schema has instruments that expose information about the thread pool and may be used to investiage operational performance.
# 		  
# 		  SELECT * FROM performance_schema.setup_instruments WHERE NAME LIKE '%thread_pool%';
#
# The following section pertains to Thread Pool Installation:
#
# 		This section describes how to install MySQL Enterprise Thread Pool.
# 
# 		To be usable by the server, the plugin library file must be located in the MySQL plugin directory (the directory named by the plugin_dir SYS_VAR).
# 		If necessary - configure the plugin directory location by setting the value of plugin_dir at server startup.
#
# 		The plugin library file base name is thread_pool. The file name suffix differs per platform (for example, .so on UNIX based systems, .dll for Windows)
#
# THREAD POOL INSTALLATION >= MySQL 8.0.14
#
# 		In MySQL 8.0.14 and higher, the thread pool monitoring tables are Performance Schema tables that are loaded and unloaded along with
# 		the thread pool plugin.
#
# 		The INFORMATION_SCHEMA versions of the tables are deprecated but still there. Those are installed per < 8.0.14
#
# 		To enable thread pool capability, load the plugin by starting the server with the --plugin-load-add option.
#
# 		To do this, put these lines in the server my.cnf file (adjust the .so suffix for your platform if needed):
#
# 			[mysqld]
# 			plugin-load-add=thread_pool.so
#
# 		To verify plugin installation, examine the INFORMATION_SCHEMA.PLUGINS table or use the SHOW_PLUGINS statement.
# 		For instance:
#
# 			SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'thread%';
# 			+---------------+---------------+
# 			| PLUGIN_NAME 	 | PLUGIN_STATUS |
# 			+---------------+---------------+
# 			| thread_pool 	 | ACTIVE 		  |
# 			+---------------+---------------+
#
# 		To verify that the Performance Schema monitoring tables are available, examine the INFORMATION_SCHEMA.TABLES table or use
# 		the SHOW_TABLES statement.
#
# 		For example:
#
# 			SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'performance_schema' AND TABLE_NAME LIKE 'tp%';
# 			+-------------------------+
# 			| TABLE_NAME 				  |
# 			+-------------------------+
# 			| tp_thread_group_state   |
# 			| tp_thread_group_stats   |
# 			| tp_thread_state 		  |
# 			+-------------------------+
#
# If the server loads the thread pool plugin successfully, it sets the thread_handling SYS_VAR to loaded-dynamically.
#
# If the plugin fails to initialize, check the server error log for diagnostic messages.
#
# THREAD POOL INSTALLATION PRIOR TO MySQL 8.0.14
#
# < 8.0.14, the thread pool monitoring tables are plugins separate from the thread pool plugin and can be installed separately.
#
# To enable thread pool capability, load the plugins to be used by starting the server with the --plugin-load-add option.
# To do this, put these lines in the server my.cnf (adjust the .so suffix for your platformas necessary):
#
# 		[mysqld]
# 		plugin-load-add=thread_pool.so
#
# To verify plugin installation, examine the INFORMATION_SCHEMA.PLUGINS table or use the SHOW_PLUGINS statement.
#
# SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'thread%';
# +---------------------------------------+
# | PLUGIN_NAME 		| PLUGIN_STATUS 		|
# +------------------+--------------------+
# | thread_pool 	 	| ACTIVE 				|
# +------------------+--------------------+
#
# To verify that the Performance Schema monitoring table are available, examine the INFORMATION_SCHEMA.TABLES or use the 
# SHOW_TABLES statement.
#
# For example:
#
# SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'performance_schema' AND TABLE_NAME LIKE 'tp%';
#
# +------------------------------------------+
# | TABLE_NAME 										|
# +------------------------------------------+
# | tp_thread_group_state 							|
# | tp_thread_group_stats 							|
# | tp_thread_state 									|
# +------------------------------------------+
#
# If the server loads the thread pool plugin successfully, it sets the thread_handling SYS_VAR to loaded-dynamically.
#
# If the plugin fails to initialize, check the server error log for diagnostic messages.
#
# THREAD POOL INSTALLATION PRIOR TO 8.0.14
#
# Before 8.0.14 - the thread pool monitoring tables are plugins separate from the thread pool plugin and can be installed
# separetely.
#
# To enable thread pool capability, load the plugins to be used by starting the server with the --plugin-load-add option.
#
# For example, if you name only hte plugin library file, the server loads all plugins that it contains (that is, the thread pool
# plugin and all the INFORMATION_SCHEMA tables).
#
# To do this, put these lines in the server my.cnf file (adjust the .so suffix for your platform as necessary):
#
# [mysqld]
# plugin-load-add=thread_pool.so
#
# That is equivalent to loading all thread pool plugins by manually naming them individually:
#
# [mysqld]
# plugin-load-add=thread_pool=thread_pool.so
# plugin-load-add=tp_thread_state=thread_pool.so
# plugin-load-add=tp_thread_group_state=thread_pool.so
# plugin-load-add=tp_thread_group_stast=thread_pool.so
#
# If desired, you can load individual plugins from the library file. To load the thread pool plugin but not the INFORMAITON_SCHEMA tables,
# use an option as this:
#
# [mysqld]
# plugin-load-add=thread_pool=thread_pool.so
#
# To load the thread pool plugin and only the TP_THREAD_STATE INFORMATION_SCHEMA table, use options like this:
#
# [mysqld]
# plugin-load-add=thread_pool=thread_pool.so
# plugin-load-add=tp_thread_state=thread_pool.so
#
# To verify plugin installation, examine the INFORMATION_SCHEMA.PLUGINS table or use the SHOW_PLUGINS statement.
#
# SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'thread%' OR PLUGIN_NAME LIKE 'tp%';
#
# +------------------------------------------------------------+
# | PLUGIN_NAME 							| 		PLUGIN_STATUS 			|
# +---------------------------------+--------------------------+
# | thread_pool 							| ACTIVE 						|
# | TP_THREAD_STATE 						| ACTIVE 						|
# | TP_THREAD_GROUP_STATE 				| ACTIVE 						|
# | TP_THREAD_GROUP_STATS 				| ACTIVE 						|
# +---------------------------------+--------------------------+
#
# If the server loads the thread pool plugin successfully, it sets the thread_handling SYS_VAR to loaded-dynamically.
#
# If a plugin fails to initialize, check the server error log for diagnostic messages.
#
# The following pertains to THREAD POOL OPERATION:
#
# The thread pool consists of a number of thread groups, each of which manages a set of client connections.
# As connections are established, the thread pool assigns them to thread groups in round-robin fashion.
#
# The number of thread groups is configurable using the thread_pool_size SYS_VAR.
# The default number of groups is 16.
#
# The max number of threads per group is 4096 (or 4096 on systems where one thread is used interally)
#
# The thread pool separates connections and threads, so there is no fixed relationship between connections and the
# threads that execute statements received from those connections.
#
# This differs from the default thread-handling model that associates one thread with one connection such that the
# thread executes all statements from the connection.
#
# The thread pool tries to ensure a maximum of one thread executing in each group at any time, but sometimes permits more
# threads to execute temporarily for best performance.
#
# The algorithm works in the following manner:
#
# 		) Each thread group has a listener thread that listens for incoming statements from the connections assigned to the group.
#
# 	 	  When a statement arrives, the thread group either begins executing it immediately or queues it for later execution:
#
# 				) Immediate execution occurs if the statement is the only one received and no statements are queued or currently executing.
#
# 				) Queueing occurs if the statement cannot begin executing immediately.
#
# 		) If immediate execution occurs, execution is performed by the listener thread.
#
# 		  (This means that temporarily no thread in the groups is listening.)
# 			
# 			If the statement finishes quickly, the executing thread returns to listening for statements.
#
# 			Otherwise, the thread pool considers the statement stalled and starts another thread as a listener thread
# 			(creating it if necessary).
#
# 			To ensure that no thread group becomes blocked by stalled statements, the thread pool has a background thread
# 			that regularly monitors thread group states.
#
# 			By using the listening thread to execute a statement that can begin immediately, there is no need to create 
# 			an additional thread if the statement finishes quickly.
#
# 			This ensures the most efficient execution possible in the case of a lower number of concurrent threads.
#
# 			When the thread pool plugin starts, it creates one thread per group (the listener thread), plus the background thread.
# 			Additional threads are created as necessary to execute statements.
#
# 		) The value of the thread_pool_stall_limit SYS_VAR determines the meaning of "finishes quickly" in the above points.
#
# 		  The default time before threads are considered stalled is 60ms but can be set to a maximum of 6s.
#
# 			This param is configurable to enable you to strike a balance appropiate for the server work load.
#
# 			Short wait values permited threads to start more quickly.
#
# 			Short values are also better for avoiding deadlock situations. Long wait time values are useful for workloads that
# 			include long-running statements, to avoid starting too many new statements while the current one is executing.
#
# 		) The thread pool focuses on limiting the number of concurrent short-running statements.
#
# 			Before an executing statement reaches the stall time, it prevents other statements from beginning to execution.
#
# 			If the statement executes past the stall time, it is permitted to continue but no longer prevents other statements
# 			from starting.
#
# 			In this way, the thread pool tries to ensure that in each thread group there is never more than one short-running statement,
# 			although, there might be multiple long-running statements.
#
# 			It is undesirable to let long-running statements prevent other statements from executing because there is no limit on the amount
# 			of waiting that might be necessary.
#
# 			For example, on a replication master, a thread that is sending binary log events to a slave effectively runs forever.
#
# 		) A statement becomes blocked if it encounters a disk I/O operation or a user level lock (row lock or table lock).
#
# 		  The block would cause the thread group to become unused, so there are callbacks to the thread pool to ensure that
# 			the thread pool can immediately start a new thread in this group to execute another statement.
#
# 			When a blocked thread returns, the thread pool permits it to restart immediately.
#
# 		) There are two queues, a high prio queue and a low prio queue.
#
# 			The first statement in a transaction goes to the low-prio queue. 
#
# 			Any following statements for the transaction go to the high prio queue if the transaction is ongoing
# 			(statements for it have begun executing), or to the low-priority queue otherwise.
#
# 			Queue assignment can be affected by enabling the thread_pool_high_priority_connection SYS_VAR,
# 			which causes all queued statements for a session to go into the high prio queue.
#
# 			Statements for a nontransactional storage engine, or a transactional engine if autocommit is enabled,
# 			are treated as low-prio statements because in this case each statement is a transaction.
#
# 			Thus, given a mix of statements for InnoDB and MyISAM tables, the thread pool prios those for InnoDB
# 			over those for MyISAM unless autocommit is enabled.
#
# 			With autocommit enabled, all statements will be low prio.
#
# 		) When the thread group selects a queued statement for execution, it first looks in the high-priority queue, then in the
# 		  low prio queue.
#
# 			If a statement is found, it is removed from its queue and begins to execute.
#
# 		) If a statement stays in the low prio queue for too long, the thread pool moves it to the high prio queue.
#
# 			The value of the thread_pool_prio_kickup_timer SYS_VAR controls the time before movement.
#
# 			For each thread group, a max of one statement per 10ms or 100 per second will be moved from the low prio queue
# 			to the high prio queue.
#
# 		) The thread pool reuses the most active threads to obtain a much better use of CPU caches. This is a small adjustment that
# 			has a great impact on performance.
#
# 		) While a thread executes a statement from a user connection, Performance Schema instrumentation accounts thread activity
# 		  to the user connection.
#
# 			Otherwise, Performance Schema accounts actvitiy to the thread pool.
#
# Here are examples of conditions under which a thread group might have multiple threads started to execute statements:
#
# 		) One thread begins executing a statement, but runs long enough to be considered stalled.
#
# 		The thread group permits another thread to begin executing another statement even though the first thread is doing it's job.
#
# 		) One thread begins executing a statement, then becomes blocked and reports this back to the thread pool.
#
# 			The thread group permits another thread to begin executing another statement.
#
# 		) One thread begins executing a statement, becomes blocked, but does not report back that it is blocked because the
# 		  block does not occur in code that has been instrumented with thread pool callbacks.
#
# 			In this case, teh thread appears to the thread group to be still running.
#
# 			If the block lasts long enough for the statement to be considered stalled, the group permits another thread to begin
# 			executing another statement.
#
# The thread pool is designed to be scalable across an increasing number of connections. It is also designed to avoid
# deadlocks that can arise from limiting the number of actively executing statements.
#
# It is important that threads that do not report back to the thread pool do not prevent other statements from executing
# and thus causes the thread pool to become deadlocked.
#
# Examples of such statements are:
#
# 		) Long running statements. These would lead to all resources only used by a few statements, and they could prevent all others from accessing the server.
#
# 		) Binary log dump threads that read the binary log and sends it to slaves.
#
# 			This is a kind of long running "statement" (i.e, constantly) that runs for a very long time, and should not prevent other statements from executing.
#
# 		) Statements blocked on a row lock, table lock, sleep or any other blocking acvitiy that has not been reported back to the thread pool by MySQL
# 			Server or a storage engine.
#
# In each case, to prevent deadlock, the statement is moved to the stalled category when it does not complete quickly,
# so that the thread group can permit another statement to begin executing.
#
# With this design, when a thread executes or becomes blocked for an extended time, the thread pool moves the thread to the stalled category
# and for the rest of the statements execution,, it does not prevent other statements from executing.
#
# The max number of threads that can occur is the sum of max_connections and thread_pool_size.
#
# This can happen in a situation where all connections are in execution mode and an extra thread is created per group
# to listen for more statements.
#
# It can happen, albeit not very feasible.
#
# The following pertains to Thread Pool Tuning:
#
# This section provides guidelines on setting thread pool system variables for best performance, measured using a metric such as trans/sec.
#
# thread_pool_size is the most important parameter controlling thread pool performance.
# It cna be set only at server startup.
#
# Our experience in testing the thread pool indicates the following:
#
# 	) If the primary storage engine is InnoDB, the optimal thread_pool_size setting is likely between 16 and 36, with the most common
# 	  optimal values leaning towards 26 - 36. We have not seen any situation where the setting has been optiomal beyond 36.
#
# 	  There may be special cases where  avalue of smaller than 16 is optimal.
#
# 		For workloads such as DBT2 and Sysbench, the optimum for InnoDB seems to be usually around 36.
#
# 		For very write-intensive workloads, the optimal setting can sometimes be lower.
#
# 	) If the primary storage engine is MyISAM the thread_pool_Size setting should be fairly low.
#
# 		We tend to get optimal performance for values from 4 to 8.
#
# 		Higher values tend to have slightly negative but not dramatic impact on performance.
#
# Another SYS_VAR, thread_pool_stall_limit, is important for handling of blocked and long-running statements.
#
# If all calls that block the MySQL Server are reported to the thread pool, it would always know when execution
# threads are blocked.
#
# However, this may not always be true. For example, blocks could occur in code that has not been instrumented with
# thread pool callbacks.
#
# For such cases, the thread pool must be able to identify threads that appear to be blocked.
#
# This is done by means of a timeout, the length of which can be tuned using the thread_pool_stall_limit SYS_VAR.
#
# This parameter ensures that the server does not become completely blocked.
#
# The v alue of thread_pool_stall_limit has an upper limit of 6 seconds to prevent the risk of deadlock servers.
#
# thread_pool_stall_limit also enables the thread pool to handle long-running statements.
#
# If a long-running statement was permitted to block a thread group, all other connections assigned
# to the group would be blocked and unable to start execution until the long-running statements were completed.
#
# In the worst case, this could take hours or even days.
#
# The value of thread_pool_stall_limit should be chosen such that statements that execute longer than its value are
# considered stalled.
#
# Stalled statements generate a lot of extra overhead since they involve extra context switches and in some cases even
# extra thread creations.
#
# On the other hand, setting the thread_pool_stall_limit param too high means that long-running statements will block
# a number of short-running statements for longer than necessary.
#
# Short wait values permit threads to start more quickly.
#
# Short values are also better for avoiding deadlock situations. 
#
# Long wait values are useful for workloads that include long-running statements, to avoid starting
# too many new statements while the current one executes.
#
# Suppose a server executes a workload where almost all statements complete within 100ms even when the server is loaded,
# and the remaining statements take between 100ms and 2 hours fairly evenly spread.
#
# In this case, it would make sense to set thread_pool_stall_limit to 10 (meaning 100ms).
# The default value of 60ms is okay for servers that primarily execute very simple statements.
#
# The thread_pool_stall_limit PARAM can be changed at runtime to enable you to strike a balance appropiate for the
# server work load.
#
# Assuming that the tp_thread_group_stats table is enabled, you can use the following query to determine the fraction
# of executed statements that stalled:
#
# SELECT SUM(STALLED_QUERIES_EXECUTED) / SUM(QUERIES_EXECUTED) FROM performance_schema.tp_thread_group_stats;
#
# This number should be as low as possible. To decrease the likelihood of statements stalling, increase the value of
# thread_pool_stall_limit. 
#
# When a statement arrives, what is the max value time it can be delayed before it actually starts executing?
#
# Assume:
#
# ) htere are 200 statements queued in the low prio
#
# ) There are 10 statements queued in the high prio queue
#
# ) thread_pool_prio_kickup_timer is set to 10K (10 sec)
#
# ) thread_pool_stall_limit is set to 100 (1 sec)
#
# In the worst case, the 10 high prio statements present 10 tranactions that continue executing for a long time.
#
# Thus, worst case, no statements will be moved to high prio - because it's always awaiting an execution of a statement.
#
# After 10 seconds, the new statement is eligible to be moved to high prio.
#
# However, before it can move - all statements before it must be moved as well.
#
# This could take anotehr 2 sec because a max of 100 statements per sec are moved to high prio queue.
#
# Now when the statement reaches the high prio queue, there could potentionally be many long-running statements
# ahead of it.
#
# In the worst case, everyone of those will become stalled and take 1 second each before the next statement is retrieved
# from the high prio queue.
#
# Thus - in that scenario, it would take 222 seconds before the new statements starts executing.
#
# ----
#
# thread_kick_up = 10 seconds
#
# ----
#
# high prio queue: 
#
# 10 ----- 1 second stall ------->
# 
# low prio queue:
#
# 200 ----------->
#
# New statement:
#
# 1 --------------->
#
# 
# low -> high = 100/sec MAX
#
# 200 low -> high = 200/100 sec (2 sec)
#
# KICK-UP TIME FROM LOW TO HIGH (10 sec)
#
# IF ALL STALL:
#
# 210 statements stall * STALL TIME (1 second, 210)
#
# 210 + 10 + 2
#
# Total of 222 seconds.
#
# ----
#
# The following pertains to The Rewriter Query Rewrite Plugin
#
# MySQL supports query rewrite plugins that can examine and possibly modify SQL statements received by the server before the
# server executes them.
#
# MySQL distribs include a postparse query rewrite plugin named Rewriter and scripts for installing the plugin and its associated components.
# These components work together to provide statement-rewriting capability:
#
# 		) A server-side plugin named Rewriter examines statements and may rewrite them, based on its in-memory cache of rewrite rules.
#
# 		) These statements are subject to rewriting:
#
# 			) >= 8.0.12 -> SELECT, INSERT, REPLACE, UPDATE and DELETE
#
# 			) < 8.0.12 -> SELECT
#
# 		  Standalone statements and prepared-statements are subject to rewriting. Statements occuring within view definitions or stored programs
# 		  are not subject to rewriting.
#
# 		) The Rewriter plugin uses a database named query_rewrite containing a table named rewrite_rules.
#
# 			The table provides persistent storage for the rules that the plugin uses to decide whether to rewrite statements.
#
# 			Users communicate with the plugin by modifying the set of rules stoed in this table.
#
# 			The plugin communicates with users by setting the message column of table rows.
#
# 		) The query_rewrite DB contains a stored procedure named flush_rewrite_rules() that loads the contents of the rules table into the plugin.
#
# 		) A user defined function named load_rewrite_rules() is used by the flush_rewrite_rules() stored procedure.
#
# 		) The Rewriter plugin exposes SYS_VARs that enable plugin configuration and STATUS vars that provide runtime operational information.
#
# The following section describes how to install and use the Rewriter plugin.
#
# The following pertains to Installing or Uninstalling the Rewriter Query Rewrite Plugin
#
# NOTE:
#
# 		If installed, the Rewriter plugin involves some overhead even when disabled. To avoid this overhead, do not install the plugin lest you intend to use it.
#
# To install or uninstall the Rewriter query rewrite plugin, choose the appropriate script located in the share directory of your MysQL app:
#
# 		install_rewriter.sql : Choose this script to install the Rewriter plugin and its associated components.
#
# 		uninstall_rewriter.sql : Choose this script to uninstall the Rewriter plugin and its associated components.
#
# Run the chosen scripts as follows:
#
# 		mysql -u root -p < install_rewriter.sql
# 		Enter PW (root PW here)
#
# The example here uses the install_rewriter.sql installation script.
# 
# To verify that it is installed and enabled, run this statement:
#
# 		SHOW GLOBAL VARIABLES LIKE 'rewriter_enabled';
# 
# 		+----------------------------------+
# 		| Variable_name 		| Value 		  |
# 		+--------------------+-------------+
# 		| rewriter_enabled 	| ON 			  |
# 		+--------------------+-------------+
#
# The following pertains to how to Use the Rewriter Query Rewrite Plugin:
#
# To enable or disable the plugin, enable or disable the rewriter_enabled SYS_VAR.
#
# By default, the Rewriter plugin is enabled when you install it.
# To set the initial plugin state explicitly, you can set the variable at server startup.
#
# For example, to enable the plugin in an option file - use these lines:
#
# 		[mysqld]
# 		rewriter_enabled=ON
#
# It is also possible to enable or disable the plugin at runtime:
#
# 		SET GLOBAL rewriter_enabled = ON;
# 		SET GLOBAL rewriter_enabled = OFF;
#
# Assuming that the Rewriter plugin is enabled, it examines and possibly modifies each rewritable statement received by the server.
#
# The plugin determines whether to rewrite statements based on its in-memory cache of rewriting rules, which are loaded from the
# rewrite_rules table in the query_rewrite DB.
#
# These statements are subject to rewriting:
#
# 		>= 8..0.12 : SELECT, INSERT, REPLACE, UPDATE and DELETE
#
# 		< 8.0..12 : SELECT
#
# Standalone statements and prepared statements are subject to rewriting.
#
# Statements occuring within view defs or stored programs are not subject to rewriting.
#
# ADDING REWRITE RULES
#
# To add rules for the Rewriter plugin, add rows to the rewrite_rules table, then invoke the flush_rewrite_rules() stored procedure
# to load the rules from the table into the plugin.
#
# The following example creates a simple rule to match statements that select a single literal value:
#
# INSERT INTO query_rewrite.rewrite_rules (pattern, replacement)
# VALUES('SELECT ?', 'SELECT ? + 1');
#
# The resulting table contents will look as follows:
#
# 		SELECT * FROM query_rewrite.rewrite_rules\G
# 		****************************** 1. row ******************************
# 									id: 1
# 							pattern: SELECT ?
# 					pattern_database: NULL
# 				replacement: 		SELECT ? + 1
# 				enabled: 			YES
# 				MESSAGE: 			NULL
# 				pattern_digest: 	NULL
# 			normalized_pattern:  NULL
#
# The rule specifies a pattern template indicating which SELECT statements to match and a replacement template indicating how to
# rewrite matching statements.
#
# However, adding rules to the rewrite_rules table is not sufficient to cause the Rewriter plugin to use the rule.
# You must invoke the flush_rewrite_rules() to load the table contents into the plugin in-memory cache:
#
# 		CALL query_rewrite.flush_rewrite_rules();
#
# TIP: 
# 		If your rewrite rules seem not to be working properly, make sure that you have reloaded the rules by calling the flush_rewrite_rules()
#
# When the plugin reads each rule from the rules table, it computes a normalized (statement digest) form from the pattern and a digest
# hash value, and uses them to update the normalized_pattern and pattern_digest column:
#
# 		SELECT * FROM query_rewrite.rewrite_rules\G
# 		************************** 1. row ****************************
# 										id: 1
# 								pattern: SELECT ?
# 					pattern_database: NULL
# 						replacement:  	SELECT ? + 1
# 							enabled: 	YES
# 								message: NULL
# 					  pattern_digest: <digest>
# 				 normalized_pattern: select ?
#
# If a rule cannot be loaded due to some error, calling flush_rewrite_rules() produces an error:
#
# 		CALL query_rewrite.flush_rewrite_rules();
# 		ERROR 1644 (45000): Loading of some rule(s) failed.
#
# When this occurs, the plugin writes an error message to the message column of the rule row to communicate the problem.
# Check the rewrite_rules table for rows with non-NULL message column values to see what problems exist.
#
# Patterns use the same syntax as prepared statements. Within a pattern template, ? chars act as param markes that match
# data values.
#
# Param markers can be used only where data values should appear, not for SQL keywords, identifiers and so forth.
# The ? characters should not be enclosed within quotation marks.
#
# Like the pattern, the replacement can contain ? chars. For a statement that matches a pattern template,
# the plugin rewrites it, replacing the ? param marker in the replacement using data values matched by the
# corresponding markers in the pattern.
#
# The result is a complete statement string.
#
# The plugin asks the server to parse it, and returns the results to the server as the representaiton of the rewritten statement.
#
# After adding and loading the rule, check whether rewriting occurs according to whether statements match the rule pattern:
#
# 		SELECT PI();
# 		+----------------+
# 		| PI() 			  |
# 		+----------------+
# 		| 3.141593 		  |
# 		+----------------+
# 		1 row in set (0.01 sec)
#
# 		SELECT 10;
# 		+------------+
# 		| 10 + 1 	 |
# 		+------------+
# 		| 			11  |
# 		+------------+
#
# 		1 row in set, 1 warning (0.00 sec)
#
# No rewriting occurs for hte first, but does for the second.
#
# The second statement illustrates that when the Rewriter plugin rewrites a statement, it produces a 
# warning message.
#
# To view the message, use SHOW WARNINGS:
#
# SHOW WARNINGS\G
# ***************************** 1. row ********************************
#
# 		Level: Note
# 		 Code: 1105
# 	 Message: Query 'SELECT 10' rewritten to 'SELECT 10 + 1' by a query rewrite plugin
#
# A statement need not be rewritten to a statement of the same type.
# The following example loads a rule that rewrites DELETE statements to UPDATE statements:
#
# 		INSERT INTO query_rewrite.rewrite_rules (pattern, replacement)
# 		VALUES('DELETE FROM db1.t1 WHERE col = ?',
# 				 'UPDATE db1.t1 SET col = NULL WHERE col = ?');
# 		CALL query_rewrite.flush_rewrite_rules();
#
# To enable or disable an existing rule, modify its enabled column and reload the table into the plugin.
# To disable rule 1:
#
# 		UPDATE query_rewrite.rewrite_rules SET enabled = 'NO' WHERE id = 1;
# 		CALL query_rewrite.flush_rewrite_rules();
#
# This enables you to deactive a rule without removing it from a table.
#
# To re-enable rule 1:
#
# 		UPDATE query_rewrite.rewrite_rules SET enabled = 'YES' WHERE id = 1;
# 		CALL query_rewrite.flush_rewrite_rules();
#
# The rewrite_rules table contains a pattern_database column that Rewriter uses for matching table names that are not 
# qualified with a database name:
#
# 		) Qualified table names in statements match qualified names in the pattern if corresponding database and table names are identical
#
# 		) Unqualified table names in statements match unqualified names in the pattern only if the default database is the same as pattern_database
# 		  and the table names are identical.
#
# Suppose that a table named appdb.users has a column named id and that application are expected to select rows from the
# table using a query of one of these forms, when the secondary can be used only if appdb is the default db:
#
# SELECT * FROM users WHERE appdb.id = id_value;
# SELECT * FROM users WHERE id = id_value; #can only be used if appdb is default DB
#
# Suppose also that the id column is renamed to user_id (perhaps the table must be modified to add another type of ID and it is
# necessary to indicate more specifically what type of ID the id column represents).
#
# The change means that applications must refer to user_id rather than id in the WHERE clause.
#
# But if there are old applications that cannot be written to change the SELECT queries they generate, they will no longer
# work properly.
#
# The Rewriter plugin can solve this problem.
#
# To match and rewrite statements whether or not they qualify the table name, add the following two rules and reload the rules table:
#
# 		INSERT INTO query_rewrite.rewrite_rules
# 			(pattern, replacement) VALUES(
# 			'SELECT * FROM appdb.users WHERE id = ?',
# 			'SELECT * FROM appdb.users WHERE user_id = ?'
# 			);
# 		INSERT INTO query_rewrite.rewrite_rules
# 			(pattern, replacement, pattern_database) VALUES(
# 			'SELECT * FROM users WHERE id = ?',
# 			'SELECT * FROM users WHERE user_id = ?',
# 			'appdb'
# 			);
# 		CALL query_rewrite.flush_rewrite_rules();
#
# Rewriter uses the first rule to match statements that use the qualified table name.
#
# It uses the second to match statements that used the unqualified name, but only if the
# default DB is appdb (the value in pattern_database)
#
# HOW STATEMENTS MATCHING WORKS
#
# The Rewriter plugin uses statement digests and digest hash values to match incoming statements against rewrite rules in stages.
# The max_digest_length SYS_VAR determines the size of the buffer used for computing statement digests.
#
# Larger values enable computation of digests that distinguish longer statements.
#
# Smaller values use less memory but increase the likelihood of longer statements coliding with the same digest value.
#
# The plugin matches each statement to the rewrite rules as follows:
#
# 		1. Compute the statement digest hash value and compare it to the rule digest hash values.
#
# 			This is subject to false positives, but serves as a quick rejection test.
#
# 		2. If the statement digest hash value matches any pattern digest hash value, match the normalized (statement digest) form of the
# 			statement to the normalized form of the matching rule patterns.
#
# 		3. If the normalized statement matches a rule, compare the literal values in the statement and the pattern .
#
# 			A ? char in the pattern matches any literal value in the statement.
#
# 			If the statement prepares a statement, ? in teh pattern also matches ? in the statement.
#
# 			Otherwise, corresponding literals must be the same.
#
# If multiple rules match a statement, it is nondeterminsitic which one the plugin uses to rewrite the statement.
#
# If a pattern contains more markers than the replacement, the plugin discards excess data values.
#
# If a pattern contains fewer markers than the replacement, it is an error.
#
# The plugin notices this when the rules table is loaded, writes an error message to the message column of the rule row to communicate
# the problem, and sets the Rewriter_reload_error status variable to ON. 			 
#
# REWRITING PREPARED STATEMENTS
#
# Prepared statements are rewritten at parse time (that is, when they are prepared), not when they are executed later.
#
# Prepared statements differ from nonprepared statements in that they may contain ? chars as param markers.
# To match a ? in a prepared statement, a Rewriter pattern must contain ? in the same location.
#
# Suppose that a rewrite rule has this pattern:
#
# 		SELECT ?, 3
#
# The following table showcases several prepared SELECT statements and whether the rule pattern matches them.
#
# 		PREPARED STATEMENT 						WHETHER PATTERN MATCHES STATEMENT
#
# 		PREPARE s AS 'SELECT 3,3' 				Yes
# 		PREPARE s AS 'SELECT ?,3' 				Yes
# 		PREPARE s AS 'SELECT 3, ?' 			No
# 		PREPARE s AS 'SELECT ?, ?' 			No -> Won't go through, as prepared statement must have ? in the same placement as Statement, i.e ?,3 is invalid
#
# REWRITER PLUGIN OPERATIONAL INFORMATION
#
# The Rewriter plugin makes information available about its operation by means of several status variables:
#
# 		SHOW GLOBAL STATUS LIKE 'Rewriter%';
#
# 		+---------------------------------------------+
# 		| Variable_name 							| Value 	 |
# 		+-----------------------------------+---------+
# 		| Rewriter_number_loaded_rules 		| 1 		 |
# 		| Rewriter_number_reloads 				| 5 		 |
# 		| Rewriter_number_rewritten_queries | 1		 |
# 		| Rewriter_reload_error 				| ON 		 |
# 		+-----------------------------------+---------+
#
# When you load the rules table by calling the flush_rewrite_rules() stored procedure, if an error occurs for some rule,
# the CALL statement produces an error, and the plugin sets the Rewriter_reload_error status variable to ON:
#
# 		CALL query_rewrite.flush_rewrite_rules();
# 		ERROR 1644 (45000): Loading of some rule(s) failed.
#
# 		SHOW GLOBAL STATUS LIKE 'Rewriter_reload_error';
# 		+--------------------------------+-------+
# 		| Variable_name 						| Value |
# 		+--------------------------------+-------+
# 		| Rewriter_reload_error 			| ON 	  |
# 		+--------------------------------+-------+
#
# In this case, check the rewrite_rules table for rows with non-NULL message column values to see what problems exist.
#
# Rewriter Plugin Use of Character Sets
#
# When the rewrite_rules table is loaded into the Rewriter plugin, the plugin interprets statements using the
# current global value of the character_set_client SYS_VAR.
#
# If the global character_set_client value is changed subsequently, the rules must be reloaded.
#
# A client must have a session character_set_client value identical to what the global value was when the rules table
# was loaded or rule matching will not work for that client.
#
# The following pertains to REWRITER QUERY REWRITE PLUGIN REFERENCE
#
# The following discussion serves as a reference to these components associated with the Rewriter query rewrite plugin:
#
# 		) The Rewriter rules table in the query_rewrite database
#
# 		) Rewriter procedures and functions
#
# 		) Rewriter system and status variables
#
# Rewriter Query Rewrite Plugin Rules Table
#
# The rewrite_rules table in the query_rewrite DB provides a persistent storage for the rules that the Rewriter plugin uses
# to decide whether to rewrite statements.
#
# Users communicate with the plugin by modifying the set of rules stored in this table. The plugin communicates information to users
# by setting the table's message column.
#
# 		NOTE:
#
# 			The rules table is loaded into the plugin by the flush_rewrite_rules stored procedure.
#
# 			Unless the procedure has been called following the most recent table modification,
# 			the table contents do not necessarily correspond to the set of rules the plugin is using.
#
# The rewrite_rules table has these columns:
#
# 		) id
#
# 			The rule ID. This column is the table primary key. You can use the ID to uniquely identify any rule.
#
# 		) pattern
#
# 			The template that indicates the pattern for statements that the rule matches.
# 			Use ? to represent param markers that match data values.
#
# 		) pattern_database
#
# 			The database used to match unqualified table names in statements.
#
# 			Qualified table names in statements match qualified names in the pattern if corresponding database and table names are identical.
#
# 			Unqualified table names in statements match unqualified names in the pattern only if the default database is the same as 
# 			pattern_database and the table names are identical.
#
# 		) replacement
#
# 			The template that indicates how to rewrite statements matching the pattern column value.
#
# 			Use ? to represent param markers that match data values.
#
# 			In rewritten statements, the plugin replaces ? param markers in replacement using data values matched by
# 			the corresponding markers in pattern.
#
# 		) enabled
#
# 			Whether the rule is enabled. Load operations (performed by invoking the flush_rewrite_rules() stored procedure) load the rule
# 			from the table into the Rewriter in-memory cache only if this column is YES.
#
# 			This column makes it possible to deactivate a rule without removing it.
# 			Set the column value to something other than YES and reload the table into the plugin.
#
# 		) message
#
# 			The plugin uses this column for communicating with users.
#
# 			If no error occurs when the rules table is loaded into memory, the plugin sets the message column to NULL.
# 
# 			A non-NULL value indicates an error and the column contents are the error message.
# 			Errors can occur under these circumstances:
#
# 				) Either the pattern or the replacement is an incorrect SQL statement that produces syntax errors.
#
# 				) The replacement contains more ? params markers than the pattern.
#
# 			If a load error occurs, the plugin also sets the Rewriter_reload_error STATUS_VAR to ON.
#
# 		) pattern_digest
#
# 			This column is used for debugging and diagnostics.
#
# 			If the column exists when the rules table is loaded into memory, the plugin updates
# 			it with the pattern digest.
#
# 			This column may be useful if you are trying to determine why some statement fails to be rewritten.
#
# 		) normalized_pattern
#
# 			This column is used for debugging and diagnostics. 
#
# 			If the column exists when the rules table is loaded into memory, the plugin updates it with the normalized
# 			form of the pattern.
#
# 			This column may be useful if you are trying to determine why some statement fails to be rewritten.
#
# REWRITER QUERY REWRITE PLUGIN PROCEDURES AND FUNCTIONS
#
# Rewriter plugin operation uses a stored procedure that loads the rules table into its in-memory cache, and a helper
# user-defined function (UDF).
#
# Under normal operation, users invoke only the stored procedure.
#
# The UDF is intended to be invoked by the stored procedure, not directly by users.
#
# 		) flush_rewrite_rules()
#
# 			This stored procedure uses the load_rewrite_rules() UDF to load the contents of the rewrite_rules table
# 			into the Rewriter in-memory cache.
#
# 			Calling flush_rewrite_rules() implies COMMIT.
#
# 			Invoke this procedure after you modify the rules table to cause the plugin to update its cache from the
# 			new table contents.
#
# 			If any errors occur, the plugin sets the message column for the appropriate rule rows in the table and
# 			sets the Rewriter_reload_error status variable to ON.
#
# 		) load_rewrite_rules()
#
# 			This UDF is a helper routine used by the flush_rewrite_rules() stored procedure.
#
# REWRITER QUERY REWRITE PLUGIN SYS_VARs
#
# The Rewriter query rewrite plugins support the following SYS_VARs.
# These variables are available only if the plugin is installed.
#
# 		) rewriter_enabled
#
# 			SYS_VAR 					rewriter_enabled
# 			Scope: 					Global
# 			Dynamic: 					Yes
# 			SET_VAR Hint applies: 	 No
# 			Type: 					Boolean
# 			Default: 				 	 ON
#
# 			Whether the Rewriter query rewrite plugin is enabled.
#
# 		) rewriter_verbose
#
# 			SYS_VAR 					rewriter_verbose
# 			Scope: 					Global
# 			Dynamic: 				   Yes
# 			SET_VAR Hint: 				No
# 			Type: 						INteger
#
# 			For internal use.
#
# REWRITER QUERY REWRITE PLUGIN STATUS VARS
#
# The Rewriter query rewrite plugin supports the following status vars.
#
# These variables are available only if the plugin is installed.
#
# 			) Rewriter_number_loaded_rules
#
# 				THe number of rewrite plugin rewrite rules successfully loaded from the rewrite_rules table into memory for use by the Rewriter plugin.
#
# 			) Rewriter_number_reloads
#
# 				The number of times the rewrite_rules table has been loaded into the in-memory cache used by the Rewriter plugin
#
# 			) Rewriter_number_rewritten_queries
#
# 				The number of queries rewritten by the Rewriter query rewrite plugin since it was loaded.
#
# 			) Rewriter_reload_error
#
# 				Whether an error occurred the most recent time that the rewrite_rules table was loaded into the in-memory
# 				cache used by the Rewriter plugin.
#
# 				If the value is OFF, no error occured.
#
# 				If the value is ON, an error occured.
#
# 				Check the messages column of the rewriter_rules table for error messages.
#
# VERSION TOKENS
#
# MySQL includes Version Tokens, a feature that enables creation of and synchronization around server tokens that applications
# can use to prevent accessing incorrect or out-of-date Data.
#
# The Version Tokens interface has these characteristics::
#
# 		) Version tokens are pairs consisting of a name that servers as a key or identifier, plus a value
#
# 		) Version tokens can be locked. An application can use token locks to indicate to other cooperating applications that tokens are in used and
# 			should not be modified.
#
# 		) Version token lists are established per server; for example, to specify the server assignment or operational state.
#
# 			In addition, an application that communicates with a server can register its own list of tokens that indicate the state
# 			it requires the server to be in.
#
# 			An SQL statement sent by the application to a server not in the required state produces an error.
#
# 			This is a signal to the application that it should seek a different server in the required state to receive
# 			the SQL statement.
#
# The following section describes the components of Version Tokens, discuss how to install and use them, and provides refernce.
#
# VERSION TOKEN COMPONENTS
#
# Version Tokens is based on a plugin library that implements these components:
#
# 		) A server-side plugin named version_tokens holds the list of version tokens associated with the server and subscribes to
# 		  notifications for statement execution events.
#
# 		  The version_tokens plugin uses the audit plugin API to monitor incoming statements from clients and matches each client's
# 			session-specific version token list against the server version token list.
#
# 			If there is a match, the plugin lets the statement through and the server continues to process it.
#
# 			Otherwise, the plugin returns an error to the client and the statement fails.
#
# 		) A set of user-defined functions (UDFs) provides an SQL-level API for manipulating and inspecting the list of server version
# 		  tokens maintained by the plugin.
#
# 			The VERSION_TOKEN_ADMIN or SUPER privs is required to call any of the Version Token UDFs.
#
# 		) When the version_tokens plugin loads, it defines the VERSION_TOKEN_ADMIN dynamic privilege.
#
# 			This priv can be granted to users of the UDFs.
#
# 		) A SYS_VAR enables clients to specify the list of version tokens that registers the required server state.
#
# 			If the server has a different state when a client sends a statement, the client receives an error.
#
# INSTALLING OR UNINSTALLING VERSION TOKENS
#
# NOTE:
#
# 		If installed, Version Tokens involves some overhead. To avoid this, do not install lest you plan to use them.
#
# This section describes how to install or uninstall Version Tokens, which is implemented in a plugin library file containing
# a plugin and user-defined functions (UDFs).
#
# To be usable by the server, the plugin library file must be located in the MySQL plugin dir (the dir named by the plugin_dir SYS_VAR)
# If necessary, configure the plugin dir location by setting the value of plugin_dir at server startup.
#
# The plugin library file base name is version_tokens. The file name suffix differs per platform (for example, .so for Unix
# and Unix-like systems. .dll for Windows)
#
# To install the Version Token plugin and UDFs, use the INSTALL_PLUGIN and CREATE_FUNCTION statements (adjust the .so suffix for your platform, if needed):
#
# 		INSTALL PLUGIN version_tokens SONAME 'version_token.so';
# 		CREATE FUNCTION version_tokens_set RETURNS STRING
# 			SONAME 'version_token.so';
# 		CREATE FUNCTION version_tokens_show RETURNS STRING
# 			SONAME 'version_token.so';
#
#  	CREATE FUNCTION version_tokens_edit RETURNS STRING
# 			SONAME 'version_token.so';
# 		CREATE FUNCTION version_tokens_delete RETURNS STRING
# 			SONAME 'version_token.so';
#
# 		CREATE FUNCTION version_tokens_lock_shared RETURNS INT
# 			SONAME 'version_token.so';
# 		CREATE FUNCTION version_tokens_lock_exclusive RETURNS INT
# 			SONAME 'version_token.so';
#
# 		CREATE FUNCTION version_tokens_unlock RETURNS INT
# 			SONAME 'version_token.so';
#
# You must install the UDFs to manage the server's version token list, but you must also install the plugin ebcause the UDFs will
# not work correctly without it.
#
# If the plugin and UDFs are used on a master replication server, install them on all slave servers as well to avoid replication problems.
#
# Once installed as just described, the plugin and UDFs remain installed until uninstalled.
# To remove them, use the UNINSTALL_PLUGIN and DROP_FUNCTION statements:
#
# 		UNINSTALL PLUGIN version_tokens;
# 		DROP FUNCTION version_tokens_set;
# 		DROP FUNCTION version_tokens_show;
# 		DROP FUNCTION version_tokens_edit;
#
# 		DROP FUNCTION version_tokens_delete;
# 		DROP FUNCTION version_tokens_lock_shared;
# 		DROP FUNCTION version_tokens_lock_exclusive;
# 		DROP FUNCTION version_tokens_unlock;
#
# USING VERSION TOKENS
#
# Before using Version Tokens, install it according to the previous section.
#
# A scenario in which Version Tokens can be useful is a system that accesses a collection of MySQL servers but needs
# to manage them for load balancing purposes by monitoring them and adjusting server assignments according to load changes.
#
# Such a system comprises these components:
#
# 		) The collection of MySQL servers to be managed
#
# 		) An administrative or management application that communicates with the servers and organizes them into high-availability groups.
# 			Groups serve different purposes, and servers within each group may have different assignments.
#
# 			Assignment of a server within a certain group can change at any time.
#
# 		) Client applications that access the servers to retrieve and update data, choosing servers according to the purposes assigned them.
# 			For example, a client should not send an update to a read-only server.
#
# Version Tokens permit server access to be managed according to assignment without requiring clients to repeatedly query the servers about
# their assignments:
#
# 		) The management application performs server assignments and establishes version tokens on each server to reflect its assignment.
# 			The application caches this information to provide a central access point to it.
#
# 			If at some point the management application needs to change a server assignment (for example, to change it from permitting writes to
# 			read only), it changes the server's version token list and updates its cache.
#
# 		) To improve performance, client applications obtain cache information from the management application, enabling them to avoid
# 			having to retrieve information about server assignments for each statement.
#
# 			Based on the type of statements it will issue (for example, reads versus writes), a client selects an appropiate server and connects to it.
#
# 		) In addition, the client sends to the server its own client-specific version tokens to register the assignment it requires of the server.
# 			For each statement sent by the client to the server, the server compares its own token list with the client token list.
#
# 			If the server token list contains all tokens present in the client token list with the same values, there is a match and the server
# 			executes the statement.
#
# 			ON the other hand, perhaps the management application has changed the server assignment and its version token list.
#
# 			IN this case, teh new server assignment may now be incompatible with the client requirements.
#
# 			A token mismatch between the server and client token list occurs and the server returns an error in reply to the
# 			statement.
#
# 			This is an indication to the client ot refresh its version token information from the management application cache,
# 			and to select a new server to communicate with.
#
# The client-side logic for detecting version token errors and selecting a new server can be implemented in different ways:
#
#  		) The client can handle all version token registration, mismatch detection and connection switching itself.
#
# 			) The logic for those actions can be implemented in a connector that manages connections between clients and MySQL servers.
# 				Such a connector might handle mismatch error detection and statemnet resending itself, or it might pass the error to the
# 				application and leave it to the application to resent the statement.
#
# The following example illustrates the preceding discussion in concrete form.
#
# When Version Tokens initialize on a given server, the server's version token list is empty.
# Token list maintenance is performed by calling user-defined functions (UDFs).
#
# The VERSION_TOKEN_ADMIN or SUPER privs is required to call any of the Version Token UDFs, so token list
# modification is expected to be done by management or administrative application that has that priv.
#
# Suppose that a management app communicates with a set of services that are queried by clients to access employee and product DBs
# (named emp and prod, respectively)
#
# All servers are permitted to process data retrieveal statements, but only some of them are permitted to make DB updates.
#
# To handle this on a DB specific basis, the management application establishes a list of version tokens on each server.
#
# In the token list for a given server, token names represent database names and token values are read or write
# depending on wether the database must be used in read-only fashion or whether it can take reads and wrties.
#
# Client applications register a list of version tokens they require the server to match by setting a SYS_VAR.
# Variable settings occurs on a client-specific basis, so different clients can register different requirements.
#
# By default, the client token list is empty, which matches any server token list.
# When a client sets its token list to a nonempty value, matching may succeed or fail, depending on the server version token list.
#
# To define the version token list for a server, the management application calls the version_tokens_set() UDF.
# (There are also UDFs for modifying and displaying the token list, later)
#
# For example, the app might send these statements to a group of three servers:
#
# SERVER 1:
#
# SELECT version_tokens_set('emp=read;prod=read');
# +--------------------------------------------+
# | version_tokens_set('emp=read;prod=read')   |
# +´-------------------------------------------+
# | 2 version tokens set. 							  |
# +--------------------------------------------+
#
# SERVER 2:
#
# SELECT version_tokens_set('emp=write;prod=read');
# +---------------------------------------------+
# | version_tokens_set('emp=write;prod=read') 	|
# +---------------------------------------------+
# | 2 version tokens set. 								|
# +---------------------------------------------+
#
# SERVER 3:
#
# SELECT version_tokens_set('emp=read;prod=write');
# +---------------------------------------------+
# | version_tokens_set('emp=read;prod=write') 	|
# +---------------------------------------------+
# | 2 version tokens set. 								|
# +---------------------------------------------+
#
# The token list in each case is specified as a semicolon-separated list of <name=value> pairs.
# The resulting token list values result in these server assignments:
#
# 		) Any server accepts reads for either DB
#
# 		) Only server 2 accepts updates for the emp DB
#
# 		) Only server 3 accepts updates for the prod database
#
# In addition to assigning each server a version token list, the management application also maintains a cache that
# reflects the server assignments.
#
# Before communicating with hte servers, a client application contacts the management application and retrieves information
# about server assignments.
#
# Then the client selects a server based on those assignments. Suppose that a client wants to perform both reads and writes
# on the emp database.
#
# Based on the preceding assignments, only server 2 qualifies.
#
# The client connects to server 2 and registers it server requirements there by setting its version_tokens_session SYS_VAR:
#
# 		SET @@SESSION.version_tokens_session = 'emp=write';
#
# For subsequent statements sent by the client to server 2, the server compares its own version token list to the client list
# to check whether they match.
#
# IF so, statements execute normally:
#
# 		UPDATE emp.employee SET salary = salary * 1.1 WHERE id = 4981;
# 		Query OK, 1 row affected (0.07)
# 		Rows matched: 1 Changed: 1 Warnings: 0
#
# 		SELECT last_name, first_name FROM emp.employee WHERE id = 4981;
# 		+-----------------+-------------------+
# 		| last_name 		| First_name 		  |
#  	+-----------------+-------------------+
# 		| Smith 				| Abe 				  |
# 		+-----------------+-------------------+
# 		1 row in set (0.01 sec)
# 	
# Discrepencies between the server and client version token lists can occur in two ways:
#
# 		) A token name in the version_tokens_session value is not present in the server token list.
# 			In this case, an ER_VTOKEN_PLUGIN_TOKEN_NOT_FOUND error occurs.
#
# 		) A token value in the version_tokens_session value differs from the value of the corresponding token in the 
# 			server token list. In this case, an ER_VTOKEN_PLUGIN_TOKEN_MISMATCH error occurs.
#
# As long as the assignment of server 2 does not change, the client continues to use it for reads and wrties.
# But suppose that hte management application wants to change server assignments so that writes for the emp db must be
# sent to server 1 instead of server 2.
#
# To do so, it uses version_tokens_edit() to modify the emp token vlaue on the two servers (and update its cache of server assignments):
#
# Server 1:
#
# 		SELECT version_tokens_edit('emp=write');
# 		+-----------------------------------------+
# 		| version_tokens_edit('emp=write') 			|
# 		+-----------------------------------------+
# 		| 1 version tokens updated. 					|
# 		+-----------------------------------------+
#
# Server 2:
#
# 		SELECT version_tokens_edit('emp=read');
# 		+-----------------------------------------+
# 		| version_tokens_edit('emp=read') 			|
# 		+-----------------------------------------+
# 		| 1 version tokens updated. 					|
# 		+-----------------------------------------+
#
# version_tokens_edit() modifies the named tokens in the server token list and leaves other tokens unchanged.
#
# The next time the client sends a statement to server 2, its own token list no longer matches the server token list
# and an error occurs:
#
# UPDATE emp.employee SET salary = salary * 1.1 WHERE id = 4982;
# ERROR 3136 (42000): Version token mismatch for emp. Correct value read
#
# In this case, the client should contact the management application to obtain updated information about server assignments,
# select a new server, and send the failed statement to the new server.
#
# NOTE:
#
# 		Each client must cooperate with Version Tokens by sending only statements in accordance with the token list that it registers
# 		with a given server.
#
# 		For example, if a client registers a token list of 'emp=read', there is nothing in Version Tokens to prevent the client
# 		from sending updates for the emp db.
#
# 		The client itself must refrain from doing so.
#
# For each statement received from a client, the server implicitly uses locking, as follows:
#
# 		) Take a shared lock for each token named in the client token list (that is, in the version_tokens_session value)
#
# 		) Perform the comparison between the server and client token lists
#
# 		) Execute the statement or produce an error depending on the comparison result.
#
# 		) Release the locks
#
# The server uses shared locks so that comparisons for multiple sessions can occur without blocking, while preventing
# changes to the tokens for any session that attempts to acquire an exclusive lock before it manipulates tokens of the
# same names in the server tokens list.
#
# THe preceding example uses only a few of the user-defined values in the Version Tokens plugin library, but there are others.
# One set of UDFs permits the server's list of version tokens to be manipulated and inspected.
#
# Another set of UDF's permits version tokens to be locked and unlocked.
#
# These UDFs permit the server's list of version tokens to be created, changed, removed and inspected:
#
# 		) version_tokens_set() completely replaces the current list and assigns a new list.
#
# 			The argument is a semicolon-separated list of <name=value> pairs.
#
# 		) version_tokens_edit() enables partial modifications to the current list.
#
# 			It can add new tokens or change the values of existing tokens.
#
# 			The argument is a semicolon-separated list of <name=value> pairs.
#
# 		) version_tokens_delete() deletes tokens from the current list. The argument is a semicolon separated list of token names.
#
# 		) version_tokens_show() displays the current token list. It takes no argument.
#
# Each of those functions, if successful, returns a binary string indiating what action occurred.
#
# The following example establishes the server token list, modifies it by adding a new token, deletes some tokens,
# and displays the resulting token list:
#
# 		SELECT version_tokens_set('tok1=a;tok2=b;');
# 		+-------------------------------------------+
# 		| version_tokens_set('tok1=a;tok2=b') 		  |
# 		+-------------------------------------------+
# 		| 2 version tokens set. 						  |
# 		+-------------------------------------------+
#
# 		SELECT version_tokens_edit('tok3=c');
# 		+-------------------------------------------+
# 		| version_tokens_edit('tok3=c') 				  |
# 		+-------------------------------------------+
# 		| 1 version token updated. 					  |
# 		+-------------------------------------------+
#
# 		SELECT version_tokens_delete('tok2;tok1');
# 		+-------------------------------------------+
# 		| version_tokens_delete('tok2;tok1') 		  |
# 		+-------------------------------------------+
# 		| 2 version tokens deleted. 					  |
# 		+-------------------------------------------+
#
# 		SELECT version_tokens_show();
# 		+-----------------------------+
# 		| version_tokens_show() 		|
# 		+-----------------------------+
# 		| tok3=c; 							|
# 		+-----------------------------+
#
# Warnings occur if a token list is malformed:
#
# 		SELECT version_tokens_set('tok1=a; =c');
# 		+---------------------------------------+
# 		| version_tokens_set('tok1=a; =c') 		 |
# 		+---------------------------------------+
# 		| 1 version tokens set. 					 |
# 		+---------------------------------------+
#
# 		1 row in set, 1 warning (0.00 sec)
#
# 		SHOW WARNINGS\G
# 		******************************* 1. row *******************************
# 			Level: Warning
# 			Code:  42000
# 		Message:  Invalid version token pair encountered. The list provided is only partially updated.
# 		1 row in set (0.00 sec)
#
# AS mentioned previously, version tokens are defined using a semicolon-separated list of <name=value> pairs.
# Consider this invocation of version_tokens_set();
#
# 		SELECT version_tokens_set('tok1=b;;; tok2= b = b ; tok1 = 1\'2 3"4')
# 		+-------------------------------------------------------------------+
# 		| version_tokens_set('tok1=b;;; tok2= a = b ; tok1 = 1\'2 3"4') 	  |
# 		+-------------------------------------------------------------------+
# 		| 3 version tokens set. 														  |
# 		+-------------------------------------------------------------------+
#
# Version Tokens interprets the argument as follows:
#
# 		) Whitespace around names and values is ignored. Whitespace within names and values is permitted.
# 			(For version_tokens_delete(), which takes a list of names without values, whitespace around names is ignored)
#
# 		) There is no quoting mechanism
#
# 		) Order of tokens is not significant except that if a token list contains multiple instances of a given token name, the last 
# 			value takes precedence over earlier values.
#
# Given those rules, the preceding version_tokens_set() call results in a token list with two tokens:
#
# 		tok1 has the value 1'2 3"4 and tok2 has the value a = b.
#
# 		To verify this, just call version_tokens_show():
#
# 		SELECT version_tokens_show();
# 		+------------------------------+
# 		| version_tokens_show() 		 |
# 		+------------------------------+
# 		| tok2=a = b;tok1=1'2 3"4; 	 |
# 		+------------------------------+
#
# If the token list contains two tokens, why did version_tokens_set() return the value 3 version tokens set?
#
# Because tok1 was assigned twice.
#
# The Version Tokens token-manipulation UDFs place these constraints on token names and values:
#
# 		) Token names cannot contain = or ; characters and have a max length of 64 chars.
#
# 		) Token values cannot contain ; chars. Length of values is constrained by the value of the max_allowed_packet SYS_VAR.
#
# 		) Version Tokens treats token names and values as binary strings, so comparisons are case-sensitive.
#
# Version Tokens also include a set of UDFs enabling tokens to be locked and unlocked:
#
# 		) version_tokens_lock_exclusive() acquires exclusive version token locks. It takes a list of one or more lock names and a timeout value.
#
# 		) version_tokens_lock_shared() acquires shared version token locks. It takes a list of one or more lock names and a timeout value.
#
# 		) version_tokens_unlock() release version token locks (exclusive and shared). No args.
#
# Each locking function returns nonzero for success. Otherwise, an error occurs:
#
# 		SELECT version_tokens_lock_shared('lock1', 'lock2', 0);
# 		+-----------------------------------------------------+
# 		| version_tokens_lock_shared('lock1', 'lock2', 0) 		|
# 		+-----------------------------------------------------+
# 		| 																	1  |
# 		+-----------------------------------------------------+
#
# SELECT version_tokens_lock_shared(NULL, 0);
# ERROR 3131 (42000): Incorrect locking service lock name '(null)'.
#
# Locking using Version Tokens locking function is advisory, applications must agree to cooperate.
#
# It is possible to lock nonexisting token names. This does not create the tokens.
#
# NOTE:
#
# 		Version tokens locking functions are based on the locking service, described later.
# 		And thus must have the same semantics for shared and exclusive locks.
# 		(Version Tokens uses the locking service routines built into the server, not the locking
# 		service UDF interface, so those UDFs need not be installed to use Version Tokens).
#
# 		Locks acquired by Version Tokens use a locking service namespace of version_token_locks.
# 		Locking service locks can be monitored using the Performance Schema, so this is also true
# 		for Version Tokens Locks.
#
# For the Version Tokens locking functions, token name arguments are used exactly as specified.
#
# Surrounding whitespace is not ignored and = and ; chars are permitted.
#
# This is because the Version Tokens simply passes the token names to be locked as is to the locking service.
#
# VERSION TOKENS REFERENCE
#
# VERSION TOKENS FUNCTIONS
#
# The Version Tokens plugin library includes several user-defined functions.
#
# One set of UDF's permits the server's list of version tokens to be manipulated and inspected.
# Another set of UDFs permits version tokens to be locked and unlocked.
#
# The VERSION_TOKEN_ADMIN or SUPER privilege is required to invoke any Version Tokens UDF.
#
# The following UDFs permit the server's list of version tokens to be created, changed, removed and inspected.
# Interpretation of <name_list> and <token_list> arguments (including whitespace handling) occurs as described.
#
# 		) version_tokens_delete(<name_list>)
#
# 			Delete tokens from the server's list of version tokens using the <name_list> argument and returns a binary
# 			string that indicates the outcome of the operation.
#
# 			<name_list> is a semicolon-separated list of version token names to delete.
#
# 			SELECT version_tokens_delete('tok1;tok3');
# 			+------------------------------------------+
# 			| version_tokens_delete('tok1;tok3') 		 |
# 			+------------------------------------------+
# 			| 2 version tokens deleted. 					 |
## 		+------------------------------------------+
#
# 			An argument of NULL is treated as an empty string, which has no effect on the token list.
#
# 			version_tokens_delete() deletes the tokens named in its argument, if they exist.
# 			(It is not an error to delete nonexisting tokens).
#
# 			To clear the token list entirely without knowing which tokens are in the list, pass NULL or a string
# 			containing no tokens to version_tokens_set();
#
# 					SELECT version_tokens_set(NULL);
# 					+-----------------------------------+
# 					| version_tokens_set(NULL) 			|
# 					+-----------------------------------+
# 					| Version tokens list cleared. 		|
# 					+-----------------------------------+
#
# 					SELECT version_tokens_set('');
# 					+-----------------------------------+
# 					| version_tokens_set('') 				|
# 					+-----------------------------------+
# 					| Version tokens list cleared. 		|
# 					+-----------------------------------+
#
# 		) version_tokens_edit(<token_list>)
#
# 			Modifies the server's list of version tokens using the <token_list> arugment and returns a binary string that indicates
## 		the outcome of the operation.
#
# 			<token_list> is a semicolon-separated list of <name=value> pairs specifying the name of each token to be defined
# 			and its value.
#
# 			If a token exists, its value is updated with the given value.
#
# 			If a token does not exist, it is created with the given value. If the argument is NULL or a string containing no tokens,
# 			the token list remains unchanged.
#
# 					SELECT version_tokens_set('tok1=value;tok2=value2');
# 					+--------------------------------------------------+
# 					| version_tokens_set('tok1=value1;tok2=value2') 	|
# 					+--------------------------------------------------+
# 					| 2 version tokens set. 									|
# 					+--------------------------------------------------+
#
# 					SELECT version_tokens_edit('tok2=new_value2;tok3=new_value3');
# 					+-------------------------------------------------------+
# 					| version_tokens_edit('tok2=new_value;tok3=new_value3') |
# 					+-------------------------------------------------------+
# 					| 2 version tokens updated. 									  |
# 					+-------------------------------------------------------+
#
# 		) version_tokens_set(<token_list>)
#
# 			Replaces the server's list of version tokens with the tokens defined in the <token_list> argument and returns a binary
# 			string that indicates the outcome of the operation.
#
# 			<token_list> is a semicolon-separated list of <name=value> pairs specifying name of each token to be defined and its value.
#  		If the argument is NULL or a string containing no tokens, the token list is cleared.
#
# 					SELECT version_tokens_set('tok1=value;tok2=value2');
# 					+--------------------------------------------------------+
# 					| version_tokens_set('tok1=value1;tok2=value2') 			|
# 					+--------------------------------------------------------+
# 					| 2 version tokens set. 											|
# 					+--------------------------------------------------------+
#
# 		) version_tokens_show()
#
# 			Returns the server's list of versions tokens as a binary string containing a semicolon-separated list of <name=value> pairs.
#
# 					SELECT version_tokens_show();
# 					+-------------------------------------+
# 					| version_tokens_show() 				  |
# 					+-------------------------------------+
# 					| tok2=value2;tok1=value1; 			  |
# 					+-------------------------------------+
#
# The following UDFs permit version tokens to be locked and unlocked:
#
# 		) version_tokens_lock_exclusive(<token_name[, <token_name>] ..., <timeout>)
#
# 			Acquires exclusive locks on one or more version tokens, specified by name as strings, timing out with an error if the locks
#  		are not acquired within the given timeout:
#
# 					SELECT version_tokens_lock_exclusive('lock1', 'lock2', 10);
# 					+---------------------------------------------------------+
# 					| version_tokens_lock_exclusive('lock1', 'lock2', 10) 	 |
# 					+---------------------------------------------------------+
# 					| 																	1 		 |
# 					+---------------------------------------------------------+
#
# 		) version_tokens_lock_shared(<token_name>[, <token name>] ..., <timeout>)
#
# 			Acquires shared locks on one or more version tokens, specified by name as strings, timing out 
# 			with an error if the locks are not acquired within the given timeout value.
#
# 					SELECT version_tokens_lock_shared('lock1', 'lock2', 10);
# 					+----------------------------------------------------------+
# 					| version_tokens_lock_shared('lock1', 'lock2', 10) 		  |
# 					+----------------------------------------------------------+
# 					| 																		1 	  |
# 					+----------------------------------------------------------+
# 
# 		) version_tokens_unlock()
#
# 			Releases all locks hat were acquired within the current session using version_tokens_lock_exclusive() and version_tokens_lock_shared()
#
# 					SELECT version_tokens_unlock();
# 					+-------------------------------+
# 					| version_tokens_unlock() 		  |
# 					+-------------------------------+
# 					| 									1 	  |
# 					+-------------------------------+
#
# 
# The locking functions share these characeteristics:
#
# 		) The return value is nonzero for success. Otherwise, an error occurs.
#
# 		) Token names are strings.
#
# 		) In contrast to arugment handling for the UDFs that manipulate the server tokens list, whitespace surrounding token
# 			name arguments is not ignored and = and ; chars are permitted.
#
# 		) it is possible to lock a nonexisting token name. Does not create the token.
#
# 		) Timeout values are nonnegative integer representing teh time in seconds to wait to acquire locks before timing out
# 			with an error.
#
# 			If the timeout is 0, there is no waiting and the function produces an error if locks cannot be acquired instantly.
#
# 		) Version Tokens locking functions are based on the locking service described later.
#
# VERSION TOKENS SYS_VARs
#
# Version tokens support the following SYS_VARs. These VARs are unavailable unless the Version Tokens plugin is installed.
#
# SYS_VARs:
#
# 			) version_tokens_session
#
# 				PROPERTY 				VALUE
# 				cmd line: 				--version-tokens-session=value
# 				Sys_Var: 				version_tokens_session
# 				Scope: 					Global, Session
# 				Dynamic: 				Yes
# 				SET_VAR Hint: 			No
# 				Type: 					String
# 				Default: 				NULL
#
# 				The session value of this variable specifies the client version token list and indicates the tokens that hte client
# 				session requires the server version token list to have.
#
# 				If the version_tokens_session variable is NULL (the default), or has an empty value, any server version token list matches.
# 				(In effect, an empty value disables matching requirements)
#
# 				If the version_tokens_session variable has a nonempty value, any mismatch between its value and the server version token list results
# 				in an error for any statement the session sends to the server. A mismatch occurs under these conditions:
#
# 					) A token name in the version_tokens_session value is not present in the server token list. In this case, an ER_VTOKEN_PLUGIN_TOKEN_NOT_FOUND
# 						error occurs.
#
# 					) A token value in the version_tokens_session value differs from the value of the corresponding token in the server token list.
# 						In this case, an ER_VTOKEN_PLUGIN_TOKEN_MISMATCH error occurs.
#
# 				It is not a mismatch for the server version token list to include a token not named in the version_tokens_session value.
#
# 				Suppose that a management application has set the server token list as follows:
#
# 					SELECT version_tokens_set('tok1=a;tok2=b;tok3=c');
#  				+------------------------------------------------+
# 					| version_tokens_set('tok1=a;tok2=b;tok3=c') 	 |
# 					+------------------------------------------------+
# 					| 3 version tokens set 									 |
# 					+------------------------------------------------+
#
# 				A client registers the tokens it requires the server to match by setting its version_tokens_session value.
#
# 				Then, for each subsequent statement sent by the client, the server checks its token list against the client 
# 				version_tokens_session value and produces an error if there is a mismatch:
#
# 					SET @@SESSION.version_tokens_session = 'tok1=a;tok2=b';
# 					SELECT 1;
# 					+----+
# 					| 1  |
# 					+----+
#  				| 1  |
# 					+----+
#
# 					SET @@SESSION.version_tokens_session = 'tok1=b';
# 					SELECT 1;
# 					ERROR 3136 (42000): Version token mismatch for tok1. Correct value a
#
# 				The first SELECT succeeds because the client tokens tok1 and tok2 are present in the server token list and
# 				each token has the same value in the server list.
#
# 				The second SELECT fails because, although tok1 is present in the server token list, it has a different
# 				value than specified by the client.
#
# 				At this point, any statement sent by the client fails, unless the server token list changes such that it matches again.
# 				Suppose that the management application changes the server token list as follows:
#
# 					SELECT version_tokens_edit('tok1=b');
# 					+-------------------------------------+
# 					| version_tokens_edit('tok1=b') 		  |
# 					+-------------------------------------+
# 					| 1 version tokens updated. 			  |
# 					+-------------------------------------+
# 		
# 					SELECT version_tokens_show();
# 					+---------------------------+
# 					| version_tokens_show() 	 |
# 					+---------------------------+
# 					| tok3=c;tok1=b;tok2=b; 	 |
# 					+---------------------------+
#
# 				Now the client version_tokens_session value matchhes the server token list and the client can once again successfully execute statements:
#
# 					SELECT 1;
#  	 			+---+
# 					| 1 |
# 					+---+
# 					| 1 |
# 					+---+
#			
# 			
# 			) version_tokens_session_number
#
# 				PROPERTY 					VALUE
# 				cmd line: 					--version-tokens-session-number=N
# 				Sys_Var: 					version_tokens_session_number
# 				Scope: 						Global, Session
# 				Dynamic: 					No
# 				SET_VAR Hint: 				No
# 				Type: 						Integer
# 				Default: 					0
#
# 				Internal use.
#
# MYSQL SERVER USER-DEFINED FUNCTIONS
#
# MySQL Server enables user-defined functions (UDFs) to be created and loaded into the server to extend server capabilities.
# Server capabilities can be implemented in whole or in part using UDFs.
#
# In addition, you can write your own UDFs.
# The following showcases how to install and uninstall UDFs, and how to determine at runtime which UDFs are installed and obtain info about them.
#
# INSTALLING AND UNINSTALLING USER-DEFINED FUNCTIONS
#
# User-defined functions (UDFs) must be loaded into the server before they can be used.
# MySQL supports UDF loading at runtime.
#
# To load a UDF, use the CREATE_FUNCTION statement. For example:
#
# 		CREATE FUNCTION metaphon RETURNS STRING SONAME 'udf_example.so';
#
# The UDF file base name depends on your platform. Common suffixes are .so for Unix and Unix-based systems., .dll for Windows.
#
# While a UDF is loaded, information about it is available from the Performance Schema user_defined_functions table.
#
# The statement also registers the UDF in the mysql.func SYSTEM table to cause the server to load it on subsequent 
# restarts.
#
# For this reason, CREATE_FUNCTION requires the INSERT priv for the mysql db.
#
# To remove a UDF, use the DROP_FUNCTION statement. For example:
#
# 		DROP FUNCTION metaphon;
#
# DROP_FUNCTION unloads the UDF and removes it from the mysql.func system table.
# For this reason, DROP_FUNCTION statements require the DELETE priv for the mysql db.
#
# With the UDF No longer registered in the table, the server does not load the UDF automatically for subsequent restarts.
#
# You cannot use CREATE_FUNCTION to reinstall a function that has previously been installed.
# To reinstall a function, first remove it with DROP_FUNCTION, then install it again with CREATE_FUNCTION.
#
# You would need to do this, for example, if you ugprade to  a new version of MySQL that provides an updated implementation
# of the function, so you recompile a new version of a function that you have written.
#
# Otherwise, the Server uses the old version.
#
# If the server is started with the --skip-grant-tables option, it does not consult the mysql.func table and does not
# load the UDFs listed there.
#
# OBTAINING USER-DEFINED FUNCTION INFORMATION
#
# The Performance Schema user_defined_functions table contains information about the currently loaded user-defined functions:
#
# 		SELECT * FROM performance_schema.user_defined_functions;
#
# RUNNING MULTIPLE MYSQL INSTANCES ON ONE MACHINE
#
# In some cases, you might want to run multiple instances of MySQL on a single machine.
# You might want to test a new MySQL release while leaving an existing production setup undisturbed.
#
# Or you might want to give different users access to different mysqld servers that they manage themselves.
# (For example, you might be an ISP that wants to provide independent MySQL installations for different customers)
#
# IT is possible to use a different MySQL server binary per instance, or use the same binary for multiple instances,
# or any combination of the two approaches.
#
# For example, you might run a server of 5.7, and one of 8.0, etc.
#
# Whether or not you use distinct server binaries, each instance that you run must be configured with unique values for
# several operating params.
#
# This eliminates the potentional for conflict between instances.
#
# parameters can be set on the cmd line, in option files, or by setting environment variables.
#
# To see the values used by a given isntance, connect to it and execute a SHOW_VARIABLES statement.
#
# The primary resource managed by a MySQL instance is the data dir. Each instance should use a different
# data dir, the location of which is specified using the --datadir=<dir_name> option.
#
# For methods of configuring each instance with its own data dir, and warnings about the dangers of failing to do so,
# is covered soon.
#
# In addition to using different data directories, several other options must have different values for each server instance:
#
# 		) --port=<port_num>
#
# 			--port controls the port number for TCP/IP connections. Alternatively, if the host has multiple network addresses, you can use
# 			--bind-address to cause each server to listen to a different address.
#
# 		) --socket={<file_name> | <pipe name>}
#
# 			--socket controls the Unix socket file path on Unix or the named pipe name on Windows.
# 			On Windows, it is necessary to specify distinct pipe names only for those servers configured to permit named-pipe connections.
#
# 		) --shared-memory-base-name=<name>
#
# 			This option is used only on Windows. It designates the shared-memory name used by a Windows server to permit clients to connect
# 			using shared memory.
#
# 			It is necessary to specify distinct shared-memory names only for those servers configured to permit shared-memory connections.
#
# 		) --pid-file=<file_name>
#
# 			This option indicates the path name of the file in which the server writes its process ID.
#
# If you use the following log file options, their values must differ for each server:
#
# 		) --general_log_file=<file_name>
#
# 		) --log-bin[=<file_name>]
#
# 		) --slow_query_log_file=<file_name>
#
# 		) --log-error[=<file_name>]
#
# To achieve better performance, you can specify the following option differently for each server, to spread the load between
# several physical disks:
#
# 		) --tmpdir=<dir_name>
#
# Having different temporary directories also makes it easier to determine which MySQL server created any given temp file.
#
# If you have multiple MySQL installations in different locations, you can specify the base dir for each installation with
# the --basedir=<dir_name> option.
#
# This causes each instance to automatically use a different data dir, log files and PID file because the default for each
# of those params is relative to the base dir.
#
# In that case, the only other options you need to specify are the --socket and --port options.
#
# Suppose that you install different versions of MySQL using tar file binary distribs.
#
# These install in different locations, so you can start the server for each installation using the command bin/mysqld_safe under
# its corresponding base dir.
#
# mysqld_safe determines the proper --basedir option to pass to mysqld, and you need specify only the --socket and --port
# options to mysqld_safe.
#
# As discussed in the following sections, it is possible to start additional servers by specifying appropiate command options or
# by setting environment variables.
#
# However, if you need to run multiple servers on a more permanent basis, it is more convenient to use option files to
# specify for each server those option values that must be unique to it.
#
# The --defaults-file option is useful for this purpose.
#
# SETTING UP MULTIPLE DATA DIRS
#
# Each MySQL Instance on a machine should have its own data dir. 
#
# The location is specified using the --datadir=<dir_name> option.
#
# There are different methods of setting up a data dir for a new instance:
#
# 	) Create a new data dir
#
# 	) Copy an existing data dir
#
# WARNING:
#
# 		Normally, you should never have two servers that update data in the same DBs.
#
# 		This may lead to unpleasant suprises if your OS does not support faul-free system locking.
#
# 		If (despite warnings) you run multiple servers using the same data dir and they have logging
# 		enabled, you must use the appropiate options to specify log file names that are unique to each server.
#
# 		Otherwise, the servers try to log to the same files.
#
# 		Even when the preceding precautions are observed, this kind of setup works only with MyISAM and MERGE tables,
# 		and not with any of the other storage engines.
#
# 		Also, this warning against shared data dirs amongst servers always applies in an NFS environment.
# 		Permitting multiple MySQL servers to access a common data dir over NFS is <a terrible idea>
#
# 		The primary problem is that NFS is the speed bottleneck.
# 		It is not meant for such use. Another risk with NFS is that you must devise a way to ensure that
# 		two or more servers do not interfere with each other.
#
# 		Usually NFS file locking is handled by the lockd daemon, but at the moment there is no platform
# 		that performs locking 100% reliably in every situation.
#
# CREATE A NEW DATA DIR
#
# With this method, the data dir will be in the same state as when you first install MySQL.
# It will have the default set of MySQL accounts and no user data.
#
# On Unix, initialize the data dir.
#
# On Windows, the data dir is included in teh MySQL distrib:
#
# 	) MySQL Zip archive distribs for Windows contain an unmodified data dir. You can unpack such a distrib into a temp location, then
# 		copy the <data> dir to where you are setting up the new instance.
#
# 	) Windows MSI package installers createa nd set up the Data dir that the installed server will use, but also creates a pristine
# 		"template" data dir named <data> under the installation dir.
#
# 		After an installation has been performed using an MSA package, the template data dir can be copied to set up additional
# 		MySQL instances.
#
# COPY AN EXISTING DATA DIR
#
# With this method, any MySQL account or user data present in the data dir are carried over to the new data dir.
#
# 1. Stop the existing MySQL instance using the data dir. This must be a clean shutdown so that the instance flushes any pending changes to disk.
#
# 2. Copy the data dir to the location where the new data dir should be.
#
# 3. Copy the my.cnf or my.ini option file used by the existing instance. This serves as q basis for the new instance.
#
# 4. Modify the new option file so that any pathnames referring to the original data dir refer to the new data dir.
#
# 		Also, modify any other options that must be unique per instance, such as the TCP/IP port number and the log files.
#
# 5. Start teh new isntance, telling it to use the new option file.
#
# RUNNING MULTIPLE MySQL Instances on Windows
#
# You can run multiple servers on Windows by starting them manually from the cmd line, each with appropiate operating parameters,
# or by installing several servers as Windows services and running them that way.
#
# The following seciton pertains to how to start each server with different values for those options that must be unique
# per server, such as the data dir.
#
# STARTING MULTIPLE MySQL INSTANCES AT THE WINDOWS CMD LINE
#
# The procedure for starting a single MySQL server manually from the cmd line is refered to earlier.
#
# To start multiple servers this way, you can specify the appropiate options on the cmd line or in an option file.
# It is more convenient to place the options in an option file, but it is necessary to make sure that each server
# gets its own set of options.
#
# To do this, create an option file and tell the server the file name with a --defaults-file option when you run it.
#
# Suppose that you want to run one instance of mysqld on port 3307 with a data dir of C:\mydata1, and another instance on
# port 3308 with a data dir of C:\mydata2.
#
# Do as follows:
#
# 1. Make sure that each data dir exists, including its own copy of the mysql database that contains the grant tables.
#
# 2. Create two option files. For example, create one file named C:\my-opts1.cnf that looks as follows:
#
# 		[mysqld]
# 		datadir = C:/mydata1
# 		port = 3307
#
# Create a second file named C:\my-opts2.cnf that looks as:
#
# 		[mysqld]
# 		datadir = C:/mydata2
# 		port = 3308
#
# 3. Use the --defaults-file option to start each server with its own option file:
#
# 		C:\mysql\bin\mysqld --defaults-file=C:\my-opts1.cnf
# 		C:\mysql\bin\mysqld --defaults-file=C:\my-opts2.cnf
#
# 	Each server starts in the foreground (no new prompt appears until the server exit later), so you will need to issue those
# 	two commands in separate console windows.
#
# To shut down the servers, connect to each using the appropiate port number:
#
# 		C:\mysql\bin\mysqladmin --port=3307 --host=127.0.0.1 --user=root --password shutdown
# 		C:\mysql\bin\mysqladmin --port=3308 --host=127.0.0.1 --user=root --password shutdown
#
# Servers configured as just described permit clients to connect over TCP/IP.
#
# If your version of Windows supports named pipes and you also want to permit named-pipe 
# connections, specify options that enable the named pipe and specify its name.
#
# Each server that supports named-pipe connections must use a unique pipe name.
# For example, the C:\my-opts1.cnf file might be written as:
#
# 		[mysqld]
# 		datadir = C:/mydata1
# 		port = 3307
# 		enable-named-pipe
# 		socket = mypipe1
#
# Modify C:\my-opts2.cnf similarly for use by the second server. Then start the servers as showcased before.
#
# A similar procedure applies for servers that you want to permit shared-memory connections.
#
# Enable such connections with the --shared-memory option and specify a unique shared-memory name
# for each server with the --shared-memory-base-name option.
#
# STARTING MULTIPLE MYSQL INSTANCES AS WINDOWS SERVICES
#
# On Windows, a MySQL server can run as a Windows Service. The procedures for installing, controlling and removing
# a single MySQL service is described earlier.
#
# To set up multiple MySQL services, you must make sure that each instance uses a different service name in addition
# to the other params that must be unique per instance.
#
# For the following instructions, suppose that you want to run the mysqld server from two different versions of MySQL
# that are installed at C:\mysql-5.5.9 and C:\mysql-8.0.15 respectively.
#
# To install MySQL as a Windows Service, use the --install or --install-manual option.
#
# Based on the preceding information, you have several ways to set up multiple services.
#
# The following instructions descrieb some, before any of them - shut down and remove any existing MySQL services.
#
# 		) 1 -> Specify the options for all services in one of the standard option files.
#
# 				To do this, use a different service name for each server. Suppose that you want to run the
# 				5.5.9 mysqld using the service name of mysqld and the 8.0.15 mysqld using the service name mysqld2.
#
# 				In this case, you can use the [mysqld1] group for 5.5.9 and [mysqld2] group for 8.0.15.
#
# 				FOr example, you can set up C:\my.cnf like:
#
# 					#options for mysqld1 service
# 					[mysqld1]
# 					basedir = C:/mysql-5.5.9
#  				port = 3307
# 					enable-named-pipe
# 					socket = mypipe1
#
# 					#options for mysqld2 service
# 					[mysqld2]
# 					basedir = C:/mysql-8.0.15
# 					port = 3308
# 					enable-named-pipe
# 					socket = mypipe2
#
#  			Install the services as follows, using the full server path names to ensure that Windows registers the correct .exe for each service:
#
# 					C:\mysql-5.5.9\bin\mysqld --install mysqld1
# 					C:\mysql-8.0.15\bin\mysqld --install mysqld2
#
# 				To start the services, use the services manager or use NET START with the appropiate service names:
#
# 					NET START mysqld1
# 					NET START mysqld2
#
# 				To stop the services, use the services manager or use the NET STOP with the appropiate service names:
#
# 					NET STOP mysqld1
# 					NET STOP mysqld2
#
# 		) 2 -> Specify options for each server in separate files and use --defaults-file when you install the services to tell
# 					each server what file to use.
#
# 				In this case, each file should list options using a [mysqld]group.
#
# 				With this approach, to specify options for the 5.5.9 mysqld, create a file C:\my-opts1.cnf that looks like:
#
# 					[mysqld]
# 					basedir = C:/mysql-5.5.9
# 					port = 3307
# 					enable-named-pipe
# 					socket = mypipe1
#
# 				For the 8.0.15 mysqld, create a file C:\my-opts2.cnf that looks like this:
#
# 					[mysqld]
# 					basedir = C:/mysql-8.0.15
# 					port = 3308
# 					enable-named-pipe
# 					socket = mypipe2
#
# 				Install the services as follows (each command on a single line):
#
# 					C:\mysql-5.5.9\bin\mysqld --install mysqld1 --defaults-file=C:\my-opts1.cnf
# 					C:\mysql-8.0.15\bin\mysqld --install mysqld2 --defaults-file=C:\my-opts2.cnf
#
# 				When you install a MySQL server as a service and use a --defaults-file option, the service name must precede the option.
#
# 				After installing the services, start and stop them the same as before.
#
# To remove multiple services, use mysqld --remove for each one, specifying a service name following the --remove option.
# If the service name is the default (MySQL) you can omit it.
#
# RUNNING MULTIPLE MYSQL INSTANCES ON UNIX
#
# Note:
#
# 		The discussion here uses mysqld_safe to launch multiple instances of MySQL.
#
# 		For MySQL installation using an RPM distrib, server startup and shutdown is managed by systemd on several
# 		Linux platforms.
#
# 		On these platforms, mysqld_safe is not installed because it is unecessary.
#
# One way to run multiple MySQL instances on Unix is to compile different servers with different default TCP/IP 
# ports and Unix socket files so that each one listens on different network interfaces.
#
# Compiling in different base dirs for each installation also results automatically in a separate,
# compiled-in data dir, log file and PID file location for each server.
#
# Assuming that an existing 5.7 server is configured for the default TCP/IP port number (3306) and Unix socket file (/tmp/mysql.sock).
# To configure a new 8.0.15 server to have different operating Params, use a CMake akin to:
#
# 		cmake . -DMYSQL=port_number \
# 			 -DMYSQL_UNIX_ADDR=file_name \
# 			 -DCMAKE_INSTALL_PREFIX=/usr/local/mysql-8.0.15
#
# Here, <port_number> and <file_name> must be different from the default TCP/IP port number and Unix socket
# file path name, and the CMAKE_INSTALL_PREFIX value should specify an installation dir different from the one
# under which the existing MySQL installation is located.
#
# If you have a MySQL server listening on a given port number, you can use the following command to find out what 
# operating parameters it is using for several important configurable variables, including the base dir and Unix
# socket file name:
#
# 	mysqladmin --host=host_name --port=port_number variables
#
# With said info, you can conclude what options to NOT use when configuring a additional server.
#
# If you specify localhost as the host name, mysqladmin defaults to using a UNIX socket file connection
# rather than TCP/IP.
# 
# To explicitly specify the connection protocol, use the --protocol={TCP|SOCKET|PIPE|MEMORY} option.
#
# You need not compile a new MySQL server just to start with a different Unix socket file and TCP/IP port number.
# It is also possible to use the same server binary and start each invocation of it with different
# params of values at runtime.
#
# ONe way to do so is by using cmd line:
#
# mysqld_safe --socket=file_name --port=port_number
#
# To start a second server, provide different --socket and --port option values, and pass a --datadir=<dir_name> option to
# mysqld_safe so that the server uses a different data dir.
#
# Alternatively, put the options for each server in a different option file, then start each serer using a --defaults-file option
# that specifies the path to the appropiate rspective option file.
#
# For example, if the option files for two server instances are named /usr/local/mysql/my.cnf and /usr/local/mysql/my.cnf2, start the
# servers like:
#
# 		mysqld_safe --defaults-file=/usr/local/mysql/my.cnf
# 		mysqld_safe --defaults-file=/usr/local/mysql/my.cnf2
#
# Another way to achieve a similar effect is to use environment variables to set hte Unix socket file name and TCP/IP port number:
#
# 		MYSQL_UNIX_PORT=/tmp/mysqld-new.sock
# 		MYSQL_TCP_PORT=3307
# 		export MYSQL_UNIX_PORT MYSQL_TCP_PORT
# 		bin/mysqld --initialize --user=mysql
# 		mysqld_safe --datadir=/path/to/datadir &
#
# This is a quick way of startin a second server to use for testing.
#
# The nice thing about this method is that the env variable settings apply to any client programs
# that you invoke from the same shell.
#
# Thus, connections for those clients are automatically directed to the second server.
#
# on Unix, the mysqld_multi script provides another way to start multiple servers.
#
# USING CLIENT PROGRAMS IN A MULTIPLE-SERVER ENVIRONMENT
#
# To connect with a client program to a MySQL server that is listening to different network interfaces from those
# compiled into your client, you can use one of the following methods:
#
# 		) Start the client with --host=<host_name> --port=<port_number> to connect using TCP/IP to a remote server,
# 			--host=127.0.0.1 --port=<port_number> for TCP/IP to local
# 			--host=localhost --socket=<file_name> to a local server using a Unix socket file or a Windows named pipe.
#
# 		) Start the client with --protocol=TCP to connect using TCP/IP, --protocol=SOCKET to connect using a UNIX
# 			socket file, --protocol=PIPE to connect using a named pipe or --protocol=MEMORY to connect using shared memory.
#
# 			For TCP/IP connections, you may also need to specify --host and --port options.
#
# 			For the other types of connections, you may need to specify a --socket option to specify a Unix socket file
# 			or Windows named pipe name, or a --shared-memory-base-name option to specify the shared-memory name.
#
# 			Shared memory is only on Windows.
#
# 		) On Unix, set the MySQL_UNIX_PORT and MYSQL_TCP_PORT env variables to point to the Unix socket file and TCP/IP
# 			port number before you start your clients.
#
# 			If you normally use a specific socket file or port number, you can place commands to set these ENV variables
# 			in your .login files so that they apply each time you log in.
#
# 		) Specify the default Unix socket file and TCP/IP port number in the [client] group of an option file.
#
# 			FOr example, you can use C:\my.cnf on Windows, or the .my.cnf file in your home dir on Unix.
#
# 		) In a C program, you can specify the socket file or port number arguments in the mysql_real_connect() call.
# 			You can also have the program read option files by calling mysql_options()
#
# 		) If you are using the Perl DBD::mysql module, you can read options from MySQL option files. For example:
#
# 			$dsn = "DBI:mysql:test;mysql_read_default_group=client;"
# 						"mysql_read_default_file=/usr/local/mysql/data/my.cnf";
# 			$dbh = DBI->connect($dsn, $user, $password);
#
# Other programming interfaces provide similar capabilities for reading option files.
#
# SECURITY
#
# When thinking about security within a MySQL installation, you should consider a wide range of possible topics and how they
# affect the security of your MySQL server and related apps:
#
# 		) General factors that affect security. These include choosing good PWs, not granting unecessary privs, ensuring application
# 			security by preventing SQL injections and data corruption, etc.
#
# 		) Security of the installation itself. The data files, log files and all the application files of your installation should be
# 			protected to ensure that they are not readable or writable by unauthorized parties.
#
# 		) Access control and security within the database system itself, including the users and database granted with access to the DBs,
# 			views and stored programs in use within the DB.
#
# 		) The features offered by security-related plugins.
#
# 		) Network security of MySQL and your system. The security is related to the grants for individual users, but you may also
# 			wish to restrict MySQL so that it is available only locally on the MySQL server host or a limited set of other hosts.
#
# 		) Ensure that you have adequate and appropiate backups of your DB files, configuration and log files.
# 			Also, be sure that you have a recovery solution in place and test that you are able to successfully
# 			recover the info from your backups.
#
# GENERAL SECURITY ISSUES
#
# Security Guidelines
#
# In discussing security, it is necessary to consider fully protecting the entire server host (not just the MySQL server) against all types
# of applicable attacks: eavesdropping, alerting, playback and denial of service.
#
# MySQL uses security based on Access Control Lists (ACLs) for all connections, queries, and other operations that users can attempt to perform.
# There is also support for SSL-encrypted connections between MySQL clients and servers.
#
# WHen running MySQL, follow these guidelines:
#
# 		) Do not ever give anyone (except MySQL root accounts) access to the user table in the mysql system DB. Critical.
#
# 		) Keep an eye on privs. Use the GRANT and REVOKE statements to control access to MySQL. Do not grant more than necessary, never
# 			grant privs to all hosts.
#
# 				) Try mysql -u root. If you are able to connect successfully without being asked for a PW, anyone can connect to your MySQL
# 					as Root.
#
# 				) Use the SHOW_GRANTS statement to check which accounts have access to what. Then use the REVOKE statement to remove those privs that
# 					are not necessary.
#
# 		) Do not store cleartext PWs in your DB. If your computer becomes compromised, that's an issue.
#
# 			Use SHA2() or some other one-way hashing function and store the hash value.
#
# 		  To prevent PW recovery using rainbow tables, do not use these functions on a plain PW. Use something to be as as a salt,
# 			and go by the form of:
#
# 				hash(hash(password)+salt) 
#
# 		) Do not choose Pws from a Dictionary. Special programs exist to break PWs.
#
# 			Normal considerations of PW consolidation goes here.
#
# 		) Get a firewall. Put the MySQL behind a firewall or in a demilitarized zone (DMZ)
#
# 			) Try to scan your ports from the internet using a tool such as nmap.
#
# 				MySQL uses port 3306 by default.
#
# 				Should not be accessible by untrusted hosts. 
#
# 				Can be checked with: telnet <server_host> 3306 #Should refuse connection and give scrambles back.
#
# 		) Applications that access MySQL should not trust any data entered by users and should be written using proper defensive
# 			programming techniques.
#
# 		) Do not transmit unencrypted data over the Internet. 
#
# 			Use SSL or SSH. MySQL supports internal SSL connections. Another technique is to use SSH port-forwarding to
# 			create an encrypted (and compressed) tunnel for the communication.
#
# 		) learn to use the tcpdump and strings utilities. In most cases, you can check whether MySQL data streams are unencrypted by issuing
# 			a cmd like:
#
# 			tcpdump -l -i eth0 -w - src or dst port 3306 | strings
#
# 			Works under linux, should work under others with small modifications.
#
# 			Warning: If you do not see cleartext data, this does not mean that the info actually is encrypted. 
#
# 			If compression is in use on the connection (MYSQL_OPT_COMPRESS) you will not see plain text but the data is not encrypted.
#
# KEEPING PWS SECURE
#
# PWs occur in several contexts within MySQL.
#
# The following section pertains to guidelines that enable end users and admins to keep their PWs secure and avoid exposing them.
# In addition, the validate_password plugin can be used to enforce a policy on an acceptable PW.
#
# END-USER GUIDELINES FOR PW SECURITY
#
# When you run a client program to connect to the MySQL server, it is inadvisable to specify your PW in a way that exposes it
# to discovery by other users.
#
# The methods you can use to specify your PW when you run client programs are listed - along with an assesment of the risks
# of each method.
#
# In short, the safest methods are to have the client program prompt for the password or to specify the PW in a properly protected
# option file.
#
# 		) Use the mysql_config_editor utility, which enables you to store authentication credentials in an encrypted login path named
# 			.mylogin.cnf 
#
# 			The file can be read later by MySQL client programs to obtain authentication credentials for connecting to MySQL Server.
#
# 		) Use a -p<your_pw> or --password=<your_pass> option on the cmd line. For example:
#
# 			mysql -u francis -pfrank <db_name> #Do not write PWs on cmd prompt
#
# 			WARNING:
#
# 				This is insecure. On some systems, your PW becomes visible to System status programs such as ps that may be invoked by
# 				other users to display cmd lines.
#
# 				MySQL clients typically overwrite the cmd-line PW argument with 0's during their initialization sequence.
#
# 				However, there is a brief interval during which the value is visible.
#
# 				also, on some systems this overwritin strat is ineffective and the PW remains visible to ps. (SystemV Unix systems and perhas others are subject
# 				to this problem)
#
# 			If your operating environment is set up to display your current cmd in the title bar of your terminal window, the PW remains visible
# 			as long as the cmd is running, even if the cmd has scrolled out of view in the window content area.
#
# 		) Use the -p or --password option on the cmd line with no PW value specified. In this case, the client program solicits the PW interactively:
#
# 			mysql -u francis -p <db_name>
# 			Enter PW: 
#
# 			Use a options file instead.
#
# 			it is more secure to enter your PW like this than to specify it on the cmd line because it is not visible to other users.
# 			However, this method of entering a PW is suitable only for programs that you run interactively.
#
# 			If you want to invoke a client from a script that runs noninteractively, there is no opportunity to enter the PW
# 			from the keyboard.
#
# 			On some systems, you may even find that the first line of your script is read and interpreted (incorrectly) as your PW.
#
# 		) Store your PW in an option file. For example, on Unix, you can list your PW in the [client] section of the .my.cnf file in your home dir:
#
# 				[client]
#	 			password=your_pass
#
# 			To keep the PW safe, the file should not be accessible to anyone but yourself.
#
# 			To ensure this, set the file masking to 400 or 600, for example:
#
# 				chmod 600 .my.cnf
#
# 			To name from the cmd line a specific option file containing the PW, use the --defaults-file=<file_name> option,
# 			where file_name is the full path name to the file.
#
# 			For example:
#
# 				mysql --defaults-file=/home/francis/mysql-opts
#
# 		) Store your PW in the MYSQL_PWD env variable.
#
# 			This method of specifying your MySQL PW must be considered extremely insecure and dshould not be used.
#
# 			Some versions of pw include an option to display the ENV vars of the running process.
# 			On some systems, if you set MYSQL_PWD, your PW is exposed to any other user who runs ps.
#
# 			Even on systems without such a version of ps, it is unwise to assume that it's safe, as in, being non able to be inspected.
#
# On Unix, the mysql client writes a record of executed statements to a history file.
# By default, this file is named .mysql_history and is created in your home dir.
#
# PWs can be written as plain text in SQL statements such as CREATE_USER and ALTER_USER, so if you use these statements they are
# logged in the history file.
#
# TO keep this file safe, use a restrictive access mode, teh same way as described earlier for the .my.cnf file
#
# If your command interpreter is configured to maintain a history, any file in which the commands are saved will contain
# MySQL pws entered on the cmd line.
#
# For example, bash uses ~/.bash_history. Any such file should have a restrictive access mode.
#
# ADMINISTRATION GUIDELINES FOR PW SECURITY
#
# Database administrators should use the following guidelines to keep PWs secure.
#
# MySQL stores PWs for user accounts in the mysql.user table. Access to this table should never be granted to any non-admins.
#
# Account PWs can be expired so that users must reset them.
#
# The validate_password plugin can be used to enforce a policy on acceptable PWs.
#
# A user who has access to modify the plugin dir (the value of the plugin_dir SYS_VAR) or the my.cnf file that specifies
# the plugin dir location can replace plugins and modify the capabilities provided by plugins, including authentication plugins.
#
# Files such as log files to which PWs might be written should be protected.
#
# PASSWORDS AND LOGGING
#
# Passwords can be written as plain text in SQL statements such as CREATE_USER, GRANT and SET_PASSWORD.
# If such statements are logged by the MySQL server as written, PWs in them become visible to anyone with access
# to the logs.
#
# Statement logging avoids writing Pws in cleartext for hte following statements:
#
# 		CREATE USER ... IDENTIFIED BY ... 
# 		ALTER USER ... IDENTIFIED BY ...
# 		SET PASSWORD ...
# 		SLAVE START ... PASSWORD = ...
# 		CREATE SERVER ... OPTIONS(... PASSWORD ...)
# 		ALTER SERVER ... OPTIONS(... PASSWORD ...)
#
# Passwords in those statements are rewritten to not appear literally in statement text written to the general query log,
# slow log and binary log.
#
# Rewriting does not apply to other statements.
#
# In particular, INSERT or UPDATE statements for the mysql.user table that refer to literal PWs are logged as is,
# so you should avoid such statements. (Direct modification of grant tables is discouraged, anyway)
#
# For the general query log, password rewriting can be suppressed by starting the server with the --log-raw option.
# For security reasons, this option is not recommended for production use.
#
# For diagnostic purposes, it may be useful to see the exact text of statements as received by the server.
#
# By default, contents of audit log files produced by tthe audit log plugin are not encrypted and may contain
# sensitive information, such as the text of SQL statements.
#
# For security reasons, audit log files should be written to a directory accessible only to the MySQL server and to
# users with a legit reason to view the log.
#
# Statements received by the server may be rewritten if a query rewrite plugin is installed, in this case - the --log-raw
# option affects statements logging as follows:
#
# 		) without --log-raw, the server logs the statement returned by the query rewrite plugin. This may differ from the statement as received.
#
# 		) With --log-raw, the server logs the original statement as received.
#
# An implication of password rewriting is that statements that cannot be parsed (due, for example, to sytnax errors) are not written
# to the general query log because they cannot be known to be PW free.
#
# Use cases that require logging of all statements including those with errors should use the --log-raw option, bearing in mind that
# this also bypasses password rewriting.
#
# Password rewriting occurs only when plain text PWs are expected.
# For statements with syntax that expect a PW hash value, no rewriting occurs.
#
# if a plain text PW is supplied errorneously for such syntax, the pw is logged as given, without rewriting.
#
# To guard log files against unwarranted exposure, locate them in a directory that restricts access to the server
# and the database administrator.
#
# If the server logs to tables in the mysql database, grant access to those tables only to the DB admin.
#
# Replication salves store the PW for the replication master in the master info repostiory, which by default is a table
# in the mysql db named slave_master_info.
#
# The use of a file in the data dir for the master info repository is now deprecated.
# But still posible.
#
# Ensure that hte master info repository can be accseed only by the DB admin.
#
# An alternative to storing the PW in the master info repository is to use the START_SLAVE
# statement to specify credentials for connecting to the master.
#
# Use a restricted access mode to protect DB backups that include log tables or log files containing PWs.
#
# MAKING MYSQL SECURE AGAINST ATTACKERS
#
# When you connect to a MySQL server, you should use a PW. The PW is not transmitted in clear text over the connection.
#
# ALl other info is transferred as text, and can be read by anyone who is able to watch the connection.
#
# If the connection between the client and the server goes through an untrusted network, and you are
# concerned about this, you can use the compressed protocol to make traffic much more difficult to decipher.
#
# You can also use MySQL's internal SSL support to make the connection even more secure.
#
# Alternative, use SSH to get an encrypted TCP/IP conn between a MySQL server and a MySQL client.
#
# To make a MySQL system secure, you should strongly consider the following suggestions:
#
# 		) Require all MySQL accounts to have a PW. A client program does not necessarily know the identity of the person running it.
#
# 			It is common for client/server applications that the user can specify any user name to the client program.
#
# 			For example, anyone can use the mysql program to connect as any other person by simply invoking it as
# 			mysql -u <other_user> <db_name> if other_user has no PW.
#
# 			If all accounts have a PW, connecting using another user's acc becomes much more difficult.
#
# 		) Make sure that the onl Unix user acc with read or write privs in teh DB dirs is the acc used for running mysqld.
#
# 		) Never run the MySQL server as the Unix root user.
#
# 			This is dangerous,because any user with the FILE priv is able to cause the server to create files as root
# 			(For example ~root/.bashrc).
#
# 			To prevent this, mysqld refuses to run as root unless that is specified explicitly using the --user=root option.
#
# 			Mysqld can (and should) be run as an ordinary, unprived user instead.
#
# 			You can create a separate Unix acc named mysql to amek everything even more secure.
#
# 			Use this acc only for administrating MySQL.
#
# 			To start mysqld as a different Unix user, add a user option that specifies the user name in the 
# 			[mysqld] group of the my.cnf option file where you specify server options.
#
# 			For example:
#
# 				[mysqld]
# 				user=mysql
#
# 			This causes hte server to start as the designated user whether oyu start it manually or by using mysqld_safe or mysql.server
#
# 			Running mysqld as Unix user other than root does not mean you need to  change the root user name in teh user table.
# 			User names for MySQL accs have nothing to do with user names for Unix accs.
#
# 		) Do not grant the FILE priv to nonadmin users. Any user that has this priv can write a file anywhere in the file system with the
# 			privs of teh mysqld daemon.
#
# 			this includes teh server's data dir containing the files that implement the priv tables.
#
# 			To make FILE priv ops a bit safer, files generated with SELECT_..._INTO_OUTFILE do not overwrite existing files and are writable
# 			by everyone.
#
# 			The FILE priv may also be used to read any file that is world-readable or accesible to the unix user
# 			that hte server runs as.
#
# 			With this priv, you can read any file into the DB tables. This could be abused, by using LOAD_DATA to load /etc/passwd into a table,
# 			which then can be displayed with SELECT.
#
# 			To limit the location in which files can be read and written, set the secure_file_priv System to a specific dir.
#
# 		) Do not grant the PROCESS or SUPER priv to nonadmins.
#
# 			The output of mysqladmin processlist and SHOW_PROCESSLIST shows the text of any stratements currently being
# 			executed, so any user who is permitted to see the server process list might be able to see statements
# 			issued by other users.
#
# 			mysqld reseves an extra connection for users who have the CONNECTION_ADMIN or SUPER Priv, so that a MySQL root
# 			can log in and check server activity even if all normal connections are in use.
#
# 			The SUPER priv can be used to terminate client connections, change server operation by changing the value of SYS_VARs,
# 			and control replication servers.
#
# 		) Do not permit the use of symlinks to tables. (This capability can be disabled with the --skip-symbolic-links option).
#
# 			This is especially important if you run mysqld as root, because anyone that has write access to the server
# 			data dir then could delete any file in teh system
#
# 		) Stored programs and views should be written using the security guidelines seen later
#
# 		) If you do not trust your DNS, you should use IP addresses rather than host names in teh grant tables.
#
# 			IN any case, you should be very careful about creating grant tables entires using host name values that
# 			contain wildcards.
#
# 		) If you want to restrict the number of connections permitted to a single account, you can do so by setting the max_user_connections
# 			variable in mysqld.
#
# 			The CREATE_USER and ALTER_USER statements also support resource control options for limiting the extent of server use
# 			permitted to an account.
#
# 		) If the plugin dir is writable by the server, it may be possible for a user to write executable code to a file in the 
# 			dir using SELECT_..._INTO_DUMPFILE
#
# 			This can be prevented by making plugin_dir read only to the server or by setting --secure-file-priv to a dir where SELECT
# 			writes can be made safely.
#
# SECURITY-RELATED MYSQLD OPTIONS AND VARIABLES
#
# The following table showcases the mysqld options and system variables that affect security.
#
# 				Name 					Cmd 	Option Sys_Var  Status_var Var_SCope Dynamic
# allow-suspicious-udfs 		yes 	yes	 
# automatic_sp_privileges 						 Yes 						Global 	 Yes
# chroot 							yes   yes 
# des-key-file 					yes 	yes 
# local_infile 									 yes 						Global 	 Yes
# old_passwords 									 yes 						Both 		 Yes
#
# safe-user-create 				yes   Yes 
# secure-auth 						yes   yes 								Global 	  Yes
# - Variable: secure_auth  					 Yes 						Global 	  Yes
# secure-file-priv 				Yes 	Yes 								Global     No
# - Variable: secure_file_priv 				 Yes 						Global 	  No
#
# skip-grant-tables 				Yes 	Yes 								
# skip-name-resolve 				Yes 	Yes 								Global 		No
# - Variable: skip_name_resolve 				 Yes 						Global 	  No
# skip-networking 				Yes 	Yes 								Global 	  No
# - Variable: skip_networking 				 Yes 						Global 	  No
# skip-show-database 			Yes 	Yes 								Global 	  No
# - Variable: skip_show_database 			 Yes 						Global 	  No
#
# HOW TO RUN MYSQL AS A NORMAL USER
#
# On Windows, you can run the server as a Windows service using a normal user acc.
#
# On Linux, for installations performed using a MySQL repository or RPM packages, teh MySQL
# server mysqld should be started by the local mysql OS user.
#
# Starting by another OS user is not supported by the init script that are included as part of the
# MySQL repos.
#
# On Unix (or Linux for installations performed using tar.gz packages), teh MySQL server mysqld can be
# started and run by any user.
#
# However, you should avoid running the server as the Unix root user for security reasons.
#
# To change mysqld to run as a normal unprived Unix user <user_name>, you must do:
#
# 		1. Stop the server if it is running (use mysqladmin shutdown)
#
# 		2. Change the DB dirs and files so that <user_name> has privs to read and write files in them
# 			(you might need to do this as the Unix root user):
#
# 				chown -R <user_name> /path/to/mysql/datadir
#
# 			If you do not do this, teh server will not be able to access DBs or tables when it runs as <user_name>
#
# 			If dirs or files within teh MySQL data dir are symbolic links, chown -R might not follow symbolic links for you.
# 			If it does not, you will also need to follow those links and change the dirs and files they point to.
#
# 		3. Start the server as user <user_name>. ANother alternative is to start mysqld as the Unix root user and use
# 			the --user=<user_name> option.
#
# 			mysqld starts up, then switches to run as the Unix user <user_name> before accepting any connections.
#
# 		4. To start the server as the given user automatically at system startup time, specify the user name by adding
# 			a user option to the [mysqld] group of the /etc/my.cnf option file or the my.cnf option file in the server's
# 			data dir.
#
# 			For example:
#
# 				[mysqld]
# 				user=user_name
#
# If your Unix machine itself is not secured, you should assign PWs to the MySQL root account in the grant tables.
#
# Otherwise, any user with a login account on that machine can run the mysql client with a --user=root option
# and perform any operation.
#
# (It is a good idea to assign PWs to MySQL accs in any case, but especially so when other login accs exist
# on the server host)
#
# SECURITY ISSUES WITH LOAD DATA LOCAL
#
# The LOAD_DATA statement can load a file located on the server host, or if the LOCAL keyword is specified, on the client host.
#
# There are two potentional security issues with the LOCAL version of LOAD_DATA:
#
# 		) The transfer of the file from client host to the server host is initiated by the MySQL server. 
#
# 			In theory,a patched server could be built that would tell the client program to transfer a file of the server's
# 			choosing rather than the file named by the client in the LOAD_DATA statement.
#
# 			Such a server could access any file of the client host to which the user has read acces.
#
# 			(A patched server could in fact reply with a file-transfer request to any statement, not just LOAD_DATA_LOCAL,
# 			so a more fundamental issue is that clients should not connect to untrusted servers.)
#
# 		) In a Web environment where the clients are connecting from a Web server, a user could LOAD_DATA_LOCAL to read
# 			any files that the Web server process has read access to (assuming that a user could run any statement against
# 			the SQL server).
#
# 			In this environment, the client with respect to the MySQL server actually is the Web server, not a remote
# 			program being run by users who connect to the Web server.
#
# To avoid LOAD_DATA issues, clients should avoid using LOCAL.
#
# To avoid connecting to untrusted servers, clients can establish a secure connection and verify the server
# identity by connecting using the --ssl-mode=VERIFY_IDENTITY option and the appropiate CA certificate.
#
# To enable admin and applications to manage the local data loading capability, LOCAL configuration works like this:
#
# 		) On teh server side:
#
# 			) The local_infile SYS_VAR controls server-side LOCAL capability.
# 				Depending on the local_infile setting, teh server refuses or permits local data loading by clients
# 				that have LOCAL enabled on the client side.
#
# 				By default, local_infile is disabled.
#
# 			) To explicitly cause the server to refuse or permit LOAD_DATA_LOCAL statements (regardless of how client programs
# 				and libraries are configured at build time or runtime), start mysqld with local_infile disabled or enabled,
# 				respectively.
#
# 				local_infile can also be set at runtime.
#
# 		) On the client side:
#
# 			) The ENABLED_LOCAL_INFILE CMake option controls the compiled-in default LOCAL capability for the MySQL client lib.
# 				Cliens that make no explicit arrangements therefore have LOCAL capability disabled or enabled according to
# 				the ENABLED_LOCAL_INFILE setting specified at MySQL build time.
#
# 				By default, the client lib in MySQL binary distribs is compiled with ENABLED_LOCAL_INFILE disabled.
# 				If you compile MySQL from source, configure it with ENABLED_LOCAL_INFILE disabled or enabled based on
# 				whether clients clients that make no explicit arrangements should have LOCAL capability disabled or enabled, resp..
#
# 			) Client programs that use the C API can control load data loading explicitly by invoking mysql_options() to disable or 
# 				enable the MYSQL_OPT_LOCAL_INFILE option.
#
# 			) For the Mysql client, local data loading is disabled by default. To disable or enable it explicitly, use the
# 				--local-infile=0 or --local-infile[=1] option.
#
# 			) For the mysqlimport client, local data loading is disabled by default. To disable, or enable it explicitly,
# 				use the --local=0 or --local[=1] option.
#
# 			) If you use LOAD_DATA_LOCAL in Perl scripts or other programs that read the [client] group from option files,
# 				you can add an local-infile option setting to that group.
#
# 				To prevent problems for programs that do not understand this option, specify it using the loose- prefix:
#
# 					[client]
# 					loose-local-infile=0
# 			
# 				or:
#
# 					[client]
# 					loose-local-infile=1
#
# 			) In all cases, successful use of a LOCAL load by a client requires that hte server eprmits it.
#
# If LOCAL capability is disabled, on either server or clietn side, a client that attempts to issue a LOAD_DATA_LOCAL statement
# receives the following error message:
#
# 		ERROR 1148: The used command is not allowed with this MySQL verison
#
# CLIENT PROGRAMMING SECURITY GUIDELINES
#
# Applications that access MySQL should not trust any data entered by users, who can try to trick your code by entering special or escaped
# char sequences in Web forms, URLs or whathever app you have built.
#
# Be sure that your application remains secure if a user enters something like ; DROP DATABASE mysql;
# This is an extreme example, but large security leaks and data loss might occur as a result of hackers using similar techniques,
# if you do not prepare for them.
#
# A common mistake is to protect only string data values. 
#
# Rmember to check numeric data as well. If an application generates a query such as SELECT * FROM table WHERE
# ID=234 when a user enters the value 234, the user can enter the value 234 OR 1=1 to cause the aplication to generate the
# query SELECT * FROM table WHERE ID=234 OR 1=1
#
# as a result, the server retrieves every row in the table.
#
# This exposes every row, and causes excessive server load.
# The simplest way to protect from this type of attack is to use a single quotation mark
# around the numeric constants:
#
# SELECT * FROM table WHERE ID='234'
#
# If the user enters extra info, it all becomes part of the string.
#
# In a numeric context, MySQL automatically converts that string to a number and strip any trailining nonnumeric chars from it.
#
# Sometiems people think that if a DB contains only publicly available data, it need not be protected.
# This is wrong.
#
# Even if it is permissible to display any row in the DB, you should still protect against denial of service attacks
# (for example, those that are based on the technique in the preceding paragraph that cause the server to waste resources)
#
# otherwise, your server becomes unresponsive.
#
# Checklist:
#
# 		) Enable strict SQL mode to tell the server to be more restrictive of what data values it accepts.
#
# 		) Try to enter single and double quotation marks (' and ") in all of your Web forms. If you get any kind of MySQL error, investigate
# 			the problem.
#
# 		) Try to modify dynamic URLs by adding %22("),%23(#) and %27(') to them.
#
# 		) Try to modify data types in dynamic URLs from numeric to char types using the chars shown in the previous example.
# 			Your application should be safe against these and similar attacks.
#
# 		) Try to enter characters, spaces and special symbols rather than numbers in numeric fields.
#
# 			Your application should remove thhem before passing them to MySQL or else generate an error.
#
# 			Passing unchecked values to MySQL is very dangerous.
#
# 		) Check the size of data before passing it to MySQL.
#
#		) Have your application connect to the DB using a user name different from the one you use for the admin purposes.
# 			Do not give your application any access privs they do not need.
#
# Many application programming interfaces provide a means of escaping special characters in data values.
#
# Properly used, this prevents application users from entering values that cause teh application to
# generate statements that have different effect than you intended:
#
# 		) MySQL C API: Use the mysql_real_escape_string_quote() API call
#
# 		) MySQL++: Use the escape and quote modeifiers for query streams
#
# 		) PHP: use either the mysqli or pdo_mysql extensions, and not hte older ext/mysql extension.
# 				The preferred APIs support the improved MySQL authentication protocol and PWs, as well as 
# 				prepared statements with placeholders.
#
# 				If the older ext/mysql extension must be used, then for escaping use the mysql_real_escape_string_quote()
# 				function and not mysql_escape_string() or addslashes() because only mysql_real_escape_string_quote() is
# 				character set-aware: the other functions can be "bypassed" when using (invalid) multibyte char sets.
#
# 		) Perl DBI: Use placeholders or the quote() method
#
# 		) Ruby DBI: Use placeholders or teh quote() method
#
# 		) Java JDBC: Use a PreparedStatement object and placeholders.
#
# etc.
#
# THE MYSQL ACCESS PRIVILEGE SYSTEM:
#
# The primary function of the MySQL privlege system is to authenticate a user who connects from a given host and to associate
# that user with privs on a database such as SELECT, INSERT, UPDATE, and DELETE.
#
# Additionally, functionality includes the ability to have anonymous users and to grant privs for MySQL-specific functions
# such as LOAD_DATA_INFILE and administrative operations.
#
# There are some things that you cannot do with the MySQL privilege system:
#
# 		) You cannot explicitly specify that a given user should be denied access.
# 			That is, you cannot explicity match a user and then refuse the connection.
#
# 		) You cannot specify that a user has privileges to create or drop tables in a database but not to create or drop the DB itself.
#
# 		) A PW applies globally to an account. You cannot associate a Pw with a specific object such as a database, table or routine.
#
# The user interface to the MySQL priv system consists of SQL statements such as CREATE_USER, GRANT and REVOKE.
#
# Internally, the server stores privs information in the grant tables of the mysql system database (that is, in the database named mysql).
# The MySQL server reads teh content of these tables into memory when it starts and base access-control decisions on the in-memory copies
# of the grant tables.
#
# The MySQL priv system ensures that all users may perform only the operations permitted to them.
# As a user, when you connect to a MySQL server, your identity is determined by the host from which you connect and
# the user name you specify.
#
# When you issue requests after connecting, the system grants privileges according to your identity and what you want to do.
#
# MySQL Considers both your host name and user name in idetifying you because there is no reason to assume that a given
# user name belongs to the same person on all hosts.
#
# For example, the user Joe who connects from office.example.com need not be the same per as joe who connects from home.example.com
#
# Mysql handles this by enabling you to distinguish users on different hosts that happen to have the same name:
#
# 		you can grant one set of privs for connections by joe from office.example.com and a different
# 		set of privs for connections by joe from home.example.com
#
# 		To see what privs a given account has, use the SHOW_GRANTS statement, for example:
#
# 				SHOW GRANTS FOR 'joe'@'office.example.com';
# 				SHOW GRANTS FOR 'joe'@'home.example.com'; 			
# 
# MySQL access control involves two stages when you run a client program that connect to the server:
#
# 		Stage 1: The server accepts or rejects the connection based on your identity and whether you can verify your
# 					identity by supplying the correct PW.
#
# 		Stage 2: Assuming that you can connect, the server checks each statement you issue to determine whether you ahve sufficient
# 					privs to eprform it.
#
# 					For example, if you try to select rows from a table in a DB or dopr a table from the DB, the server verifies that
# 					you ahve the SELECT privs for the table or the DROP priv for the database.
#
# 					For a more detailed walkthrough of each stage, covered later.
#
# 					If your privleges are changed (either by yourself or someone else), while you are connected, those changes
# 					do not necesasrily take effect immediately for the next statement that you issue.
#
# PRIVILEGES PROVIDED BY MYSQL
#
# THe privileges granted to a MySQL account determine which operations the account can perform.
#
# MySQL privileges differ in the contexts in which they apply and at different levels of operation:
#
# 		) Administrative privs enable users to manage operation of the MySQL server. These privs are global because they
# 			are not specific to a particular DB.
#
# 		) Database Privs apply to a DB and to all objects within it. These privs can be granted for specific DBs, or globally so
# 			that they apply to all dbs.
#
# 		) Privs for db objects such as tables, indexes, views and stored routines can be granted for specific objects within a
# 			database, for all objects of a given type within a database (for example, all tables in a database) or globally
# 			for all objects of a given type in all DBs.
#
# Privileges also differ in terms of whether they are static (built in to the server) or dynamic (defined at runtime).
# Whether a priv is static or dynamic affects its availability to be granted to user accounts and roles.
#
# Information about account privs is stored in the grant tables in the mysql SYSTEM_DB.
# Covered more later.
#
# The MYSQL server reads teh contents of the grant tables into memory when it starts, and reloads
# them under the circumstances indicated later.
#
# The server bases access-control decisions on the in-memory copies of the grant tables.
#
# Important:
#
# 		Some MySQL releases introduce changes to the grant tables to add new privs or features.
# 		To make sure that you can take advantage of any new capabilities, update your grant
# 		tables to the current structure whenever you upgrade MySQL.
#
# The following sections summarize the available privs, provide more detailed desc of each priv, and offer usage guidelines.
#
# ) Summary of Available Privs
#
# ) Static Priv Desc
#
# ) Dynamic Priv Desc
#
# ) Priv-Granting guidelines
#
# SUMMARY OF AVAILABLE PRIVILEGES
#
# The following tables show the static privilege names used in GRANT and REVOKE statements, along with the COLUMN name associated
# with each priv in the grant tables and the context in which the priv applies.
#
# PERMISSIBLE STATIC PRIVS for GRANT and REVOKE
#
# Privilege 					Grant Table Column 				Context
# ALL_[PRIVILEGES] 			Synonym for "all privileges" 	Server Administration
# ALTER 							Alter_priv 							Tables
# ALTER_ROUTINE 				Alter_routine_priv 				Stored routines
# CREATE 						Create_priv 						Database, tables or Indexes
#
# CREATE_ROLE 					Create_role_priv 					Server administration
# CREATE_ROUTINE 				Create_routine_priv 				Stored routines
# CREATE_TABLESPACE 			Create_tablespace_priv 			Server administration
# CREATE_TEMPORARY_TABLES 	Create_tmp_table_priv 			Tables
#
# CREATE_USER 					Create_user_priv 					Server administration
# CREATE_VIEW 					Create_view_priv 					Views
# DELETE 						Delete_priv 						Tables
# DROP 							Drop_priv 							Databases, tables or views
#
# DROP_ROLE 					Drop_role_priv 					Server administration
# EVENT 							Event_priv 							Databases
# EXECUTE 						Execute_priv 						Stored routines
# FILE 							File_priv 							File access on server host
# GRANT_OPTION 				Grant_priv 							Databases, tables or stored routines
# INDEX 							Index_priv 							Tables
# INSERT 						Insert_priv 						Tables or Columns
#
# LOCK_TABLES 					Lock_tables_priv 					Databases
# PROCESS 						Process_priv 						Server Administration
# PROXY 							proxies_priv table 				Server administration
# REFERENCES 					References_priv 					Databases or Tables
# RELOAD 						Reload_priv 						Server administration
# REPLICATION_CLIENT 		Repl_cient_priv 					Server administration
#
# REPLICATION_SLAVE 			Repl_slave_priv 					Server administration
# SELECT 						Select_priv 						Tables or columns
# SHOW_DATABASES 				Show_db_priv 						Server administration
# SHOW_VIEW 					Show_view_priv 					Views
# SHUTDOWN 						Shutdown_priv 						Server admin
# SUPER 							Super_priv 							Server admin
# TRIGGER 						Trigger_priv 						Tables
# UPDATE 						Update_priv 						Tables or columns
# USAGE 							Synonym for "no privs" 			Server administration
#
# The following table shows the dynamic privlege names used in GRANT and REVOKE statements,
# along with the context in which the privilege applies.
#
# TABLE 6.3 PERMISSIBLE DYNAMIC PRIVILEGES for GRANT and REVOKE
#
# 			Privilege 				Context
#
# AUDIT_ADMIN 				 	Audit log administration
# BACKUP_ADMIN 				Backup administration
# BINLOG_ADMIN 				Backup and Replication Admin
# CONNECTION_ADMIN 			Server administration
#
# ENCRYPTION_KEY_ADMIN 			Server administration
# FIREWALL_ADMIN 					Firewall Administration
# FIREWALL_USER 					Firewall administration
# GROUP_REPLICATION_ADMIN 		Replication Administration
# PERSIST_RO_VARIABLES_ADMIN 	Server administration
#
# REPLICATION_SLAVE_ADMIN 		Replication administration
# RESOURCE_GROUP_ADMIN 			Resource group administration
# RESOURCE_GROUP_USER 			Resource group administration
# ROLE_ADMIN 						Server administration
# 
# SESSION_VARIABLES_ADMIN 		Server administration
# SET_USER_ID 						Server administration
# SYSTEM_VARIABLES_ADMIN 		Server administration
# VERSION_TOKEN_ADMIN 			Server administration
# XA_RECOVER_ADMIN 				Server administration
#
# STATIC PRIVILEGE DESCRIPTIONS
#
# Static privs are built in to the server, in contrast to dynamic privs, which are defined at runtime.
# The following list describes each static priv available in MySQL.
#
# particular SQL statements might have more specific priv requirements than indicated here.
# If so, the description for the statement in question provides the details.
#
# 		) ALL, ALL_PRIVILEGES
#
# 				These privilege specifiers are shorthand for "all privileges available at a given privilege leve"
# 				(except GRANT_OPTION).
#
# 				For example, granting ALL at the global or table level grants all global privs or all table-level privs, respectively.
#
# 		) ALTER
#
# 				Enables use of the ALTER_TABLE statement to change the structure of tables.
#
# 				ALTER_TABLE also requires the CREATE and INSERT privileges.
# 				Renaming a table requires ALTER and DROP on the old table, CREATE and INSERT on the new table.
#
# 		) ALTER_ROUTINE
#
# 				Enables use of statements that alter or drop stored routines (stored procedures and functions)
#
# 		) CREATE
#
# 				Enables use of statements that create new databases and tables
#
# 		) CREATE_ROLE
#
# 				Enables use of the CREATE_ROLE statement. (The CREATE_USER priv also enables use of the CREATE_ROLE statement)
#
# 		) CREATE_ROUTINE
#
# 				Enables use of statements that create stored routines (stored procedures and functions)
#
# 		) CREATE_TABLESPACE
#
# 				Enables use of statements that create, alter or drop tablespaces and log file groups.
#
# 		) CREATE_TEMPORARY_TABLES
#
# 				Enables the creation of temporary tables using the CREATE_TEMPORARY_TABLE statement.
#
# 				After a session has created a temporary table, the server performs no further privilege checks on the table.
#
# 				The creating session can perform any operation on the table, such as DROP_TABLE, INSERT, UPDATE or SELECT.
#
# 		) CREATE_USER
#
# 				Enables use of the ALTER_USER, CREATE_ROLE, CREATE_USER, DROP_ROLE, DROP_USER, RENAME_USER and REVOKE_ALL_PRIVILEGES statements.
#
# 		) CREATE_VIEW
#
# 				Enables use of the CREATE_VIEW statement.
#
# 		) DELETE
#
# 				Enables rows to be deleted from tables in a database.
#
# 		) DROP
#
# 				Enables use of statements that drop (remove) existing databases, tables and views.
#
# 				The DROP privilege is required to use the ALTER TABLE ... DROP PARTITION statement
# 				on a partitioned table.
#
# 				The DROP privilege is also required for TRUNCATE_TABLE
#
# 		) DROP_ROLE
#
# 				Enables use of the DROP_ROLE statement. (The CREATE_USER priv also enables use of the DROP_ROLE statement)
#
# 		) EVENT
#
# 				Enables use of statements that create, alter, drop or display events for the Event Scheduler.
#
# 		) EXECUTE
#
# 				Enables use of statements that execute stored routines (stored procedures and functions)
#
# 		) FILE
#
# 				Affects the following operations and server behaviors:
#
# 					) Enables reading and writing files on the server host using the LOAD_DATA_INFILE and SELECT_..._INTO_OUTFILE 
# 						statements and the LOAD_FILE() function.
#
# 						A user who has the FILE privilege can read any file on the server host that is either world-readable
# 						or readable by the MySQL server.
#
# 						(This implies that the user can read any file in any DB dir, because the server can access any of those files)
#
# 					) Enables creating new files in any directory where the MySQL server has write access.
# 						This includes the server's data dir containing the files that implement the privilege tables.
#
# 					) Enables use of the DATA DIRECTORY or INDEX DIRECTORY table option for the CREATE_TABLE statement.
#
# 				As a security measure, the server does not overwrite existing files.
#
# 				To limit the location in which files can be read and written, set the secure_file_priv SYS_VAR to a specific dir.
#
# 		) GRANT_OPTION
#
# 				Enables you to grant to or revoke from other users those privileges that you yourself possess.
#
# 		) INDEX
#
# 				Enables use of statements that create or drop (remove) indexes. INDEX applies to existing tables.
#
# 				If you have the CREATE privilege for a table, you can include Index definitions in the CREATE_TABLE statement.
#
# 		) INSERT
#
# 				Enables rows to be inserted into tables in a database. INSERT is also required for the ANALYZE_TABLE, OPTIMIZE_TABLE,
# 				and REPAIR_TABLE table-maintenance statements.
#
# 		) LOCK_TABLES
#
# 				Enables use of explicit LOCK_TABLES statements to lock tables for which you have the SELECT privilege.
#
# 				This includes use of write locks, which prevents other sessions from reading the locked table.
#
# 		) PROCESS
#
# 				Enables display of information about the threads executing within the server (that is, information about the
# 				statements being executed by sessions).
#
# 				The privilege enables use of SHOW_PROCESSLIST or mysqladmin processlist to see threads belonging to other accounts;
# 				you can always see your own threads.
#
# 				The PROCESS privilege also enables use of SHOW_ENGINE.
#
# 		) PROXY
#
# 				Enables one user to impersonate or become known as another user.
#
# 		) REFERENCES
#
# 				Creation of foreign key constraint requires the REFERENCES privilege for the parent table.
#
# 		) RELOAD
#
# 				Enables use of the FLUSH statement. 
# 				It also enables mysqladmin commands that are equivalent to FLUSH operations:
#
# 				flush-hosts, flush-logs, flush-privileges, flush-status, flush-tables, flush-threads, refresh and reload.
#
# 				The reload command tells the server to reload the grant tables into memory.
#
# 				flush-privileges is a synonym for real. The refresh command closes and reopens the log files and flushes all
# 				tables.
#
# 				The other flush-xxx commands perform functions similar to refresh, but are more specific and may be preferable
# 				in some instances.
#
# 				For example, if you want to flush just the log files, flush-logs is a better choice than refresh.
#
# 		) REPLICATION_CLIENT
#
# 				Enables use of the SHOW_MASTER_STATUS, SHOW_SLAVE_STATUS and SHOW_BINARY_LOGS statements.
#
# 				Grant this privilege to accounts that are used by slave servers to connect to the current server
# 				as their master.
#
# 		) REPLICATION_SLAVE
#
# 				Enables the account to request updates that have been made to databases on the master server.
#
# 				Grants this privilege to accounts that are used by slave servers to connect to the current server as their master.
#
# 		) SELECT
#
# 				Enables rows to be selected from tables in a database. SELECT statements require the SELECT privilege only if
# 				they actually access tables.
#
# 				Some SELECT statements do not access tables and can be executed without permission for any database.
#
# 				For example, you can use SELECT as a simple calculator to evaluate expresisons that make no reference to tables:
#
# 					SELECT 1+1;
# 					SELECT PI()*2;
#
# 				The SELECT privilege is also needed for other statements that read column values.
#
# 				For example, SELECT is needed for columns referenced on the right hand side of <col_name>=<expr> assignment
# 				in UPDATE statements or for columns named in the WHERE clause of DELETE or UPDATE statements.
#
# 				The SELECT privilege is needed for tables or views used with EXPLAIN, including any underlying
# 				tables in view definitions.
#
# 		) SHOW_DATABASES
#
# 				Enables the account to see database names by issuing the SHOW DATABASE statement.
#
# 				Accounts that do not have this privlege see only databases for which they have some privs, and cannot use
# 				the statement at all if hte server was started with the --skip-show-database option.
#
# 				(Any global priv is considered a priv for all database)
#
# 		) SHOW_VIEW
#
# 				Enables use of the SHOW_CREATE_VIEW satement. This priv is also needed for views used with EXPLAIN.
#
# 		) SHUTDOWN
#
# 				Enables use of the SHUTDOWN and RESTART statements, the mysqladmin shutdown command and the mysql_shutdown() C API function.
#
# 		) SUPER
#
# 				SUPER is a powerful qnd far-reaching privilege and should not be granted lightly.
#
# 				If an account needs to perform only a subset of SUPER operations, it may be possible to achieve the desired
# 				privlege set by instead granting one or more dynamic privs, each of which confers more limited capacities.
#
# 				NOTE: SUPER is deprecated.
#
# 				SUPER affects the following operations and server behaviors:
#
# 					) Enables system variable changes at runtime:
#
# 							) Enables server configuration changes to global system variables with SET_GLOBAL and SET_PERSIST.
#
# 								The corresponding dynamic priv is SYSTEM_VARIABLES_ADMIN
#
# 							) Enables setting restricted session system variables that require a special privilege.
#
# 								The corresponding dynamic priv is SESSION_VARIABLES_ADMIN
#
# 					) Enables changes to global transaction characteristics
#
# 						The corresponding dynamic priv is SYSTEM_VARIABLES_ADMIN
#
# 					) Enables the account to start and stop replication, including Group replication.
#
# 						The corresponding dynamic privlege is REPLICATION_SLAVE_ADMIN for regular replication, GROUP_REPLICATION_ADMIN for Group Replication.
#
# 					) Enables use of the CHANGE_MASTER_TO and CHANGE_REPLICATION_FILTER statements.
#
# 						The corresponding dynamic privlege is REPLICATION_SLAVE_ADMIN.
#
# 					) Enables binary log control by means of the PURGE_BINARY_LOGS and BINLOG statements.
#
# 						The corresponding dynamic priv is BINLOG_ADMIN.
#
# 					) Enables setting the effective authorization ID when executing a view or stored program.
#
# 						A user with this privlege can specify any account in the DEFINER attribute of a view or stored program.
#
# 						The corresponding dynamic privilege is SET_USER_ID.
#
# 					) Enables use of the CREATE_SERVER, ALTER_SERVER and DROP_SERVER statements.
#
# 					) Enables use of the mysqladmin debug command.
#
# 					) Enables InnoDB encryption key rotation.
#
# 						The corresponding dynamic privilege is ENCRYPTION_KEY_ADMIN
#
# 					) Enables execution of Version Tokens user-defined functions.
#
# 						The corresponding dynamic priv is VERSION_TOKEN_ADMIN.
#
# 					) Enables nonempty <graphml> element content in the result from the ROLES_GRAPHML() function.
#
# 						The corresponding dynamic priv is ROLE_ADMIN
#
# 					) Enables control over client connections not permitted to non-SUPER accounts:
#
# 						) Enables use of the KILL statement or mysqladmin kill command to kill threads belonging to other accounts.
# 							(An account can always kill its own threads)
#
# 						) The server does not execute init_connect SYS_VARs content when SUPER client connects.
#
# 						) The server accepts one connection from SUPER client even if the connection limit configured by the max_connections SYS_VAR is reached.
#
# 						) A server in offline mode (offline_mode enabled) does not terminate SUPER client connections at the next client request,
# 							and accepts new connections from SUPER clients.
#
# 						) Updates can be performed even when the read_only SYS_VAR is enabled. This applies to explicit table updates, and to use of account-management
# 							statements such as GRANT and REVOKE that update tables implicitly.
#
# 					The corresponding dynamic priv for the preceding connection-control operations is CONNECTION_ADMIN.
#
# 				The may also need the SUPER priv to create or alter stored functions if binary logging is enabled.
#
# 		) TRIGGER
#
# 			Enables trigger operations. You must have this privilege for a table to create, drop, execute or display triggers for that table.
#
# 			When a trigger is activated (by a user who has privs to execute INSERT, UPDATE or DELETE statements for the table associated with the
# 			trigger), trigger execution requires that the user who defined the trigger still have the TRIGGER priv for the table.
#
# 		) UPDATE
#
# 			Enables rows to be updated in tables in a DB.
#
# 		) USAGE
#
# 			This privlege specifier stands for "no privs". It is used at the global level with GRANT to specify clauses such as WITH GRANT OPTION without
# 			naming specific account privs in the priv list.
#
# 			SHOW_GRANTS displays USAGE to indicate that an account has no privileges at a priv level.
#
# DYNAMIC PRIVILEGE DESCRIPTIONS
#
# Dynamic privileges are defined at runtime, in contrast to static privileges, which are built in to the server.
# The following list describes each dynamic privilege available in MySQL.
#
# Most dynamic privileges are defined at server startup. Others are defined by a particular server component or plugin,
# as indicated in the privilege descriptions.
#
# In such cases, the privilege is unavailable unless the component or plugin that defines it is enabled.
#
# Particular SQL statements might have more specific privilege requirements than indicated here.
# If so, the description for the statement in question provides the details.
#
# 		) AUDIT_ADMIN
#
# 			Enables audit log configuration. This privilege is defined by the audit_log plugin.
#
# 		) BACKUP_ADMIN
#
# 			Enables execution of the LOCK_INSTANCE_FOR_BACKUP statement and access to the Performance Schema Log_status table.
#
# 			The BACKUP_ADMIN privilege is automatically granted to users with the RELOAD privilege when performing an in-place
# 			upgrade to MySQL 8.0 from an earlier version.
#
# 		) BINLOG_ADMIN
#
# 			Enables binary log control by means of the PURGE_BINARY_LOGS and BINLOG statements.
#
# 		) CONNECTION_ADMIN
#
# 			Enables use of the KILL statement or mysqladmin kill command to kill threads belonging to other accounts.
# 			(An account can always kill its own threads).
#
# 			Enables setting SYS_VAR related to client connections, or circumventing restrictions related to client connections.
# 			CONNECTION_ADMIN applies to the effects of these SYS_VARs:
#
# 				) Init_connect: The server does not execute init_connect SYS_VAR content when CONNECTION_ADMIN clients connect.
#
# 				) max_connections: The server accepts one connection from a CONNECTION_ADMIN client even if the connection limit 
# 											configured by the max_connections SYS_VAR is reached.
#
# 				) offline_mode: A server in offline mode (offline mode enabled) does not terminate CONNECTION_ADMIN client connections
# 										at the next client request, and accepts new connections from CONNECTION_ADMIN clients.
#
# 				) read_only: Updates can be performed even when the read_only SYS_VAR is enabled.
#
# 									This applies to explicit table updates, and to use of account-management statements such as GRANT and REVOKE
# 									that update tables implicitly.
#
# 		) ENCRYPTION_KEY_ADMIN
#
# 			Enables InnoDB encryption key rotation.
#
# 		) FIREWALL_ADMIN
#
# 			Enables a user to administer firewall rules for any user.
# 			This privilege is defined by the MYSQL_FIREWALL plugin.
#
# 		) FIREWALL_USER
#
# 			Enables users to update their own firewall rules.
# 			This privilege is defined by the MYSQL_FIREWALL plugin.
#
# 		) GROUP_REPLICATION_ADMIN
#
# 			Enables the account to start and stop GROUP REPLICATION. Grant this privilege to accounts that are used by slave servers to connect to the current server as their master.
#
# 		) PERSIST_RO_VARIABLES_ADMIN
#
# 			For users who also have SYSTEM_VARIABLES_ADMIN, PERSIST_RO_VARIABLES_ADMIN enables use of SET_PERSIST_ONLY to persist global system variables
# 			to the mysqld-auto.cnf option file in the data dir.
#
# 			This statement is similar to SET_PERSIST but does not modify the runtime global SYS_VAR rule.
#
# 			This makes SET_PERSIST_ONLY suitable for configuring read-only SYS_VARS that can be set only at server startup.
#
# 		) REPLICATION_SLAVE_ADMIN
#
# 			Enables the account to connect to the master server, start and stop replication, and use the CHANGE_MASTER_TO and
# 			CHANGE_REPLICATION_FILTER statements.
#
# 			Grant this priv to accounts that are used by slave servers to connect to the current server as their master.
#
# 			This priv does not apply to Group Replication; use GROUP_REPLICATION_ADMIN for that.
#
# 		) RESOURCE_GROUP_ADMIN
#
# 			Enables resource group management: Creating, Altering, and dropping resource groups; and assignment of threads and statements
# 			to resource groups.
#
# 			A user with this privilege can perform any operation relating to resource groups.
#
# 		) RESOURCE_GROUP_USER
#
# 			Enables assigning threads and statements to resource groups. A user with this priv can use the SET_RESOURCE_GROUP statement 
# 			and the RESOURCE_GROUP optimizer hint.
#
# 		) ROLE_ADMIN
#
# 			Enables use of the WITH ADMIN OPTION clause of the GRANT statement.
#
# 			Enables nonempty <graphml> element content in the result from the ROLES_GRAPHML() function.
#
# 		) SERVICE_CONNECTION_ADMIN
#
# 			Enables connections to the network interface that permits only administrative connections.
#
# 		) SESSION_VARIABLES_ADMIN
#
# 			For most SYS_VARs, setting the session value requires no special privileges and can be done by any user to affect
# 			the current session.
#
# 			For some system variables, setting the session value can have effects outside the current session and thus is a restricted
# 			operation.
#
# 			For these, the SESSION_VARIABLES_ADMIN privilege enables the user to set the session value.
#
# 			If a system variable is restricted and requires a special privilege to set the session value, the variable desc. indicates that
# 			restriction.
#
# 			Examples include - binlog_format, sql_log_bin and sql_log_off.
#
# 			SESSION_VARIABLES_ADMIN was added in MySQL 8.0.14.
#
# 			Prior to this, restricted session SYSTEM_VARIABLES can be set only by users who have the
# 			SYSTEM_VARIABLES_ADMIN or SUPER priv.
#
# 			The SESSION_VARIABLES_ADMIN priv is a subset of the SYSTEM_VARIABLES_ADMIN and SUPER privs.
#
# 			A user who has either of those privs is also permitted to set restricted session variables and
# 			effectively has SESSION_VARIABLES_ADMIN by implication and need not be granted SESSION_VARIABLES_ADMIN explicitly. 			
#
# 		) SET_USER_ID
#
# 			Enables setting the effective authorization ID when executing a view or stored program.
#
# 			A user with this priv can specify any account in the DEFINER attribute of a view or stored program.
#
# 		) SYSTEM_VARIABLES_ADMIN
#
# 			Affects the following operations and server behaviors:
#
# 				) Enables system variable changes at runtime:
#
# 					) Enables server configuration changes to global system variables with SET_GLOBAL and SET_PERSIST.
#
# 					) Enables server configuration changes to global system variables with SET_PERSIST_ONLY, if the user also has PERSIST_RO_VARIABLES_ADMIN.
#
# 					) Enables setting restricted session system variables that require a special privilege.
# 						In effect, SYSTEM_VARIABLES_ADMIN implies SESSION_VARIABLES_ADMIN without explicitly granting SESSION_VARIABLES_ADMIN.
#
# 				) Enables changes to global transaction characteristics.
#
# 		) VERSION_TOKEN_ADMIN
#
# 			Enables execution of Version Tokens user-defined functions. This privilege is defined by the version_tokens plugin.
#
# 		) XA_RECOVER_ADMIN
#
# 			Enables execution of the XA_RECOVER statement.
#
# 			Prior to MySQL 8.0, any user could execute the XA_RECOVER statement to discover the XID values for oustanding prepared XA transactions,
# 			possibly leading to commit or rollback of an XA transaction by a user other than the one who started it.
#
# 			In MySQL 8.0, XA_RECOVER is permitted only to users who have the XA_RECOVER_ADMIN privilege, which is expected to be granted
# 			only to administrative users who have need for it.
#
# 			This might be case, for example, for administrators of an XA application if it has crashed and it is necessary to find outstanding
# 			transactions started by the application so they can be rolled back.
#
# 			This privilege requirement prevents users from discovering the XID values for oustanding prepared XA transactions other than their own.
# 			It does not affect normal commit or rollback of an XA transaction because the user who started it knows its XID.
#
# PRIVILEGE-GRANTING GUIDELINES
#
# It is a good idea to grant to an account only those privileges that it needs.
# You should exercise particular caution in granting the FILE and administrative privileges:
#
# 		) FILE can be abused to read into a database table any files that hte MySQL server can read on the server host.
# 			This includes all world-readable files and files in the server's data directory.
#
# 			The table can then be accessed using SELECT to transfer its contents to the client host.
#
# 		) GRANT_OPTION enables users to give their privileges to other users. Two users that have different privileges and with the GRANT_OPTION privilege
# 			are able to combine privileges.
#
# 		) ALTER may be used to subvert the privilege system by renaming tables.
#
# 		) SHUTDOWN can be abused to deny service to other users entirely by terminating the server.
#
# 		) PROCESS can be used to view the plain text of currently executing statements, including statements that set or change PWs.
#
# 		) SUPER can be used to terminate other sessions or change how the server operates.
#
# 		) Privileges granted for the mysql system databse itself can eb used to change Passwords and otehr access privilege information:
#
# 			) Passwords are stored encrypted, so a malicious user cannot simply read them to know the plain text password.
#
# 				However, a user with write access to the mysql.user table authentication_string column can change an account password,
# 				and the connect to the MySQL server using that account.
#
# 			) INSERT or UPDATE granted for the mysql system database enable a user to add privileges or modify existing privileges, respectively.
#
# 			) DROP for the mysql system database enables a user to remote privilege tables, or even the database itself.
#
# An example of creating a concatenated table of different privileges and system variables in terms of privileges:
#
# SELECT password, host, user,
# CONCAT(Select_priv, Lock_tables_priv) AS selock,
# CONCAT(Insert_priv, Update_priv, Delete_priv, Create_priv, Drop_priv) AS modif,
# CONCAT(Grant_priv, References_priv, Index_priv, Alter_priv) AS meta,
# CONCAT(Create_tmp_table_priv, Create_view_priv, Show_view_priv) AS views, #Some of these names might be off in terms of updated privilege sectionings
# etc...
# FROM USER ORDER BY user, host;
#
# STATIC VERSUS DYNAMIC PRIVILEGES
#
# MySQL supports static and dynamic privileges:
#
# 		) Static privs are built into the server. They are always available to be granted to user accounts and cannot be unregistered.
# 
# 		) Dynamic privs can be registered and unregistered at runtime. This affects their availability: A dynamic priv that has not been registered cannot be granted.
#
# For example, the SELECT and INSERT privileges are static and always available, whereas a dynamic privilege becomes available
# only if the server component that implements it has been enabled.
#
# The remainder of this section describes how dynamic privs work in MySQL. The discussion uses the term "components" but it applies equally to plugins.
#
# 		NOTE: 
#
# 			Server admins should be aware of which server components define dynamic privs.
# 			For MySQL distribs, documentation of components that define dynamic privs describe those privs.
#
# 			Third-party components may also define dynamic privs; an admin should understand those privs and not install
# 			components that might conflict or compromise server operations.
#
# 			For example, one component conflicts with another if both define a priv with the same name.
# 			Component devs can reduce the likelihood of this occurence by choosing priv names having a prefix based on the component name.
#
# The server maintains the set of registered dynamic privs internally in memory. Unregistration occurs at server shutdown.
#
# Normally, a server component that defines dynamic privs registers them when it is installed, during its initialization sequence.
# When uninstalled, a server component does not unregister its registered dynamic privs.
#
# (This is current practice, not a requirement. That is, components could - but do not - unregister at any time privs they register)
#
# No warning or error occurs for attempts to register an already registered dynamic priv.
# Consider the following sequence of statements:
#
# 		INSTALL COMPONENT 'my_component';
# 		UNINSTALL COMPONENT 'my_component';
# 		INSTALL COMPONENT 'my_component';
#
# The first INSTALL_COMPONENT registers any privs defined by the server component my_component.
#
# But the UNINSTALL COMPONENT does not unregister them.
#
# For the second INSTALL_COMPONENT statement, the component privs it registers are found to be
# already registered, but no warnings or errors occur.
#
# Dynamic privs apply only at the global level.
#
# The server stores information about current assignments of dynamic privs to user accounts in the
# mysql.global_grants system table:
#
# 		) The server automatically registers privs named in global_grants during server startup (unless the --skip-grant-tables option is given)
#
# 		) The GRANT and REVOKE statements modify the contents of global_grants
#
# 		) Dynamic privs assignments listed in global_grants are persistent. They are not removed at server shutdown.
#
# Example : The following statement grants to user u1 the privileges required to control replication (including Group Replication) on a slave server,
# and to modify system variables:
#
# 		GRANT REPLICATION_SLAVE_ADMIN, GROUP_REPLICATION_ADMIN, BINLOG_ADMIN ON *.* TO 'u1'@'localhost';
#
# Granted dynamic privs appear in the output from the SHOW GRANTS statement and the INFORMATION_SCHEMA USER_PRIVILEGES table.
#
# For GRANT and REVOKE at the global level, any named privileges not recognized as static are checked against the current
# set of registered dynamic privs and granted if found.
#
# Otheriwse, an error occurs to indicate an unknown privilege identifier.
#
# For GRANT and REVOKE the meaning of ALL [PRIVS] at the global level includes all static global privs, as well as all currently
# registered dynamic privs:
#
# 		) GRANT ALL at the global level grants all static global privs and all currently registered dynamic privs.
# 			A dynamic priv registered subsequent to execution of the GRANT statement is not granted retroactively to any account.
#
# 		) REVOKE ALL at the global level revokes all granted static global privs and all granted dynamic privs.
#
# The FLUSH_PRIVILEGES statement reads the global_grants table for dynamic priv assignment and registers any unregistered privs found there.
#
# MIGRATING ACCOUNTS FROM SUPER TO DYNAMIC PRIVS
#
# In MySQL 8.0, many operations that previously required the SUPER priv are also associated with a dynamic priv of more limited scope.
#
# Each such operation can be permitted to an account by granting the associated dynamic priv rather than SUPER.
#
# This change improves security by enabling DBAs to avoid granting SUPER and tailor user privs more closely to the operations
# permitted.
#
# SUPER is deprecated, will be removed.
#
# When removal of SUPER occurs, operations that formerly required SUPER will fail unless accounts granted SUPER are migrated
# to the appropriate dynamic privs.
#
# Use the following instructions to accomplish that goal so that accounts are ready prior to SUPER removal:
#
# 		1. Execute this query to identify accounts that are granted SUPER:
#
# 				SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'SUPER';
#
# 		2. For each account identified by the preceding query, determine the operations for which it needs SUPER.
#
# 			Then grant the dynamic privs corresponding to those operations, and revoke SUPER.
#
# 			For example, if 'u1'@'localhost' requires SUPER for binary log purging and SYS_VAR modification, these statements
# 			make the required changes to the account:
#
# 				GRANT BINLOG_ADMIN, SYSTEM_VARIABLES_ADMIN ON *.* TO 'u1'@'localhost';
# 				REVOKE SUPER ON *.* FROM 'u1'@'localhost';
#
# 			After said modifications the query in point 1. should return empty in terms of Querying the INFORMATION_SCHEMA.
#
# GRANT TABLES
#
# The mysql System database includes several grant tables that contain information about user accounts and the
# privs held by them.
#
# This section describes those tables.
#
# To manipulate the contents of grant tables, modify them indirectly by using account-management statements such as
# CREATE_USER, GRANT and REVOKE to set up accounts and control the privileges available to each one.
#
# The discussion here describes the underlying structure of the grant tables and how the server uses their
# contents when interacting with clients.
#
# NOTE:
#
# 		Direct modification of grant tables using statements such as INSERT, UPDATE or DELETE is didscouraged and done at your own risk.
# 		The server is free to ignore rows that become malformed as a result of such modifications.
#
# 		For any operation that modifies a grant table, the server checks whether the table has the expected structure and produces an
# 		error if not.
#
# 		mysql_upgrade must be run to update the tables to the expected structure.
#
# These mysql database tables contain grant information:
#
# 		) user: User accounts, global privs and other non-priv columns
#
# 		) global_grants: Assignments of dynamic global privileges to users
#
# 		) db: Database-level privileges
#
# 		) tables_priv: Table-level privs
#
# 		) columns_priv: Column-level privs
#
# 		) procs_priv: Stored procedure and function privs
#
# 		) proxies_priv: Proxy-user privs
#
# 		) default_roles: Default user roles
#
# 		) role_edges: Edges for role subgraphs
#
# 		) password_history: Password changes
#
# In MySQL 8.0, grant tables use the InnoDB storage engine and are transactional.
# Before MySQL 8.0, grant tables used the MyISAM storage engine and were nontransactional.
#
# This change of grant tables storage engine enables an accompanying change to the behavior of account-management statements 
# such as CREATE_USER or GRANT.
#
# Previously, an account-management statement that named multiple users could succeed for some users and fail for others.
#
# Now, each statement is transactional and either succeeds for all named users or rolls back and has no effect if any
# error occurs.
#
# Each grant table contains scope columns and privilege columns:
#
# 		) Scope columns determine the scope of each row in the tables; taht is, the context in which the row applies.
#
# 			For example, a user table row with Host and User values of 'h1.example.net' and 'bob' applies to authenticating
# 			connections made to the server from the host h1.example.net by a client that specifies a user name of bob.
#
# 			Similarly, a db table row with Host, User and Db column values of 'h1.example.net', 'bob' and 'reports' applies
# 			when bob connects from the host h1.example.net to access the reports database.
#
# 			The tables_priv and columns_priv tables contain scope columns indicating tables or table/column combinations
# 			to which each row applies.
#
# 			The procs_priv scope columns indicate the stored routine to which each row applies.
#
# 		) Privilege columns indicate which priv a table row grants; that is, which operations it permits to be performed.
#
# 			The server combines the information in the various grant tables to form a complete description of a user's privs.
#
# 			Rules described later.
#
# The server uses the grant tables in the following manner:
#
# 		) The user table scope columns determine whether to reject or permit incoming connections.
#
# 			For permitted connections, any privileges granted in the user table indicate the user's global privs.
# 			Any privileges granted in this table apply to all databases on the server.
#
# 				CAUTION: 
#
# 					Because any global privilege is considered a privilege for all databases, any global privilege enables a user to 
# 					see all database names with SHOW_DATABASES or by examining the SCHEMA table of INFORMATION_SCHEMA.
#
# 		) The global_grants table lists current assignments of dynamic privileges to user accounts.
#
# 		) The db table scope columns determine which users can access which databases from which hosts.
# 			The privilege columns determine the permitted operations.
#
# 			A privilege granted at the database level applies to the database and to all objects in teh database,
# 			such as tables and stored programs.
#
# 		) The tables_priv and columns_priv tables are similar to the db table, but are more fine-grained:
# 			They apply at the table and column levels rather than at the database level.
#
# 			A privilege granted at the table level applies to the table and to all its columns.
# 			A privilege granted at the column level applies only to a specific column.
#
# 		) The procs_priv table applies to stored routines (stored procedures and functions).
# 			A privilege granted at the routine level applies only to a single procedure or function.
#
# 		) The proxies_priv table indicates which users can act as proxies for other users and whether a user
# 			can grant the PROXY privilege to other users.
#
# 		) The default_roles and role_edges tables contain information about role releationships.
#
# 		) The password_history table retains previously chosen passwords to enable restrictions on password reuse.
#
# The server uses the user and db tables in the mysql database at both the first and second stages of access control.
# The columns in the user and db tables are shown as follows::
#
# TABLE NAME 					user 									db
#
# Scope COlumns 				Host 									Host
# 									User 									Db
# 																			User
#
# Privilege columns 			Select_priv 						Select_priv
# 									Insert_priv 						Insert_priv
# 									Update_priv 						Update_priv
# 									Delete_priv 						Delete_priv
#
# 									Index_priv 							Index_priv
# 									Alter_priv 							Alter_priv
# 									Create_priv 						Create_priv
# 									Drop_priv 							Drop_priv
# 									Grant_priv 							Grant_priv
# 									Create_view_priv 					Create_view_priv
#
# 									Show_view_priv 					Show_view_priv
# 									Create_routine_priv 				Create_routine_priv
# 									Alter_routine_priv 				Alter_routine_priv
# 									Execute_priv 						Execute_priv
# 									Trigger_priv 						Trigger_priv
#
# 									Event_priv 							Event_priv
# 									Create_tmp_table_priv 			Create_tmp_table_priv
# 									Lock_tables_priv 					Lock_tables_priv
# 									References_priv 					References_priv
#
# 									Reload_priv
# 									Shutdown_priv
# 									Process_priv
# 									File_priv
# 									Show_db_priv
# 									Super_priv
# 									Repl_slave_priv
#
# 									Repl_client_priv
# 									Create_user_priv
# 									Create_tablespace_priv
# 									Create_role_priv
# 									Drop_role_priv
#
# Security columns 			ssl_type
# 									ssl_cipher
# 									x509_issuer
# 									x509_subject
# 									plugin
# 									authentication_string
# 									password_expired
#
# 									password_last_changed
# 									password_lifetime
# 									account_locked
# 									Password_reuse_history
# 									Password_reuse_time
# 									Password_require_current
# 
# Resource control columns max_questions
# 									max_updates
# 									max_connections
# 									max_user_connections
#
# The user table plugin and authentication_string columns store authentication plugin and credential information.
#
# The server uses the plugin named in the plugin column of an account row to authenticate connection attempts for the account.
#
# The plugin column must be nonempty. At startup, and at runtime when FLUSH_PRIVILEGES is executed, the server checks user table rows.
# For any row with an empty plugin column, the server writes a warning to the error log of this form:
#
# [Warning] User entry 'user_name'@'host_name' has an empty plugin value.
# The user will be ignored and no one can login with this user anymore.
#
# The password_expired column permits DBAs to expire account PWs and require users to reset their password.
# The default password_expired value is 'N', but can be set to 'Y' with the ALTER_USER statement.
#
# After an account's password has been expired, all operations performed by the account in subsequent connections
# to the server result in an error until the user issues an ALTER_USER statement to establish a new account pw.
#
# It is possible after PW expiration to "reset" a PW by setting it to its current value.
# As a matter of good policy, it is preferable to choose a different PW.
#
# DBAs can enforce non-reuse by establishing an appropiate password-reuse policy.
#
# password_last_changed is a TIMESTAMP column indicating when the password was last changed.
#
# The value is non-NULL only for accounts that use a MySQL built-in authentication plugin (mysql_native_password,
# 	sha256_password or caching_sha2_password)
#
# The value is NULL for other accounts, such as those authenticated using an external authentication system.
#
# Password_last_changed is updated by the CREATE_USER, ALTER_USER and SET_PASSWORD statements, and by GRANT
# statements that create an account or change an account PW.
#
# password_lifetime indicates the account password lifetime, in days. 
#
# If the password is past its lifetime (assessed using the password_last_changed column), the server considers
# the password expired when clients connect using the account.
#
# A value of N greater than zero means that het PW must be changed every N days.
# A value of 0 disables automatic PW expiration.
#
# if the value is NULL (default), the global expiration policy applies, as defined by the default_password_lifetime
# SYS_VARs.
#
# account_locked indicates whether the haccount is locked.
#
# Password_reuse_history is the value of the PASSWORD_HISTORY option for the account, or NULL for the default history.
#
# Password_reuse_time is the value of the PASSWORD_REUSE_INTERVAL option for the account, or NULL for the default interval.
#
# Password_require_current (available as of MySQL 8.0.13), corresponds to the value of the PASSWORD REQUIRE option for
# the account.
#
# PASSWORD_REQUIRE_CURRENT value 		CORRESPONDING PASSWORD REQUIRE OPTION
#
# 'Y' 											PASSWORD REQUIRE CURRENT
#
# 'N' 											PASSWORD REQUIRE CURRENT OPTIONAL
#
# NULL 											PASSWORD REQUIRE CURRENT DEFAULT
#
# During the second stage of access control, the server performs request verification to ensure that each
# client has sufficient privs for each request that it issues.
#
# In addition to the user and db grant tables, teh server may also consult the tables_priv and columns_priv tables
# for requests that involve tables.
#
# The latter tables provide finer privilege control at the table and column levels.
# They have the columns shown in the following table.
#
# 
# Table Name 				TABLES_PRIV 				COLUMNS_PRIV
#
# Scope COlumns 			Host 							Host
# 								Db 							Db
# 								User 							User
# 								Table_name 					Table_name
# 																Column_name
# Privilege columns 		Table_priv 					Column_priv
# 								Column_priv
# Other columns 			Timestamp 					Timestamp
# 								Grantor
#
# The Timestamp and Grantor columns are set to the current timestamp and the CURRENT_USER value, respectively, but are otherwise
# unused.
#
# For verification of requests that involve stored routines, the server may consult the procs_priv table, which has the
# columns shown as follows:
#
# 		procs_priv TABLE COLUMNS
#
# 			Table Name 					procs_priv
#
# Scope columns 						Host
# 											Db
# 											User
# 											Routine_name
# 											Routine_type
#
# Privlege columns 					Proc_priv
# Other columns 						Timestamp
# 											Grantor
#
# The Routine_type column is an ENUM column with values of 'FUNCTION' or 'PROCEDURE' to indicate the type of
# routine the row refers to.
#
# This column enables privileges to be granted separately for a function and a procedure with the same name.
#
# The Timestamp and Grantor columns are unused.
#
# The proxies_priv table records information about proxy accounts. It has these columns:
#
# 		) Host, User: The proxy account; that is, the account that has the PROXY privilege for the proxied account.
#
# 		) Proxied_host, Proxied_user: The proxied account
#
# 		) Grantor, Timestamp: Unused.
#
# 		) With_grant: Whether the proxy account can grant the proxy privlege to other accounts.
#
# For an account to be able to grant the PROXY privs to otehr accounts, it must have a row in the proxies_priv table
# with With_grant set to 1 and Proxied_host and Proxied_user set to indicate the account or accounts for which
# the priv can be granted.
#
# For example, the 'root'@'localhost' account created during MySQL installation has a row in the proxies_priv table that
# enables granting the PROXY privs for ''@'', that is, for all users and all hosts.
#
# This enables root to set up proxy users, as well as to delegate to other accounts the authority to set up proxy users.
#
# The global_grants table lists current assignments of dynamic privileges to user accounts.
# These privileges are global.
#
# The table has these columns:
#
# 		) USER, HOST: The user name and host name of the account to which the priv is granted.
#
# 		) PRIV: The priv name
#
# 		) WITH_GRANT_OPTION: Whether the account can grant the privlege to other accounts.
#
# The default_roles table lists default user roles. It has these columns:
#
# 		) HOST, USER: The account or role to which the default role applies.
#
# 		) DEFAULT_ROLE_HOST, DEFAULT_ROLE_USER: The default role.
#
# The role_edges table lists edges for role subgraphs. It has these columns:
#
# 		) FROM_HOST, FROM_USER: The account that is granted a role.
#
# 		) TO_HOST, TO_USER: The role that is granted to the account.
#
# 		) WITH_ADMIN_OPTION: Whether the account can grant the role to and revoke it from other accounts by using WITH ADMIN OPTION.
#
# The password_history table contains information about password changes.
# It has these columns:
#
# 		Host, User: The account for which the password change occurred.
#
# 		Password_timestamp: The time when the password change occurred.
#
# 		Password: The new password hash value.
#
# The password_history table accumulates a sufficient number of nonempty PWs per account to enable MySQL to perform
# checks against both the acc PW history length and reuse interval.
#
# Automatic pruning of entries that are outside both limits occurs when password-change attempts occur.
#
# NOTE:
#
# 		The empty password does not count in the password history and is subject to reuse at any time.
#
# If an account is renamed, its entries are renamed to match. If an account is dropped or its authentication plugin is changed,
# its entries are removed.
#
# Scope columns in the grant tables contain strings. The default value for each is the empty string.
# The following table shows the number of characters permitted in each column.
#
# GRANT TABLE SCOPE COLUMN LENGTHS
#
# Column Name 					Maximum Permitted Characters
#
# Host, Proxied_host 		60
# User, Proxied_user 		32
# Db 								64
# Table_name 					64
# Column_name 					64
# Routine_name 				64
#
# For access-checking purposes, comparisons of User, Proxied_user, authentication_string, Db and Table_name values are case-sensitive.
#
# Comparisons of Host, Proxied_host, Column_name and Routine_name values are not case-sensitive.
#
# The user and db tables list each priv in a separate column taht is declared as ENUM('N','Y') DEFAULT 'N'.
# In other words, each privilege can be disabled or eanbled, with the default being disabled.
#
# The tables_priv, columns_priv and procs_priv tables declare the priv column as SET columns.
# Vlaues in these columns can contain any combination of the priv controlled by the table.
#
# Only those privs listed in the column value are enabled.
#
# Set-type priv column values
#
# 	TABLE NAME 			COLUMN NAME 				POSSIBLE SET ELEMENTS
#
# tables_priv 			Table_priv 				'Select', 'Insert', 'Update', 'Delete', 'Create',
# 														'Drop', 'Grant', 'References', 'Index', 'Alter',
# 														'Create View', 'Show view', 'Trigger'
#
# tables_priv 			Column_priv 			'Select', 'Insert', 'Update', 'References'
# 
# columns_priv 		Column_priv 			'Select', 'Insert', 'Update', 'References'
#
# procs_priv 			Proc_priv 				'Execute', 'Alter Routine', 'Grant'
#
# Only the user table specifies admin privs, such as RELOAD and SHUTDOWN.
#
# Admin operations are operations on the server itself and are not database-specific, so there is no reason
# to list these privs in the other grant tables.
#
# Consequently, the server need consult only the user table to determine whether a user can perform
# an administrative operation.
#
# The FILE priv also is specified only in the user table.
#
# It is not an administrative priv as such, but a user's ability to read or write files on the server host
# is independent of the DB being accesed.
#
# The server reads the contents of the grant tables into memory when it starts.
# You can tell it to reload the tables by issuing a FLUSH_PRIVILEGES statement or executing a mysqladmin flush-privileges or mysqladmin reload command.
#
# Changes to teh grant tables take effect as indicated.
#
# When you modify an account, it is a good idea to verify that your changes have the intended effect.
# To check the privs for a given account, use the SHOW_GRANTS statement.
#
# For example, to determine the privs that are granted to an account with user name and host name values of bob and pc84.example.com,
# use this statement:
#
# 		SHOW GRANTS FOR 'bob'@'pc84.example.com';
#
# To display nonpriv properties of an account, use SHOW_CREATE_USER:
#
# 		SHOW CREATE USER 'bob'@'pc84.example.com';
#
# SPECIFYING ACCOUNT NAMES
#
# MySQL account names consists of a user name and a host name.
# This enables creation of accounts for users with the same name who can connect from different hosts.
#
# This section describes how to write account names, including special values and wildcard rules.
#
# MySQL role names are similar to account names, with some differences.
#
# In SQL statements such as CREATE_USER, GRANT, and SET_PASSWORD account names follow these rules:
#
# 		) Account name syntax is 'user_name'@'host_name'
#
# 		) An account name consisting only of a user name is equivalent to 'user_name'@'%'.
#  	  For example, 'me' is equivalent to 'me'@'%'
#
# 		) The user name and host name need not be quoted if they are legal as unquoted identifiers.
# 			Quotes are necessary to specify a user_name string containing special chars (such as space or -)
#
# 			or a host_name string containing special characters or wildchar characters (such as . or %); for example,
# 			'test-user'@'%.com'
#
# 		) Quote user names and host names as identifiers or as strings, using either backticks (`), single quotation marks ('),
# 			or double quotation marks (")
#
# 			For string-quoting and identifier-quoting guidelines, see later.
#
# 		) The user name and host name parts, if quoted, must be quoted separately.
#
# 			That is, write 'me'@'localhost', not 'me@localhost'; the latter is equivalent to 'me@localhost'@'%'
#
# 		) A reference to the CURRENT_USER or CURRENT_USER() function is equivalent to specifying the current client's user name
# 			and host name literally.
#
# MySQL stores account names in grant tables in the mysql system database using separate columns for the user name and host name parts:
#
# 		) The user table contains one row for each account. The User and Host columns store the user name and host name.
#
# 			This table also indicates which global privileges the account has.
#
# 		) Other grant tables indicate privileges an account has for databases and objects within databases.
#
# 			These tables have User and Host columns to store the account name.
# 			Each row in these tables associates with the account in the user table that has the same User and Host  values.
#
# 		) For access-checking purposes, comparisons of User values are case-sensitive. Comparisons of Host values are not case sensiive.
#
# For additional detail about grant table structure, see earlier.
#
# User names and host names have certain special values or wildcard conventions, as described:
#
# The user name part of an account name is either a nonblank value that literally matches the user name for incoming connection attempts,
# or a blank value (empty string) that matches any user name.
#
# An account with a blank user name is an anonymous user. To specify an anon user in SQL statements, use a quoted empty user name part,
# such as ''@'localhost'
#
# The host name part of an account name can take many forms, and wildcards are permitted:
#
# 		) A host value can be a host name or an IP address (IPv4 or IPv6).
#
# 			The name 'localhost' indicates the local host. The IP address '127.0.0.1' indicates teh IPv4 loopback interface.
# 			The IP address '::1' is the IPv6 loopback interface.
#
# 		) The % and _ wildcard characters are permitted in host name or IP address values.
#
# 			These have the same meaning as for pattern-matching operations performed with the LIKE operator.
#
# 			For example, a host value of '%' matches any host name, whereas a value of '%.mysql.com' matches
# 			any host in the mysql.com domain.
#
# 			'198.51.100.%' matches any host in the 198.51.100 class C network.
#
# 			Because IP wildcard values are permitted in host values (for example '198.51.100.%' to match every host on a subset),
# 			someone could try to exploit this capability by naming a host 198.51.100.somewhere.com
#
# 			To foil such attempts, MySQL does not perform matching on host names that start with digits and a dot.
# 			For example, if a host is named 1.2.example.com, its name never matches the host part of account names.
#
# 			An IP wildcard value can match only IP addresses, not host names.
#
# 		) For a host value specified as an IPv4 address, a netmask can be given to indicate how many address bits to use for the
# 			network number.
#
# 			Netmask notation cannot be used for IPv6 addresses.
#
# 			The syntax is host_ip/netmask. For example:
#
# 				CREATE USER 'david'@'198.51.100.0/255.255.255.0';
#
# 			This enables david to connect from any client host having an IP address client_ip for which the following condition is true:
#
# 				client_ip & netmask = host_ip
#
# 			That is, for the CREATE_USER statement just shown:
#
# 				client_ip & 255.255.255.0 = 198.51.100.0
#
# 			IP addresses that satisfy this condition range from 198.51.100.0 to 198.51.100.255
#
# 			A netmask typically begins with bits set to 1, followed by bits set to 0. Examples:
#
# 				) 198.0.0.0/255.0.0.0: Any host on the 198 class A network
#
# 				) 198.51.100.0/255.255.0.0: Any host on the 198.51 class B network
#
# 				) 198.51.100.0/255.255.255.0: Any host on the 198.51.100 class C network
#
# 				) 198.51.100.1: Only the host with this specific IP address
#
# The server performs matching of host values in account names against the client host using the value returned
# by the system DNS resolver for the client host name or IP address.
#
# Except in the case that the account host value is specified using netmask notation, the server performs this comparison
# as a string match, even for an account host value given as an IP address.
#
# This means that you should specify account host values in the same format used by DNS.
# Here are examples of problems to watch out for:
#
# 		) Suppose that a host on the local network has a fully qualified name of host1.example.com
# 			If DNS returns name lookups for this host as host1.example.com, use that name in account host values.
#
# 			If DNS returns just host1, use host1 instead.
#
# 		) If the DNS returns the IP address for a given host as 198.51.100.2, that will match an account host value of 198.51.100.2
# 			but not 198.051.100.2
#
# 			Similarly, it will match a pattern of 198.51.100.% but not 198.051.100.%
#
# To avoid problems like these, it is advisable to check the format in which your DNS returns host names and addresses.
# Use values in the same format in MySQL account names.
#
# SPECIFYING ROLE NAMES
#
# MySQL role names refer to roles, which are named collections of privs.
# For role usage example, see later.
#
# Role names have syntax and semantics similar to account names (later).
# Role names differ from account names in these respects:
#
# 		) The user part of role names cannot be blank. Thus, there is no "anon role" analogous to the concept of "anon user".
#
# 		) As for an account name, omitting the host part of a role name results in a host part of '%'.
# 			But unlike '%' in an account name, a host part of '%' in a role name has no wildcard props.
#
# 			For example, for a name 'me'@'%' used as a role name, teh host part '%', the host part ('%'), is just a ltieral value - not a wildcard.
#
# 		) Netmask notation in the host part of a role name has no significance.
#
# 		) An account name is permitted to be CURRENT_USER() in several contexts. A role name is not.
#
# It is possible for a row in the mysql.user system table to serve as both an account and a role.
#
# In this case, any special user or host name matching properties do not apply in contexts for which
# the name is used as a role name.
#
# For example, you cannot execute the following statement with the expectation that it will set the current
# session roles using all roles that have a user part of myrole and any host name:
#
# 		SET ROLE 'myrole'@'%';
#
# Instead, the statement sets the active role for the session to the role with exactly the name 'myrole'@'%'
#
# For this reason, role names are often specified using only the user name part and letting the host name part implicitly
# be '%'.
#
# Specifying a role with a non '%' host part can be useful if you intend to create a name that works as both a role and a user account
# that is permitted to connect from the given host. 
#
# ACCESS CONTROL, STAGE 1: CONNECTION VERIFICATION
#
# When you attempt to connect to a MySQL server, the server accepts or rejects the connection based on these conditions:
#
# 		) Your identity and whether you can verify your identity by supplying the correct PW
#
# 		) Whether your account is locked or unlocked.
#
# The server checks credentials first, then account locking state. A failure fo either step causes the server to deny access to
# you completely.
#
# Otherwise, the server accepts the connection and then enters Stage 2 and waits for requests.
#
# Credential checking is performed using the three user table scope columns (Host, User and authentication_string).
# Locking state is recorded in the user table account_locked column.
#
# The server accepts the connection only if the Host and User columns in some User table row match the client host
# and user name, the client supplies the PW specified in that row, and the account_locked value is 'N'.
#
# The rules for permissible Host and User value are given later.
#
# Account locking can be changed with the ALTER_USER statement.
#
# Your identity is based on two pieces of information:
#
# 		) The client host from which you connect.
#
# 		) Your MySQL user name
#
# If the User column value is nonblank, the user name in an incoming connection must match exactly.
# If the User value is blank, it matches any user name.
#
# If the user table row that matches an incoming connection has a blank user name, the user is considered to be anon without a name,
# not a user with the name that the client actually specified.
#
# This means that a blank user name is used for all further access checking for the duration of the connection (Stage 2).
#
# The authentication_string column can be blank. This is not a wildcard and does not mean that any PW matches.
#
# It means that the user must connect without specifying a PW. If the server authenticates a client using a plugin,
# the authentication method that the plugin implements may or may not use the PW in the authentication_string column.
#
# In this case, it is possible that an external PW is also used to authenticate to the MySQL server.
#
# Nonblank authentication_string values in the user table represent encrypted PWs.
# MySQL does not store PWs in cleartext form for anyone to see.
#
# Rather, the PW supplied by a user who is attempting to connect is encrypted (using the PW hashing method implemented by the
# account authentication plugin).
#
# The encrypted PW then is used during the connection process when checking whether the PW is correct.
# This is done without the encrypted PW ever traveling over the connection.
#
# From MySQL's PoV, the encrypted PW is the real pw, so you should never give anyone access to it.
#
# In particular, do not give nonadmin users read access to tables in the mysql system db.
#
# The following table shows various combinations of User and Host values in teh User table apply to incoming connections.
#
# User Value  Host Value  		Permissible Connections
#
# 'fred' 	'h1.example.net' 	fred, connecting from h1.example.net
#
# '' 			'h1.example.net' 	Any user, connecting from h1.example.net
#
# 'fred' 	'%' 					fred, from any host
#
# '' 			'%' 					Any user, connecting from any host
#
# 'fred'  	'%.example.net' 	fred, any host in the example.net domain
#
# 'fred' 	'x.example.%' 		fred, from any x.example.<extension>, where <extension> is wildcarded
#
# 'fred' 	'198.51.100.177' 	fred, connecting from the host with IP address 198.51.100.177
#
# 'fred' 	'198.51.100.%' 	fred, from any host in the 198.51.100 class C subnet
#
# 'fred'		'198.51.100.0/255.255.255.0' - Same as previous
#
# It is possible for the client host name and user name of an incoming connection to match more than one row in the user table.
# The preceding set of examples demonstrates this: Several of the entries shown match a connection from h1.example.net by fred.
#
# When multiple matches are possible, the server must determine which of them to use.
# It resolves this issue as follows:
#
# 		) Whenever the server reads the user table into memory, it sorts the rows.
#
# 		) When a client attempts to connect, the server looks through the rows in sorted order.
#
# 		) The server uses the first row that matches the client host name and user name.
#
# The server uses sorting rules that order rows with the most specific Host values first.
# Literal host names and IP addresses are the most specific.
#
# (The specificity of a literal IP address is not affected by whether it has a netmask, so,
# 198.51.100.13 and 198.51.100.0/255.255.255.0 are considered equally specific)
#
# The pattern '%' means "any host" and is least specific.
#
# The empty string '' also means "any host" but sorts after '%'.
#
# Rows with the same Host value are ordered with the most-specific User values first
# (a blank User value means "any user" and is least specific).
#
# For rows with equally-specific Host and User values, the order is nondeterministic.
#
# To see how this works, suppose that the user table looks like this:
#
# 		+------------------+----------+-
# 		| Host 				 | User 		| ...
# 		+------------------+----------+-
# 		| % 					 | root 		| ...
# 		| % 					 | jeffrey 	| ...
# 		| localhost 		 | root 	 	| ...
# 		| localhost 		 | 			| ...
# 		+------------------+----------+-
#
# When the reads the table into memory, it sorts the rows using the rules just described.
# The result after sorting looks like this:
#
# 		+------------------+----------+-
# 		| Host 				 | User 		| ...
# 		+------------------+----------+-
# 		| localhost 		 | root 		| ...
# 		| localhost 		 | 			| ...
# 		| % 					 | jeffrey 	| ...
# 		| % 					 | root 		| ...
# 		+------------------+----------+-
#
# When a client attempts to connect, the server looks through the sorted rows and uses the first match found.
#
# For a connection from localhost by jeffrey, two of the rows from the table match: the one with Host and User values of
# 'localhost' and '', and the one with values of '%' and 'jeffrey'.
#
# The 'localhost' row appears first in sorted order, so that is the one the server uses.
#
# Here is another example. Suppose that the user table looks like this:
#
# +----------------------------------+------------+-
# | Host 									 | User 		  | ...
# +----------------------------------+------------+-
# | % 										 | jeffrey 	  | ...
# | h1.example.net 						 | 			  | ...
# +----------------------------------+------------+-
#
# The sorted table looks like this:
#
# +----------------------------------+------------+-
# | Host 									 | User 		  | ...
# +----------------------------------+------------+-
# | h1.example.net 						 | 			  | ...
# | % 										 | jeffrey 	  | ...
# +----------------------------------+------------+-
#
# A connection by jeffrey from h1.example.net is matched by the first row, whereas a connection by jeffrey from any host is
# matched by the second.
#
# Note:
#
# 		It is a common misconception to think that, for a given user name, all rows that explicitly name that user are used
# 		first when the server attempts to find a match for the connection.
#
# 		This is not true.
#
# 		The preceding example illustrates this, where a connection from h1.example.net by jeffrey is first matched
# 		not by the row containing 'jeffrey' as the User column value, but by the row with no user name.
# 		
# 		As a result, jeffrey is authenticated as an anon user, even though he specified a user name when connecting.
#
# If you are able to connect to the server, but your privileges are not what you expect, you probably are being
# authenticated as some other account.
#
# To find out what account you were authenticated as, use the CURRENT_USER() function.
#
# It returns a value in <user_name>@<host_name> format that indicates the User and Host values from the matching
# user table row.
#
# Suppose that jeffrey connects and issues the following query:
#
# 		SELECT CURRENT_USER();
# 		+-----------------------+
# 		| CURRENT_USER() 			|
# 		+-----------------------+
# 		| @localhost 			   |
# 		+-----------------------+
#
# The result shown here indicates that the matching user table row had a blank User column value.
# In other words, the server is treating jeffrey as a anon user.
#
# Another way to diagnose authentication problems is to print out the user table and sort it by hand
# to see where the first match is being made.
#
# ACCESS CONTROL, STAGE 2: REQUEST VERIFICATION
#
# After you establish a connection, the server enters Stage 2 of access control.
#
# For each request that you issue through that connection, the server determines what operation you want to perform,
# then checks whether you have sufficient privs to do so.
#
# This is where the privilege column in the grant tables come into play.
# These privileges can come from any of the user, db, tables_priv, columns_priv or procs_priv tables.
# 
# The user table grants privileges that are assigned to you on a global basis and that apply no matter what
# the default database is.
#
# For example, if the user table grants you the DELETE privilege, you can delete rows from any table in any database
# on the server host.
#
# It is wise to grant privileges in the user table only to people who need them, such as database admins.
#
# For other users, you should leave all privileges in the user table set to 'N' and grant privileges at more specific
# levels only.
#
# You can grant privileges for particular databases, tables, columns or routines.
#
# The db table grants database-specific privileges. Values in the scope columns of this table can take the following forms:
#
# 		) A blank User value matches the anon user. A nonblank value matches literally; there are no wildcards in user names.
#
# 		) The wildcard characters % and _ can be used in the Host and Db columns.
#
# 			These have the same meaning as for pattern-matching operatons performed with the LIKE operator..
# 			If you want to use either character literally when granting privileges, you must escape it with a backslash.
#
# 			For example, to include the underscore character (_) as part of a database name, specify it as \_ in the GRANT statement.
#
# 		) A '%' or blank Host value means "any host".
#
# 		) A '%' or blank Db value means 'any db'.
#
# The server reads the db table into memory and sorts it at the same time that it reads the user table.
# The server sorts the db table based on the Host, Db and User scope columns.
#
# As with the user table, sorting puts the most-specific values first and least-specific values last, and when
# the server looks for matching rows, it uses the first match that it finds.
#
# The tables_priv, columns_priv and procs_priv tables grant table-specific, column-specific and routine-specific privs.
#
# Values in the scope columns of these tables can take the following forms:
#
# 		) The wildcard characters % and _ can be used in the Host column. 
# 			These have the same meaning as for pattern-matching operations performed with the LIKE operator.
#
# 		) A '%' or blank Host value means "any host".
#
# 		) The Db, Table_name, Column_name, and Routine_name columns cannot contain wildcards or be blank.
#
# The server sorts the tables_priv, columns_priv and procs_priv tables based on the Host, Db and User columns.
# This is similar to db table sorting, but simpler because only the Host column can contain wildcards.
#
# The server uses the sorted tables to verify each request that it receives.
#
# For requests that require administrative such as SHUTDOWN or RELOAD, the server checks
# only the user table row because that is the only table that specifies admin privs. 
#
# The server grants access if the row permits the requested operation and denies access otherwise.
#
# For example, if you want to execute mysqladmin shutdown but your user table row does not grant the
# SHUTDOWN priv to you, the server denies access without even checking the db table. 
#
# (It contains no shutdown_priv column, so there is no need to do so)
#
# For database-related requests (INSERT, UPDATE and so on), teh server fist checks the user's global privs by looking in the
# user table row.
#
# If the row permits the requested operation, access is granted.
#
# If the global priv in the user table are insufficient, the server determines the user's db-specific privs by checking
# the db table:
#
# 		The server looks in the db table for a match on the Host, Db and User columns.
# 		The Host and User columns are matched to the connecting user's host name and MySQL user name.
#
# 		The Db column is matched to the database that the user wants to access.
#
# 		If there is no row for the Host and User, access is denied.
#
# After determining the db-specific privs granted by the db table rows, the server adds them to the global privs
# granted by the user table.
#
# If the result permits the requested operation, access is granted.
#
# Otherwise, teh server successively checks the user's table and column privs in the tables_priv and columns_priv tables,
# adds those to the user's priv and permits or denies access based on the result.
#
# For stored-routine operations, the server uses the procs_priv table rather than tables_priv and columns_priv.
#
# Expressed in boolean terms, the preceding desc. of how a user's privs are calculated may be summarized as:
#
# 		global privileges
# 		OR (database privs AND host privs)
# 		OR table privs
# 		OR column privs
# 		OR routine privs
#
# It may not be apparent why, if the global user row privs are initially found to be insufficient for the requested operation,
# the server adds those privs to the database, table and column privs later.
#
# The reason is that a request might require more than one type of privilege.
# For example, if you execute an INSERT_INTO_..._SELECT statement, you need both the INSERT and SELECT privs.
#
# Your privs might be such that the user table row grants one priv and the db table row grants the other.
#
# In this case, you have the necessary privs to perform the request, but the server cannot tell that from either
# table by itself; the privs granted by the rows in both tables must be combined.
#
# WHEN PRIVILEGE CHANGES TAKE EFFECT
#
# When mysqld starts, it reads all grant tables contents into memory. The in-memory tables become effective for access control at that point.
#
# If you modify the grant tables indirectly using account-management statements such as GRANT, REVOKE, SET_PASSWORD or RENAME_USER, the server
# notices these changes and loads the grant tables into memory again immediately.
#
# If you modify the grant tables directly using statements such as INSERT, UPDATE or DELETE, your changes have no effect on priv checking
# until you either restart the server or tell it to reload the tables.
#
# If you change the grant tables directly but forget to reload them, your change have no effect until you restart the server.
# This may leave you wondering why your changes seem to make no difference.
#
# To tell teh server to reload the grant tables, perform a flush-priv operation. This can be done by issuing a FLUSH_PRIVILEGES statement
# or by executing a mysqladmin flush-privileges or mysqladmin reload command.
#
# A grant table reload affects privs for each existing client connection as follows:
#
# 		) Table and column privilege changes take effect with the client's next request.
#
# 		) Database privs changes take effect the next time the client executes a USE <db_name> statment.
#
# 			NOTE: Client applications mayy cache the database name: thus, this effect may not be visible to them without actually changing to a different database.
#
# 		) Global privileges and passwords are unaffected for a connected client. These changes take effect only for subsequent connections.
#
# If the server is started with the --skip-grant-tables option, it does not read the grant tables or implement any access control.
#
# Anyone can connect and do anything, which is insecure.
#
# To cause a server thus started to read the tables and enable access checking, flush the privileges.
#
# TROUBLESHOOTING PROBLEMS CONNECTING TO MYSQL
#
# If you encounter problems when you try to connect to the MySQL server, the following items describe some courses
# of action you can take to correct the problem.
#
# 		) Make sure that the server is running. If it is not, clients cannot connect to it.
#
# 			For example, if an attempt to connect to the servers fails with a message such as one of those following,
# 			one cause might be that the server is not running:
#
# 				mysql
# 				ERROR 2003: Can't connect to MySQL server on 'host_name' (111)
# 				mysql
# 				ERROR 2002: Can't connect to local MySQL server through socket
# 				'/tmp/mysql.sock' (111)
#
# 		) It might be that the server is running, but you are trying to connect using a TCP/IP port, named pipe, or Unix socket
# 			file different from the one on which the server is listening.
#
# 			To correct this when you invoke a client program, specify a --port option to indicate the proper port number or a 
# 			--socket option to indicate the proper named pipe or Unix socket file.
#
# 			To find out where the socket file is, you can use this command:
#
# 				netstat -ln | grep mysql
#
# 		) Make sure that the server has not been configured to ignore network connections or (if you are attempting to connect
# 			remotely) that it has not been configured to listen only locally on its network interfaces.
#
# 			If the server was started with --skip-networking, it will not accept TPC/IP connections at all.
#
# 			If the server was started with --bind-address=127.0.0.1, it will listen for TCP/IP connections only locally
# 			on the loopback interface and will not accept remote connections.
#
# 		) Check to make sure that there is no firewall blocking access to MySQL. Your firewall may be configured on the basis
# 			of the application being executed, or the port number used by MySQL for communication (3306 by default).
#
# 			Under Linux or Unix, check your IP tables (or similar) configuration to ensure that the port has not been
# 			blocked.
#
# 			under Windows, applications such as ZoneAlarm or Windows Firewall may need to be configured not to block the MySQL port.
#
# 		) The grant table must be properly set up so that the server can use them for access control.
#
# 			For some distrib types (such as binary on Windows or RPM distribs on Linux), the installation process initializes the MySQL
# 			data dir, including the mysql system db containing the grant tables.
#
# 			For distribs that do not do this, you must initialize the data dir manually.
#
# 			To determine whether you need to initialize the grant tables, look for a mysql dir under the data dir.
# 			(The data dir normally is named data or var and is located under your MySQL installation dir).
#
# 			Make sure that you have a file named user.MYD in the mysql database directory.
#
# 			If not, initialize the data directory. After doing so and starting the server, you should be able to connect to the server.
#
# 		) After a fresh installation, if you log on to the server as root without using a password, you might get the following error message.
#
# 			mysql -u root
#			ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)
#
# 			It means a root PW has already been assigned during installation and it has to be supplied.
#
# 			More on resetting etc., later.
#
# 		) If you have updated an existing MySQL installaiton to a newer version, did you run the mysql_upgrade script?
#
# 			If not, do so.
#
# 			The structure of the grant tables changes ocassionaly when new capabilties are added, so after an upgrade you should
# 			always make sure that your tables have the current structure.
#
# 		) If a client program receives the following error message when it tries to connect, it means that hte server expects
# 			passwords in a newer format than the client is capable of generating:
#
# 				mysql
# 				Client does not support authentication protocol requested
# 				by server; consider upgrading MySQL client
#
# 		) Remmber that client programs use connection parameters specified in option files or environment variables.
#
# 			If a client program seems to be sending incorrect default connection params when you have not specified them on teh cmd line,
# 			check any applicable option file and ENV variables.
#
# 			For example, if you get Access denied when you run a client without any options, make sure that you have not specified an
# 			old password in any of your option files.
#
# 			You can suppress the use of option files by a client program by invoking it with the --no-defaults option.
# 			For example:
#
# 				mysqladmin --no-defaults -u root version
#
# 		) If you get the following error, it means that you are using an incorrect root pw:
#
# 			mysqladmin -u root -pxxx ver
# 			Access denied for user 'root'@'localhost' (using password: YES)
#
# 			If the preceding error occurs when you have not specified a PW, it means that you have an incorrect PW listed in some option file.
# 			Try the --no-defaults option as described in the previous item.
#
# 		) localhost is a synonym for your local host name, and is also the default host to which clients try to connect if you specify no host explicitly.
#
# 			You can use a --host=127.0.0.1 option to name the server host explicitly.
#
# 			This will make TCP/IP connection to the local mysqld server.
#
# 			You can also use TCP/IP by specifying a --host option that uses the actual host name of the local host.
# 			In this case, the host name must be specified in a user table row on the server host, even though you are
# 			running the client program on the same host as the server.
#
# 		) The Access denied error message tells you who you are trying to log in as, the client host from which you are
# 			trying to connect, and whether you were using a password.
#
# 			Normally, you should have one row in tthe user table that exactly matches the host name and user name that
# 			were given in the error message.
#
# 			For example, if you get an error message that contains using password: NO, it means that you tried to log in without a PW.
#
# 		) If you get an Access denied error when trying to connect to the db with mysql -u <user_name>, you may have a problem with the
# 			user table.
#
# 			Check this by executing mysql -u root mysql and issuing this SQL statement:
#
# 				SELECT * FROM user;
#
# 			The result should include a row with the Host and User columns matching your client's host name and your MySQL user name.
#
# 		) if the following error occurs when you try to connect from a host other than the one on which the MySQL server is running,
# 			it means that there is no row in the user table with a Host value that matches the client host:
#
# 				Host ... is not allowed to connect to this MySQL Server
#
# 			You can fix this by setting up an account for the combination of client host name and user name that you are using when trying to connect.
#
# 			If you do not know the IP address or host name of the machine from which you are connecting, you should put a row with '%' as the Host column
# 			value in the user table.
#
# 			After trying to connect from the client machine, use a SELECT USER() query to see how you really did connect.
#
# 			Then change the '%' in the user table row to the actual host name that shows up in the log.
#
# 			Otherwise, your system is left insecure because it permits any host for the given user name.
#
# 			On Linux, another reason that this error might occur is that you are using a binary MySQL version that is compiled with
# 			a different version of the glibc library than the one you are using.
#
# 			In this case, you should either upgrade your OS system or glibc, or download a source distrib of MySQL version and compile
# 			it yourself.
#
# 			A source RPM is normally trivial to compile and install, so this is not a big problem.
#
# 		) If you specify a host name when trying to connect, but get an error message where the host name is not shown or is an IP address,
# 			it means that the mySQL server got an error when trying to resolve the IP address of the client host to a name:
#
# 				mysqladmin -u root -pxxx -h some_hostname ver
# 				Access denied for user 'root'@'' (Using password: YES')
#
# 			If you try to connect as root and get hte following error, it means that you do not have a row in the user table with a User column value
# 			of 'root' and that mysqld cannot reoslve the host name for your client:
#
# 				Access denied for user ''@'unknown'
#
# 			These errors indicate a DNS problem. To fix it, execute mysqladmin flush-hosts to reset the internal DNS host cache.
#
# 			Some solutions are:
#
# 			 )	Determine what is wrong with your DNs and fix it
# 
#  		 ) Specify IP addresses rather than host names in the MySQL grant tables
#
# 			 ) Put an entry for the client machine name in /etc/hosts on Unix or \windows\hosts on Windows
#
# 			 ) start mysqld with the --skip-name-resolve option
#
# 			 ) start mysqld with the --skip-host-cache option
#
# 			 ) On Unix, if you are running the server and the client on teh same machine, connect to localhost.
# 				For connections to localhost, MySQL programs attempt to connect to the local server by using a 
# 				Unix socket file, unless there are connection params specified to ensure that hte client makes a 
# 				TCP/IP connection.
#
# 			 ) On WIndows,if you are running the server and the client on teh same machine and the server supports named pipe connections,
# 				connect to the host name (period). Connections to . use a pipe rather than TCP/IP
#
# 		) if mysql -u root works but mysql -h your_hostname -u root results in Access denied (where your_hostname is the actual host name of the local host),
# 				you may not have the correct name for your host in the user table.
#
# 			A common problem here is that the Host value in teh user table row specifies an unqualified host name, but your systems name resolution
# 			routines return a fully qualified domain name (or vice versa).
#
# 			For example, if you have a row with host 'pluto' in the user table, but your DNS tells MySQL that your host name is 'pluto.example.com'
# 			the row won't work.
#
# 			Try adding a row to the user table that contains the IP address of your host as the Host column value. (alternatively, you could add a row to the
# 			user table with a Host value that contains a wildcard; for example, 'pluto.%'.
#
# 			However, use of Host values ending with % is insecure and not recommended.)
#
# 		) If mysql -u <user_name> works but mysql -u <user_name> <some_db> does not, you have not granted access to the given user for the database named
# 			<some_db>.
#
# 		) if mysql -u <user_name> works when executed on teh server host, but mysql -h <host_name> -u <user_name> does not work when executed on a remote client,
# 			you have not enabled access to the server for the given user name from the remote host.
#
# 		) If you cannot figure out why you get Access denied, remove from the user table all rows that have Host values containing wildcards (rows that contain '%' or '_'
# 			characters)
#
# 			a very common error is to insert a new row with Host='%' and User='some_user', thinking that this enables you to specify localhost to connect
# 			from the same machine.
#
# 			The reason that this does not work is that hte default privs include a row with Host='localhost' and User=''.
#
# 			Because that row has a Host value 'localhost' that is more specific than '%', it is used in preference to the new row when connecting
# 			from localhost.			
#
# 			The correct procedure is to insert a second row with Host='localhost' and User='some_user', or to delete the row with Host='localhost' and User=''.
# 			After deleting the row, remember to issue a FLUSH PRIVILEGES statement to reload the grant tables.
#
# 		) If you are able to connect to the MySQL server, but get an Access denied message whenever you issue a SELECT_..._INTO_OUTFILE or LOAD_DATA_INFILE
# 			statement, your row in the user table does not have the FILE priv enabled.
#
# 		) If you change the grant tables directly (for example, by using INSERT, UPDATE or DELETE statements) and your changes seem to be ignored,
# 			remember that you must execute a FLUSH_PRIVILEGES statement or a mysqladmin flush-privileges command to cause the server to reload
# 			the privilege tables.
#
# 			Otherwise, your changes have no effect until the enxt time the server is restarted.
#
# 			Remember that after you change the root PW with an UPDATE statement, you will not need to specify the new PW until after
# 			you flush the privs, because the server will not know you've changed the PW yet.
#
# 		) If your privs seem to have changed in the middle of a session, it may be that a MySQL admin has changed them.
#
# 			Reloading the grant table affects new client connections, but it also affects existing connections as indicated since before.
#
# 		) If you have access problems with a Perl, PHP, Python or ODBC program, try to connect to the server with mysql -u user_name db_name
# 			or mysql -u user_name -p<your_pw_here> <db_name>
#
# 			If you are able to connect using the mysql client, the problem lies with your program, not with the access privs.
#
# 			(There is no space between -p and the PW. You can also use the --password=<your_pass> syntax to specify the PW)
#
# 			if you use the -p or --password option with no PW value, MySQL prompts you for the PW.
#
# 		) For testing purposes, start hte mysqld server with the --skip-grant-tables option.
#
# 			Then you can change the MySQL grant tables and use the SHOW_GRANTS statement to check whether your modifications
# 			have the desired effect.
#
# 			When you are satisfied with your changes, execute mysqladmin flush-privileges to tell the mysqld server to load
# 			the privs again.
#
# 			This enables you to begin using the new grant table contents without stopping and restarting the server.
#
# 		) If everything else fails, start the mysqld server with a debugging option (for example, --debug=d,general,query)
#
# 		This prints host and user information about attempted connections, as well as information about each command issued.
#
# 		) If you have any other problems with the MySQL grant table and feel you must post the problem to the mailing list, always provide a dump of the
# 			MySQL grant tables.
#
# 			You can dump the tables with the mysqldump mysql command.
#
# 			To file a bug report, see earlier.
#
# 			In some cases, you may need to restart mysqld with --skip-grant-tables to run mysqldump.
#
# MYSQL USER ACCOUNT MANAGEMENT
#
# This section describes how to set up accounts for clients of your MySQL server. It discusses the following topics:
#
# 		) The meaning of account names and PWs as used in MySQL and how that compares to names and PWs used by your OS
#
# 		) How to set up new accounts and remove existing accounts
#
# 		) How to use roles, which are named collections of privs
#
# 		) How to change PWs
#
# 		) Guidelines for using PWs securly
#
# USER NAMES AND PASSWORDS
#
# MySQL stores accounts in the user table of the mysql system database.
#
# An account is defined in terms of a user name and the client host or hosts from which the user can connect to the server.
#
# The account may also have a PW. MySQL supports authentication plugins, so it is possible that an account authenticates using
# some external authentication method.
#
# There are several distinctions between the way user names and PWs are used by MySQL and your OS:
#
# 		) USer names, as used by MySQL for authentication purposes, have nothing to do with user names (login names) as used by Your OS.
#
# 			On Unix, most mySQL clients by default try to log in using the current Unix user name as the MySQL user name, but that's only for convenience.
#
# 			The default can be overridden easily, because client programs permit any user name to be specified with a -u or --user option:
#
# 			This means that anyone can attempt to connect to the server using any user name, so you cannot make a DB secure in any way unless all MySQL
# 			accounts have passwords.
#
# 			Anyone who specifies a user name for an account that has no password is able to connect succesfully to the server.
#
# 		) MySQL user names can eb up to 32 chars long. OS users may be of a different max length. For example, Unix user names typically are 
# 			limited to 8 chars.
#
# 			WARNING:
#
# 				The limit on MySQL user name length is hardcoded in MySQL servers and clients, and trying to circumvent it by modifying the defs of teh table
# 				in teh mysql db does not work.
#
# 				You should never alter the structure of tables in the mysql db in any manner whatsoever except means of the procedure that is
# 				described in upgrading.
#
# 				Attempting ot redefine MySQL's System tables in any other fashion results in undefined (and unsupported) behavior.
#
# 				The server is free to ignore rows that become malformed as a result of such modifications.
#
# 		) To authenticate client connections for accounts that use MySQL native authentication (implemented by the mysql_native_password authentication plugin),
# 			the server uses passwords stored in the user table.
#
# 			These passwords are distinct from passwords for logging in to your OS.
#
# 			There is no necessary connection between the "external" PW you use to log in to a Windows or Unix machine and the PW you use to access the MysQL server
# 			on that machine.
#
# 			If the server authenticates a client using some other plugin, the authentication method that the plugin implements may or may not use a PW stored in the user
# 			table. IN this case, it is possible that an external PW is also used to authenticate to the MySQL server.
#
# 		) Password stored in the user table are encrypted using plugin-specific algorithms.
#
# 		) If the user name and PW contain only ASCII chars, it is possible to connect ot hte server regardless of character setting.
#
# 			To connet when the user name or PW contain non-ascii chars, the client should call the mysql_options() C API function with the
# 			MYSQL_SET_CHARSET_NAME option and appropaite charatet set name as arguments.
#
# 			This casues authentication to take place using the specified character set:
#
# 			Otehrwise, authentication will fail unless the server default character set is the same as the encoding in teh authentication defaults.
#
# 			Standard MySQL client programs support a --default-character-set option that causes mysql_options to be called as just described.
# 			iN addition, the character set autodetection is supported as described later.
#
# 			For programs that use a connector that is not based on the C API, the connector may provide an equivalent ot mysql_options() that can be used instead.
#
# 			The preceding notes do not apply to ucs2, utf16 and utf32, which are not permitted as client char sets.
#
# The MySQL installation process populates the grant tables with an initial root account,  as described earlier.
#
# Thereafter, you normally set up, modify and remove MYSQL accounts using statements such as CREATE_USER, DROP_USER, GRANT, and REVOKE.
#
# To connect to a MySQL server with a command-line script client, specify user name and password options as necessary for the account that you want to use:
#
# 		mysql --user=finley --password db_name
#
# If you prefer short options, the command looks like this:
#
# 		mysql -u finley -p db_name
#
# If you omit the PW value following the --password or -p option on the command line (as just shown),
# the client prompts for one.
#
# Alternatively, the password can be specified on the cmd line:
#
# 		mysql --user=finley --password=password db_name
# 		mysql -u finley -ppassword db_name
#
# If you use the -p option, there must be no space between -p and the PW that follows.
#
# Specifying a PW on the cmd line should be considered insecure.
#
# Use an option file or a login path file instead for the PW decalration.
#
# ADDING USER ACCOUNTS
#
# To create MySQL accounts, use the account-management statements intended for creating accounts and establishing their privs, such as
# CREATE_USER and GRANT.
#
# These statements cause the server to make appropiate modifications to the underlying grant tables.
#
# NOTE:
#
# 		Direct modification of grant tables using statements such as INSERT, UPDATE or DELETE is discouraged and done at your own risk.
#
# 		The server is free to ignore rows that become malform as a result of such modifications.
#
# 		For any operation that modifies a grant table, the server checks whether the table has the expected structure and produces an
# 		error if not. 
#
# 		mysql_upgrade must be run to update the tables to the expected structure.
#
# Another option for creating accounts is to use the GUI tool MySQL workbench.
#
# The following showcases how to use the mysql client program to set up new accounts.
#
# These examples assume that privileges have been set up according to the defualts described earlier.
#
# This means that to make changes, you must connect to the MySQL server as the MySQL root user, which has the CREATE_USER privs.
#
# First, use the mysql program to connect to the server as the MySQL root user:
#
# 		mysql --user=root mysql
#
# If you have assigned a password to the root account, you must also supply a -password or -p option.
#
# After connecting to the server as root, you can add new accounts. The following example uses CREATE_USER and GRANT statements to set up
# four accounts:
#
# 		CREATE USER 'finley'@'localhost' IDENTIFIED BY 'password';
# 		GRANT ALL PRIVLEGES ON *.* TO 'finley'@'localhost'
# 			-> 	WITH GRANT OPTION;
# 		CREATE USER 'finley'@'%' IDENTIFIED BY 'password';
# 		GRANT ALL PRIVILEGES ON *.* TO 'finley'@'%'
# 			-> 	WITH GRANT OPTION;
# 		CREATE USER 'admin'@'localhost' IDENTIFIED BY 'password';
# 		GRANT RELOAD PROCESS ON *.* TO 'admin'@'localhost';
# 		CREATE USER 'dummy'@'localhost';
#
# The accounts created by said statements have the following properties:
#
# 		) Two accounts have a user name of finley. Both are superusers accounts that have full privileges to do anything.
#
# 			The 'finley'@'localhost' account can be used only when connecting from the local host. 
#
# 			The 'finley'@'%' account uses the '%' wildcard for the host part, so it can be used to connect from any host.
#
# 			The 'finley'@'localhost' account is necessary if there is an anon user for localhost. Without the 'finley'@'localhost',
# 			that anon user acc takes precedence when finley connects from the local host and finley is treated as an anon.
#
# 			The reason for this is that the anon user has more specific Host oclumn (see previous section), than the 'finley'@'%' acc
# 			and thus comes earlier in the user table sort order. 
#
# 		) The 'admin'@'localhost' account can be used only by admin to connect from the local host.
#
# 			It is granted the RELOAD and PROCESS administrative privs. 
#
# 			These privs enable the admin user to execute the mysqladmin reload, mysqladmin refresh, and mysqladmin flush-xxx commands, as well as
# 			mysqladmin processlist.
#
# 			No privs are granted for accessing any DBs. You could add such privs using the GRANT statements.
#
# 		) The 'dummy'@'localhost' account has no PW (which is insecure and not recommended). This account can be used only to connect
# 			from the localhost.
#
# 			No rpvis are granted. It is assumed you will grant specific privs to the acc using GRANT statements.
#
# To see the privileges for an account, use SHOW_GRANT:
#
# 		SHOW GRANTS FOR 'admin'@'localhost';
# 		+-----------------------------------------------------+
# 		| Grants for admin@localhost 			 						|
# 		+-----------------------------------------------------+
# 		| GRANT RELOAD, PROCESS ON *.* TO 'admin'@'localhost' |
# 		+-----------------------------------------------------+
#
# To see nonprivlege properties for an account, use SHOW_CREATE_USER:
#
# 		SHOW CREATE USER 'admin'@'localhost'\G
# 		*************************** 1. row ************************
# 		CREATE USER for admin@localhost: CREATE USER 'admin'@'localhost'
# 		IDENTIFIED WITH 'mysql_native_password'
# 		AS '*<numbers/letters>'
# 		REQUIRE NONE PASSWORD EXPIRE DEFAULT ACCOUNT UNLOCK
#
# The next example create three accounts and grant them access to specific DBs.
# Each of them has a user name of custom and password of password:
#
# CREATE USER 'custom'@'localhost' IDENTIFIED BY 'password';
# GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
# 		-> 		ON bankaccount.*
# 		-> 		TO 'custom'@'localhost';
#
# CREATE USER 'custom'@'host47.example.com' IDENTIFIED BY 'password';
# GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
# 		-> 		ON expenses.*
# 		-> 		TO 'custom'@'host47.example.com';
#
# CREATE USER 'custom'@'%.example.com' IDENTIFIED BY 'password';
# GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP
# 		-> 		ON customer.*
# 		-> 		TO 'custom'@'%.example.com';
#
# The three accounts cna be used as follows:
#
# 		) The first account can access the bankaccount database, but only from the local host.
#
# 		) The second account can access the expenses database, but only from the host47.example.com
#
# 		) The third account can access the customer database, from any host in the example.com domain.
#
# 			This account has access from all machines in the domain due to use of the % widlcard character in the host part of the account name.
#
# REMOVING USER ACCOUNTS
#
# To remove an account, use the DROP_USER statement, which is described later in greater detail:
#
# 	 DROP USER 'jeffrey'@'localhost';
#
# USING ROLES
#
# A MySQL role is a named collection of privileges. Like user accounts, roles can have privileges granted to and revoked from them.
#
# A user account can be granted roles, which grants to the account the privileges associated with each role.
#
# This enables assignment of sets of privileges to accounts and provides a convenient alternative to granting individual privileges,
# both for conceptualizing desired privilege assignments and implementing them.
#
# The following list summarizes role-management capabilities provided by MySQL:
#
# 		) CREATE_ROLE and DROP_ROLE enable roles to be created and removed.
#
# 		) GRANT and REVOKE enable privilege assignment and revocation for user accounts and roles.
#
# 		) SHOW_GRANTS displays privilege and role assignments for user accounts and roles.
#
# 		) SET_DEFAULT_ROLE specifies which account roles are active by default.
#
# 		) SET_ROLE changes the active roles within the current session.
#
# 		) The CURRENT_ROLE() function displays the active roles within the current session.
#
# 		) The mandatory_roles and activate_all_roles_on_login SYS_VAR enables defining mandatory roles and automatic activation
# 			of granted roles when users log in to the server.
#
# For descriptiosn of individual role-manipulation statements, see later.
#
# The following discussion provides examples of role usage.
#
# Unless otherwise specified, SQL statements shown should be executed using a MySQl acc with admin privileges, such as the root account.
#
# CREATING ROLES AND GRANTING PRIVILEGES TO THEM
#
# Consider this scenario:
#
# 		) An application uses a database named app_db
#
# 		) Associated with the application, there can be accounts for developers who create and maintain the application, and for users who interact with it.
#
# 		) Developers need full access to the database. Some users need only read access, others need read/write access.
#
# To avoid granting privileges individually to possibly many user accounts, create roles as names for the required privilege sets.
# This makes it easy to grant the required privileges to user accounts, by granting them appropiate roles.
#
# To create hte roles, use CREATE_ROLE:
#
# 		CREATE ROLE 'app_developer', 'app_read', 'app_write';
#
# Role names are much like USER ACCS and consists of a user part and a host part in 'user_name'@'host_name' format.
#
# The host part, if omitted, defaults to '%'.
#
# The user and host parts can be unquoted unless they contain special characters such as - or %.
#
# Unlike account names, the user part of role names cannot be blank.
#
# To assign privileges to the roles, execute GRANT using the same sytnax as for assigning privileges to user accounts:
#
# 	GRANT ALL ON app_db.* TO 'app_developer';
# 	GRANT SELECT ON app_db.* TO 'app_read';
# 	GRANT INSERT, UPDATE, DELETE ON app_db.* TO 'app_write';
#
# Now suppose that intially you require one developer account, two user accounts that need read-only access, and one user account
# that needs read/write access.
#
# Use CREATE_USER to create the accounts:
#
# 	CREATE USER 'dev1'@'localhost' IDENTIFIED BY 'dev1pass';
# 	CREATE USER 'read_user1'@'localhost' IDENTIFIED BY 'read_user1pass';
# 	CREATE USER 'read_user2'@'localhost' IDENTIFIED BY 'read_user2pass';
# 	CREATE USER 'rw_user1'@'localhost' IDENTIFIED BY 'rw_user1pass';
#
# To assign each user its required privileges, you could use GRANT statements of the same form as just shown, but that requires
# enumerating individuals privileges for each user.
#
# Instead, use an alternative GRANT syntax that permits granting roles rather than privileges:
#
# 	GRANT 'app_developer' TO 'dev1'@'localhost';
# 	GRANT 'app_read' TO 'read_user1'@'localhost', 'read_user2'@'localhost';
# 	GRANT 'app_read', 'app_write' TO 'rw_user1'@'localhost';
#
# The GRANT statement for the rw_user1 account grans the read and write roles, which combine to provide the required read and write privileges.
#
# The GRANT syntax for granting roles to an account differs from the Syntax for granting privileges:
#
# 		There is an ON clause to assign privileges, whereas there is no ON clause to assign roles.
#
# 		Because the syntaxes are distinct, you cannot mix assigning privileges and roles in the same statement.
# 		(It is permitted to assign both privilegs and roles to an account, but you must use separate GRANT statements,
# 			each with syntax appropiate to what is to be granted)
#
# DEFINE MANDATORY ROLES
#
# It is possible to specify roles as mandatory by naming them in the value of the mandatory_roles SYS_VAR.
# The server treats a mandatory role as granted to all users, so that it need not be granted explicitly to any account.
#
# To specify mandatory roles at server startup, define mandatory_roles in your server my.cnf file:
#
# 		[mysqld]
# 		mandatory_roles='role1,rol2@localhost,r3@%.example.com'
#
# To set and persist mandatory_roles at runtime, use a statement like this:
#
# 		SET PERSIST mandatory_roles = 'role1,role2@localhost, r3@%.example.com';
#
# SET_PERSIST sets the value for the running MySQL instance. It also saves the value to be used for subsequent server restarts.
#
# To change a value for the running MySQL instance without saving it for subsequent restarts, use the GLOBAL keyword rather than PERSIST.
#
# Setting mandatory_roles requires the ROLE_ADMIN privilege, in addition to the SYSTEM_VARIABLES_ADMIN or SUPER privilege normall required
# to set a global system variable.
#
# Mandatory roles, like explicitly granted roles, do not take effect until activated. 
#
# At login time, role activation occurs for all granted roles if the activate_all_roles_on_login system variable is enabled,
# or only for roles that are set as default roles otherwise.
#
# At runtime, SET_ROLE activates roles.
#
# Roles named in the value of mandatory_roles cannot be revoked with REVOKE or dropped with DROP_ROLE or DROP_USER.
#
# If a role named in mandatory_roles is not present in the mysql.user system table, the role is not granted to users.
#
# When the server attempts role activaiton for a user, it does not treat the nonexistent role as mandatory and writes
# a warning ot the error log.
#
# If the role is created later and thus becomes valid, FLUSH_PRIVILEGES may be necessary to cause the server to treat it
# as mandatory.
#
# SHOW_GRANTS displays mandatory roles according to the rules described later.
#
# CHECKING ROLE PRIVS
#
# To verify the privs assigned to an account, use SHOW_GRANTS. For example:
#
# 		SHOW GRANTS FOR 'dev1'@'localhost';
# 		+--------------------------------------------------+
# 		| Grants for dev1localhost 								|
# 		+--------------------------------------------------+
# 		| GRANT USAGE ON *.* TO `dev1`@`localhost`			|
# 		| GRANT `app_developer`@`%` TO `dev1`@`localhost` 	|
# 		+--------------------------------------------------+
#
# However, that shows each granted role without "expanding" it to the privileges the role represents.
# TO show role privileges as well, add a USING clause naming the granted roles for which to display privileges:
#
# 		SHOW GRANTS FOR 'dev1'@'localhost' USING 'app_developer';
# 		+-----------------------------------------------------------+
# 		| Grants for dev1@localhost 											|
# 		+-----------------------------------------------------------+
# 		| GRANT USAGE ON *.* TO `dev1`@`localhost` 		            |
# 		| GRANT ALL PRIVILEGES ON `app_db`.* TO `dev1`@`localhost` 	|
# 		| GRANT `app_developer`@`%` TO `dev1`@`localhost` 			   |
# 		+-----------------------------------------------------------+
#
# Verify each other type of user similarly:
#
# 		SHOW GRANTS FOR 'dev1'@'localhost' USING 'app_developer';
# 		+------------------------------------------------------------+
# 		| Grants for read_user1@localhost 									 |
# 		+------------------------------------------------------------+
# 		| GRANT USAGE ON *.* TO `read_user1`@`localhost` 				 |
# 		| GRANT SELECT ON `app_db`.* TO `read_user1`@`localhost`	 	 |
# 		| GRANT `app_read`@`%` TO `read_user1`@`localhost` 			 |
# 		+------------------------------------------------------------+
#
# 		SHOW GRANTS FOR 'rw_user1'@'localhost' USING 'app_read', 'app_write';
# 		+------------------------------------------------------------------------------+
# 		| Grants for rw_user1@localhost 										 						 |
# 		+------------------------------------------------------------------------------+
# 		| GRANT USAGE ON *.* TO `rw_user1`@`localhost` 					  						 |
# 		| GRANT SELECT, INSERT, UPDATE, DELETE ON `app_db`.* TO `rw_user1`@`localhost` |
# 		| GRANT `app_read`@`%`, `app_write`@`%` TO `rw_user1`@`localhost` 				 |
# 		+------------------------------------------------------------------------------+
#
# SHOW_GRANTS displays mandatory roles according to the rules described later.
#
# ACTIVATING ROLES
#
# Roles granted to a user account can be active or inactive within account sessions. 
# If a granted role is active within a session, its privileges apply; otherwise, they do not.
#  
# To determine which roles are active within the current session, use the CURRENT_ROLE() function.
#
# By default, granting a role to an account or naming it in the mandatory_role SYS_VAR value does not automatically
# cause the role to become active within account sessions.
#
# For example, because thus far in the preceding discussion no rw_user1 roles have been activated, if you connect to
# the server as rw_user1 and invoke the CURRENT_ROLE() function, the result is NONE(no active roles):
#
# SELECT CURRENT_ROLE();
# +------------------------+
# | CURRENT_ROLE() 			|
# +------------------------+
# | NONE 					   |
# +------------------------+
#
# To specify which roles should become active each time a user connects to the server and authenticates, use SET_DEFAULT_ROLE.
# To set the default to all assigned roles for each account created earlier, use this statement:
#
# 		SET DEFAULT ROLE ALL TO 'dev1'@'localhost', 'read_user1'@'localhost', 'read_user2'@'localhost', 'rw_user1'@'localhost';
#
# Now if you connect as rw_user1, the initial value of CURRENT_ROLE() reflects the new default role assignments:
#
# SELECT CURRENT_ROLE();
# +-------------------------------+
# | CURRENT_ROLE() 			 		 |
# +-------------------------------+
# | `app_read`@`%`,`app_write`@`%`|
# +-------------------------------+
#
# To cause all explicitly granted and mandatory roles to be automatically activated when users connect to the server,
# enable the activate_all_roles_on_login SYS_VAR.
#
# By default, automatic role activation is disabled.
#
# Within a session, a user can execute SET_ROLE to change the set of active roles. For example, for rw_user1:
#
# 	SET ROLE NONE; SELECT CURRENT_ROLE();
# +---------------------+
# | CURRENT_ROLE() 		|
# +---------------------+
# | NONE 					|
# +---------------------+
#
#  SET ROLE ALL EXCEPT 'app_write'; SELECT CURRENT_ROLE();
# +---------------------+
# | CURRENT_ROLE() 		|
# +---------------------+
# | `app_read`@`%` 		|
# +---------------------+
#
# SET ROLE DEFAULT; SELECT CURRENT_ROLE();
# +-------------------------------+
# | CURRENT_ROLE() 					 |
# +-------------------------------+
# | `app_read`@`%`,`app_write`@`%`|
# +-------------------------------+
#
# The first SET_ROLE statement deactives all roles.
# The second makes rw_user1 effectively read only.
#
# The third restores the defualt roles.
#
# The effective user for stored program and view objects is subject to the DEFINER and SQL SECURITY attributes, which
# whether execution occurs in invoker or definer context (covered later):
#
# 		) Stored program and view objects that execute in invoker context execute with the active roles within the current session.
#
# 		) Stored program and view objects that execute in definer context execute with the default roles of the user named in their DEFINER attribute.
#
# 			If activate_all_roles_on_login is enabled, such objects execute with all roles granted to the DEFINER user, including mandatory roles.
# 
# 			For stored programs, if execution should occur with roles different from the default, the program body should execute SET_ROLE to activate the required roles.
# 
# REVOKING ROLES OR ROLE PRIVILEGES
#
# Just as roles can be granted to an account, they can be revoked from an account:
#
# 		REVOKE role FROM user;
#
# Roles named in the mandatory_roles SYS_VAR value cannot be revoked.
#
# REVOKE can also be applied to a role to modify the privileges granted to it.
# This affects not only the role itself, but any account granted that role.
#
# Suppose that you want to temporarily make all application users read only.
#
# To do this, use REVOKE to revoke the modification privileges from the app_write role:
#
# 		REVOKE INSERT, UPDATE, DELETE ON app_db.* FROM 'app_write';
#
# As it happens,that leaves the role with no privleges at all, as can be seen using SHOW_GRANTS (which demonstrates that this statement can be used with roles, not just users):
#
# 		SHOW GRANTS FOR 'app_write';
# 		+--------------------------------------+
# 		| Grants for app_write@% 			  		|
# 		+--------------------------------------+
# 		| GRANT USAGE ON *.* TO `app_write`@`%`|
# 		+--------------------------------------+
#
# Because revoking privileges from a role affects the privileges for any user who is assigned the modified role, rw_user1 now has no table modification
# privileges (INSERT, UPDATE and DELETE are no longer present):
#
# 		SHOW GRANTS FOR 'rw_user1'@'localhost' USING 'app_read', 'app_write';
# 		+-------------------------------------------------------------------+
# 		| Grants for rw_user1@localhost 												  |
# 		+-------------------------------------------------------------------+
# 		| GRANT USAGE ON *.* TO `rw_user1`@`localhost` 							  |
# 		| GRANT SELECT ON `app_db`.* TO `rw_user1`@`localhost`				  |
# 		| GRANT `app_read`@`%`,`app_write`@`%` TO `rw_user1`@`localhost` 	  |
# 		+-------------------------------------------------------------------+
#
# In effect, the rw_user1 read/write user has become a read-only user. 
#
# This also occurs for any other accounts that are granted the app_write role, illustrating how use of roles makes it unecessary to modify privileges for individual accounts.
#
# To restore modification privileges to the role, simply re-grant them:
#
# 		GRANT INSERT, UPDATE, DELETE ON app_db.* TO 'app_write';
#
# Now rw_user1 again has modification privs, as do any other accounts granted the app_write role.
#
# REMOVING ROLES
#
# To remove roles, use DROP_ROLE:
#
# 		DROP ROLE 'app_read', 'app_write';
#
# Dropping a role revokes it from every account to which it was granted.
#
# Roles named in the mandatory_roles system variable cannot be dropped.
#
# USER AND ROLE INTERCHANGEABILITY
#
# As has been hinted at earlier for SHOW_GRANTS, which displays grants for user accounts or roles, accounts and roles can be used
# interchangably.
#
# You can treat a user account like a role and grant that account to another user or a role.
#
# The effect is to grant the account's privileges and roles to the other user or role.
#
# This set of statements demonstrates that you can grant a user to a user, a role to a user, a user to a role, or a role to a role:
#
# 		CREATE USER 'u1';
# 		CREATE ROLE 'r1';
#
# 		GRANT SELECT ON db1.* TO 'u1';
# 		GRANT SELECT ON db2.* TO 'r1';
#
# 		CREATE USER 'u2';
# 		CREATE ROLE 'r2';
# 
# 		GRANT 'u1', 'r1' TO 'u2';
# 		GRANT 'u1', 'r1' TO 'r2';
#
# The result in each case is to grant to the grantee object the privileges associated with the granted object.
#
# After executing those statements, each of u2 and r2 have been granted privs from a user (u1) and a role (r1):
#
#
# 		SHOW GRANTS FOR 'u2' USING 'u1', 'r1';
# 		+------------------------------------+
# 		| Grants for u2@% 						 |
# 		+------------------------------------+
# 		| GRANT USAGE ON *.* TO `u2`@`%` 	 |
# 		| GRANT SELECT ON `db1`.* TO `u2`@`%`|
# 		| GRANT SELECT ON `db2`.* TO `u2`@`%`|
# 		| GRANT `u1`@`%`,`r1`@`%` TO `u2`@`%`|
# 		+------------------------------------+
#
# 		SHOW GRANTS FOR 'r2' USING 'u1', 'r1';
# 		+------------------------------------+
# 		| Grants for r2@% 						 |
# 		+------------------------------------+
# 		| GRANT USAGE ON *.* TO `r2`@`%` 	 |
# 		| GRANT SELECT ON `db1`.* TO `r2`@`%`|
# 		| GRANT SELECT ON `db2`.* TO `r2`@`%`|
# 		| GRANT `u1`@`%`,`r1`@`%` TO `r2`@`%`|
# 		+------------------------------------+
#
# The preceding example is llustrative only, but interchangability of user accounts and roles has practical application;
# such as in the following situation:
#
# 	Suppose that a legacy application development project began before the advent of roles in MySQL, so all user accounts
#  associated with the project are granted privileges directly (rather than granted privileges by virtue of being granted roles).
#
#  One of these accounts is a dev account taht was originally granted privs as follows:
#
# 		CREATE USER 'old_app_dev'@'localhost' IDENTIFIED BY 'old_app_devpass';
# 		GRANT ALL ON old_app.* TO 'old_app_dev'@'localhost';
#
# If this developer leaves the project, it becomes nesesecary to assign the privileges to anotehr user, or perhaps multiple users
# if devleopment activities have expanded.
#
# Here are some ways to deal with the issue:
#
# 		) Without using roles : Change the account PW so the original dev cannot use it, and have a new dev use it instead:
#
# 				ALTER USER 'old_app_dev'@'localhost' IDENTIFIED BY 'new_password';
#
# 		) Using roles: Lock the acc to prevent anyone from using it to connect to the server:
#
# 				ALTER USER 'old_app_dev'@'localhost' ACCOUNT LOCK;
#
# 			Then treat the account as a role. For each dev new to the project, create a new account and grant it to the original dev acc:
#
# 				CREATE USER 'new_app_dev1'@'localhost' IDENTIFIED BY 'new_password';
# 				GRANT 'old_app_dev'@'localhost' TO 'new_app_dev1'@'localhost';
#
# 			The effect is to assign the original dev acc privs to the new account.
#
# RESERVED USER ACCOUNTS
#
# One part of the MySQL installation process is data directory initializaiton.
#
# During data dir initialization, MySQL creates user accounts that should be considered reserved:
#
# 		) 'root'@'localhost': Used for administrative purposes. This account has all privileges and can perform any operation.
#
# 			Strictly speaking, this acc name is not reserved, in the sense that some installations rename the root account to something
# 			else to avoid exposing a highly privleged account with a well-known name.
#
# 		) 'mysql.sys'@'localhost': Used as the DEFINER for sys schema objects. Use of the mysql.sys account avoids problems that occur
# 			if a DBA renames or removes the root account.
#
# 			THis account is locked so that it cannot be used for client applications.
#
# 		) 'mysql.session'@'localhost': Used internally by plugins to access the server. This account is locked so that it cannot be used for client connections.
#
# 		) 'mysql.infoschema'@'localhost': Used as the DEFINER for INFORMATION_SCHEMA views. Use of the mysql.infoschema account avoids problems that occur if a DBA 
# 			renames or removes the root account.
#
# 			This account is locked so that it cannot be used for client connections.
#
# SETTING ACCOUNT RESOURCE LIMITS
#
# One means of restricting client use of MySQL server resources is to set the global max_user_connections SYS_VAR to a > 0 value.
#
# This limits the number of simultaneous connections that can be made by any given account, but places no limits on what a client
# can do once connected.
#
# In addition, setting max_user_connections does not enable management of individual accounts.
#
# Both types of control are of interest to MySQL admins.
#
# To address such concerns, MYSQL permits limits for individual accounts on use of these server resources:
#
# 		) The number of queries an account can issue per hour
#
# 		) The number of updates an account can issue per hour
#
# 		) The number of times an account can connect to the server per hour
#
# 		) The number of simultaneous connections to the server by an account
#
# Any statement that a client can issue counts against the query limit. Only statements that modify databases or tables count against the update limit.
#
# An "account" in this context corresponds to a row in the mysql.user table.
#
# That is, a connection is assessed against the User and Host values in the user table row that applies to the connection.
#
# For example, an account 'usera'@'%.example.com' corresponds to a row in the user table that has User and Host values of usera and
# %.example.com to permit usera to connect from any host in teh example.com domain.
#
# In this case, the server applies resource limits in this row collectively to all connections by usera from any host in the 
# example.com domain because all such connections use the same account.
#
# Before MySQL 5.0, an "account" was assessed against the actual host from which a user connects.
# The older method of accounting may be selected by starting the server with the --old-style-user-limits option.
#
# In this case, if usera connects simultaneously from host1.example.com and host2.example.com, the server applies the
# account resource limits separately to each connection.
#
# If usera connects again from host1.example.com, the server applies the limits for that connection together with the
# existing connection from that host.
#
# To establish resource limits for an account at account-creation time, use the CREATE_USER statement.
#
# To modify the limits for an existing account, use ALTER_USER.
#
# Provide a WITH clause that names each resource to be limited.
#
# The default value for each limit is zero (limitless).
#
# For example, to create a new account that can access the customer database, but only in a limited fashion, issue these statements:
#
# 		CREATE USER 'francis'@'localhost' IDENTIFIED BY 'frank'
# 				-> 	WITH MAX_QUERIES_PER_HOUR 20
# 				-> 		  MAX_UPDATES_PER_HOUR 10
# 				-> 		  MAX_CONNECTIONS_PER_HOUR 5
# 				-> 		  MAX_USER_CONNECTIONS 2;
#
# The limit types need not all be named in the WITH clause, but those named can be present in any order.
#
# The value for each per-hour limit should be an integer representing a count per hour.
#
# For MAX_USER_CONNECTIONS, the limit is an integer representing the maximum number of simultaneous connections
# by the account.
#
# If this limit is set to zero, the global max_user_connections SYS_VAR determines the number of simultaneous connections.
# If max_user_connections is also 0, there is no limit for the account.
#
# To modify limits for an existing account, use an ALTER_USER statement.
#
# The following statement changes the query limit for francis to 100:
#
# 		ALTER USER 'francis'@'localhost' WITH MAX_QUERIES_PER_HOUR 100;
#
# The statement modifies only the limit value specified and leaves the account otehrwise unchagned.
#
# To remove a limit, set its value to zero. For example, to remove the limit on how many times per hour franis can connect,
# set:
#
# ALTER USER 'francis'@'localhost' WITH MAX_CONNECTIONS_PER_HOUR 0;
#
# As mentioned previously, the simultaneous-connection limit for an account is determined from the MAX_USER_CONNECTIONS limit and the
# max_user_connections SYS_VAR.
#
# Suppose that the global max_user_connections value is 10 and three accounts have individual resource limits specified as follows:
#
# 		ALTER USER 'user1'@'localhost' WITH MAX_USER_CONNECTIONS 0;
# 		ALTER USER 'user2'@'localhost' WITH MAX_USER_CONNECTIONS 5;
# 		ALTER USER 'user3'@'localhost' WITH MAX_USER_CONNECTIONS 20;
#
# user1 has a connection limit of 10 (the global max_user_connections value) because it has a MAX_USER_CONNECTIONS limit of 0 (i.e, falls back to Global).
# user2 and user3 has 5 and 20, respectively. (Defined value > 0, higher precedence than Global).
#
# The server stores resource limits for an account in the user table row corresponding to the account.
#
# The max_questions, max_updates and max_connections columns store the per-hour limits, and the max_user_connections column stores
# the MAX_USER_CONNECTIONS limit.
#
# Resource-use counting takes place when any account has a nonzero limit placed on its use of any of the resources.
#
# As the server runs, it counts the number of times each account uses resources.
# If an account reaches its limit on number of connections within the last hour, the server
# rejects further connections for the account until that hour is up.
#
# SImilarly, if the account reaches its limit on the number of queries or updates, the server
# rejects further queries or updates until the hour is up.
#
# In all such cases, the server issues appropriate error messages.
#
# Resource counting occurs per account, not per client.
#
# For example, if your account has a query limit of 50, you cannot increase your limit to 100 by making two
# simultaneous client connections to the serer.
#
# Queries issued on both connections are counted together.
#
# The current per-hour resource-use counts can be reset globally for all accounts, or individually for a given account:
#
# 		) To reset the current count to zero for all accounts, issue a FLUSH_USER_RESOURCES statement.
#
# 			The counts also can be reset by reloading the grant tables (for example, with a FLUSH_PRIVLEGES statement or a mysqladmin reload command)
#
# 		) The counts for an individual account can be reset to zero by setting any of its limits again. Specify a limit value equal to the value currently assigned ot the account.
#
# Per-hour counter resets do not affect the MAX_USER_CONNECTIONS limit.
#
# All counts begin at 0 when the server starts. Counts do not carry over through server restarts.
#
# For the MAX_USER_CONNECTIONS limit, an edge case can occur if the account currently has open the maximum number of connections
# permitted to it:
#
# A disconnect followed quickly by a connect can result in an error (ER_TOO_MANY_USER_CONNECTIONS or ER_USER_LIMIT_REACHED) if the server has not fully processed
# the disconnect by the time the connect occurs.
#
# When the server finishes disconnect processing, another connection will once more be permitted.
#
# ASSIGNING ACCOUNT PASSWORDS
#
# Required credentials for clients that connect to the MySQL server can include a password. This section describes how ot assign PWs for MySQL accs.
#
# MySQL stores credentials in the user table in the mysql system database.

# Operations that assign or modify passwords are permitted only to users with the CREATE_USER privilege, or,
# alternatively, privileges for the mysql databse (INSERT privilege to create new accounts, UPDATE privilege to modify existing accounts).
#
# If the read_only SYS_VAR is enabled, use of account-modification statements such as CREATE_USER or ALTER_USER additionally requires the
# CONNECTION_ADMIN or SUPER privilege.
#
# The discussion here summarizes syntax only for the most common PW assignments. More covered later.
#
# MySQL uses plugins to perform client authentication; more later.
#
# IN password-assigning statements, the authentication plugin associated with an account performs any hashing required of a cleartext
# PW specified.
#
# This enables MySQL to obfuscate PWs prior to storing them in the mysql.user table.
#
# For the statements described here, MySQL automatically hashes the PWs specified.
#
# there are also 	syntaxes for CREATE_USER and ALTER_USER that permit hashed values to be specified literally.
# 
# To assign a PW when you create a new account, use CREATE_USER and include an IDENTIFIED BY clause:
#
# 		CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';
#
# CREATE_USER also supports syntax for specifying the account authentication plugin.
#
# To assign or change a password for an existing account, 	use the ALTER_USER statement with an IDENTIFIED BY clause:
#
# 		ALTER USER 'jeffrey'@'localhost' IDENTIFIED BY 'password';
#
# If you are not connected as an anon user, you can change your own PW without naming your own account literally:
#
# 		ALTER USER() IDENTIFIED BY 'password';
#
# To change an account PW from the cmd line, use the mysqladmin command:
# 
# 		mysqladmin -u <user_name> -h <host_name> password "password"
#
# The account for which this command sets the PW is the one with a mysql.user table row that matches <user_name> in the User column
# and the client host from which you connect in teh Host column.
#
# WARNING:
#
# 		Setting a PW using mysqladmin should be considered insecure. 
#
# 		ON some systems, your PW becomes visible to System Status programs, such as ps that may be invoked by other users to display
# 		cmd lines.
#
# 		MySQL clients tpyically overwrite the cmd line PW argument with 00's during their initialization sequence.
#
# 		However, there is still a brief interval during which the value is visible.
#
# 		Also, on some systems this overwriting strategy is ineffective and the PW remains visible to ps.
# 		(SystemV Unix systems and perhaps otehrs are subject to this problem).
#
# IF you are using MySQL Replication, be aware that - currently - a a PW used by a replication slave as part of a CHANGE_MASTER_TO statement,
# is effectively limited to 32 chars in len.
#
# If the pw is longer, any excess chars are truncated.
#
# This is not due to any limit imposed by the MySQL Server generally, but rather is an issue specific to MySQL Replication.
# (Bug #43439)
#
# PASSWORD MANAGEMENT
#
# MySQL supports these PW management capabilities:
#
# 	) PW expiration, to require PWs to be changed periodically.
#
# 	) PW reuse restrictions, to prevent old PWs from being chosen again
#
# 	) PW verification, to require that PW changes also specify the current PW to be replaced.
#
# 	) PW strength assesment, to require strong PWs.
#
# The following sections these capabilities, except PW strength assesment, which is implemented using the validate_password plugin
# and is described later.
#
# IMPORTANT:
#
# 		MySQL implements PW management capabilities using tables in the mysql System database.
#
# 		If you upgrade MySQL from an earlier version, your system tables might not be up to date.
# 		In that case, the server writes messages similar to these to the error log during the startup process:
#
# 			[ERROR] Column count of mysql.user is wrong. Expected 49, found 47.
# 			The table is probably corrupted.
# 			[Warning] ACL table mysql.password_history missing.
# 			Some operations may fail.
#
# 		To correct the issue, run mysql_upgrade and restart the server. Until this is done, password changes are not possible.
#
# Note:
#
# 		The password-management capabilities described here apply only to accounts that store credentials internally in the 
# 		mysql.user system table (mysql_native_password, sha256_password or caching_sha2_password)
#
# 		For accounts that use plugins that perform authentication against an external credential system, PW management must be
# 		handled externally against that system as well.
#
# PASSWORD EXPIRATION POLICY
#
# MySQL enables database admins to expire account passwords manually, and to establish a policy for automatic PW expiration.
#
# Expiration policy can be established globally, and individual accounts can be set to either defer to the global policy
# or override the global policy with specific per-account behavior.  
#
# To expire an account password manually, use the ALTER_USER statement:
#
# 		ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE;
#
# This operation marks the PW expired in the corresponding mysql.user table row.
#
# Password expiration according to policy is automatic and is based on password age, which for a given
# account is assessed from the date and time of its most recent password change.
#
# The mysql.user table indicates for each account when its password was last changed, and the server
# automatically treats the pw as expired at client connection time if its age is greater than its
# permitted lifetime.
#
# This works with no explicit manual PW expiration.
#
# To establish automatic pw-expiration policy globally, use the default_password_lifetime system variable.
# Its default value is 0, which disables automatic password expiration.
#
# If the value of default_password_lifetime is a positive integer N, it indicates the permitted password
# lifetime, such that passwords must be changed every N days.
#
# Examples:
#
# 		) To establish a global policy that PWs have a lifetime of approx 6 months, start the server with these lines
# 			in a server my.cnf file:
#
# 				[mysqld]
# 				default_password_lifetime=180
#
# 		) To establish a global policy such that PWs never expire, set default_password_lifetime to 0:
#
# 				[mysqld]
# 				default_password_lifetime=0
#
# 		) default_password_lifetime can also be set and persisted at runtime:
#
# 				SET PERSIST default_password_lifetime = 180;
# 				SET PERSIST default_password_lifetime = 0;
#
# 			SET_PERSIST sets the value for the running MySQL instance.
#
# 			It also saves the value to be used for subsequent server restarts. More later on that.
#
# 			To change a value for the running MySQL instance without saving it for subsequent restarts, just use GLOBAL instead of PERSIST.
#
# The global password-expiration policy applies to all accounts that have not been set to override it.
#
# To establish policy for individual accounts, use the PASSWORD EXPIRE option of the CREATE_USER and ALTER_USER statements.
#
# Example account-specific statements:
#
# 		) Require the password to be changed every 90 days:
#
# 			CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;
# 			ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE INTERVAL 90 DAY;
#
# 			This expiration option overrides the global policy for all accounts named by the statement.
#
# 		) Disable password expiration:
#
# 			CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;
# 			ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE NEVER;
#
# 			This expiration option overrides the global policy for all accounts named by the statement.
#
# 		) Defer to the global expiration policy for all accounts named by the statement:
#
# 			CREATE USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;
# 			ALTER USER 'jeffrey'@'localhost' PASSWORD EXPIRE DEFAULT;
#
# When a client successfully connects, the server determines whether the account password has expired:
#
# 		) The server checks whether the password has been manually expired.
#
# 		) Otherwise, the server checks whether the password age is greater than its permitted lifetime according to the
# 			automatic password expiration policy.
#
# 			If so, the server considers the password expired.
#
# If the password is expired (whether manually or automatically), the server either disconnects the client or restricts the
# operations permitted to it.
#
# Operations performed by a restricted client result in an error until the user establishes a new account password:
#
# 		SELECT 1;
# 		ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.
#
# 		ALTER USER USER() IDENTIFIED BY 'password';
# 		Query OK, 0 rows affected (0.01 sec)
#
# 		SELECT 1;
# 		+---+
# 		| 1 |
# 		+---+
# 		| 1 |
# 		+---+
# 		1 row in set (0.00 sec)
#
# After the client resets the password, the server restores normal access for the session, as well as for
# subsequent connections that use the account.
#
# It is also possible for an administrative user to reset the account password, but any existing restricted sessions
# for that account remain restricted.
#
# A client using the account must disconnect and reconnect before statements can be executed successfully.
#
# NOTE:
#
# 		It is possible to "reset" a password by setting it to its current value. As a matter of good policy, it is preferable to choose a different PW.
# 		DBAs can enforce non-reuse by establishing an appropiate password-reuse policy.
#
# PASSWORD REUSE POLICY
#
# MySQL enables restrictions to be placed on reuse of previous passwords.
# Reuse restrictions can be established based on number of password changes, time elapsed or
# both.
#
# Reuse policy can be established globally, and individual accounts can be set to either defer to the global
# policy or override the global policy with specific per-account behavior.
#
# The password history for an account consists of passwords it has been assigned in the past.
# MySQL can restrict new passwords from being chosen from this history:
#
# 		) If an account is restricted on the basis of number of password changes, a new password cannot be chosen from a specific number of
# 			the most recent passwords.
#
# 			For example, if the minimum number of password changes is set to 3, a new password cannot be the same as any of the most recent 3 PWs.
#
# 		) If an account is restricted based on time elapsed, a new PW cannot be chosen from PWs in the history that are newer than a specified
# 			number of days.
#
# 			For example, if the PW reuse interval is set to 60, a new PW must not be among those previously chosen within the last 60 days.
#
# 			NOTE: The empty password does not count in the password history and is subject to reuse at any time.
#
# To establish password-reuse policy globally, use the password_history and password_reuse_interval SYS_VARs.
#
# Examples:
#
# 		) To prohibit reusing any of the last 6 passwords or passwords newer than 365 days, put these lines in the server my.cnf file:
#
# 			[mysqld]
# 			password_history=6
# 			password_reuse_interval=365
#
# 		) To set and persist the variables at runtime, use statements like this:
#
# 			SET PERSIST password_history = 6;
# 			SET PERSIST password_reuse_interval = 365;
#
# SET_PERSIST sets the value for the running MySQL instance. It also saves the value to be used for subsequent server restarts.
# More on that later.
#
# To change a value for the running MySQL instance without saving it for subsequent restarts, use the GLOBAL keyword rather than PERSIST.
#
# The global password-reuse policy applies to all accounts that have not been set to override it.
#
# To establish policy for individual accounts, use the PASSWORD HISTORY and PASSWORD REUSE INTERVAL options
# of the CREATE_USER and ALTER_USER statements. More on that later.
#
# Example account-specific statements:
#
# 		) Require a minimum of 5 password changes before permitting reuse:
#
# 			CREATE USER 'jeffrey'@'localhost' PASSWORD HISTORY 5;
# 			ALTER USER 'jeffrey'@'localhost' PASSWORD HISTORY 5;
#
# 			This history-length option overrides the global policy for all accounts named by the statemnet.
#
# 		) Require a minimum of 365 days elapsed before permitting reuse:
#
# 			CREATE USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 365 DAY;
# 			ALTER USER 'jeffrey'@'localhost' PASSWORD REUSE INTERVAL 365 DAY;
#
# 			This time-elapsed option overrides the global policy for all accounts named by the statement.
#
# 		) To combine both types of reuse restrictions, use PASSWORD HISTORY and PASSWORD REUSE INTERVAL together:
#
# 			CREATE USER 'jeffrey'@'localhost'
# 				PASSWORD HISTORY 5
# 				PASSWORD REUSE INTERVAL 365 DAY;
# 
# 			ALTER USER 'jeffrey'@'localhost'
# 				PASSWORD HISTORY 5
# 				PASSWORD REUSE INTERVAL 365 DAY;
#
# 			These options override both global policy reuse restrictions for all accounts named by the statement.
#
# 		) Defer to the global policy for both types of reuse restrictions:
#
# 			CREATE USER 'jeffrey'@'localhost'
# 				PASSWORD HISTORY DEFAULT
# 				PASSWORD REUSE INTERVAL DEFAULT;
# 			ALTER USER 'jeffrey'@'localhost'
# 				PASSWORD HISTORY DEFAULT
# 				PASSWORD REUSE INTERVAL DEFAULT;
#
# PASSWORD VERIFICATION-REQUIRED POLICY
#
# As of MySQL 8.0.13, it is possible to require that attempts to change an account PW be verified by specifying the current
# PW to be replaced.
#
# This enables DBAs to prevent users from changing a password without proving that they know the current PW.
#
# Such changes could otherwise occur, for example, if one user walks away from a terminal session temporarily without logging out,
# and someone uses the session to change the original user's MySQL PW.
#
# This can cause things like:
#
# ) The original user becoming unable to access MySQL, until PW reset by a admin
#
# ) Until the PW reset occurs, the malicious user can access MySQL with the benign user's changed credentials.
#
# PW-verification policy can be established globally, and individual accounts can be set to either defer to the global policy
# or override the global policy with specific per-account behavior.
#
# For each account, its mysql.user row indicates whether there is an account-specific setting requiring verification of
# the current PW for PW change attempts.
#
# The setting is established by the PASSWORD REQUIRE option of the CREATE_USER and ALTER_USER statements:
#
# 		) If the account setting is PASSWORD REQUIRE CURRENT, PW changes must specify the current PW.
#
# 		) If the account setting is PASSWORD REQUIRE CURRENT OPTIONAL, password changes may but need not specify the current PW
#
# 		) If the account setting is PASSWORD REQUIRE CURRENT DEFAULT, the password_require_current SYSTEM_VARIABLE determines the verification-required policy
# 			for the account:
#
# 				) If password_require_current is enabled, password changes must specify the current password.
#
# 				) If password_require_current is disabled, password changes may but need not specify the current PW.
#
# IN other words, if the account setting is not PASSWORD REQUIRE CURRENT DEFAULT, the account setting takes precedence over the
# global policy established by the password_require_current SYS_VAR.
#
# Otherwise, the account defers to the password_require_current setting.
#
# By default, PW verification is optional: password_require_current is disabled and accounts created with no PASSWORD REQUIRE
# option default to PASSWORD REQUIRE CURRENT DEFAULT.
#
# The following table shows how per-account settings interact with password_require_current SYS_VAR values to
# determine account password verification-required policy.
#
# PER-ACCOUNT SETTING 				password_require_current SYS_VAR 		Password Changes Require Current PW?
#
# PASSWORD REQUIRE CURRENT 		OFF 												Yes
#
# PASSWORD REQUIRE CURRENT 		ON 												Yes
#
# PASSWORD REQUIRE CURRENT OPT.	OFF 												No
#
# PASSWORD REQUIRE CURRENT OPT. 	ON 												No
#
# PASSWORD REQUIRE CURRENT DEF. 	OFF 												No
#
# PASSWORD REQUIRE CURRENT DEF. 	ON 												Yes
#
# Note:
#
# 		Privleged users can change any account password without specifying the current password, regardless of the verification-required
# 		policy.
#
# 		A privileged user is one who has the global CREATE_USER privlege or the UPDATE privilege for the mysql system database.
#
# To establish PW-verification policy globally, use the password_require_current SYS_VAR.
#
# Its default value is OFF, so it is not required that account password changes specify the current password.
#
# Examples:
#
# 	) To establish a global policy that PW changes must specify the current PW, start the server with these lines in the server my.cnf file:
#
# 		[mysqld]
# 		password_require_current=ON
#
# 	) To set and persist password_require_current at runtime, use a statement such as one of these:
#
# 		SET PERSIST password_require_current = ON;
# 		SET PERSIST password_require_current = OFF;
#
# SET_PERSIST sets the value for the running MySQL instance.
#
# It also saves the value to be used for subsequent server restarts. More on that later.
#
# To change a value for the running MySQL instance without saving it for subsequent restarts, use the GLOBAL keyword rather than PERSIST.
#
# The global PW verification-required policy applies to all accounts that have not been set to override it.
# To establish policy for individual accounts, use the PASSWORD REQUIRE options of the CREATE_USER and ALTER_USER statements. More on this later.
#
# Example account-specific statements:
#
# 		) Require that password changes specify the current password:
#
# 			CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;
# 			ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT;
#
# 			This verification option overrides the global policy for all accounts named by the statemnt.
#
# 		) Do not require that password changes specify the current password (the current PW may but need not be given):
#
# 			CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;
# 			ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT OPTIONAL;
#
# 			This verification option overrides the global policy for all accounts named by the statement.
#
# 		) Defer to the global PW verification-required policy for all accounts named by the statement:
#
# 			CREATE USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;
# 			ALTER USER 'jeffrey'@'localhost' PASSWORD REQUIRE CURRENT DEFAULT;
#
# Verification of the current password comes into play when a user changes a password using the ALTER_USER or SET_PASSWORD statement.
# The examples use ALTER_USER, which is preferred óver SET_PASSWORD, but the principles described here are the same for both statements.
#
# In PW-change statements, a REPLACE clause specifies the current password to be replaced.
# Examples:
#
# 	) Change the current user's password:
#
# 			ALTER USER USER() IDENTIFIED BY 'auth_string' REPLACE 'current_auth_string';
#
# 	) Change a named user's password:
#
# 			ALTER USER 'jeffrey'@'localhost' IDENTIFIED BY 'auth_string' REPLACE 'current_auth_string';
#
# 	) Change a named user's auth plugin and PW:
#
# 			ALTER USER 'jeffrey'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'auth_string' REPLACE 'current_auth_string';
#
# The REPLACE clause works like this:
#
# 	) REPLACE must be given if PW changes for the account are required to specify the current password, as verification that the user attempting to make
# 		the change actually knows the current password.
#
# 	) REPLACE is optional if PW changes for the account may but need not specify the current PW.
#
# 	) If REPLACE is specified, it must specify the correct current password, or an error occurs. This is true even if REPLACE is optional.
#
# 	) REPLACE can be specified only when changing the account password for the current user. (This means that in the examples just shown, the statements
# 		that explicitly name the account for jeffrey fail unless the current user is jeffrey).
#
# 		This is true even if the change is attempted for another user by a privileged user.
#
# 		However, if you have the privs for it, you can do such a change without REPLACE.
#
# 	) REPLACE is omitted from the binary log to avoid writing cleartext PWs to it.
#
# SERVER HANDLING OF EXPIRED PWs
#
# MySQL provides password-expiration capability, which enables database administration to require that users reset their password.
# Passwords can be expired manually, and on the basis of a policy for automatic expiration.
#
# For each connection that uses an account with an expired password, the server either disconnects the client or restricts the client
# to "sandbox mode", in which the server permits to the client only those operations necessary to reset the expired password.
#
# Which action is taken by the server depends on both client and server settings, as discussed later.
#
# If the server disconnects the client, it returns an ER_MUST_CHANGE_PASSWORD_LOGIN error:
#
# 	mysql -u myuser -p
# 	Password: ********
# 	ERROR 1862 (HY000): Your password has expired. to log in you must change it using a client that supports expired PWs.
#
# If the server restricts the client to sandbox mode, these operations are permitted within the client session:
#
# 		) The client can reset the account password with ALTER_USER or SET_PASSWORD.
# 			After the password has been reset, the server restores normal access for the session, as well as for subsequent connections that use the account.
#
# 			It is possible to "reset" a password by setting it to its current value.
# 			As a matter of good policy, it is preferable to chose a different password.
#
# 			DBAs can enforce non-reuse by establishing an appropriate PW reuse policy.
#
# 		) The client can use SET statements.
#
# For any operation not permitted within the session, the server returns an ER_MUST_CHANGE_PASSWORD error:
#
# 		USE performance_schema;
# 		ERROR 1820 (HY000): You must reset your PW using ALTER USER statement before executing this statement.
#
# 		SELECT 1;
# 		ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.
#
# That is what normally happens for interactive invocations of the mysql client because by default such invocations are put in sandbox mode.
# To clear the error and resume normal functioning, select a new PW.
#
# For noninteractive invocations of the mysql client (for example, in batch mode) - the server normally disconnects the client if the PW is expired.
#
# To permit noninteractive mysql invocations to stay connected so that the PW can be changed (using the statements just described) - add the --connect-expired-password
# option to the mysql command.
#
# As mentioned previously, whether the server disconnects an expired-password client or restricts it to sandbox mode depends on a combination
# of client and server settings.
#
# The following discussion describes the relevant settings and how they interact.
#
# the discussion applies only for accounts with expired PWs. If a client connects using a nonexpired PW, the server handles the client normally.
# 
# On the client side, a given client indicates whether it can handle sandbox mode for expired passwords.
# For clients that use the C client library, there are two ways to do this:
#
# 		) Pass the MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS flag to mysql_options() prior to connecting:
#
# 			arg = 1;
# 			result = mysql_options(mysql, MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS, &arg);
#
# 			The mysql client enables MYSQL_OPT_CAN_HANDLE_EXPIRED_PASSWORDS if invoked interactively or the --connect-expired-password option is given.
#
# 		) Pass the CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS flag to mysql_real_connect() at connection time:
#
# 			mysql = mysql_real_connect(mysql, host, user, password, db, port, unix_socket, CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS);
#
# Other MySQL Connectors have their own conventions for indicating readiness to handle sandbox mode.
#
# See respective documentation for respective connector.
#
# On the server side, if a client indicates that it can handle expired passwords, the server puts it in sandbox mode.
#
# If a client does not indicate that it can handle expired passwords (or use an older version of the client library that cannot so indicate)
# The server action depends on the value of the disconnect_on_expired_password SYS_VAR:
#
# 		) If disconnect_on_expired_password is enabled (the default), the server disconnects the client with an ER_MUST_CHANGE_PASSWORD_LOGIN error.
#
# 		) If disconnect_on_expired_password is disabled, the server puts the client in sandbox mode.
#
# PLUGGABLE AUTHENTICATION
#
# When a client connects to the MySQL server, the server uses the user name provided by the client and the client host to select
# the appropriate account row from the mysql.user system table.
#
# The server then authenticates the client, determining from the account row which authentication plugin applies to the client:
#
# 		) If the server cannot find the plugin, an error occurs and the connection attempt is rejected.
#
# 		) Otherwise, the server invokes that plugin to authenticate the user, and the plugin returns a status to the server indicating
# 			whether the user provided the correct password and is permitted to connect.
#
# Pluggable authentication enables these important capabilities:
#
# 		) Choice of authentication methods. Pluggable authentication makes it easy for DBAs to choose and change the authentication method
# 			using for individual MySQL accounts.
# 
# 		) External authentication. Pluggable authentication makes it possible for clients to connect to the MySQL server with credentials appropriate
# 			for authentication methods that store credentials elsewhere than in the mysql.user system table.
#
# 			For example, plugins can be created to use external authentication methods such as PAM, Windows login IDs, LDAP or Kerberos.
#
# 		) Proxy users: If a user is permitted to connect, an authentication plugin can return to the server a user name different from the name of the
# 			connecting user, to indicate that the connecting user is a proxy for another user (the proxied user).
#
# 			While the connection lasts, the proxy user is treated, for purposes of access control, as having the privileges of the proxied user.
#
# 			In effect, one user impersonates another.
#
# 			NOTE:
#
# 				If you start the server with the --skip-grant-tables option, authentication plugins are not used even if loaded because the server performs
# 				no client authentication and permits any client to connect.
#
# 				Because this is insecure, if the server is started with the --skip-grant-tables option, it enables --skip-networking automatically to prevent
# 				remote connections.
#
# AVAILABLE AUTHENTICATION PLUGINS
#
# MySQL 8.0 provides these authentication plugins:
#
# 		) A plugin that performs native authentication. That is , authentication based on the PW hashing method in use from before the introduction of
# 			pluggable authentication in MySQL.
#
# 			The mysql_native_password plugin implements authentication based on this native password hashing method.
#
# 		) Plugins that perform authentication using SHA-256 password hashing.
#
# 			This is stronger encryption than available with native authentication.
#
# 		) A client-side plugin that sends the password to the server without hasing or encryption. This plugin is used in conjunction with
# 			server-side plugins that require access to the password exactly as provided by the client user.
#
# 		) A plugin thaht performs external authentication using PAM (Pluggable Authentication Modules), enabling MySQL Server to use PAM to authenticate
# 			MySQL users..
#
# 			This plugin supports proxy users as well.
#
# 		) A plugin that performs external authentication on Windows, enabling MySQL server to use native Windows services to authenticate client connections.
# 		 	USers who have logged in to Windows can connect from MySQL client programs to the server based on the information in their environment without
# 			specifying an additional PW.
#
# 			This plugin supports proxy users as well.
#
# 		) Plugins that perform authentication using LDAP (Lightweight Directory Access Protocol) to authenticate MySQL users by accessing directory services
# 			such as X.500
#
# 			These plugins support proxy users as well.
#
# 		) A plugin that prevents all client connections to any account that uses it. Use cases for this plugin include proxied accounts that should never permit
# 			direct login but are accessed only  through proxy accounts and accounts that must be able to execute stored programs and views with elevated privileges
# 			without exposing those privileges to ordinary users.
#
# 		) A plugin that authenticates clients that connect from the local host through the Unix socket file.
#
# 		) A test plugin that  checks account credentials and logs success or failure to the server error log. This plugin is intended for testing
# 			and development purposes - as an example of how to write an authentication plugin, covered later.
#
# NOTE:
#
# 		For information about current restrictions on the use of pluggable authentication, include which connectors support which plugins.
#
# 		Third-party connector developers should read that section to determine the extent to which a connector can take advantage of pluggable
# 		authentication capabilities and what steps to take to become more compliant.
#
# If you are interested in writing own authentication plugins, more later.
#
# AUTHENTICATION PLUGIN USAGE
#
# This section provides general instructions for installing and using authentication plugins.
# For instructions specific to a given plugin, see the section later.
#
# In general, pluggable authentication uses a pair of corresponding plugins on the server and client sides, so you use a given authentication method
# like this:
#
# 		) If necessary, install the plugin library or libraries containing the appropiriate plugins.
#
# 			On the server host, install the library containing the server-side plugin, so that the server can use it to authenticate
# 			client connections.
#
# 			SImilarly, on each client host, install the library containing the client-side plugin for use by client programs.
#
# 			Authentication plugins that are built in need not be installed.
#
# 		) For each MySQL account that you create, specify the appropriate server-side plugin to use for authentication. If the account
# 			is to use the default authentication plugin, the account-creation statement need not specify the plugin explicitly.
#
# 			The default_authentication_plugin SYS_VAR configures the default authentication plugin.
#
# 		) When a client connects, the server-side plugin tells the client program which client-side plugin to use for authentication.
#
# In the case that an account uses an authentication method that is the default for both the server and the client program, the server
# need not communicate to the client which client-side plugin to use, and a round trip in client/server negotiation can be avoided.
#
# For standard MySQL clients such as mysql and mysqladmin, the --default-auth=plugin_name option can be specified on the command line
# as a hint about which client-side plugin the program can expect to use, although the server will override this if the server-side plugin
# associated with the user account requires a different client-side plugin.
#
# If the client program does not find the client-side plugin library file, specify a --plugin-dir=dir_name option to indicate the plugin
# library directory location.
#
# AUTHENTICATION PLUGIN CLIENT/SERVER COMPATIBILITY
#
# Pluggable authentication enables flexibility in the choice of authentication method for MySQL accounts, but in some cases client connections
# cannot be established due to authentication plugin incompatibility between the client and server..
#
# The general compatibility principle for a successful connection to a given account on a given server is that the client and 
# server both must support the autheitcation method required by the account.
#
# Because authentication methods are implemented by authentication plugins, the client and server both must support the authentication
# plugin required by the account.
#
# Authentication plugin incompatibilities can arise in various ways. Examples:
#
# 		) Connect using a MySQL 5.7 client from 5.7.22 or lower to a MysQL 8.0 server account that authenticates with caching_sha2_password.
#
# 			This fails because the 5.7 client does not recognize the plugin, which was introduced in 8.0
#
# 			(This issue was addressed in MySQL 5.7 as of 5.7.23, when caching_sha2_password client-side support was added to the MySQL client library
# 			and client programs).
#
# 		) Connect using a MySQL 5.5 client to a MySQL 5.6 client server acc that authenticates with sha256_password.
#
# 			This fails because the 5.5. does not recognize the plugin, whic was introduced in MySQL 5.6
#
# 		) connect using a MySQL 5.7 client  from a community distrib to a MySQL 5.7 >Enterprise server account that authenticates using one of the
# 			Enterprise-only LDAP authentication plugins. This fails because the community client does not have access to said plugin.
#
# In general, these compatibility issues do not arise when connections are made between a client and server from the same MySQL distrib.
# When connections are made between a client and server from different MySQL series, issues can arise.
#
# these issues are inherent in the development process when MysQL introduces new authentication plugins or removes old ones.
# To minimize the potentional for incompatibilities, regularly update the server, clients and connectors on a timely basis.
#
# AUTHENTICATION PLUGIN CONNECTOR-WRITING CONSIDERATIONS
#
# Various implementations of the MySQL client/server protocol exist. The libmysqlclient C API client library is one implementation.
#
# Some MySQL connectors (typically those not written in C) provide their own implementation. However, not all protocol implementations
# handle plugin authentication in the same way.
#
# This section describes an authentication issue that protocl implementors should take into account.
#
# In the client/Server protocol, the server tells connecting clients which authentication plugin it considers the default.
#
# If the protocol implementation used by the client tries to load the default plugin and that plugin does not exist on the client side,
# the load ops fails.
#
# this is an unnecessary failure if the default is not the plugin actually required by the account to which the client is trying to connect. 
#
# If a client/server protocol implementation does not have its own notion of default authentication plugin and always tried to load the default
# plugin specified by the server, it will fail with an error if that plugin is not available.
#
# To avoid this problem, the protocol implementation used by the client should have its own default plugin and should use it as its first choice,
# (or, alternatively, fall back to this default in case of failrue to load the default plugin specified by the server). Example:
#
# 		) In MysQL 5.7, libmysqlclient uses as its default choice either mysql_native_password or the plugin specified through the MYSQL_DEFAULT_AUTH option
# 			for mysql_options()
#
# 		) When a 5.7 client tries to connect to a 8.0 server, the server specifies caching_sha2_password as its default authentication plugin, but the client
# 		still sends credential details per either mysql_native_password or whatever is specified through MYSQL_DEFAULT_AUTH
#
# 		) The only time the client loads the plugin specified by the server is for a change-plugin request,, but in that case it can be any plugin
# 			depending on the user account.
#
# 			IN this case, the client must try to load the plugin, and if that plugin is N/A - an error is not optional.
#
# PROXY USERS
#
# The MySQL server authenticates client connections using authentication plugins. The plugin that authenticates a given connection may request that
# 	the connecting (external) user be treated as a different user for privilege-checking purposes.
#
# This enables the external user to be a proxy for the second user; that is, to assume the privileges of teh second user:
#
# 		) The external user is a "proxy user" (a user who can impersonate or become known as another user)
#
# 		) The second user is a "proxied user" (a user whose identity and privs can be assumed by a proxy user)
#
# This section describes how the proxy user capabilitiy works. For general information about auth plugins, see earlier.
#
# FOr more info about seeing how to write a plugin that supports authentication of proxy users, see later.
#
# NOTE:
#
# 		AS an alternative to the use of proxy users, role support may provide a suitable way to map users onto specific sets
# 		of named privileges.
#
# REQUIREMENTS FOR PROXY USER SUPPORT
#
# For proxying to occur for a given authentication plugin, these conditions must be satisfied:
#
# 		) Proxying must be supported, either by the plugin itself, or by the MySQL server on behalf of the plugin.
# 			In teh latter case, server support may need to be enabled explicitly.
#
# 		) The proxy user account must be set up to be authenticated by the plugin. Use the CREATE_USER statement to associate
# 			an account with an authentication plugin, or ALTER_USER to change its plugin.
#
# 		) The proxied user account must be created and granted the privileges to be assumed by the proxy user. Use the CREATE_USER and GRANT statements for this.
#
# 		) The proxy user account must have the PROXY privilege for hte proxied account. Use the GRANT statemnet for this.
#
#		) For a client connecting to the proxy account to be treated as a proxy user, the authentication plugin must return a user name different
#			from the client user name - to indicate the user name of the proxied account that defines the privileges to be assumed by the proxy user.
#
# 			Alternatively, for plugins that are provided proxy mapping by the server, the proxied user is determined from the PROXY privilege held by the proxy user.
#
# The proxy mechanism permits mapping only the client user name to the proxied user name.
#
# THere is no provision for mapping host names. When a connecting client matches a proxy account, the server attempts to find a match
# for a proxied account using the user name returned by the authentication plugin and teh host name of the proxy account.
#
# Consider the following account definitions:
#
# 		-- create proxy account
# 		CREATE USER 'employee_ext'@'localhost' IDENTIFIED WITH my_auth_plugin AS 'my_auth_string';
#
# 		--  create proxied account and grant its privileges
# 		CREATE USER 'employee'@'localhost' IDENTIFIED BY 'employee_pass';
# 		GRANT ALL ON employees.* TO 'employee'@'localhost';
#
# 		-- grant PROXY privilege to proxy account for proxied account
# 		GRANT PROXY ON 'employee'@'localhost' TO 'employee_ext'@'localhost';
#
# When a client connects as employee_ext from the local host, MySQL uses the plugin named my_auth_plugin to perform
# authentication.
#
# SUppose that my_auth_plugin returns a user name of employee to the server, based on the content of 'my_auth_string' and perhaps
# by consulting some external authentication system.
#
# The name employee differs from employee_ext, so returning employee serves as a request to the server to treat the employee_ext client,
# for purposes of privilege checking, as the employee local user.
#
# In this case, employee_ext is the proxy user and employee is the proxied user.
#
# The server verifies that proxy authentication for employee is possible for the employee_ext user by checking whether employee_ext
# (the proxy user) has the PROXY privilege for employee (the proxied user).
#
# If this privilege has not been granted, an error occurs. Otherwise, employee_ext assumes the privileges of employee.
# The server checks statements executed during the client session by employee_ext against the privileges granted to employee.
#
# IN this case, employee_ext can access tables in the employee database.
#
# WHen proxying occurs, the USER() and CURRENT_USER() functions can be used to see the difference between the connecting user 
# (the proxy user) and the account whose privileges apply during the current session (the proxied user).
#
# For the example just described, those functions return these values:
#
# 		SELECT USER(), CURRENT_USER();
# 		+------------------------+--------------------+
# 		| USER() 					 | CURRENT_USER() 	 |
# 		+------------------------+--------------------+
# 		| employee_ext@localhost | employee@localhost |
# 		+------------------------+--------------------+
#
# In the CREATE_USER statement that creates the proxy user account, the IDENTIFIED WITH clause that names the authenticatiojn
# plugin is optionally followed by an AS 'auth_string' clause specifying a string that hte server passes to the plugin when the
# user connects.
#
# If present, the string provides information that helps the plugin determine how to map the external client user name to a proxied user name.
# It is up to each plugin whether it requires the AS clause.
#
# If so, the format of the authentication string depends on how the plugin intends to use it.
# Consult the documentation for a given plugin for information about the authentication string values it accepts.
#
# GRANTING THE PROXY PRIVLEGE
#
# The PROXY privilege is needed to enable an external user to connect as and have the privileges of another user..
# To grant this privilege, use the GRANT statement.
#
# For example:
#
# 		GRANT PROXY ON 'proxied_user' TO 'proxy_user';
#
# THe statement creates a row in the mysql.proxies_priv grant table.
#
# At connection time, proxy_user must represent a valid externally authenticated MysQL user, and proxied_user must represent
# a valid locally authenticated user.
#
# Otheriwse, the connection attempt fails.
#
# The corresponding REVOKE syntax is:
#
# 		REVOKE PROXY ON 'proxied_user' FROM 'proxy_user';
#
# MySQL GRANT and REVOKE syntax extensions wokr as usual. For example:
#
# 		GRANT PROXY ON 'a' TO 'b', 'c', 'd';
#		GRANT PROXY ON 'a' TO 'd' WITH GRANT OPTION;
# 		GRANT PROXY ON 'a' TO ''@'';
# 		REVOKE PROXY ON 'a' FROM 'b', 'c', 'd';
#
# The PROXY privilege can be granted in these cases:
#
# 		) By a user that has GRANT PROXY ... WITH GRANT OPTION for proxied_user.
#
# 		) By proxied_user for itself: The value of USER() must exactly match CURRENT_USER() and proxied_user, for both the user name and host name parts
#			of the account name.
#
# The initial root account created during MySQL installation has the PROXY_..._WITH_GRANT_OPTION privileges for ''@'', that is, for all users and all hosts.
# This enables root to set up proxy users, as well as to delegate to other accoutns the authority to set up proxy users.
#
# FOr example, root can do this:
#
# 		CREATE USER 'admin'@'localhost' IDENTIFIED BY 'test';
# 		GRANT PROXY ON ''@'' TO 'admin'@'localhost' WITH GRANT OPTION;
#
# Those statements create an admin user that can manage all GRANT PROXY mappings. For example, admin can do this:
#
# 		GRANT PROXY ON sally TO joe;
#
# DEFAULT PROXY USERS
#
# To specify that some or all users should connect using a given authentication plugin, create a "blank" MySQL acc (''@''), associate it
# with that plugin, and let hte plugin reutrn the real authenticated user name (if different from the blank user).
#
# For example, suppose that there exists a plugin named ldap_auth that implements LDAP authentication and maps connecting
# users unto either a developer or manager account.
#
# To set up proxying of users unto these accounts, use the following statements:
#
# 		-- create default proxy account
# 		CREATE USER ''@'' IDENTIFIED WITH ldap_auth AS '0=Oracle, OU=MySQL';
#
# 		-- create proxied accounts
# 		CREATE USER 'developer'@'localhost' IDENTIFIED BY 'developer_pass';
# 		CREATE USER 'manager'@'localhost' IDENTIFIED BY 'manager_pass';
#
# 		-- grant PROXY privileges to default proxy acount for proxied accounts
# 		GRANT PROXY ON 'manager'@'localhost' TO ''@'';
# 		GRANT PROXY ON 'developer'@'localhost' TO ''@'';
#
# Now assume that a client connects as follows:
#
# 		mysql --user=myuser --password
# 		Enter PW: *****
#
# The server will not find myuser defined as a MySQL user. But because there is a blank user account (''@'') that matches
# the client user name and host name, the server authenticates the client against that account.
#
# The server invokes the ldap_auth authentication plugin and passes myuser and myuser_pass to it as the user name and user PW.
#
# If the ldap_auth plugin finds in the LDAP directory that myuser_pass is not the  correct password for myuser, authentication
# fails and the server rejects the connection.
#
# If the PW is correct and ldap_auth finds that myuser is a developer, it returns the user name developer to the MySQL server, rather than
# myuser.
#
# Returning a user name different from the client user name of myuser signals to the server that it hsould treat myuser as a proxy.
# THe server verifies that ''@'' can authenticate as developer (because that account has the PROXY privilege to do so), and accepts the connection.
#
# The session proceeds with myuser having the privileges of developer, the proxied user.
#
# (These privileges should be set up by the DBA using GRANT stratements, not shown).
#
# The USER() and CURRENT_USER() functions return these values:
#
# SELECT USER(), CURRENT_USER();
# +---------------------+-----------------+
# | USER() 			   | CURRENT_USER() 	   |
# +------------------+--------------------+
# | myuser@localhost | developer@localhost|
# +------------------+--------------------+
#
# If the plugin instead finds in the LDAP directory that myuser is a manager, it returns manager as the user name and session proceeds
# with myuser having the privileges of manager.
#
# SELECT USER(), CURRENT_USER();
# +------------------+------------------+
# | USER() 			   | CURRENT_USER() 	 |
# +------------------+------------------+
# | myuser@localhost | manager@localhost|
# +------------------+------------------+
#
# For simplicity, external authentication cannot be multilevel: Neither the credentials for developer nor those for manager are taken into account
# in the preceding example.
#
# However, they are still used if a client tries to connect and authenticate directly as the developer or manager account, which is why
# those accounts should be assigned PWs.
#
# DEFAULT PROXY USER AND ANON USER CONFLICTS
#
# If you intend to create a default proxy user, check for other existing "match any user" accounts that take precedence over the default proxy
# user because they can prevent that user from working as intended.
#
# In the preceding discussion, the default proxy user account has '' in the host part, which matches any host. 
#
# If oyu set up a default proxy user, take care to also check whether nonproxy accounts exist with the same user part and '%' in the host part,
# because '%' is wildcard matching, but has precedence over '' because it's more specific.
#
#
# Suppose that a MySQL installation includes these two accounts:
#
# 		-- create default proxy account
# 		CREATE USER ''@'' IDENTIFIED WITH some_plugin AS 'some_auth_string';
# 		-- create anonymous account
# 		CREATE USER ''@'%' IDENTIFIED BY 'some_password';
#
# The first account (''@'') is intended as the default proxy user, used to authenticate connections for users who do not otherwise match a 
# more-specific account.
#
# THe second account (''@'%') is a anonymous user acc, which might have bene created for example, to enable users without their own acc to connect anonymously.
#
# Both accounts have the same user part (''), which matches any user.
# And each account has a host part that matches any host.
#
# Nevertheless, there is a prio in account matching for connection attempts because the matching rule sort a host of '%' ahead of ''.
# For accoutns that do not match any more-specific account, the server attempts to authenticate them against ''@'%' (anon), rather than ''@'' (default proxy).
#
# The result is that the default proxy acc is never used.
#
# To avoid this, use one of the following strategies:
#
# 		) Remove the anon account so that it does not conflict with the default proxy user.
# 			This might be a good idea anyway, if  you want to associate every connection with a named user.
#
# 		) Use a more-specific default proxy user that matches ahead of the anon user. For example, to permit only localhost proxy connections, use ''@'localhost':
#
# 			CREATE USER ''@'localhost' IDENTIFIED WITH some_plugin AS 'some_auth_string';
#
# 			In addition, modify any GRANT PROXY statements to name ''@'localhost' rather than ''@'' as the proxy user.
#
# 			This prevents anon users from localhost, as they will be funneled to the proxy instead.
#
# 		) Create multiple proxy users, one for local connections and one for "everything else" (remote).
# 			This can be useful particularly when local users should have different privileges from remote users.
#
# 			Create the proxy users:
#
# 				-- create proxy user for local connections
# 				CREATE USER ''@'localhost' IDENTIFIED WITH some_plugin AS 'some_auth_string';
# 				-- create proxy user for remote connections
# 				CREATE USER ''@'%' IDENTIFIED WITH some_plugin AS 'some_auth_string';
#
# 			Create the proxied users:
#
# 				-- create proxied user for local connections
# 				CREATE USER 'developer'@'localhost' IDENTIFIED BY 'some_password';
# 				-- create proxied user for remote connections
# 				CREATE USER 'developer'@'%' IDENTIFIED BY 'some_password';
#
# 			Grant the proxy privilege to each proxy user for the corresponding proxied user:
#
# 				GRANT PROXY ON 'developer'@'localhost' TO ''@'localhost';
# 				GRANT PROXY ON 'developer'@'%' TO ''@'%';
#
# 			Finally, grant appropiate privs to the local and remote proxied users (not shown)
#
# 			Assume that the some_plugin/'some_auth_string' combination causes some_plugin to map the client user name
# 			to developer.
#
# 			Local connections match the ''@'localhost' proxy user, which maps to the 'developer'@'localhost' proxied user.
# 			Remote connections match the ''@'%' proxy user, which maps to the 'developer'@'%' proxied user.
#
# SERVER SUPPORT FOR PROXY USER MAPPING
#
# 	Some authentication plugins implement proxy user mapping for themselves (for example, the PAM and Windows authentication plugins).
# 	Other authentication plugins do not support proxy users by default.
#
# 	Of these, some can request that hte MySQL server itself map proxy users according to granted proxy privileges:
#
# 		mysql_native_password, sha256_password.
#
# 	If the check_proxy_users SYS_VAR is enabled, the server performs proxy user mapping for any authentication plugins that make such a request:
#
# 		) By default, check_proxy_users is disabled, so the server performs no proxy user mapping even for authentication plugins that request server support for proxy users.
#
# 		) If check_proxy_users is enabled, it may also be necessary to enable plugin-specific SYS_VAR to take advantage of server proxy user mapping support:
#
# 			) For the mysql_native_password plugin, enable mysql_native_password_proxy_users.
#
# 			) For the sha256_password plugin, enable sha256_password_proxy_users
#
# Proxy user mapping performed by the server is subject to these restrictions:
#
# 		) The server will not proxy to or from an anon user, even if the associated PROXY privilege is granted.
#
# 		) When a single account has been granted proxy privileges for more than one proxied account, server proxy user mapping is nondeterministic.
# 			Therefore, granting to a single account proxy privileges for multiple proxy accounts is discouraged.
#
# PROXY USER SYSTEM VARIABLES
#
# Two system variables help trace the proxy login process:
#
# 		) proxy_user: THis value is NULL if proxying is not used. Otherwise, it indicates the proxy user account.
# 							For example, if a client authenticates through the ''@'' proxy account, this variable is set as follows:
#
# 								SELECT @@proxy_user;
# 								+---------------------------+
# 								| @@proxy_user 				 |
# 								+---------------------------+
# 								| ''@'' 							 |
# 								+---------------------------+
#
# 		) external_user: Sometimes the authentication plugin may use an external user to authenticate to the MySQL server.
#
# 								For example, when using Windows native authentication, a plugin that authenticates using the Windows API does not need the
# 								login ID passed to it.
# 
# 								However, it still uses Windows user ID to authenticate.
# 								The plugin may return this external user ID (or the first 512 UTF-8 bytes of it)
# 								to the server using the external_user read-only session variable.
#
# 								If the plugin does not set this variable, its value is NULL.
#
# USER ACCOUNT LOCKING
#
# MySQL supports locking and unlocking user accounts using the ACCOUNT LOCK and ACCOUNT UNLOCK clause for the CREATE_USER and ALTER_USER statements:
#
# 		) When used with CREATE_USER, these clauses specify the initial locking state for a new account.
#
# 			IN the absence of either clause, the account is created in an unlocked state.
#
# 		) WHen used with ALTER_USER, these clauses specify the new locking state for an existing account.
#
# 			In the absence of either clause, the account locking state remains unchanged.
#
# Account locking state is recorded in the account_locked column of the mysql.user table.
# The output from SHOW_CREATE_USER indicates whether an account is locked or unlocked.
#
# If a client attempts to connect to a locked account, the attempt fails. 
#
# THe server increments the Locked_connects status variable that indicates the number 
# of attempts to connect to a locked account, returns an ER_ACCOUNT_HAS_BEEN_LOCKED error, and writes am essage to the error log:
#
# 		Access denied for user 'user_name'@'host_name'
# 		Account is locked.
#
# Locking an account does not affect being able to connect using a proxy user that assumes the identity of the locked account.
# It also does not affect the ability to execute stored programs or views that have a DEFINER clause naming the locked account.
#
# That is, teh ability to use a proxied account or stored programs or views is not affected by locking the account.
#
# The account-locking capability depends on the presence of the account_locked column in the mysql.user table.
# For upgrades to MysQL 5.7 and later from older versions, run mysql_upgrade to ensure that this column exists.
#
# For nonupgraded installations that have no account_locked column, the server treats all accounts as unlocked,
# and using the ACCOUNT LOCK or ACCOUNT UNLOCK clause produces an error.
#
# SQL-BASED MYSQL ACCOUNT ACTIVITY AUDITING
#
# Applications can use the following guidelines to perform SQL-based auditing that ites database activity
# to MySQL accounts.
#
# MySQL accounts correspond to rows in the mysql.user table. WHen a client connects successfully, the server
# authenticates the client to a particular row in this table.
#
# The User and Host column vlaues in this row uniquely identify the account and correspond to the 'user_name'@'host_name'
# format in which account names are written in SQL statements.
#
# The account used to authenticate a client determines which privileges the client has.
# Normally, the CURRENT_USER() function can be invoked to determien which account this is for the client user.
#
# Its value is constructed from the User and Host columns of the user table row for the account.
#
# However, there are circumstances under which the CURRENT_USER() value corresponds not to the client user but to
# a different account.
#
# this occurs in contexts when privilege checking is not based on the client's account:
#
# 		) Stored routines (procedures and functions) defined with the SQL SECURITY DEFINER characteristic
#
# 		) Vies defined with the SQL SECURITY DEFINER characteristic
#
# 		) Triggers and events
#
# In those contexts, privlege checking is odne against the DEFINER account and CURRENT_USER() refers to that account
# for the client who invoked the stored routine or view or who caused the trigger to activate.
#
# To determine the invoking user, you can call the USER() function, which returns a value indicating the  actual
# user name provided by the client and the host from which the client connected.
#
# However, this value does not necessarily correspond directly to an account in the user table, because 	the USER()
# value never contains wildcards, whereas account values (as returned by the CURRENT_USER()) may contain user name
# and host name Wildcards.
#
# For example, a blank user name matches any user, so an account of ''@'localhost' enables clients to connect as anon users
# from the local host with any user name.
#
# In this case, if a client as user1 from the local host, USER() and CURRENT_USER() return different values:
#
# SELECT USER(), CURRENT_USER();
# +------------------------------------+
# | USER() 				| CURRENT_USER() 	|
# +------------------+-----------------+
# | user1@localhost 	| @localhost 		|
# +------------------+-----------------+
#
# The host name part of an account can contain wildcards, too.
#
# If the host name contains '%' or '_' pattern chars or uses netmask notation, the account can be used for
# clients connecting from multiple hosts and the current_USER() value will not indicate which one.
#
# For example, the account 'user2'@'%.example.com' can be used by user2 to connect from any host inb the example.com domain.
# If user2 connects from remote.example.com, USER() and CURRENT_USER() return sdifferent values:
#
# SELET USER(), CURRENT_USER();
# +----------------------------+----------------------+
# | USER() 							| CURRENT_USER() 			|
# +---------------------------+-----------------------+
# | user@remote.example.com 	| user2@%.example.com 	|
# +---------------------------+-----------------------+
# 
# If an application must invoke USER() for user auditing (for example, if it does auditing from within triggers) but must also
# be able to associate the USER() value with an account in the user table, it is necessary to avoid accounts that contain wildcards
# in the User and Host column.
#
# Specifically, do not permit User to be empty (which creates an anonymous-user account), and do not permit pattern characters
# or netmask notation in Host values.
#
# All accounts must have a nonempty User  value and literal Host value.
#
# WIth respect to the previous examples, the ''@'localhost' and 'user2'@'%.example.com' accounts should be changed not to use wildcards:
#
# RENAME USER ''@'localhost' TO 'user1'@'localhost';
# RENAME USER 'user2'@'%.example.com' TO 'user2'@'remote.example.com';
#
# If user2 must be able to ocnnect from several hosts in the example.com domain, there should be a separate account for each host.
#
# To extract the user name or host name part from a CURRENT_USER() or USER() value, use the SUBSTRING_INDEX() function:
#
# SELECT SUBSTRING_INDEX(CURRENT_USER(), '@',1);
# +-------------------------------------------------+
# | SUBSTRING_INDEX(CURRENT_USER(), '@', 1) 			 |
# +-------------------------------------------------+
# | user1 														 |
# +-------------------------------------------------+
#
# SELECT SUBSTRING_INDEX(CURRENT_USER(), '@', -1);
# +-------------------------------------------------+
# | SUBSTRING_INDEX(CURRENT_USER(), '@', -1) 		 |
# +-------------------------------------------------+
# | localhost 													 |
# +-------------------------------------------------+
#
# USING ENCRYPTED CONNECTIONS
#
# With an unencrypted connection between the MySQL client and the server, someone with access to the network could watch
# all your traffic and inspect the data being sent or received between client and server.
#
# When you msut move information over a network in a secure fahsion, an unencrypted connection is unacceptable.
# To make ay kind of data unreadable, use encryption.
#
# Encryption algorithms must include security elements to resist many kinds of known attacks such as changing the order of encrypted messages
# or replaying data twice.
#
# MySQL supports encrypted connections between clients and the server using the TLS (Transport Layer Security) protocol.
#
# TLS is sometimes referred to as SSL (Secure SOcket Layer), but MySQL doesn ot actually use the SSL protocol for encrypted connections
# because it's encryption is weak.
#
# TLS uses encryption algorithms to ensure htat data received over a public network can be trusted.
#
# It has mechanisms to detect data change, loss or replay. TLS also incorporates algorithms that provide identity verification
# using the X.509 standard
#
# X.509 makes it possible to identify someone on the Internet. IN basic terms, there should be some entity called a "Certificate Authority" (or CA) that assigns
# electronic certificates to anyone who needs them.
#
# Certificates rely on asymmetric encryption algorithms that have two encryption keys (public and secret).
# A ceritifcate owner  can present the certificate to naother party as proof of identity.
#
# A certificate consists of its owner's public key. Any data encrypted using this public key can be decrypeted using only the corresponding
# secret key, which is held by the owner of the cert.
#
# MySQL can be compiled for encrypted-connection support using OPenSSL or wolfSSL. More on that later.
#
# By default, MySQL propgrams attempts to connect using encryption if the server supports encrypted connections, falling back to
# an unencrypted connection if an encrypted connection cannot be established.
#
# MySQL performs encryption on a per-connection basis, and use of encryption for a given user can be optional or mandatory.
# This enables you to choose an encrypted or unencrypted connection according to the reuqirements of individual applications.
#
# For more info on how to requrie users to use encrypted connections, see the discussion of the REQUIRE clause of the CREATE_USER statement
# (more on that later).
#
# See also the desc. of the require_secure_transport System variable.
#
# ENcrypted connections can be used between master and slave replication servers, more on that later.
#
# For more info about using encrypted connections from the MySQL C API, more on that later.
#
# It is also possible to connect using encryption from within an SSH connection to the MySQL server host.
#
# CONFIGURING MYSQL TO USE ENCRYPTED CONNECTIONS
#
# Several options are avilable to indicate whether to use encrypted connections, and to specify the appropriate certificate and key files.
# This section provides general guideance about configuring the server and clients for encrypted connections:#
# 
# SERVER-SIDE CONFIGURATION FOR ENCRYPTED CONNECTIONS
#
# On the server side, the --ssl option specifies that the server permits but does not require encrypted connections.
# This option is enabled by default.
#
# These options on the server side identify the certificate and key files the server uses when permitting clients to establish
# encrypted connections:
#
# 		) --ssl-ca: The path name to the Ceritifcate Authority (CA) cert file (--ssl-capath is similar but specifies the path name of a directory of CA certificate files)
#
# 		) --ssl-cert: tHe path name of hte server public key certificate file. This can be sent to the client nad authenticated against the CA ceritifcate that it has.
#
# 		) --ssl-key: The path name of the server private key file.
#
# For example to enable the server for encrypted connections, start it with these lines in the my.cnf file, changing the ifle names as necessary:
#
# 		[mysqld]
# 		ssl-ca=ca.pem
# 		ssl-cert=server-cert.pem
# 		ssl-key=server-key.pem
#
# Each option names a file in PEM format. If oyu need to create the reuqired certificate and key files, see more later.
#
# Alternatively, if you have a MySQL source distrib, you can test your setup using the demonstration certificate and key files in tis
# mysql-test/std_data dir.
#
# MySQL servers compiled using OpenSSL can generate missing certificate and key files automatically at startup.
#
# THe server performs certificate and key file autodiscovery. If --ssl is enabled (possibly along with --ssl-cipher) and other --ssl-xxx options are not given
# to configure encrypted connections explicitly, the server attemtps to enable support for encrypted connections automatically at startup:
#
# 		) If the server discovers valid certificate and key files named ca.pem, server-cert.pem, and server-key.pem in the data dir, it enables support for
# 			encrypted connections by clients. (The files need not have been generated automatically, what matters is that they have the indicated names and are valid).
#
# 		) If the server does not find valid certificate and key files in the data directory, it continues executing but without support for encrypted connections.
#
# If the server automatically enables support for encrypted connections, it writes a note to the error log.
# If the server discovers that hte CA certificate is self-signed, it writes a 	warning to hte error log .(Teh certificate if self-signed if created automatically by the server,
# or manually using mysql_ssl_rsa_setup).
#
# The server uses the names of any automatically discovered and used certificate and key files to set the corresponding system variable (ssl_ca, ssl_cert, ssl_key)
#
# For further control over whether clients must connect using encryption, use the require_secure_transport system variable.
# To specify permitted encrypted protocols explicitly, use the tls_verison system variable.
#
# CLIENT-SIDE CONFIGURATION FOR ENCRYPTED CONNECTIONS
#
# By default, MySQL client programs attempt to establish an encrypted connection if the server supports encrypted connections, with further control
# available through the -ssl-mode option:
#
# 		) In the absence of an --ssl-mode option, clients attempt to connect using encryption, falling back to an unencrypted connection if an encrypted
# 			connection cannot be established.
#
# 			THis is also the behavior with an explicit --ssl-mode=PREFFERED option.
#
# 		) With --ssl-mode=REQUIRED, clients requrie an encrypted connection and fail ifo ne cannto be stablished.
#
# 		) with --ssl-mode=DISABLED, client use an unencrypted connection.
#
# 		) With --ssl-mode=VERIFY_CA or --ssl-mode=VERIFY_IDENTITY, clients require an encrypted connection, and also perform verification
# 			against the server CA certificate and (with VERIFY_IDENTITY) against the server host name in its certificate.
#
# The following options on the client side identify the certificate and key files clients use when establishing encrypted connections to the server.
# They are similar to the options used on the server side, but --ssl-cert and --ssl-key identify the client public and privat key:
#
# 		) --ssl-ca: The path name of the Certificate Authority (CA) certificate file. This option, if used, must specify the same ceritifcate used by the server.
# 						(the --ssl-capath is similar but specifies the path name of a  DIrectory of CA certificate files).
#
# 		) --ssl-cert: The path name of the client public key certificate file.
#
# 		) --ssl-key: THe path name of the client private key file.
#
# For additional security relative to that provided bny the default encryption, clients can supply a CA certificate matching the one used by the
# server and enable host name identity verification.
#
# IN this way, teh servr and client place their trust in the same CA certificate and client verifies that the host to which it connected
# is the one intended:
#
# 		) To specify the CA certificate, use --ssl-ca (or --ssl-capath), and specify --ssl-mode=VERIFY_CA
#
# 		) To enable host name identity verification as well, use --ssl-mode=VERIFY_IDENTITY rather than --ssl-mode=VERIFY_CA
#
# 		NOTE:
#
# 			Host name identity verification does not work with self-signed certificates created automatically by the server, or manually using 
# 			mysql_ssl_rsa_setup.
#
# 			Such self-signed certificates do not contain the server name as the Common Name value.
#
# Depending on the encryption requirements of the MySQL account used by a client, the client may be required to specify certain
# options to connect using encryption to a MYSQL server that supports encrypted connections.
#
# Suppose that you weant to connect using an account that has no special encryption requirements or was created using a CREATE_USER
# statement that includes the REQUIRE SSL option.
#
# Assuming that the server supports encrypted connections, a client can connect using encryption with no --ssl-mode option or
# with an explicit --ssl-mode=PREFFERED option:
#
# 		mysql
#
# OR
#
# 		mysql --ssl-mode=PREFERRED
#
# For an account with REQUIRE SSL, the connection attempt fails if an encrypted connection cannot be established.
#
# FOr an account with no special encryption requirements, the attempt falls back to an unencrypted connection if an 
# encrypted connection cannot be established.
#
# To prevent fallback and fail if an encrypted connection cannot be obtained, connect like this:
#
# 		mysql --ssl-mode=REQUIRED
#
# If the account has no more stringent security requirements, other options must be specified to establish an encrypted connection:
#
# 		) For accounts with REQUIRE X509, clients must specify at least --ssl-cert and --ssl-key. In addition, --ssl-ca (or --ssl-capath)
# 			is recommended so that hte public certificate provided by the server can be verified.
#
# 			For example:
#
# 			mysql --ssl-ca=ca.pem \
# 					--ssl-cert=client-cert.pem \
# 					--ssl-key=client-key.pem 
#
# 		) For accounts that have REQUIRE ISSUER or REQUIRE SUBJECT, the option requirements are the same as for REQUIRE X509, but the certificate
# 			must match the issue or subject, respectively, specified in the account definition.
#
# FOr additional informaton about the REQUIRE clause, more later.
#
# To prevent use of encryption and override other -ssl-xxx options, invoke the client  program with --ssl-mode=DISABLED
#
# 		mysql --ssl-mode=DISABLED
#
# To specify 	permitted encryption protocls explicitly, use the --tls-version option, more later.
#
# To determine whether the current connection with the server user encryption, check the vlaue of the Ssl_cipher status variable.
# If the value is empty, the connection is not encrypted.
#
# Otherwise, the connection is encrypted and the value indicates the encryption ciher. For example:
#
# 	SHOW SESSION STATUS LIKE 'Ssl_cipher';
# +---------------------------------------------+
# | Variable_name  | Value 							|
# +----------------+----------------------------+
# | Ssl_cipher 	 | DHE-RSA-AES128-GCM-SHA256  |
# +----------------+----------------------------+
#
# For the mysql client, an alternative is to use the STATUS or \s command and check the SSL line:
#
# 		\s
# 		... 
# 		SSL: Not in use
# 		... 
#
# OR
#
# \s
# ...
# SSL: Cipher in use is DHE-RSA-AES128-GCM-SHA256
# ...
# 
# COMMAND OPTIONS FOR ENCRYPTED CONNECTIONS
#
# This section describes options that specify whether to use encrypted connections, the names of certificate and key files,
# and other params related to encrypted-connection support.
#
# These options can be given on the command line or in an option file.
#
# For examples of suggested use and how to check whether a connection is encrypted, more later.
#
# For info about using encrypted connections from the MySQL C API, more later.
#
# ENCRYPTED-CONNECTION OPTION SUMMARY
#
# 		FORMAT 					DESCRIPTION 												INTRODUCED
#
# --skip-ssl 		Do not use encrypted connection
#
# --ssl 				Enable encrypted connection
#
# --ssl-ca 			File that contains list of trusted SSL Certificate Authorities
#
# --ssl-capath 	Directory that contains trusted SSL Certificate Authority certificate files
#
# --ssl-crl 		File that contains certificate revocation lists
#
# --ssl-crlpath 	Directory that contains certificate revocation list files
#
# --ssl-fips-mode Whether to enable FIPS mode on the client side 				8.0.11
#
# --ssl-key 		File that contains X.509 key
#
# --ssl-mode 		Security state of connection to server
#
# --tls-version 	Protocols permitted for encrypted connections
#
# 	) --ssl
#
# 			NOTE: The client side --ssl option is removed in MySQL 8.0. For Cient programs, use --ssl-mode instead.
#
# 		On the server side, the --ssl option specifies that hte server permits but does not require encrypted connections.
#
# 		The option is enabled on the server side by default. --ssl is implied by other --ssl-xxx options, as indicated in the desc for those options.
#
# 		The --ssl option in negated form indicates that encryption should not be used and overrides other --ssl-xxx options.
# 		SPecify the options as --ssl=0 or a synonym (--skip-ssl, --disable-ssl)
#
# 		TO specify additional parameters for encrypted connections, use at least --ssl-cert and --ssl-key on the server side and
# 		--ssl-ca on the client side.
#
# 		Read earlier sections for that. That section also describes server capabilities for certificate and key file autogeneration and autodiscovery.
#
# ) --ssl-ca=<file_name>
#
# 		The path name of the Certificate Authority (CA) certificate file in PEM format. On the server side, this option implies --ssl.
#
# 		To tell the client not to authenticate the server certificate when establishing an encrypted connection to the server,
# 		specify neither --ssl-ca nor --ssl-capath.
#
# 		THe server still verifies the client according to any applicable requirements established for the client account, and sitll
# 		uses any --ssl-ca or --ssl-capath option values specified on the server side.
#
# ) --ssl-capath=dir_name
#
 #		THe path name of hte directory that contains trusted SSL ceritifcate authority (CA) certificate files in PEM format: On the server side,
 # 		this option implies --ssl.
 #
 # 	To tell the client not to authenticate the server certificate when establishing an encrypted connection to the server,
 # 	specify neither --ssl-ca nor --ssl-capath.
 #
 # 	The server sitll verifies the client according to any applicable requirements established for the client account,
 # 	and it sitll uses any --ssl-ca or --ssl-capath option values specified on the server side.
 #
 # 	MySQL distribs compiled using OpenSSL support the --ssl-capath option (see later).
 #
 # 	Distribs compiled using wolfSSL do not because wolfSSL does not look in any directory and do not followed chained certificate trees.
 # 	wolfSSL requries that all components of the CA certificate tree be contained within a single CA certificate tree and that each
 # 	certificate in the file has a unique SubjectName vlaue.
 #
 # 	To work around this wolfSSL limitation, concatenate the individual certificate files comprising the certificate tree into
 # 	a new file and specify that file as the  value of the --ssl-ca option.
 #
 # ) --ssl-cert=file_name
 #
 # 	The path name of the SSL public key certificate file in PEM format. 
 #
# 		ON the client side, this is the client public key. On teh server side, this is the server pubic key certificate.
#
# 		On the server side, this option implies --ssl.
#
# 	--ssl-cipher=cipher_list
#
# 		The list of permitted ciphers for connection encryption. If no cipher in the list is supported, encrypted connections will not work.
#
# 		ON the server side, this option implies --ssl.
#
# 		For greatest portability, cipher_list should be a list of one or more cipher names, separated by colons.
# 		Example:
#
# 			--ssl-cipher=AES128-SHA
# 			--ssl-cipher=DHE-RSA-AES128-GCM-SHA256:AES128-SHA
#
# 		OpenSSL supports a more flexible syntax for specifying ciphers, as described in the OpenSSL documentation.
#
# 		wolfSSL does not, so attempts to use that extended syntax fail for a MySQL distrib compiled using wolfSSL.
#
# 		For info about which encryption ciphers MySQL supports, more on that later.
#
# ) --ssl-crl=file_name
#
# 		The path name of the file certificate revocation lists in PEM format.
#
# 		On the server side, this option implies --ssl.
#
# 		If neither --ssl-crl nor --ssl-crlpath  is given, no CRL checks are performed, even if the CA path contains certificate revocation lists.
#
# 		MySQL distribs compiled using OpenSSL support the --ssl-crl option.
# 		Distribs compiled using wolfSSL do not because revocation lists do not work with wolfSSL.
#
# )--ssl-crlpath=dir_name
#
# 		The path name of the directory that contains certificate revocation list files in PEM format.
#
# 		On the server side, this option implies --ssl.
#
# 		If neither --ssl-crl nor --ssl-crlpath is given, no CRL checks are performed, even if the CA path contains certificate revocation lists.
#
# 		MySQL distribs compiled using OpenSSL suport the --ssl-crlpath.
# 		distribs compiled using wolfSSL do not because revocation lists do not work with wolfSSL.
#
# ) --ssl-fips-mode={OFF|ON|STRICT}
#
# 		Controls whether to enable FIPS mode on the client side. 
#
# 		The --ssl-fips-mode option differs from other --ssl-xxx options in that it is not used
# 		to establish encrypted connections, but rahter to affect which cryptographic operations are permitted.
#
# 		These --ssl-fips-mode vlaues are permitted:
##
# 			) OFF -> disalbes FIPS mode.
#
# 			) ON -> Enable FIPS mode.
#
# 			) STRICT -> Enable "strict" FIPS mode.
#
# 				NOTE:
#
# 					If the OpenSSL FIPS Object Module is not available, the only permitted value for --ssl-fips-mode is OFF.
# 					In this case, setting --ssl-fips-mode to ON or STRICT causes the client to produce a warning at startup and to operate in non-FIPS mode.
#
# )  --ssl-key=file_name
#
# 		The path name of hte SSL private key in PEM format. On the client side, this is the client private key.
# 		ON the server side, this is the server private key.
#
# 		On the server side, this option implies --ssl.
#
# 		If the key file is protected by a passphrase, the program prompts the user for the passphrase.
# 		The password must be given interactively; it cannot be stored in a file.
#
# 		If hte passphrase is incorrect, the program continues as if it could not read the key.
#
# 		For better security - use a certificate with an RSA key size of at least 2048 bits.
#
# ) --ssl-mode=mode
#
# 		This option is available only for client programs, not hte server.
#
# 		It specifies the security state of the connection to the server.
# 		These option values are permitted:
#
# 			) PREFERRED - Establishes an encrypted connection if the server supports encrypted connections, falling back to an unencrypted connection
# 								if an encrypted connection cannot be established.
#
# 								This is the default if --ssl-mode is not specified.#
# 
# 								Encrypted connections over Unix sockets are disabled by default, so PREFERRED does not establish an encrypted connection.
# 								To enforce encryption on Unix socket connections, use REQUIRED or above.
#
# 			) REQUIRED - Establish an encrypted connection if the server supports encrypted connections. The connection attempts fail if an encrypted
# 								connection cannot be established.
#
# 			) VERIFY_CA: Like REQUIRED, but additionally verify the server Certificate Authority (CA) certificate againstr the configured CA certificates.
# 							The connection attempt fails if no valid matching CA certificates are found.
#
# 			) VERIFY_IDENTITY: Like VERIFY_CA, but additionally perform host name identity verification by checking the host name the client uses
# 										for connecting to the server against the identity in the certificate that hte server sends to the client:
#
# 										) As of MySQL 8.0.12, if the client uses OpenSSL 1.0.2 or higher, the client checks whether the host name that it uses
# 											for connecting matches either the Subject Alternative Name value or the Common Name value in the server certificate.
#
# 										) Otherwise, the client checks whether the host name that it uses for connecting matches the Common Name value in the server certificate.
#
# 									The connection fails if there is a mismatch. For encrypted connections, this option helps prevent man-in-the-middle attacks.
#
# 										NOTE:
#
# 											Host name identity verification does not work with self-signed certificates created automatically by the server,
#												or manually using mysql_ssl_rsa_setup.
#
# 											Such self-signed certificates do not contain the server name as the Common Name Value.
#
# 			) DISABLED: Establish an unencrypted connection.
#
# 			The --ssl-mode option interacts with CA certificate options as follows:
#
# 				) If --ssl-mode is not explicitly set otherwise, use of --ssl-ca or --ssl-capath implies --ssl-mode=VERIFY_CA
#
# 				) For --ssl-mode values of VERIFY_CA or VERIFY_IDENTITY, --ssl-ca or --ssl-capath is also required, to supply a CA certificate
#					that matches the one used by the server.
#
# 				) An explicit --ssl-mode option with a value other than VERIFY_CA or VERIFY_IDENTITY, together with an explicit --ssl-ca or --ssl-capath option,
# 					produces a warning that no verification of the server certificate will be done, despite a CA certificate option being specified.
#
# To require use of encrypted connections by a MySQL account, use CREATE_USER to create the account with a REQUIRE SSL clause, or use ALTER_USER
# for an existing account to add a REQUIRE SSL clause.
#
# Connection attempts by a client that uses the account will be rejected unless MySQL supports encrypted connections and an encrypted connection
# can be established.
#
# The REQUIRE clause permits other encryption-related options, which can be used to enforce security requirements stricter than REQUIRE SSL.
#
# For additional details about which command options may or must be specified by clients that connect using accounts configured using the various
# REQUIRE options, see more later on CREATE USER syntax.
#
# ) --tls-version=protocol_list
#
# 	For client programs, the protocols permitted by the client for encrypted connections.
#
# 	The value is a comma-separated list containing one or more protocol names.
#
#  For example:
#
# 		mysql --tls-version="TLSv1.1,TLSv1.2"
#
# For protocols that can be named for this option depend on the SSL library used to compile MySQL.
#
# On the server side, use the tls_version system variable instead.
#
# CREATING SSL AND RSA CERTIFICATES AND KEYS
#
# The following discussion describes how ot create the files required for SSL and RSA support in MysQL.
# File creation can be performed using facilities provided by MySQL itself, or by invoking the openssl command directly.
#
# SSL certificate and key files enable MySQL to support sencrypted connections using SSL.
#
# RSA key files enable MySQL to support secure password exchange over unencrypted connections for accounts authenticated 
# by the sha256_password or caching_sha2_password plugin.
#
# CREATING SSL AND RSA CERTIFICATES AND KEYS USING MYSQL
#
# MySQL provides these ways to create the SSL certificate and key files and RSA key-pair files required to support
# encrypted connections using SSL and secure password exchange over RSA over unenecrypted connections,, if those files are missing:
#
# 		) The server can autogenerate these files at startup, for MySQL distribs compiled using OpenSSL
#
# 		) Users can invoke the mysql_ssl_rsa_setup utility manually.
#
# 		) For some distribution types, such as RPM packages, mysql_ssl_rsa_setup, invocation occurs during data directory initialization.
# 			In this case, the MySQL distrib need not have been compiled using OpenSSL as long as the openssl command is available.
#
# 			IMPORTANT:
#
# 				Server autogeneration and mysql_ssl_rsa_setup help lower the barrier to using SSL by making it easier to generate
# 				the required files.
#
# 				However, certificates generated by these methods are self-signed, which may not be very secure.
#
# 				After you gain experience using such files, consider obtaining certificate/key material from a registered
# 				certificate authority.
#
# AUTOMATIC SSL AND RSA FILE GENERATION
#
# For MySQL distributions compiled using OpenSSL, the MySQL server has the capability of automatically generating missing SSL
# and RSA files at startup.
#
# The auto_generate_certs, sha256_password_auto_generate_rsa_keys, and caching_sha2_password_auto_generate_rsa_keys System Variable
# contain automatic generation of these files.
#
# Both variables are enabled by default.
#
# They can be enabled at startup and inspected but not set at runtime.
#
# At startup, the server automatically generates server-side and client-side SSL certificate and key files in the data direcotry if the
# auto_generate_certs System Variable is enabled, no SSL options other than --ssl are specified, and the server-side SSL files
# are missing from the data directory.
#
# These files enable encrypted client connections using SSL.
#
# 	1. The server checks the data directory for SSL files with hte following names:
#
# 			ca.pem
# 			server-cert.pem
# 			server-key.pem
#
# 	2. If any of those files are present, the server creates no SSL files.
# 		Otherwise, it creates them, plus some additional files:
#
# 			ca.pem 				Self-signed CA certificate
# 			ca-key.pem 			CA private key
#
# 			server-cert.pem 	Server certificate
# 			server-key.pem 	Server private key
#
# 			client-cert.pem 	Client certificate
# 			client-key.pem 	Client private key	
#
# 	3. If the server autogenerates SSL files, it uses the names of the ca.pem, server-cert.pem and server-key.pem files to set
# 		the corresponding system variables (ssl_ca, ssl_cert, ssl_key)
#
# At startup, the server automatically generates RSA private/public key-pair files in the data directory if all of these conditions are true:
#
# The sha256_password_auto_generate_rsa_keys or caching_sha2_password_auto_generate_rsa_keys system variable is enabled;
#
# No RSA options are specified;
#
# The RSA files are missing from the data directory.
#
# These key-pair files enable secure password exchange using RSA over unencrypted connections for accounts authenticated
# by the sha256_password or caching_sha2_password plugin.
#
# 1. The server checks the data directory for RSA files with the following names:
#
# 			private_key.pem 		Private member of private/public key pair
# 			public_key.pem 		Public member of private/public key pair
#
# 2. If any of these files are present, the server creates no RSA files. Otherwise, it creates them.
#
# 3. If the server autogenerates the RSA files, it uses their names to set the corresponding system variables
# 		(sha256_password_private_key_path and sha256_password_public_key_path, caching_sha2_password_private_key_path and
# 		caching_sha2_password_public_key_path)
#
# MANUAL SSL AND RSA FILE GENERATION USING MYSQL_SSL_RSA_SETUP
#
# MySQL distribs include a mysql_ssl_rsa_setup utility that can be invoked manually to generate SSL and RSA files.
#
# This utility is included with all MySQL distributions (whether compiled using OpenSSL or wolfSSL), but it does reuqire
# that the openssl command be available.
#
# SSL AND RSA FILE CHARACHTERISTICS
#
# SSL and RSA files created automatically by the server or by invoking mysql_ssl_rsa_setup have these characteristics:
#
# 		) SSL and RSA keys have the size of 2048 bits.
#
# 		) The SSL CA certificate is self signed.
#
# 		) The SSL server and client certificates are signed with the CA certificate and key, using the sha256WithRSAEncryption signature algorithm.
#
# 		) SSL certs use these common names (CN) values, with the appropriate certificate type (CA, Server,Client):
#
# 			ca.pem: 				MySQL_Server_suffix_Auto_Generated_CA_Certificate
# 			server-cert.pm: 	MySQL_Server_suffix_Auto_Generated_Server_Certificate
# 			client-cert.pm: 	MySQL_Server_suffix_Auto_Generated_Client_Certificate
#
# 			The suffix value is based on the MySQL version number.
#
# 			For files generated by mysql_ssl_rsa_setup, the suffix can be specified explicitly using the --suffix option.
#
# 			For files generated by the server, if the resulting CN values exceed 64 characters, the _suffix portion of the name is omitted.
#
# 		) SSL files have blank values for Country (C), State of Province (ST), Organization (O), Organization Unit Name (OU) and email address.
#
# 		) SSL files created by the server or by mysql_ssl_rsa_setup are valid for ten years from the time of generation.
#
# 		) RSA files do not expire.
#
# 		) SSL files have different serial numbers for each certificate/key pair (1 for CA, 2 for Server, 3 for Client)
#
# 		) Files created automatically by the server are owned by the account that runs the server.
#
# 			Files created using mysql_ssl_rsa_setup are owned by the user who invoked that program.
#
# 			This can be changed on systems that support the chown() system call if the program is invoked by root and --uid option is given
# 			to specify the user who should own the files.
#
# 		) On Unix and Unix-like systems, the file access mode is 644 for certificate files (that is, world readable), and 600 for key files (only accessible by the acc that runs the server)
#
# To see the contents of an SSL certificate (for example, to check the range of dates over which it is valid), invoke openssl directly:
#
# 		openssl x509 -text -in ca.pem
# 		openssl x509 -text -in server-cert.pem
# 		openssl x509 -text -in client-cert.pem
#
# It is also possible to check SSL certificate expiration information using this SQL statement:
#
# 		SHOW STATUS LIKE 'Ssl_server_not%';
# 		+----------------------+-------------------------+
# 		| Variable_name 		  | Value   	 			    |
# 		+----------------------+-------------------------+
# 		| Ssl_server_not_after | Apr 28 14:16:39 2027 GMT|
# 		| Ssl_server_not_before| May 	1 14:16:39 2017 GMT|
# 		+----------------------+-------------------------+
# 
# CREATING SSL CERTIFICATES AND KEYS USING OPENSSL
#
# This section describes how ot use openssl command to set up SSL certificate and key files for use by MySQL servers and clients.
# The first example shows a simplified procedure such as you might use from the command line.
#
# The second shows a script that contains more detail.
#
# The first two examples are intended for use on Unix and both use the openssl command that is part of OpenSSL.
# The third example describes how to set up SSL files on Windows.
#
# NOTE:
# 		There are easier alternatives to generating the files required for SSL than the procedure described here: Let the server autogenerate them or
# 		use the mysql_ssl_rsa_setup program.
#
# IMPORTANT:
#
# 		Whatever method you use to generate the certificate and key files, the Common Name value used for the server and client certificates/keys must each
# 		differ from the Common Name value used for the CA certificate.
#
# 		Otherwise, the certificate and key files will not work for servers compiled using OpenSSL.
# 		A typical error in this case is:
#
# 			ERROR 2026 (HY000): SSL connection error:
# 			error: 00000000001:lib(0):func(0):reason(1)
#
# EXAMPLE 1: CREATING SSL FILES FROM THE COMMAND LINE ON UNIX
#
# 	The following examples show a set of commands to create MySQL and client certificates and key files.
# 	You will need to respond to several prompts by the openssl commands.
#
# 	To generate test files, you can press Enter to all prompts.
# 	To generate files for production use, you should provide nonempty responses.
#
# 	# Create clean environment
# 	rm -rf newcerts
# 	mkdir newcerts && cd newcerts
#
# 	# Create CA certificate
# 	openssl genrsa 2048 > ca-key.pem
#	openssl req -new -x509 -nodes -days 3600 \
# 				-key ca-key.pem -out ca.pem
#
# 	# Create server certificate, remove passphrase, and sign it
# 	# server-cert.pem = public key, server-key.pem = private key
# 	openssl req -newkey rsa:2048 -days 3600 \
# 				-nodes -keyout server-key.pem -out server-req.pem
# 	openssl rsa -in server-key.pem -out server-key.pem
# 	openssl x509 -req -in server-req.pem -days 3600 \
# 				-CA ca.pem -CAkey ca-key.pem -set_serial 01 -out server-cert.pem
#
# # Create client certificate, remove passphrase, and sign it
# # client-cert.pem = public key, client-key.pem = private key
# openssl req -newkey rsa:2048 -days 3600 \
# 			-nodes -keyout client-key.pem -out client-req.pem
#
# openssl rsa -in client-key.pem -out client-req.pem
# openssl x509 -req -in client-req.pem -days 3600 \
# 			 -CA ca.pem -CAkey ca-key.pem -set_serial 01 -out client-cert.pem
#
# After generating the certificates, verify them:
#
# 		openssl verify -CAfile ca.pem server-cert.pem client-cert.pem
#
# You should see a response like this:
#
# 	server-cert.pem: OK
# 	client-cert.pem: OK
#
# To see the contents of a certificate (for example, ,to check the range of dates over which a certificate is valid), invoke openssl like this:
# 	
# 	openssl x509 -text -in ca.pem
# 	openssl x509 -text -in server-cert.pem
# 	openssl x509 -text -in client-cert.pem
#
# Now you have a set of files that can be used as follows:
#
# 	) ca.pem: Use this as the argument to --ssl-ca on the server and client sides. (The CA certificate, if used, must be the same on both sides.)
#
# 	) server-cert.pem, server-key.pem: Use these as the arguments to --ssl-cert and --ssl-key on the server side.
#
# 	) client-cert.pem, client-key.pem: Use these as the arguments to --ssl-cert and --ssl-key on the client side.
#
#
# EXAMPLE 2: CREATING SSL FILES USING A SCRIPT ON UNIX
#
#
# Here is an example script that shows how to set up SSL certificate and key files for MySQL.
# After executing the script, use the files for SSL connections as described earlier.
#
# DIR=`pwd`/openssl
# PRIV=$DIR/private
#
# mkdir $DIR $PRIV $DIR/newcerts
# cp /usr/share/ssl/openssl.cnf $DIR
# replace ./demoCA $dir -- $DIR/openssl.cnf
#
# # Create necessary files: $database, $serial and $new_certs_dir
# # directory (optional)
#
# touch $DIR/index.txt
# echo "01" > $DIR/serial
#
# #
# # Generation of Certificate Authority (CA)
# #
# 
# openssl req -new -x509 -keyout $PRIV/cakey.pem -out $DIR/ca.pem \
# 		-days 3600 -config $DIR/openssl.cnf
#
# Sample out:
# Using configuration from /home/mont/openssl/openssl.cnf
# Generating a 1024 bit RSA private key
# .....................+++++++++
# ...............+++++++++++
# writing new private key to '/home/monty/openssl/private/cakey.pem'
# Enter PEM pass phrase:
# Verifying password - Enter PEM pass phrase:
# --------
# You are about to be asked to enter information that will be incorporate into your certificate request.
# What you are about to enter is what is called a Distinguished Name or a DN.
#
# There are quite a few fields but you can leave some blank.
# For some fields there will be a default value.
# If you enter '.'; the field will be left blank.
# ---------
#
# Country Name (2 letter code) [AU]:FI
# State or Province Name (full name) [Some-State]:.
# Locality Name (eg, city) []:
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MySQL AB
# Organizational Unit Name (eg, section) []:
# Common Name (eg, YOUR name) []:MySQL admin
# Email Address []:
#
# Create server request and key
#
# openssl req -new -keyout $DIR/server-key.pem -out \
# 		$DIR/server-req.pem -days 3600 -config $DIR/openssl.cnf
#
# Sample output:
# REPEAT OF LAST CHUNK
#
# Remove the passphrase from the key
#
# openssl rsa -in $DIR/server-key.pem -out $DIR/server-key.pem
#
# Sign server cert
#
# openssl ca -cert $DIR/ca.pem -policy policy_anything \
# 		-out $DIR/server-cert.pem -config $DIR/openssl.cnf \
# 		-infiles $DIR/server-req.pem
#
# Sample output:
# Using configuration from /home/monty/openssl/openssl.cnf
# Enter PEM pass phrase:
# Check that the request matches the signature
# Signature ok
# The Subjects Distinguished Name is as follows
# countryName 							:PRINTABLE:'FI'
# organizationName 	 				:PRINTABLE:'MySQL AB'
# commonName 							:PRINTABLE:'MySQL admin'
# Certificate is to be certified until Sep 13 14:22:46 2003 GMT
# (365 days)
#  Sign the certificate? [y/n]:y
#
# 1 out of 1 certificate requests certified, commit? [y/n]y
# Write out database with 1 new entries
# Data Base Updated
#
# Create client request and key
#
# openssl req -new -keyout $DIR/client-key.pem -out \
# 		$DIR/client-req.pem -days 3600 -config $DIR/openssl.cnf
#
# Repeat chunk
#
# Remove the passphrase from the key
#
# openssl rsa -in $DIR/client-key.pem -out $DIR/client-key.pem
#
# Sign client cert
#
# openssl ca -cert $DIR/ca.pem -policy policy_anything \
# 		-out $DIR/client-cert.pem -config $DIR/openssl.cnf \
# 		-infiles $DIR/client-req.pem
#
# Repeat
#
# Create a my.cnf file that you can use to testr the certificates
#
# cat <<EOF > $DIR/my.cnf
# [client]
# ssl-ca=$DIR/ca.pem
# ssl-cert=$DIR/client-cert.pem
# ssl-key=$DIR/client-key.pem
# [mysqld]
# ssl-ca=$DIR/ca.pem
# ssl-cert=$DIR/server-cert.pem
# ssl-key=$DIR/server-key.pem
# EOF
#
#
# CREATING RSA KEYS USING OPENSSL
#
# This section describes how to use the openssl command to set up the RSA key files that enable MySQL to support secure
# PW exchange over unenecrypted connectiosn for accounts authenticated by the sha256_password and caching_sha2_password plugins.
#
# NOTE:
#
# 		There are easier alternatives to generating the files required for RSA than the procedure described here:
# 		Let the server autogenerate them or use the mysql_ssl_rsa_setup.
#
# To create hte RSA private and public key-pair files, run these commands while logged into the system account used to run the MySQL
# server so the files will be owned by that account:
#
# 		openssl genrsa -out private_key.pem 2048
# 		openssl rsa -in private_key.pem -pubout -out public_key.pem
#
# Those commands create 2,048 bit-keys. To create stronger keys, use a larger value.
#
# Then set the access modifiers for the key files.
# THe private key should be readable only by the server, whereas the public key can be freely distributed
# to client users:
#
# chmod 400 privte_key.pem
# chmod 444 public_key.pem
#
# OPENSSL VERSUS WOLFSSL
#
# MySQL can be compiled using OpenSSL or wolfSSL, both of which enable encrypted connections based on the openSSL API:
#
# 		) MysQL enterprise edition binary distribs are compiled using OpenSSL. It is not possible to use wolfSSL with MYSQL enterprise edition
#
# 		) mySQL community edition binary distribs are ocmpiled using openSSL
#
# 		) MySQL community edition source distribs can be compiled using either OpenSSL or wolfSSL.
#
# OpenSSL and wolfSSL offer the same basic functionality, but MySQL distribs compiled using OpenSSL have additional features.
#
# 		) OpenSSL supports a wider range of encryption ciphers from which to choose for the --ssl-cipher option.
# 			OpenSSL supports the --ssl-capath, --ssl-crl and --ssl-crlpath options.
#
# 		) Accounts that authenticate using the sha256_password plugin can use RSA key files for secure PW exchanges over unencrypted connections.
#
# 			Accounts that authenticate using caching_sha2_password plugin can use RSA key pair-based PW exchange regardless
# 			of whether MysQL was compiled using OpenSSL or wolfSSL.
#
# 		) The server can automatically generate missing SSL and RSA certificate and key files at startup.
#
# 		) OpenSSL supports more encryption modes for the AES_ENCRYPT() and AES_DECRYPT() functions. MOre later on that.
##
# Certain OpenSSL-related System and Status variables are present only if MysQL was compiled using OpenSSL.
#
# These are:
#
# ) auto_generate_certs
#
# ) caching_sha2_password_auto_generate_rsa_keys
#
# ) sha256_password_auto_generate_rsa_keys
#
# ) sha256_password_private_key_path
#
# ) sha256_password_public_key_path
#
# ) Rsa_public_key
#
# To determine whether a server was compiled using openSSL, test the existence of any of those variables.
#
# For example, this statement returns a row if OpenSSL was used and an empty result if wolfSSL was used:
#
# SHOW STATUS LIKE 'Rsa_public_key';
#
# Building MySQL with Support for Encrypted Connections
#
# To use encrypted connections between the MySQL server and client programs, your system must support either OpenSSL or wolfSSL:
#
# 		) MySQL enterprise edition binary distribs are compiled using OPenSSL. It is not possible to use wolfSSL with MysQL enterprise edition.
#
# 		) MySQL community edition binary distribs are compiled using OpenSSL.
#
# 		) mySQL community edition source distrib can be compiled using either OpenSSL or wolfSSL.
#
# IF you compile MySQL from a source distrib, CMake configures the distribs to use OpenSSL by default.
#
# To compile using OpenSSL, use this procedure:
#
# 	1. Ensure that OPenSSL 1.0.1 or higher is installed. IF the installed OPenSSL is lower than 1.0.1, CMake produces an error
# 		at MySQL config time.
#
# 	2. The WITH_SSL CMake option determines which SSL library to use for compiling MySQL.
#
# 		The default is -DWITH_SSL=system which uses OpenSSL.
#
# 		To make this explicit, specify that option on the CMake cmd line.
# 		For example:
#
# 		cmake . -DWITH_SSL=system
#
# 		That command configures the distrib to use the installed OpenSSL lib.
#
# 		Alternatively, to explicitly specify the path name to the OpenSSL installation, use the 
#  	following syntax:
#
# 		This can be useful if you have multiple versions of OpenSSL installed, ot prevent CMake from choosing the wrong one:
#
# 			cmake . -DWITH_SSL=path_name
#
# 	3. Compile and install the dstrib
#
# To compile using wolfSSL, download the wolfSSL distrib and apply a small patch.
# For instructions, see the extra/README_wolfssl.txt file.
#
# To check whether a mysqld server supports encrypted connections, examine the value of the have_ssl SYS_VAR:
#
# 	SHOW VARIABLES LIKE 'have_ssl';
# 	+---------------------------------+
# 	| Variable_name 		| 	Value 	 |
# 	+--------------------+------------+
# 	| have_ssl 				| YES 		 |
# 	+--------------------+------------+
#
# If the value is YES, the server supports encrypted connections. If the value is DISABLED, the server is capable of supporting
# encrypted connections - but was not started with the appropriate --ssl-xxx options to eanble encrypted connections to be used.
#
# ENCRYPTED CONNECTION PROTOCOLS AND CIPHERS
#
# To determine which encryption protocol and cipher are in use for an encrypted connection, use the following statemnts to check
# the vlaues of the Ssl_version and Ssl_cipher status variables:
#
# 	SHOW SESSION STATUS LIKE 'Ssl_version';
# 	+------------------------------------+
# 	| Variable_name 		| Value 			 |
# 	+--------------------+---------------+
# 	| Ssl_version 			| TLSv1 			 |
# 	+--------------------+---------------+
#
# SHOW SESSION STATUS LIKE 'Ssl_cipher';
# +---------------------------------------+
# | Variable_name 		| Value 				|
# +---------------------+-----------------+
# | Ssl_cipher | DHE-RSA-AES128-GCM-SHA256|
# +------------+--------------------------+
#
# If the connection is not encrypted, both variables have an empty value.
#
# MySQL supports encrypted connections using the TLSv1, TLSv1.1 and TLSv1.2 protocols.
#
# The value of the tls_version system variable determines which protocols the server is permitted to use from those that are available.
# The tls_version value is a comma-separated list containing one or more of these protocols (not case-sensetive):
#
# TLSv1, TlSv1.1, TLSv1.2
#
# By default, this variable lists all protocols supported by the SSL library used to compile MySQL.
# To determine the value of tls_version at runtime, use this statement:
#
# SHOW GLOBAL VARIABLES LIKE 'tls_version';
# +------------------------------------------+
# | Variable_name 		| 	Value 				|
# +---------------------+--------------------+
# | tls_version 	| TLSv1, TLSv1.1, TLSv1.2  |
# +---------------------+--------------------+
#
# To change the value of tls_version, set it at server startup.
#
# For example, to prohibit connections that use the less secure TLSv1 protocol use these lines at the server
# my.cnf file:
#
# 	[mysqld]
# 	tls_version=TLSv1.1,TLSv1.2
#
# To be even more restrictive and only permit TLSv1.2 connections, use tls_version like this:
#
# 	[mysqld]
# 	tls_version=TLSv1.2
#
# For client programs, the --tls-version option enables specifying the TLS protocols permitted per client invocation.
#
# The value format is the same as for tls_version.
#
# by default, MySQL attempts to use the highest TLS protocol verison avaialable, depending on which SSL library was used
# to compile the server and client, which key size is used and whether the server or client are restricted from using
# some protocols; for example, by means of tls_version/--tls-version
#
# ) TLSv1.2 is used if possible
#
# ) TLSv1.2 does not work with all ciphers that have a key size of 512 bits or less. To use this protocol with such a key, use --ssl-cipher to 
# 		specify the cipher name explicit:
#
# 			AES128-SHA
# 			AES128-SHA256
# 			AES256-SHA
# 			AES256-SHA256
# 			CAMELLIA128-SHA
# 			CAMELLIA256-SHA
# 			DES-CBC3-SHA
# 			DHE-RSA-AES256-SHA
# 			RC4-MD5
# 			RC4-SHA
# 			SEED-SHA
#
# ) For better security, use a certificate with an RSA key size of at least 2048 bits.
#
# If the server and client protocol capabilities have no protocol in common, the server terminates the connection request.
#
# FOr example, if the server is configured with tls_version=TLSv1.1, TLSv1.2 - connection attempts will fail for clients invoked
# with --tls-version=TLSv1, and for older clients that do not support the --tls-version option and implicitly support only TLSv1.
#
# MySQL permits specifying a list of protocols to support.
#
# This list is passed directly down to the underlying SSL library and is ultimately up to that library what protocols it
# actually enables from the supplied list.
#
# Please refer to the MySQL source code and SSL_CTX_new documentation for information about how the SSL library handles this.
#
# For openSSL, see the SSL_CTX_new documentation.
#
# To determine which ciphers a given server supports, use the following statements to check the value of the Ssl_cipher_list status variable:
#
# 		SHOW SESSION STATUS LIKE 'Ssl_cipher_list';
#
# Order of ciphers passed by MySQL to the SSL library is significant.
# More secure ciphers are mentioned first in the list, and the first cipher supported by the provided certificate is selected.
#
# MySQL passes this cipher list to the SSL library:
#
# ECDHE-ECDSA-AES128-GCM-SHA256
# ECDHE-ECDSA-AES256-GCM-SHA384
# ECDHE-RSA-AES128-GCM-SHA256
# etc.
#
# //This list is long and largely uninteresting.
#
# These cipher restrictions are in place:
#
# 		) The following ciphers are permanently restricted:
#
# 			!DHE-DSS-DES-CBC3-SHA
# 			!DHE-RSA-DES-CBC3-SHA
# 			!ECDH-RSA-DES-CBC3-SHA
# 			!ECDH-ECDSA-DES-CBC3-SHA
# 			!ECDHE-RSA-DES-CBC3-SHA
# 			!ECDHE-ECDSA-DES-CBC3-SHA
#
# 		) The following categories of ciphers are permanently restricted:
#
# 			!aNULL
# 			!eNULL
# 			!EXPORT
# 			!LOW
# 			!MD5
# 			!DES
# 			!RC2
# 			!RC4
# 			!PSK
# 			!SSLv3
#
# IF the server is started using a compatible certificate that uses any of the preceding restricted ciphers or cipher categories,
# the server starts with support for encrypted connections disabled.
#
# CONNECTING TO MYSQL REMOTELY FROM WINDOWS WITH SSH
#
# This section describes how to get an encrypted connection to a remote MySQL server with SSH.
# 
# 1. Install an SSH client on your Windows machine. For a comparison of SSH clients, see places.
#
# 2. Start your Windows SSH client. Set Host_name = yourmysqlserver_URL_OR_IP.
# 	
# 		Set userid=your_userid to log in to your server.
#
# 		This userid value might not be the same as the user name of your MySQL account.
#
# 3. Set up port forwarding. Either do a remote forward (set Local_port: 3306, remote_host: yourmysqlservername_or_ip, remote_port: 3306) or a local
# 		forward (Set port: 3306,host: localhost, remote port: 3306)
#
# 4. save
#
# 5. Log in with the SSH
#
# 6. Start some ODBC app.
#
# 7. Create a new file in Windows and link to MySQL using the ODBC driver the same way you normally do.
# Except type in localhost for the MySQL host server, not yourmysqlservername
#
# At this point, you should have an ODBC connection to MySQL, encrypted using SSH.
#
#
# SECURITY COMPONENTS AND PLUGINS
#
# MySQL includes several components and plugins that implement security features:
#
# 		) Plugins for authenticating attempts by clients to connect to MySQL server.
#
# 			Plugins are avialable for several authentication protocols.
#
# 		) A PW validation component for implementing PW strength policies and assessing their strength of potetional PWs.
#
# 		) Keyring plugins that provide secure storage for sensitive information.
#
# The following pertain to MysQL Enterprise only:
#
# 		) MySQL Enterprise also has MySQL Enterprise Audit, implemented using a server plugin - uses the open MySQL audit API
# 			to enable standard, policy-based monitoring and logging of connection and query activity executed on specific MySQL servers.
#
# 			Designed to meet the Oracle audit specification, MySQl Enterprise Audit provides an otu of teh box, easy to use Auditing and compliance
# 			solution for applications that are governed by both internal and external regulation guidelines.
#
# 		)  MysQL Enterprise firewall, an application-level firewall that enables DB admins to permit or deny SQL statements execution based
# 			on matching against whitelists of accepted statement patterns.
#
# 			This helps harden MySQL servers against attacks such as Injections or attempts to exploit applications by using them outside
# 			of their legitimate query workload characteristics.
#
# 		) MySQL Enterprise Data Masking and De-identification, imeplement as a plugin library containing a plugin and a set of user-defined
#			functions.
#
# 			Data masking hides senseitive information by replacing rela values with substitutes.
#
# 			Enables obfuscation, generation of formatted random data and data replacement or substitution.
#
# AUTHENTICATION PLUGINS
#
# The following seciton describes pluggable authentication methods available in MysQL and the plugins that implement these methods.
#
# The default plugin is indicated by the value of the default_authentication_plugin system variable.
#
# NATIVE PLUGGABLE AUTHENTICATION
#
# MySQL includes a mysql_native_password plugin that implements native authentication;
# That is, authentication based on the PW hashing method in use from before the introduction of pluggable authentication.
#
# The following table shows the plugin names on the server and client sides.
#
# PLUGIN AND LIBRARY NAMES OR NATIVE PW AUTHENTICATION
#
# plugin or file 			Name
#
# Server-side plugin 	mysql_native_password
#
# Client-side plugin 	mysql_native_password
#
# Library file 			None (plugins are built in)
#
# INSTALLING NATIVE PLUGGABLE AUTHENTICATION
#
# THe mysql_native_password plugin exists in server and client form:
#
# ) THe server-side plugin is built into the server, need not be loaded explicitly and cannot be disabled by unloading it.
#
# ) The client side plugin is built into the libmysqlclient client library and is available to any program linked against libmysqlclient.
#
# USING NATIVE PLUGGABLE AUTHENTICATION
#
# MySQL client programs use mysql_native_password by default.
#
# The --default-auth option can be used as a hint about which client-side plugin the program can expect
# to use:
#
# mysql --default-auth=mysql_native_password
#
# SHA-256 PLUGGABLE AUTHENTICATION
#
# MySQL provides two authentication plugins that implement SHA-256 hashing for user account PWs:
#
# 	) sha256_passwords: Implements basic SHA-256 authentication
#
# 	) caching_sha2_password: Implements SHA-256 authentication (like sha256_password), but uses caching on the server side for better performance 
# 		and has additional features for wider applicability.
#
# THis section is for the original noncaching SHA-2 authentication plugin.
#
# IMPORTANT:
#
# 		IN MySQL 8.0, caching_sha2_password is the default authentication plugin rather than mysql_native_password.
#
# 		For information about the implications of this change for server ops and compability of the server with clients 
# 		and connectors, see caching_sha2_password as the Preferred Authentication PLugin
#
# IMPORTANT:
#
# 		To connect to the server using a account that authenticates with the sha256_password plugin, you must use either a TLS connection
# 		or an unencrypted connection that supports PW exchange using an RSA key pair, as described later in this section.
#
# 		Either way, the sha256_password plugin uses MySQL's encryption capabilities.
#
# Note:
#
# 		In the name sha256_password, "sha256" refers to the 256-bit length the plugin uses for encryption.
# 		In the name caching_sha2_password "sha2" refers more generally to the SHA-2 class of encryption algorithms.
#
# 		Of which, 256-bit encryption is one instance.
#
# PLUGIN AND LIBRARY NAMES FOR SHA-256 AUTHENTICATION
#
# Plugin or File 			Plugin or File name
#
# server-side plugin 	sha256_password
#
# Client-side plugin 	sha256_password
#
# Library file 			None (built in)
#
# INSTALLING SHA-256 PLUGGABLE AUTHENTICATION
#
# The sha256_password plugin exists in server and client forms:
#
# 		) The server-side plugin is built into the server, need not be loaded explicitly, and cannot be disabled by unloading it.
#
# 		) The client-side plugin is built into the libmysqlclient library and is available to any program linked against libmysqlclient
#
# USING SHA-256 PLUGGABLE AUTHENTICATION
#
# To set up an account taht uses the sha256_password plugin for SHA-256 PW hashing, use the following statement, where PW is the desired acc pw:
#
# CREATE USER 'sha256user'@'localhost' IDENTIFIED WITH sha256_password BY 'password';
#
# The server assigns the sha256_password plugin to the account and uses it ot encrypt the PW using SHA-256, storing those values
# in the plugin and authentication_string columns of the mysql.user system table.
#
# The preceding instructions do not assume that sha256_password is teh default authentication plugin.
#
# If sha256_password is the default authentication plugin, a simpler CREATE_USER syntax can be used.
#
# To start the server with the default authentication plugin set to sha256_password, put these lines in the server option file:
#
# 		[mysqld]
# 		default_authentication_plugin=sha256_password
#
# That causes the sha256_password plugin to be used by default for new accounts.
#
# As a result, it is possible to create the account and set its Password without naming the plugin explicitly:
#
# 	CREATE USER 'sha256user'@'localhost' IDENTIFIED BY 'password';
#
# Anotehr consequence of setting default_authentication_plugin to sha256_password, is that - to use some other plugin for account creation,
# you must specify that plugin explicitly.
#
# For example - to use the mysql_native_password plugin - use this statement:
#
# 		CREATE USER 'nativeuser'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';
#
# sha256_password supports connections over secure transport.
#
# Sha256_password also supports encrypted password exchange using RSA over unencrypted connections, if these conditions are satisfied:
#
# 		) MYSQL is compiled using OpenSSL.
#
# 			MySQL can be compiled using either OpenSSL or yaSSL, and sha256_password works with distribs compiled using
# 			either package, but RSA support requires OpenSSL.
#
# 		) The MYSQL server to which you wish to connect is configured to support RSA (using the RSA configuration procedure given later in this section)
#
#
# RSA support has these characeteristics:
#
# 		) On the server side, two system variables name the RSA private and public key-pair files:
#
# 				sha256_password_private_key_path 
#
# 				and
#
# 				sha256_password_public_key_path
#
# 			The Database admin must set these vars at server startup if the key files to use have names that differ
# 			from the SYS_VAR default values.
#
# 		) The server uses the sha256_password_auto_generate_rsa_keys SYS_VAR to determine whether to automatically
#			generate the RSA key-pair file.
#
# 		)  
#
#
#
#
#
#
#
# https://dev.mysql.com/doc/refman/8.0/en/sha256-pluggable-authentication.html